<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>元渊`Blog</title>
  
  <subtitle>生活明朗,万物可爱</subtitle>
  <link href="https://www.yuanyuanblog.me/atom.xml" rel="self"/>
  
  <link href="https://www.yuanyuanblog.me/"/>
  <updated>2023-04-05T08:37:29.695Z</updated>
  <id>https://www.yuanyuanblog.me/</id>
  
  <author>
    <name>元渊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu22.04更新cmake</title>
    <link href="https://www.yuanyuanblog.me/posts/170c5cd0.html"/>
    <id>https://www.yuanyuanblog.me/posts/170c5cd0.html</id>
    <published>2023-04-05T15:43:17.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查是否安装cmake">检查是否安装<code>cmake</code></h2><p>查看<code>cmake</code>版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake --version</span><br></pre></td></tr></table></figure><p>如果输出如下，表示未安装<code>cmake</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: cmake: command not found</span><br></pre></td></tr></table></figure><h2 id="使用apt-get安装cmake">使用apt-get安装<code>cmake</code></h2><p>注意：使用<code>apt-get</code>安装的是低版本的<code>cmake</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install cmake</span><br></pre></td></tr></table></figure><p>查看版本，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cmake --version</span><br><span class="line">cmake version 3.16.3</span><br></pre></td></tr></table></figure><p>很多时候，低版本的<code>cmake</code>并不能满足我们的需求。</p><p>卸载<code>apt-get</code>安装的<code>cmake</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y remove cmake</span><br></pre></td></tr></table></figure><h2 id="源码安装指定版本cmake">源码安装指定版本<code>cmake</code></h2><p>通过源码安装，我们可以安装指定版本的<code>cmake</code>。</p><p><code>cmake</code>官方为我们提供了各个版本的源码包，列表链接为：</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://cmake.org/files">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/cmake.org/files.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">cmake官网</div>            <div class="tag-link-sitename"> https://cmake.org/files</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/20230405155802.png" alt="image-20230405154931293"></p><p>访问源码包列表链接，可以选择我们指定的版本下载安装。</p><p>目前最新版本是<code>cmake 3.26.3</code>。</p><h3 id="下载cmake-3-26-3">下载<code>cmake 3.26.3 </code></h3><p>在喜欢的路径下，执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://cmake.org/files/LatestRelease/cmake-3.26.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压">解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf cmake-3.26.3.tar.gz</span><br></pre></td></tr></table></figure><p>解压后，会在当前路径下生成一个<code>cmake-3.26.3</code>文件夹。</p><p>进入<code>cmake-3.23.0</code>文件夹中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd cmake-3.23.0</span><br></pre></td></tr></table></figure><h3 id="安装">安装</h3><p><strong>第一步：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure</span><br></pre></td></tr></table></figure><p>如果报错<code>Could NOT find OpenSSL</code></p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install libssl-dev</span><br></pre></td></tr></table></figure><p>然后，重新执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure </span><br></pre></td></tr></table></figure><p><strong>第二步：</strong></p><p>执行<code>make</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8 </span><br></pre></td></tr></table></figure><p><strong>第三步：</strong></p><p>执行<code>make install</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>验证是否安装成功：</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/20230405160206.png" alt="image-20230405160205894"></p><p>如果看到版本号，表示安装成功！</p><h2 id="卸载源码安装的cmake">卸载源码安装的<code>cmake</code></h2><p>注意，<code>sudo apt remove cmake</code> 命令无法卸载源码安装的<code>cmake</code>。</p><p>如需卸载源码安装的<code>cmake</code>，需要进入到安装时执行<code>make install</code>时的路径下， 执行卸载命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;检查是否安装cmake&quot;&gt;检查是否安装&lt;code&gt;cmake&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;查看&lt;code&gt;cmake&lt;/code&gt;版本：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuanblog.me/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="cmake" scheme="https://www.yuanyuanblog.me/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>前端框架</title>
    <link href="https://www.yuanyuanblog.me/posts/89e03522.html"/>
    <id>https://www.yuanyuanblog.me/posts/89e03522.html</id>
    <published>2023-03-31T16:09:20.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-构建-vue3项目">webpack 构建 Vue3项目</h1><h3 id="1-初始化项目结构-跟cli-结构保持一致">1.初始化项目结构（跟cli 结构保持一致）</h3><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202304011622487.png" alt="image-20230401162245300"></p><h3 id="2-安装所需要的依赖包">2.安装所需要的依赖包</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@vue/compiler-sfc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.38&quot;</span><span class="punctuation">,</span> <span class="comment">//解析vue文件</span></span><br><span class="line">        <span class="attr">&quot;clean-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//打包 的时候清空dist</span></span><br><span class="line">        <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.7.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理css文件</span></span><br><span class="line">        <span class="attr">&quot;friendly-errors-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.7.0&quot;</span><span class="punctuation">,</span> <span class="comment">//美化dev</span></span><br><span class="line">        <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.0&quot;</span><span class="punctuation">,</span> <span class="comment">//html 模板</span></span><br><span class="line">        <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.3&quot;</span><span class="punctuation">,</span>  <span class="comment">//处理less</span></span><br><span class="line">        <span class="attr">&quot;less-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//处理less文件</span></span><br><span class="line">        <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理style样式</span></span><br><span class="line">        <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.3.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理ts</span></span><br><span class="line">        <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.8.2&quot;</span><span class="punctuation">,</span> <span class="comment">//ts</span></span><br><span class="line">        <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.38&quot;</span><span class="punctuation">,</span> <span class="comment">//vue</span></span><br><span class="line">        <span class="attr">&quot;vue-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//解析vue</span></span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.74.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.10.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.10.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-tsc-init-生成ts-文件-如果没有tsc-安装npm-install-typescript-g">3.tsc --init 生成ts 文件 如果没有tsc 安装npm install typescript -g</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;scripthost&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tests/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tests/**/*.tsx&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-配置vue-声明文件不然ts-识别不了vue-后缀">4.配置vue 声明文件不然ts 识别不了vue 后缀</h3><p>在<code>src</code>目录下新建<code>env.d.ts</code></p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202304011626379.png" alt="image-20230401162653337"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置vue 声明文件不然ts 识别不了vue 后缀</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">component</span>:<span class="title class_">DefineComponent</span>&lt;&#123;&#125;,&#123;&#125;,<span class="built_in">any</span>&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-编写webpack-config-js">5.编写webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Configuration</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/dist/index&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;friendly-errors-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Configuration</span>&#125; //配置智能提示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.ts&#x27;</span>, <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[hash].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">//出口文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="comment">//解析vue 模板</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">//解析 less</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//解析css</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,  <span class="comment">//解析ts</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">configFile</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;tsconfig.json&#x27;</span>),</span><br><span class="line">                    <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span> <span class="comment">//html模板</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(), <span class="comment">//打包清空dist</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(), <span class="comment">//解析vue</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">compilationSuccessInfo</span>:&#123; <span class="comment">//美化样式</span></span><br><span class="line">                <span class="attr">messages</span>:[<span class="string">&#x27;You application is running here http://localhost:9001&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>) <span class="comment">// 别名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>] <span class="comment">//识别后缀</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">stats</span>:<span class="string">&quot;errors-only&quot;</span>, <span class="comment">//取消提示</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">9001</span>,</span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">        <span class="attr">vue</span>: <span class="string">&quot;Vue&quot;</span> <span class="comment">//CDN 引入</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack-构建-vue3项目&quot;&gt;webpack 构建 Vue3项目&lt;/h1&gt;
&lt;h3 id=&quot;1-初始化项目结构-跟cli-结构保持一致&quot;&gt;1.初始化项目结构（跟cli 结构保持一致）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.static</summary>
      
    
    
    
    <category term="前端" scheme="https://www.yuanyuanblog.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端框架" scheme="https://www.yuanyuanblog.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>gitignore文件</title>
    <link href="https://www.yuanyuanblog.me/posts/843cc845.html"/>
    <id>https://www.yuanyuanblog.me/posts/843cc845.html</id>
    <published>2023-03-31T15:52:43.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<p>在本地的代码目录中，有些文件或者目录我们并不想提交到仓库中，比如一些运行日志等文件。这样的话，我们提交代码时，就只能一个一个文件去<code>git add</code>，太麻烦了。</p><p>为了解决这个问题，Git里面有一个<code>.gitignore</code>文件。可以指定Git需要忽略哪些文件。配置好之后，Git就会自动忽略满足配置的文件。这样，我们就可以尽情的使用<code>git add .</code>来添加文件了。</p><h2 id="git-忽略规则优先级">Git 忽略规则优先级</h2><p>在 <code>.gitingore</code> 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p><ol><li>从命令行中读取可用的忽略规则</li><li>当前目录定义的规则</li><li>父级目录定义的规则，依次递推</li><li><code>$GIT_DIR/info/exclude</code> 文件中定义的规则</li><li><code>core.excludesfile</code>中定义的全局规则</li></ol><h2 id="git-忽略规则匹配语法">Git 忽略规则匹配语法</h2><p>在 <code>.gitignore</code> 文件中，每一行的忽略规则的语法如下：</p><ul><li>空格不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li>开头的文件标识注释，可以使用反斜杠进行转义</li><li><code>!</code>开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用<code>!</code>也不会再次被包含。可以使用反斜杠进行转义</li><li><code>/</code>结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/</code>开始的模式匹配项目跟目录</li><li>如果一个模式不包含斜杠，则它匹配相对于当前<code>.gitignore</code>文件路径的内容，如果该模式不在<code>.gitignore</code>文件中，则相对于项目根目录</li><li><code>**</code> 匹配多级目录，可在开始，中间，结束</li><li><code>?</code> 通用匹配单个字符</li><li><code>*</code> 通用匹配零个或多个字符</li><li><code>[]</code> 通用匹配单个字符列表</li></ul><h2 id="匹配示例">匹配示例</h2><ul><li><code>bin/</code>: 忽略当前路径下的<code>bin</code>文件夹，该文件夹下的所有内容都会被忽略，不忽略<code>bin</code>文件</li><li><code>/bin</code>: 忽略根目录下的bin文件</li><li><code>/*.c</code>: 忽略 <code>cat.c</code>，不忽略 <code>build/cat.c</code></li><li><code>debug/*.obj</code>: 忽略 <code>debug/io.obj</code>，不忽略 <code>debug/common/io.obj</code> 和 <code>tools/debug/io.obj</code></li><li><code>**/foo</code>: 忽略<code>/foo</code>, <code>a/foo</code>, <code>a/b/foo</code>等</li><li><code>a/**/b</code>: 忽略<code>a/b</code>, <code>a/x/b</code>, <code>a/x/y/b</code>等</li><li><code>!/bin/run.sh</code>: 不忽略 <code>bin</code> 目录下的 <code>run.sh</code> 文件</li><li><code>*.log</code>: 忽略所有 <code>.log</code> 文件</li><li><code>config.php</code>: 忽略当前路径的 <code>config.php</code> 文件</li></ul><h2 id="特殊情况">特殊情况</h2><h3 id="文件已经提交过">文件已经提交过</h3><p>这里面有一些特殊情况需要考虑，比如某文件已经被提交过了，之后再对他做了一个<code>.gitignore</code>的忽略的话。忽略是不会生效的，需要我们手动先将缓存删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地的缓存</span></span><br><span class="line">git rm -r --cached .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新提交</span></span><br><span class="line">git commit -am &#x27;gitignore&#x27;</span><br></pre></td></tr></table></figure><h3 id="添加一个已经配置忽略的文件">添加一个已经配置忽略的文件</h3><p>再比如，我们忽略了文件夹A，但是现在要往文件夹A中添加代码文件。你会发现你没法把文件夹A中的代码提交。因为文件夹A被忽略了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制添加</span></span><br><span class="line">git add -f 文件A/xxx.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常提交</span></span><br><span class="line">git commit -am &#x27;xxx&#x27;</span><br></pre></td></tr></table></figure><h2 id="检查文件为什么被忽略">检查文件为什么被忽略</h2><p>由于<code>.gitignore</code>文件经常会配置很多内容，某些文件你并不能很直观的知道为什么被忽略了。所以Git提供了一个检查忽略的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git check-ignore -v 文件夹A/xxx.js</span><br></pre></td></tr></table></figure><h2 id="最后附一个官方示例">最后附一个官方示例</h2><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://github.com/github/gitignore">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/github/gitignore.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">官方示例</div>            <div class="tag-link-sitename"> https://github.com/github/gitignore</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本地的代码目录中，有些文件或者目录我们并不想提交到仓库中，比如一些运行日志等文件。这样的话，我们提交代码时，就只能一个一个文件去&lt;code&gt;git add&lt;/code&gt;，太麻烦了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Git里面有一个&lt;code&gt;.gitignore&lt;/cod</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuanblog.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="git" scheme="https://www.yuanyuanblog.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sass</title>
    <link href="https://www.yuanyuanblog.me/posts/dcc57bca.html"/>
    <id>https://www.yuanyuanblog.me/posts/dcc57bca.html</id>
    <published>2023-03-30T13:22:21.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>说到css，相信大家都知道，css样式是用来修饰网页页面结构的。对于一名前端来说写好css并不难，但如何写出优雅可复用、易重构的css代码并不容易。</p><p>于是css预处理器便出现在大家的视线里，分别是 <code>stylus</code>、<code>less</code>、<code>sass</code>。它们的出现让编写css更加像JavaScript一样具有严谨性、编程性。</p><p>在此对<code>Stylus</code>、<code>Less</code>就不做多叙述了，如果小伙伴对其他两种感兴趣，可以访问 <a href="https://stylus-lang.com/">Stylus官网</a> 、<a href="https://lesscss.cn/">Less官网</a>了解更多哦。</p><h2 id="sass背景">Sass背景</h2><p>Sass（<code>Syntactically Awesome Style Sheets</code>），套用<a href="https://www.sass.hk/">sass官网</a>的牛逼介绍：“Sass是世界上最成熟、最稳定、最强大的专业级CSS扩展语言！”。是一个相对新的css预编译框架，为前端开发而生。</p><h2 id="为什么使用sass">为什么使用Sass?</h2><p>通过Sass编写css代码，你可以减少冗余的css代码，编写更加语义化的css，它扩展了css的能力，增加变量、嵌套css规则、混合器、继承、函数等新特性。</p><h2 id="sass-vs-scss">.sass vs .scss ?</h2><p>早已Sass出现的时候，是没有Scss的，Sass语法跟原生css不尽相同。使用缩进代替括号，没有分号。有些开发者并不适应这种写法，于是在Sass发布的3.0版本后官方提出修改，将文件后缀名以<code>.sass</code>改成了<code>.scss</code>,语法也更贴切原生css，让开发者可以像原来写css一样愉快的写scss。<code>scss</code>对应<code>css</code>就像<code>typescript</code>是<code>JavaScript</code>的超集一样的关系。</p><h2 id="sass安装">Sass安装</h2><p>关于Sass安装网上有很多详细教程，推荐几篇典型的安装教程文章。<br><a href="https://www.sass.hk/install/">Sass官网安装教程</a></p><h2 id="sass在node-js编译环境的安装">Sass在<code>node.js</code>编译环境的安装</h2><ol><li><p>在 nodejs 的平台下面，我们需要安装<code>node-sass</code>模块，通过这个模块，我们可以将 <code>scss</code> 文件转换成<code>css</code> 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install node-sass <span class="attr">--save</span></span><br></pre></td></tr></table></figure></li><li><p>安装完成以后，我们新建一个文件，名为<code>index.scss</code>文件</p></li><li><p>使用<code>node-sass</code>的语法来编译<code>index.scss</code>,具体语法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass --watch src/index.scss dist/index.css</span><br></pre></td></tr></table></figure></li><li><p>如果我们需要监控一个文件夹下面所有的文件，则需要使用如下的语法格式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node-sass  -w -r &lt;源文件夹&gt; -o &lt;目标文件夹&gt;    <span class="comment">//它只会跟踪同名文件，没有则新建</span></span><br><span class="line">-w, <span class="attr">--watch</span>                Watch <span class="selector-tag">a</span> directory or file <span class="comment">//监听</span></span><br><span class="line">-r, <span class="attr">--recursive</span>            Recursively watch directories or files  <span class="comment">//递归地查看目录或文件</span></span><br><span class="line">-o, <span class="attr">--output</span>               Output directory <span class="comment">//输出目录</span></span><br></pre></td></tr></table></figure></li><li><p>为了能够方法的执行我们的<code>node-sass</code>语法，我们一般会把编译命令写在 <code>package.json</code>的配置文件下面，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sass-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sass练习&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-sass --watch ./src/index.scss ./src/index.css&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;luckydong&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="1-sass变量">1、 Sass变量</h2><h3 id="1-1-变量声明与引用">1.1 变量声明与引用</h3><p><code>sass</code>变量声明和<code>css</code>属性声明很像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$theme-<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br></pre></td></tr></table></figure><p>这意味着变量<code>$theme-color</code>现在的值是<code>#fff</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$theme-<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  $<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: $height;</span><br><span class="line">  <span class="attribute">color</span>: $theme-color;</span><br><span class="line">&#125;</span><br><span class="line">//编译后</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>$theme-color</code>这个变量定义在规则块外边，所以在这个样式表中都可以像 <code>div</code>规则块那样引用它。</p><h3 id="1-2-默认变量">1.2 默认变量</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$defaultWidth</span>: <span class="number">100px</span>; <span class="comment">//全局变量</span></span><br><span class="line"><span class="variable">$defaultWidth</span>: <span class="number">200px</span> !default;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="variable">$height</span>: <span class="number">50px</span>; <span class="comment">//定义变量  局部变量</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$defaultWidth</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$height</span>; <span class="comment">//引用变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$defaultWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在<code>Scss</code>语法里面，变量分为全局变量与局部变量，变量加上<code>!default</code> 以后就是默认变量</p></blockquote><h2 id="2-嵌套-css-规则">2、 嵌套 CSS 规则</h2><p><code>css</code>中重复写选择器是非常繁琐无趣的事。如果要写一大串指向页面中同一块样式时，往往需要多次写同一个<code>id</code>或是同一个<code>class</code>类名:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>css</code>代码使用<code>scss</code>语法编写后就会变得简单明了、结构清晰，如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">1.4em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-父选择器的标识符">2.1 父选择器的标识符<code>&amp;</code></h3><p>在 scss 中，有时候我们需要在子级当中使用父级选择器，此时我们就需要使用<code>&amp;</code>来选取父级选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>css</code>代码经过<code>scss</code>换写后，可以简写为如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-子级选择器中的-与">2.2 子级选择器中的&gt; ~与+</h3><ol><li><code>'&gt;'</code>代表是的子级选择器</li><li>空格代码的是后代选择器</li><li><code>'+'</code>代表的是相邻兄弟选择器</li><li><code>‘～’</code>代表兄弟选择器</li></ol><blockquote><p>以上的四种用法与 CSS 的选择器保持一致</p></blockquote><h2 id="3-混合器">3、 混合器</h2><p>有时候我们在写样式的时候会发现，有些地方有样式，其中有一些是相同的，这个时候，我们会把这些样式提取出来，然后再单独导入进去。</p><p>例如：假设我们需要写一个 button，这个 button 的大小与边框都一样，唯独在颜色上一样的时候，我们可以使用混合器做如下处理</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> btn &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid lightgray;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-success</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> btn;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：在上面的代码当中，不难发现，我们使用了<code>@mixin</code> 来定义一个混合器。在下面的样式当中，我们使用了<code>@include</code>导入混合器，这样 .btn-success 的样式就结合了之前定义的样式了。</p></blockquote><h3 id="3-1-混合器的中参数">3.1 混合器的中参数</h3><p><code>SCSS</code>中的混合器有点类似于js中的方法，定义一个混合器就相当于定义了一个方法，而我们定义方法的时候可以定义参数，在调用方法的时候，我们则可以使用这个参数。同理，在 <code>SCSS</code> 当中，定义混合器也可以使用参数，代码如下所示：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> flex-box(<span class="variable">$direction</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: <span class="variable">$direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> flex-box(row);</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码经过 <code>node-sass</code>编译后，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-混合器参数的默认值">3.2 混合器参数的默认值</h3><p>为了在<code>@include</code>混合器时不必传入所有的参数，给参数指定一个默认值，上面的scss 中，如果希望<code>flex</code>布局中默认的主轴是 <code>column</code>，可以定义如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> flex-box(<span class="variable">$direction</span>: column) &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: <span class="variable">$direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> flex-box;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的 SCSS 当中，我们在调用的时候没有传递参数给混合器，而是使用了它的默认值</p></blockquote><h2 id="4-选择器继承">4、 选择器继承</h2><p>使用<code>sass</code>的时候，最后一个减少重复的主要特性就是选择器继承。</p><p>选择器继承指的是一个选择器可以继承另一个选择器定义的所有样式。这个通过<code>@extend</code>语法实现，如下代码:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过选择器继承继承样式</span></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loading-error</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>@extend</code>就相当于继承，后面的.error 则是继承的选择器，上面的 <code>scss</code> 经过编译后所呈现的代码如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>,</span><br><span class="line"><span class="selector-class">.loading-error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading-error</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：我们可以看到，继承的选择器，它在这里使用了分组选择器来完了这个功能，这样我们的.loading-error 的样式则单独的区分开。</p></blockquote><p><em>关于<code>@extend</code>有两个要点你应该知道。</em></p><p>跟混合器相比，继承生成的css代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的css体积更小。如果你非常关心你站点的速度，请牢记这一点。</p><p>继承遵从css层叠的规则。当两个不同的css规则应用到同一个html元素上时，并且这两个不同的css规则对同一属性的修饰存在不同的值，css层叠规则会决定应用哪个样式。</p><p>相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</p><h3 id="写在最后">写在最后</h3><blockquote><ol><li>变量</li><li>嵌套 CSS 规则</li><li>混合器</li><li>继承</li></ol></blockquote><p>以上的四种是 Sass 的核心内容，也是最基础内容，通过了解学习后，我们可以快速的编写页面样式，提高开发效率，做到 CSS 代码重复率低，可复用性高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;说到css，相信大家都知道，css样式是用来修饰网页页面结构的。对于一名前端来说写好css并不难，但如何写出优雅可复用、易重构的css代码并不容易。&lt;/p&gt;
&lt;p&gt;于是css预处理器便出现在大家的视线里，分别是 &lt;code&gt;stylu</summary>
      
    
    
    
    <category term="前端" scheme="https://www.yuanyuanblog.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="sass" scheme="https://www.yuanyuanblog.me/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>less</title>
    <link href="https://www.yuanyuanblog.me/posts/d3b694df.html"/>
    <id>https://www.yuanyuanblog.me/posts/d3b694df.html</id>
    <published>2023-03-30T13:22:12.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><h3 id="css的短板">CSS的短板</h3><p>作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单易懂，毫无逻辑，不像编程该有的样子。在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石，可以说 CSS 短板不容忽视。</p><p>问题的诞生往往伴随着技术的兴起， 在 Web 发展的这几年， 为了让 CSS 富有逻辑性，短板不那么严重，涌现出了 一些神奇的预处理语言。 它们让 CSS 彻底变成一门 可以使用 变量 、循环 、继承 、自定义方法等多种特性的标记语言，逻辑性得以大大增强。</p><h3 id="预处理语言的诞生">预处理语言的诞生</h3><p>其中 就我所知的有三门语言：Sass、Less 、Stylus 。</p><ol><li>Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li>Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li>Less 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（<em>引用于官网</em>）。</li></ol><h3 id="选择预处理语言">选择预处理语言</h3><p>这是一个十分纠结的问题。</p><ol><li>在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹，这也是我选择 Less 的原因。</li><li>Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。</li></ol><p>如果你之前没有接触过预处理语言，纠结应该学哪一个，不如先看看 下面 Less 的介绍，我相信你会爱上它的。</p><h3 id="使用-less-的前奏">使用 Less 的前奏</h3><p>使用 Less 有两种方式</p><ol><li>在页面中 引入 Less.js</li></ol><ul><li><p>可在<a href="http://lesscss.org/">官网</a>下载</p></li><li><p>或使用CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/less@4.1.3/dist/less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，link 标签一定要在 Less.js 之前引入，并且 link 标签的 rel 属性要设置为stylesheet/less。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.less&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>在命令行 使用npm安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure><p>具体使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lessc styles.less &gt; styles.css</span><br></pre></td></tr></table></figure><p>假如还有问题，<a href="http://less.bootcss.com/">官网</a>已经有了明确的步骤。</p><p>如果你也是 Webpack 的使用者，还需要配合 less-loader 进行处理，具体可见我的这篇文章：<a href="https://tomotoes.com/posts/4d6f8cc5/">Webpack飞行手册</a>，里面详细说明了 less 的处理方式。</p><p>如果你在本地环境，可以使用第一种方式，非常简单；但在生产环境中，性能非常重要，最好使用第二种方式。</p></li></ol><h2 id="正文">正文</h2><p>下面我将简介 Less 的功能特性。</p><h3 id="变量">变量</h3><p>我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。 理想状态，应是下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bgColor=<span class="string">&quot;skyblue&quot;</span>;</span><br><span class="line">$(<span class="string">&quot;.post-content&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,bgColor);</span><br><span class="line">$(<span class="string">&quot;#wrap&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,bgColor);</span><br><span class="line">$(<span class="string">&quot;.arctive&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,bgColor);</span><br></pre></td></tr></table></figure><p>只要我们修改 <code>bgColor</code>这一个变量， 整个页面的背景颜色都会随之改变。</p><p>而 Less 中的变量十分强大，可化万物，值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。</p><ol><li><p><strong>值变量</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#999</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> skyblue;<span class="comment">//不要添加引号</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">50%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 <code>@</code> 开头 定义变量，并且使用时 直接 键入 <code>@</code>名称。</p><p>在平时工作中，我们就可以把 常用的变量 封装到一个文件中，这样利于代码组织维护。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@lightPrimaryColor:</span> <span class="number">#c5cae9</span>;</span><br><span class="line"><span class="variable">@textPrimaryColor:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@accentColor:</span> <span class="built_in">rgb</span>(<span class="number">99</span>, <span class="number">137</span>, <span class="number">185</span>);</span><br><span class="line"><span class="variable">@primaryTextColor:</span> <span class="number">#646464</span>;</span><br><span class="line"><span class="variable">@secondaryTextColor:</span> <span class="number">#000</span>;</span><br><span class="line"><span class="variable">@dividerColor:</span> <span class="number">#b6b6b6</span>;</span><br><span class="line"><span class="variable">@borderColor:</span> <span class="number">#dadada</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>选择器变量</strong></p><p>让 选择器 变成 动态</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@mySelector:</span> #wrap;</span><br><span class="line"><span class="variable">@Wrap:</span> wrap;</span><br><span class="line"><span class="variable">@&#123;mySelector&#125;</span>&#123; <span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;Wrap&#125;</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#@&#123;Wrap&#125;</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>属性变量</strong></p><p>可减少代码书写量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@borderStyle:</span> border-style;</span><br><span class="line"><span class="variable">@Soild:</span>solid;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  @&#123;borderStyle&#125;: @<span class="selector-tag">Soild</span>;<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">border-style</span>:solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>url 变量</strong></p><p>项目结构改变时，修改其变量即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">&quot;../img&quot;</span>;<span class="comment">//需要加引号</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;@&#123;images&#125;/dog.png&quot;</span>);<span class="comment">//变量名 必须使用大括号包裹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;../img/dog.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>声明变量</strong></p><p>有点类似于 下面的 混合方法</p><ul><li>结构: @name: { 属性: 值 ;};</li><li>使用：@name();</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@background:</span> &#123;<span class="attribute">background</span>:red;&#125;;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="variable">@background</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@Rules:</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="variable">@Rules</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>变量运算</strong></p><p>不得不提的是，Less 的变量运算完全超出我的期望，十分强大。</p><ul><li>加减法时 以第一个数据的单位为基准</li><li>乘除法时 注意单位一定要统一</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@width:</span><span class="number">300px</span>;</span><br><span class="line"><span class="variable">@color:</span><span class="number">#222</span>;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="variable">@width-20</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">@width-20</span>*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">margin</span>:(<span class="variable">@width-20</span>)*<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">@color</span>*<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">@color</span> + <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">280px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>变量作用域</strong></p><p>一句话理解就是：<strong>就近原则</strong>，不要跟我提闭包。</p><p><em>借助官网的Demo</em></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@var:</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="variable">@a:</span> <span class="number">100%</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@var</span>;</span><br><span class="line">  <span class="variable">@a:</span> <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>用变量去定义变量</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@fnord:</span>  <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line"><span class="variable">@var:</span>    <span class="string">&quot;fnord&quot;</span>;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">@@var</span>; <span class="comment">//将@var替换为其值 content:@fnord;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;I am fnord.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="嵌套">嵌套</h3><ol><li><p><strong>&amp; 的妙用</strong></p><p>&amp; ：代表的上一层选择器的名字，此例便是<code>header</code>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is more!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">_content</span>&#123;<span class="comment">//理解方式：直接把 &amp; 替换成 #header</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#header</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;Less is more!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.title</span>&#123; <span class="comment">//嵌套了</span></span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header_content</span>&#123;<span class="comment">//没有嵌套！</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>媒体查询</strong></p><p>在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Less 提供了一个十分便捷的方式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="comment">//something...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen&#123;</span><br><span class="line">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> tv &#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">maxwidth</span>:<span class="number">768px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> tv&#123;</span><br><span class="line">  <span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">2000px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唯一的缺点就是 每一个元素都会编译出自己 <code>@media</code> 声明，并不会合并。</p></li><li><p><strong>实战技巧</strong></p><p>可以借助 Less 在元素中，去定义自己的私有样式。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="comment">// something..</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.show</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.show</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">main.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;show&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span><span class="selector-class">.show</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.show</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none; <span class="comment">//会被覆盖。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="混合方法">混合方法</h3><ol><li><p><strong>无参数方法</strong></p><p>方法犹如 声明的集合，使用时 直接键入名称即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123; <span class="comment">// 等价于 .card()</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="selector-class">.card</span>;<span class="comment">//等价于.card();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">151</span>, <span class="number">151</span>, <span class="number">151</span>, .<span class="number">58</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>.card</code> 与 <code>.card()</code> 是等价的。 个人建议，为了避免 代码混淆，应写成 :</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span>()&#123;</span><br><span class="line">  <span class="comment">//something...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="selector-class">.card</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要点：</p><ul><li><code>.</code> 与 <code>#</code> 皆可作为 方法前缀。</li><li>方法后写不写 <code>()</code> 看个人习惯。</li></ul></li><li><p><strong>默认参数方法</strong></p><ul><li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。</li><li><code>@arguments</code> 犹如 JS 中的 <code>arguments</code> 指代的是 全部参数。</li><li>传的参数中 必须带着单位。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@a</span>:<span class="number">10px</span>,<span class="variable">@b</span>:<span class="number">50px</span>,<span class="variable">@c</span>:<span class="number">30px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;<span class="comment">//指代的是 全部参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red);<span class="comment">//必须带着单位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>;<span class="comment">//等价于 .border()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">0px</span>,<span class="number">5px</span>,<span class="number">30px</span>,red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">50px</span> <span class="number">30px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法的匹配模式</strong></p><p>与 面向对象中的多态 很相似</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.triangle</span>(top,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent <span class="variable">@color</span> transparent ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(right,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent <span class="variable">@color</span> transparent  transparent ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle</span>(bottom,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="variable">@color</span> transparent  transparent  transparent ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(left,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span>(<span class="variable">@_</span>,<span class="variable">@width</span>:<span class="number">20px</span>,<span class="variable">@color</span>:<span class="number">#000</span>)&#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="variable">@width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.triangle</span>(left, <span class="number">50px</span>, <span class="number">#999</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>:transparent  transparent  transparent <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要点</p><ul><li>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</li><li>如果匹配的参数 是变量，则将会匹配，如 <code>@_</code> 。</li></ul></li><li><p><strong>方法的命名空间</strong></p><p>让方法更加规范</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>()&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#723232</span>;</span><br><span class="line">    <span class="selector-class">.d</span>(<span class="variable">@w</span>:<span class="number">300px</span>)&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-id">#a</span>(<span class="variable">@h</span>:<span class="number">300px</span>)&#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="variable">@h</span>;<span class="comment">//可以使用上一层传进来的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.d</span> &gt; <span class="selector-id">#a</span>(<span class="number">100px</span>); <span class="comment">// 父元素不能加 括号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.d</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="comment">//不得单独使用命名空间的方法</span></span><br><span class="line">    <span class="comment">//.d() 如果前面没有引入命名空间 #card ，将会报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-id">#card</span>; <span class="comment">// 等价于 #card();</span></span><br><span class="line">    <span class="selector-class">.d</span>(<span class="number">20px</span>); <span class="comment">//必须先引入 #card</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要点</p><ul><li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li><li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li><li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li><li>子方法 可以使用上一层传进来的方法</li></ul></li><li><p><strong>方法的条件筛选</strong></p><p>Less 没有 if else，可是它有 <code>when</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#card</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span></span><br><span class="line">    <span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>,<span class="variable">@style</span>) <span class="keyword">when</span> (<span class="variable">@width</span>&gt;<span class="number">100px</span>) <span class="keyword">and</span>(<span class="variable">@color</span>=<span class="number">#999</span>)&#123;</span><br><span class="line">        <span class="attribute">border</span>:<span class="variable">@style</span> <span class="variable">@color</span> <span class="variable">@width</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span></span><br><span class="line">    <span class="selector-class">.background</span>(<span class="variable">@color</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@color</span>&gt;=<span class="number">#222</span>)&#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="variable">@color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span></span><br><span class="line">    <span class="selector-class">.font</span>(<span class="variable">@size</span>:<span class="number">20px</span>) <span class="keyword">when</span> (<span class="variable">@size</span>&gt;<span class="number">50px</span>) , (<span class="variable">@size</span>&lt;<span class="number">100px</span>)&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">@size</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-id">#card</span>&gt;<span class="selector-class">.border</span>(<span class="number">200px</span>,<span class="number">#999</span>,solid);</span><br><span class="line">    <span class="selector-id">#card</span> <span class="selector-class">.background</span>(<span class="number">#111</span>);</span><br><span class="line">    <span class="selector-id">#card</span> &gt; <span class="selector-class">.font</span>(<span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:solid <span class="number">#999</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要点</p><ul><li>比较运算有： &gt; &gt;= = =&lt; &lt;。</li><li>= 代表的是等于</li><li>除去关键字 true 以外的值都被视为 false：</li></ul></li><li><p><strong>数量不定的参数</strong></p><p>如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>(...)&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textShadow</span>(<span class="variable">@a</span>,...)&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.boxShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">    <span class="selector-class">.textShadow</span>(<span class="number">1px</span>,<span class="number">4px</span>,<span class="number">30px</span>,red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">4px</span> <span class="number">30px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法使用important！</strong></p><p>使用方法 非常简单，在方法名后 加上关键字即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>() !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> red <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>循环方法</strong></p><p>Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。 下面是官网中的一个 Demo，模拟了生成栅格系统。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">1</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) &#123;</span><br><span class="line">  <span class="selector-class">.column-</span><span class="variable">@&#123;i&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="variable">@i</span> * <span class="number">100%</span> / <span class="variable">@n</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.column-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>属性拼接方法</strong></p><p><code>+_</code> 代表的是 空格；<code>+</code> 代表的是 逗号。</p><ul><li>逗号</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.boxShadow</span>() &#123;</span><br><span class="line">    <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.boxShadow</span>();</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>空格</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Animation</span>() &#123;</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="selector-class">.Animation</span>();</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>) <span class="built_in">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实战技巧</strong></p><p>下面是官网中的一个非常赞的 Demo</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</span><br><span class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>); <span class="comment">// 调用 方法</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;    <span class="comment">// 使用返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以说 Less 是一门优雅编程语言。</p><h3 id="继承">继承</h3><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。</p><ol><li><p><strong>extend 关键字的使用</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.animation</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">    <span class="selector-class">.hide</span>&#123;</span><br><span class="line">      <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.animation);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.animation .hide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.animation</span>,<span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> <span class="selector-class">.hide</span> , <span class="selector-id">#con</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>all 全局搜索替换</strong></p><p>使用选择器匹配到的 全部声明。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>:<span class="selector-tag">extend</span>(#main all) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>,<span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#wrap</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>减少代码的重复性</strong></p><p>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。</p><p>方法示例 与上面的 extend 进行对比：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-class">.Method</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>:<span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="selector-class">.Method</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="selector-class">.Method</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;Less is good!&quot;</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>要点</strong></p><p><em>翻译官网</em></p><ul><li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li><li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。</li><li>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li><li>如果一个规则集包含多个选择器，所有选择器都可以使用extend关键字。</li></ul><h3 id="导入">导入</h3><ol><li>导入 less 文件 可省略后缀</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> &quot;<span class="selector-tag">main</span>&quot;; </span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="selector-tag">import</span> &quot;<span class="selector-tag">main</span><span class="selector-class">.less</span>&quot;;</span><br></pre></td></tr></table></figure><ol><li><code>@import</code> 的位置可随意放置</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;style&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>reference</strong></p><p>Less 中 最强大的特性 使用 引入的 Less 文件，但不会 编译它。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="keyword">@import</span> (reference) <span class="string">&quot;bootstrap.less&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span>:<span class="selector-tag">extend</span>(.navbar all)&#123;&#125;</span><br></pre></td></tr></table></figure><p>翻译官网：</p><blockquote><p>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。</p></blockquote></li><li><p><strong>once</strong></p><blockquote><p>@import语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> (once) <span class="string">&quot;foo.less&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> (once) <span class="string">&quot;foo.less&quot;</span>; <span class="comment">// this statement will be ignored</span></span><br></pre></td></tr></table></figure></li><li><p><strong>multiple</strong></p><blockquote><p>使用@import (multiple)允许导入多个同名文件。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file: foo.less</span></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// file: main.less</span></span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">&quot;foo.less&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">&quot;foo.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数">函数</h3><ol><li><p><strong>判断类型</strong></p><ul><li>isnumber</li></ul><blockquote><p>判断给定的值 是否 是一个数字。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">#ff0</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(blue);     <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="string">&quot;string&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">1234</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">56px</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(<span class="number">7.8%</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(keyword);  <span class="comment">// false</span></span><br><span class="line"><span class="selector-tag">isnumber</span>(url(<span class="string">...</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>iscolor</li></ul><blockquote><p>判断给定的值 是否 是一个颜色。</p></blockquote><ul><li>isurl</li></ul><blockquote><p>判断给定的值 是否 是一个 url 。</p></blockquote></li><li><p><strong>颜色操作</strong></p><ul><li>saturate</li></ul><blockquote><p>增加一定数值的颜色饱和度。</p></blockquote><ul><li>lighten</li></ul><blockquote><p>增加一定数值的颜色亮度。</p></blockquote><ul><li>darken</li></ul><blockquote><p>降低一定数值的颜色亮度。</p></blockquote><ul><li>fade</li></ul><blockquote><p>给颜色设定一定数值的透明度。</p></blockquote><ul><li>mix</li></ul><blockquote><p>根据比例混合两种颜色。</p></blockquote></li><li><p><strong>数学函数</strong></p><ul><li>ceil</li></ul><blockquote><p>向上取整。</p></blockquote><ul><li>floor</li></ul><blockquote><p>向下取整。</p></blockquote><ul><li>percentage</li></ul><blockquote><p>将浮点数转换为百分比字符串。</p></blockquote><ul><li>round</li></ul><blockquote><p>四舍五入。</p></blockquote><ul><li>sqrt</li></ul><blockquote><p>计算一个数的平方根。</p></blockquote><ul><li>abs</li></ul><blockquote><p>计算数字的绝对值，原样保持单位。</p></blockquote><ul><li>pow</li></ul><blockquote><p>计算一个数的乘方。</p></blockquote></li></ol><p>由于 文章 篇幅有限，所以 只能介绍一些 使用效率高的函数。</p><p>如果你想了解更多，可以去官网的<a href="http://lesscss.cn/functions/">函数链接</a></p><h3 id="其他">其他</h3><ol><li><p><strong>注释</strong></p><ul><li>/* */ CSS原生注释，会被编译在 CSS 文件中。</li><li>/  / Less提供的一种注释，不会被编译在 CSS 文件中。</li></ul></li><li><p><strong>避免编译</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="string">~&#x27;calc(300px-30px)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">300px</span>-<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构： <code>~' 值 '</code></p></li><li><p><strong>变量拼串</strong></p><p>在平时工作中，这种需求 太常见了。 在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="variable">@size:</span><span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.judge</span>(<span class="variable">@i</span>) <span class="keyword">when</span>(<span class="variable">@i</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="variable">@size:</span><span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span>) <span class="keyword">when</span> (<span class="variable">@i</span>&lt;<span class="number">16</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.circle</span><span class="selector-pseudo">:nth-child</span>(<span class="variable">@&#123;i&#125;</span>)&#123;</span><br><span class="line">      <span class="selector-class">.judeg</span>(<span class="variable">@i</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>:<span class="variable">@size</span> <span class="variable">@size</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">animation</span>: <span class="string">~&quot;circle-@&#123;i&#125;&quot;</span> <span class="variable">@duration</span> infinite <span class="variable">@ease</span>;</span><br><span class="line">      <span class="attribute">transition-delay</span>:<span class="string">~&quot;@&#123;i&#125;ms&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> <span class="string">~&quot;circle-@&#123;i&#125;&quot;</span> &#123;</span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.loopAnimation</span>(<span class="variable">@i</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构： <code>~&quot;字符@&#123;变量&#125;字符&quot;</code>;</p></li><li><p><strong>使用 JS</strong></p><p>因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less */</span></span><br><span class="line"><span class="variable">@content:</span><span class="built_in">`&quot;aaa&quot;.toUpperCase()`</span>;</span><br><span class="line"><span class="selector-id">#randomColor</span>&#123;</span><br><span class="line">  <span class="variable">@randomColor:</span> <span class="string">~&quot;rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">~&quot;`Math.round(Math.random() * 100)`px&quot;</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">      <span class="attribute">content</span>:<span class="variable">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">height</span>: <span class="string">~&quot;`window.innerHeight`px&quot;</span>;</span><br><span class="line">  alert:~&quot;`alert(1)`&quot;;</span><br><span class="line">  <span class="selector-id">#randomColor</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@randomColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成后的 CSS */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出 1</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: 随机值（<span class="number">0</span>~<span class="number">100</span>）px;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">743px</span>;<span class="comment">//由电脑而异</span></span><br><span class="line">  <span class="attribute">background</span>: 随机颜色;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;h3 id=&quot;css的短板&quot;&gt;CSS的短板&lt;/h3&gt;
&lt;p&gt;作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单</summary>
      
    
    
    
    <category term="前端" scheme="https://www.yuanyuanblog.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="less" scheme="https://www.yuanyuanblog.me/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Realm</title>
    <link href="https://www.yuanyuanblog.me/posts/99ca06de.html"/>
    <id>https://www.yuanyuanblog.me/posts/99ca06de.html</id>
    <published>2023-03-11T16:09:50.000Z</published>
    <updated>2023-04-05T08:37:29.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用realm">使用Realm</h2><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://www.mongodb.com/docs/realm/sdk/kotlin/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.mongodb.com/docs/realm/sdk/kotlin/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Realm官方文档</div>            <div class="tag-link-sitename"> https://www.mongodb.com/docs/realm/sdk/kotlin/</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h3 id="添加依赖">添加依赖</h3><p>在build.gradle(app)文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">...</span><br><span class="line">    id <span class="string">&#x27;io.realm.kotlin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">//MongoDB Realm</span></span><br><span class="line">    implementation <span class="string">&#x27;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;io.realm.kotlin:library-base:1.6.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在build.gradle(项目)文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    ...</span><br><span class="line">    id <span class="string">&#x27;io.realm.kotlin&#x27;</span> version <span class="string">&#x27;1.6.1&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义object-model">定义Object Model</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.realm.kotlin.types.ObjectId</span><br><span class="line"><span class="keyword">import</span> io.realm.kotlin.types.RealmObject</span><br><span class="line"><span class="keyword">import</span> io.realm.kotlin.types.annotations.PrimaryKey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>() : RealmObject &#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">var</span> _id: ObjectId = ObjectId.create()</span><br><span class="line">    <span class="keyword">var</span> isComplete: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> summary: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> owner_id: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ownerId: String = <span class="string">&quot;&quot;</span>) : <span class="keyword">this</span>() &#123;</span><br><span class="line">        owner_id = ownerId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建realm">创建Realm</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = RealmConfiguration.create(schema = setOf(Item::<span class="keyword">class</span>))</span><br><span class="line"><span class="keyword">val</span> realm: Realm = Realm.<span class="keyword">open</span>(config)</span><br></pre></td></tr></table></figure><h3 id="create-read-update-and-delete-objects">Create, Read, Update, and Delete Objects</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//To create a new Item, instantiate an instance of the Item class and add it to the realm in a write transaction block:</span></span><br><span class="line">realm.writeBlocking &#123;</span><br><span class="line">    copyToRealm(Item().apply &#123;</span><br><span class="line">        summary = <span class="string">&quot;Do the laundry&quot;</span></span><br><span class="line">        isComplete = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//query</span></span><br><span class="line"><span class="comment">// all items in the realm</span></span><br><span class="line"><span class="keyword">val</span> items: RealmResults&lt;Item&gt; = realm.query&lt;Item&gt;().find()</span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="comment">// items in the realm whose name begins with the letter &#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">val</span> itemsThatBeginWIthD: RealmResults&lt;Item&gt; =</span><br><span class="line">    realm.query&lt;Item&gt;(<span class="string">&quot;summary BEGINSWITH $0&quot;</span>, <span class="string">&quot;D&quot;</span>)</span><br><span class="line">        .find()</span><br><span class="line"><span class="comment">//  todo items that have not been completed yet</span></span><br><span class="line"><span class="keyword">val</span> incompleteItems: RealmResults&lt;Item&gt; =</span><br><span class="line">    realm.query&lt;Item&gt;(<span class="string">&quot;isComplete == false&quot;</span>)</span><br><span class="line">        .find()</span><br><span class="line"></span><br><span class="line"><span class="comment">//To modify a Todo item, update its properties in a write transaction block:</span></span><br><span class="line"><span class="comment">// change the first item with open status to complete to show that the todo item has been done</span></span><br><span class="line">realm.writeBlocking &#123;</span><br><span class="line">    findLatest(incompleteItems[<span class="number">0</span>])?.isComplete = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete a Todo item by calling mutableRealm.delete() in a write transaction block:</span></span><br><span class="line"><span class="comment">// delete the first item in the realm</span></span><br><span class="line">realm.writeBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> writeTransactionItems = query&lt;Item&gt;().find()</span><br><span class="line">    delete(writeTransactionItems.first())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch-for-changes">Watch for Changes</h3><p>下面这个例子监听所有Item objects的变化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flow.collect() is blocking -- run it in a background context</span></span><br><span class="line"><span class="keyword">val</span> job = CoroutineScope(Dispatchers.Default).launch &#123;</span><br><span class="line">    <span class="comment">// create a Flow from the Item collection, then add a listener to the Flow</span></span><br><span class="line">    <span class="keyword">val</span> itemsFlow = items.asFlow()</span><br><span class="line">    itemsFlow.collect &#123; changes: ResultsChange&lt;Item&gt; -&gt;</span><br><span class="line">        <span class="keyword">when</span> (changes) &#123;</span><br><span class="line">            <span class="comment">// UpdatedResults means this change represents an update/insert/delete operation</span></span><br><span class="line">            <span class="keyword">is</span> UpdatedResults -&gt; &#123;</span><br><span class="line">                changes.insertions <span class="comment">// indexes of inserted objects</span></span><br><span class="line">                changes.insertionRanges <span class="comment">// ranges of inserted objects</span></span><br><span class="line">                changes.changes <span class="comment">// indexes of modified objects</span></span><br><span class="line">                changes.changeRanges <span class="comment">// ranges of modified objects</span></span><br><span class="line">                changes.deletions <span class="comment">// indexes of deleted objects</span></span><br><span class="line">                changes.deletionRanges <span class="comment">// ranges of deleted objects</span></span><br><span class="line">                changes.list <span class="comment">// the full collection of objects</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                <span class="comment">// types other than UpdatedResults are not changes -- ignore them</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们完成观察后，记得取消job以关闭携程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.cancel() <span class="comment">// cancel the coroutine containing the listener</span></span><br></pre></td></tr></table></figure><h3 id="关闭realm">关闭Realm</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realm.close()</span><br></pre></td></tr></table></figure><h3 id="查看数据库文件软件">查看数据库文件软件</h3><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://www.mongodb.com/docs/realm/studio/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.mongodb.com/docs/realm/studio/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Realm Studio</div>            <div class="tag-link-sitename"> https://www.mongodb.com/docs/realm/studio/</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h3 id="案例代码地址">案例代码地址</h3><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://github.com/liaojie1314/MongoDBRealmTest">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/liaojie1314/MongoDBRealmTest.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">github代码地址</div>            <div class="tag-link-sitename"> https://github.com/liaojie1314/MongoDBRealmTest</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h2 id="room-vs-mongodb-realm">Room VS MongoDB Realm</h2><h3 id="room">Room</h3><p>Room是一个开源数据库，由谷歌专门为Android应用程序开发，它被设计成一个轻量级的高效且易于使用的传统SQLite数据库,它使用对象关系映射的概念(ORM)映射Java或co-objects到Room数据库表。</p><p>优点</p><ul><li>Integration with the AAC(与Android架构组件的集成)</li><li>Strong typing(强大键入功能,有助于防止编译时的错误)</li><li>Easy to use</li><li>Good performance</li></ul><p>缺点</p><ul><li>Security</li><li>Cross-platform</li></ul><h3 id="mongodb-realm">MongoDB Realm</h3><p><a href="https://www.mongodb.com/realm/mobile/database">Realm</a> 是一个专门为移动端设计的数据库。主要特点是性能好，易使用。在移动端 Realm 颇有一些人气，在轻量的场景下使用还是挺适合的。随着 App 的发展，越来越多的本地数据需要和服务器进行同步。如果团队自己开发，需要制定服务器端数据库的格式（和移动端数据库不一样）、服务器端的存储、需要写一个和服务器进行数据同步的程序。对于小团队而言，为了实现这个需求可是不小的工作量。如果 Realm 也提供一个在云上数据库，再提供一个同步的程序。那么数据同步的需求对于中小规模开发者就非常变得非常轻松了。于是 Realm 推出了 Realm Platform，也叫 Realm Cloud。Realm platform 的收费也是按照容量来算钱。</p><p>MongoDB 是一个流行的 NoSQL 数据库，主要是在服务器端使用。后来推出了基于云端的 MongoDB Atlas。随着移动互联网的发展，MongoDB 就想着开发一个在移动端的服务，可以把数据方便的同步到 MongoDB Atlas 上。MongoDB 当时发布了一个 iOS 端的 beta SDK。</p><p>优点</p><ul><li>Cross-platform</li><li>Serverless database</li><li>Device Sync</li><li>Query language</li><li>Security</li></ul><p>缺点</p><ul><li>Learning curve</li><li>Pricing</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用realm&quot;&gt;使用Realm&lt;/h2&gt;
&lt;div class=&#39;tag-link-1&#39;&gt;&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot; https://www.mongodb.com/docs/realm/sdk/kotl</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuanblog.me/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Android" scheme="https://www.yuanyuanblog.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>小型录音机</title>
    <link href="https://www.yuanyuanblog.me/posts/b4b7793c.html"/>
    <id>https://www.yuanyuanblog.me/posts/b4b7793c.html</id>
    <published>2023-03-01T19:46:07.000Z</published>
    <updated>2023-04-05T08:37:29.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="record相关">record相关</h3><h4 id="audiorecorder-kt">AudioRecorder.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AudioRecorder</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">(outputFile: <span class="type">File</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="androidaudiorecorder-kt">AndroidAudioRecorder.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.media.MediaRecorder</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.provider.MediaStore.Audio.Media</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidAudioRecorder</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context</span><br><span class="line">): AudioRecorder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> recorder: MediaRecorder? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createRecorder</span><span class="params">()</span></span>: MediaRecorder &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) &#123;</span><br><span class="line">            MediaRecorder(context)</span><br><span class="line">        &#125; <span class="keyword">else</span> MediaRecorder()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">(outputFile: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">        createRecorder().apply &#123;</span><br><span class="line">            setAudioSource(MediaRecorder.AudioSource.MIC)</span><br><span class="line">            setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)</span><br><span class="line">            setAudioEncoder(MediaRecorder.AudioEncoder.AAC)</span><br><span class="line">            setOutputFile(FileOutputStream(outputFile).fd)</span><br><span class="line"></span><br><span class="line">            prepare()</span><br><span class="line">            start()</span><br><span class="line"></span><br><span class="line">            recorder = <span class="keyword">this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        recorder?.stop()</span><br><span class="line">        recorder?.reset()</span><br><span class="line">        recorder = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="playback相关">playback相关</h3><h4 id="audioplayer-kt">AudioPlayer.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">playFile</span><span class="params">(file: <span class="type">File</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="androidaudioplayer-kt">AndroidAudioPlayer.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.media.MediaPlayer</span><br><span class="line"><span class="keyword">import</span> androidx.core.net.toUri</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidAudioPlayer</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> context: Context</span><br><span class="line">): AudioPlayer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> player: MediaPlayer? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">playFile</span><span class="params">(file: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">        MediaPlayer.create(context, file.toUri()).apply &#123;</span><br><span class="line">            player = <span class="keyword">this</span></span><br><span class="line">            start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        player?.stop()</span><br><span class="line">        player?.release()</span><br><span class="line">        player = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.Manifest</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.activity.ComponentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.activity.compose.setContent</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.Arrangement</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.Column</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.fillMaxSize</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.Button</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.MaterialTheme</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.Surface</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.Text</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.Alignment</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.Modifier</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.tooling.preview.Preview</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.ActivityCompat</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> recorder <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        AndroidAudioRecorder(applicationContext)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> player <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        AndroidAudioPlayer(applicationContext)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> audioFile: File? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        ActivityCompat.requestPermissions(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            arrayOf(Manifest.permission.RECORD_AUDIO),</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">        setContent &#123;</span><br><span class="line">            AudioRecorderTheme &#123;</span><br><span class="line">                Column(</span><br><span class="line">                    modifier = Modifier.fillMaxSize(),</span><br><span class="line">                    verticalArrangement = Arrangement.Center,</span><br><span class="line">                    horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">                ) &#123;</span><br><span class="line">                    Button(onClick = &#123;</span><br><span class="line">                        File(cacheDir, <span class="string">&quot;audio.mp3&quot;</span>).also &#123;</span><br><span class="line">                            recorder.start(it)</span><br><span class="line">                            audioFile = it</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;) &#123;</span><br><span class="line">                        Text(text = <span class="string">&quot;Start recording&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    Button(onClick = &#123;</span><br><span class="line">                        recorder.stop()</span><br><span class="line">                    &#125;) &#123;</span><br><span class="line">                        Text(text = <span class="string">&quot;Stop recording&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    Button(onClick = &#123;</span><br><span class="line">                        player.playFile(audioFile ?: <span class="keyword">return</span><span class="symbol">@Button</span>)</span><br><span class="line">                    &#125;) &#123;</span><br><span class="line">                        Text(text = <span class="string">&quot;Play&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    Button(onClick = &#123;</span><br><span class="line">                        player.stop()</span><br><span class="line">                    &#125;) &#123;</span><br><span class="line">                        Text(text = <span class="string">&quot;Stop playing&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;record相关&quot;&gt;record相关&lt;/h3&gt;
&lt;h4 id=&quot;audiorecorder-kt&quot;&gt;AudioRecorder.kt&lt;/h4&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="个人资料" scheme="https://www.yuanyuanblog.me/categories/%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Android" scheme="https://www.yuanyuanblog.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Redis（十二）拓展：Redis的面试题整理和解答</title>
    <link href="https://www.yuanyuanblog.me/posts/9ad3a763.html"/>
    <id>https://www.yuanyuanblog.me/posts/9ad3a763.html</id>
    <published>2023-01-28T21:09:29.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><h3 id="什么是redis">什么是Redis</h3><p>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><p>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p><h3 id="redis有哪些优缺点">Redis有哪些优缺点</h3><p>优点</p><ul><li>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。</li><li>支持数据持久化，支持AOF和RDB两种持久化方式。</li><li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li><li>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li></ul><p>缺点</p><ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h3 id="为什么要用-redis-为什么要用缓存">为什么要用 Redis /为什么要用缓存</h3><p>主要从“高性能”和“高并发”这两点来看待这个问题。</p><p><strong>高性能：</strong></p><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311635272.png" alt="image-20230131163520168" style="zoom:80%;" /></p><p><strong>高并发：</strong></p><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311644086.png" alt="aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNDUzNDg2OS0wOWIxZDI3OWEwNWVmNWJjLmpwZw" style="zoom:80%;" /><h3 id="为什么要用-redis-而不用-map-guava-做缓存">为什么要用 Redis 而不用 map/guava 做缓存?</h3><p>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p><p>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为复杂。</p><h3 id="redis为什么这么快">Redis为什么这么快</h3><p>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；</p><p>2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p><p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、使用多路 I/O 复用模型，非阻塞 IO；</p><p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p><h2 id="数据类型">数据类型</h2><h3 id="redis有哪些数据类型">Redis有哪些数据类型</h3><p>Redis主要有5种数据类型，包括String，List，Set，Zset，Hash，满足大部分的使用要求</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">可以存储的值</th><th style="text-align:center">操作</th><th style="text-align:center">应用场景</th></tr></thead><tbody><tr><td style="text-align:center">STRING</td><td style="text-align:center">字符串、整数或者浮点数</td><td style="text-align:center">对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作</td><td style="text-align:center">做简单的键值对缓存</td></tr><tr><td style="text-align:center">LIST</td><td style="text-align:center">列表</td><td style="text-align:center">从两端压入或者弹出元素 对单个或者多个元素进行修剪， 只保留一个范围内的元素</td><td style="text-align:center">存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据</td></tr><tr><td style="text-align:center">SET</td><td style="text-align:center">无序集合</td><td style="text-align:center">添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素</td><td style="text-align:center">交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集</td></tr><tr><td style="text-align:center">HASH</td><td style="text-align:center">包含键值对的无序散列表</td><td style="text-align:center">添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在</td><td style="text-align:center">结构化的数据，比如一个对象</td></tr><tr><td style="text-align:center">ZSET</td><td style="text-align:center">有序集合</td><td style="text-align:center">添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名</td><td style="text-align:center">去重但可以排序，如获取排名前几名的用户</td></tr></tbody></table><h3 id="redis的应用场景">Redis的应用场景</h3><p><strong>总结一</strong></p><p>计数器</p><p>可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p><p>缓存</p><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p><p>会话缓存</p><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><p>全页缓存（FPC）</p><p>除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>查找表</p><p>例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p><p>消息队列(发布/订阅功能)</p><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</p><p>分布式锁实现</p><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p><p>其它</p><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</p><p><strong>总结二</strong></p><p>Redis相比其他缓存，有一个非常大的优势，就是支持多种数据类型。</p><p>数据类型说明string字符串，最简单的k-v存储hashhash格式，value为field和value，适合ID-Detail这样的场景。list简单的list，顺序列表，支持首位或者末尾插入数据set无序list，查找速度快，适合交集、并集、差集处理sorted set有序的set</p><p>其实，通过上面的数据类型的特性，基本就能想到合适的应用场景了。</p><p>string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。</p><p>hash——一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。</p><p>list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：消息队列等。<br>set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。</p><p>Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。</p><p>如上所述，虽然Redis不像关系数据库那么复杂的数据结构，但是，也能适合很多场景，比一般的缓存数据结构要多。了解每种数据结构适合的业务场景，不仅有利于提升开发效率，也能有效利用Redis的性能。</p><h2 id="持久化">持久化</h2><h3 id="什么是redis持久化？">什么是Redis持久化？</h3><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p><h3 id="redis-的持久化机制是什么？各自的优缺点？">Redis 的持久化机制是什么？各自的优缺点？</h3><p>Redis 提供两种持久化机制 RDB（默认） 和 AOF 机制:</p><p>RDB：是Redis DataBase缩写快照</p><p>RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311645562.png" alt="image-20230131164545525" style="zoom:67%;" /><p>优点：</p><ul><li>1、只有一个文件 dump.rdb，方便持久化。</li><li>2、容灾性好，一个文件可以保存到安全的磁盘。</li><li>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</li><li>4.相对于数据集大时，比 AOF 的启动效率更高。</li></ul><p>缺点：</p><ul><li>1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候</li><li>2、AOF（Append-only file)持久化方式： 是指所有的命令行记录以 redis 命令请 求协议的格式完全持久化存储)保存为 aof 文件。</li></ul><p>AOF：持久化</p><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p><p>当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311647120.png" alt="image-20230131164713055" style="zoom:67%;" /><p>优点：</p><ul><li>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</li><li>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</li><li>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</li></ul><p>缺点：</p><ul><li>1、AOF 文件比 RDB 文件大，且恢复速度慢。</li><li>2、数据集大的时候，比 rdb 启动效率低。</li></ul><p>优缺点是什么？</p><ul><li>AOF文件比RDB更新频率高，优先使用AOF还原数据。</li><li>AOF比RDB更安全也更大</li><li>RDB性能比AOF好</li><li>如果两个都配了优先加载AOF</li></ul><h3 id="如何选择合适的持久化方式">如何选择合适的持久化方式</h3><ul><li><p>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p></li><li><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</p></li><li><p>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。</p></li><li><p>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</p></li></ul><h3 id="redis持久化数据和缓存怎么做扩容？">Redis持久化数据和缓存怎么做扩容？</h3><ul><li>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。</li><li>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。</li></ul><h2 id="过期键的删除策略">过期键的删除策略</h2><h3 id="redis的过期键的删除策略">Redis的过期键的删除策略</h3><p>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</p><p>过期策略通常有以下三种：</p><ul><li><p>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</p></li><li><p>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。</p></li></ul><ul><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。<br>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)</li></ul><p>Redis中同时使用了惰性过期和定期过期两种过期策略。</p><h3 id="redis-key的过期时间和永久有效分别怎么设置？">Redis key的过期时间和永久有效分别怎么设置？</h3><p>EXPIRE和PERSIST命令。</p><h3 id="我们知道通过expire来设置key-的过期时间-那么对过期的数据怎么处理呢">我们知道通过expire来设置key 的过期时间，那么对过期的数据怎么处理呢?</h3><p>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：</p><ol><li>定时去清理过期的缓存；</li><li>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</li></ol><p>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</p><h2 id="内存相关">内存相关</h2><h3 id="mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据">MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><p>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><h3 id="redis的内存淘汰策略有哪些">Redis的内存淘汰策略有哪些</h3><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><p><strong>全局的键空间选择性移除</strong></p><ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是<strong>最常用</strong>的）</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ul><p><strong>设置过期时间的键空间选择性移除</strong></p><ul><li><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</p></li><li><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</p></li><li><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p></li></ul><p><strong>总结</strong></p><p>Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</p><h3 id="redis主要消耗什么物理资源？">Redis主要消耗什么物理资源？</h3><p>内存。</p><h3 id="redis的内存用完了会发生什么？">Redis的内存用完了会发生什么？</h3><p>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><h3 id="redis如何做内存优化？">Redis如何做内存优化？</h3><p>可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应该把这个用户的所有信息存储到一张散列表里面线程模型</p><h3 id="redis线程模型">Redis线程模型</h3><p>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><h2 id="事务">事务</h2><h3 id="什么是事务？">什么是事务？</h3><p>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><h3 id="redis事务的概念">Redis事务的概念</h3><p>Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p><h3 id="redis事务的三个阶段">Redis事务的三个阶段</h3><ol><li><p>事务开始 MULTI</p></li><li><p>命令入队</p></li><li><p>事务执行 EXEC</p></li></ol><p>事务执行过程中，如果服务端收到有EXEC、DISCARD、WATCH、MULTI之外的请求，将会把请求放入队列中排队</p><h3 id="redis事务相关命令">Redis事务相关命令</h3><p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的</p><p>Redis会将一个事务中的所有命令序列化，然后按顺序执行。</p><ol><li><strong>redis 不支持回滚</strong>，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。</li><li><strong>如果在一个事务中的命令出现错误，那么所有的命令都不会执行</strong>；</li><li><strong>如果在一个事务中出现运行错误，那么正确的命令会被执行</strong>。</li></ol><ul><li>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。</li><li>MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。</li></ul><ul><li>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。</li><li>通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。</li><li>UNWATCH命令可以取消watch对所有key的监控。</li></ul><h3 id="事务管理-acid-概述">事务管理（ACID）概述</h3><p>原子性（Atomicity）<br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p>一致性（Consistency）</p><p>事务前后数据的完整性必须保持一致。</p><p>隔离性（Isolation）<br>多个事务并发执行时，一个事务的执行不应影响其他事务的执行</p><p>持久性（Durability）<br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><p><strong>Redis的事务总是具有ACID中的一致性和隔离性</strong>，其他特性是不支持的。当服务器运行在<em>AOF</em>持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</p><h3 id="redis事务支持隔离性吗">Redis事务支持隔离性吗</h3><p>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，<strong>Redis 的事务是总是带有隔离性的</strong>。</p><h3 id="redis事务保证原子性吗-支持回滚吗">Redis事务保证原子性吗，支持回滚吗</h3><p>Redis中，单条命令是原子性执行的，但<strong>事务不保证原子性，且没有回滚</strong>。事务中任意命令执行失败，其余的命令仍会被执行。</p><h3 id="redis事务其他实现">Redis事务其他实现</h3><ul><li><p>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，<br>其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完</p></li><li><p>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐</p></li></ul><h2 id="集群方案">集群方案</h2><h3 id="哨兵模式">哨兵模式</h3><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311654118.png" alt="image-20230131165422933" style="zoom:67%;" /><p><strong>哨兵的介绍</strong></p><p>sentinel，中文名是哨兵。哨兵是 redis 集群机构中非常重要的一个组件，主要有以下功能：</p><ul><li>集群监控：负责监控 redis master 和 slave 进程是否正常工作。</li><li>消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li><li>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。</li><li>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。</li></ul><p><strong>哨兵用于实现 redis 集群的高可用</strong>，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。</p><ul><li><p>故障转移时，判断一个 master node 是否宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题。</p></li><li><p>即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了。</p></li></ul><p><strong>哨兵的核心知识</strong></p><ul><li>哨兵至少需要 3 个实例，来保证自己的健壮性。</li><li>哨兵 + redis 主从的部署架构，是<strong>不保证数据零丢失</strong>的，只能保证 redis 集群的高可用性。</li><li>对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。</li></ul><h3 id="官方redis-cluster-方案-服务端路由查询">官方Redis Cluster 方案(服务端路由查询)</h3><p>redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？</p><p><strong>简介</strong></p><p>Redis Cluster是一种服务端Sharding技术，3.0版本开始正式提供。Redis Cluster并没有使用一致性hash，而是采用slot(槽)的概念，一共分成16384个槽。将请求发送到任意节点，接收到请求的节点会将查询请求发送到正确的节点上执行</p><p><strong>方案说明</strong></p><ol><li><p>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽(哈希值)区间的数据，默认分配了16384 个槽位</p></li><li><p>每份数据分片会存储在多个互为主从的多节点上</p></li><li><p>数据写入先写主节点，再同步到从节点(支持配置为阻塞同步)</p></li><li><p>同一分片多个节点间的数据不保持一致性</p></li><li><p>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点</p></li><li><p>扩容时时需要需要把旧节点的数据迁移一部分到新节点</p></li></ol><p>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w 的端口号，比如 16379。</p><p>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，<strong>gossip</strong> 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><p><strong>节点间的内部通信机制</strong></p><p>基本通信原理</p><p>集群元数据的维护有两种方式：集中式、Gossip 协议。redis cluster 节点间采用 gossip 协议进行通信。</p><p><strong>分布式寻址算法</strong></p><ul><li>hash 算法（大量缓存重建）</li><li>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）</li><li>redis cluster 的 hash slot 算法</li></ul><p><strong>优点</strong></p><ul><li>无中心架构，支持动态扩容，对业务透明</li><li>具备Sentinel的监控和自动Failover(故障转移)能力</li><li>客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可</li><li>高性能，客户端直连redis服务，免去了proxy代理的损耗</li></ul><p><strong>缺点</strong></p><ul><li>运维也很复杂，数据迁移需要人工干预</li><li>只能使用0号数据库</li><li>不支持批量操作(pipeline管道操作)</li><li>分布式逻辑和存储模块耦合等</li></ul><h3 id="基于客户端分配">基于客户端分配</h3><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311658319.png" alt="image-20230131165804257" style="zoom: 67%;" /><p><strong>简介</strong></p><p>Redis Sharding是Redis Cluster出来之前，业界普遍使用的多Redis实例集群方法。其主要思想是采用哈希算法将Redis数据的key进行散列，通过hash函数，特定的key会映射到特定的Redis节点上。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool</p><p><strong>优点</strong></p><p>优势在于非常简单，服务端的Redis实例彼此独立，相互无关联，每个Redis实例像单服务器一样运行，非常容易线性扩展，系统的灵活性很强</p><p><strong>缺点</strong></p><ul><li>由于sharding处理放到客户端，规模进一步扩大时给运维带来挑战。</li><li>客户端sharding不支持动态增删节点。服务端Redis实例群拓扑结构有变化时，每个客户端都需要更新调整。连接不能共享，当应用规模增大时，资源浪费制约优化</li></ul><h3 id="基于代理服务器分片">基于代理服务器分片</h3><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311659625.png" alt="image-20230131165901572" style="zoom:67%;" /><p><strong>简介</strong></p><p>客户端发送请求到一个代理组件，代理解析客户端的数据，并将请求转发至正确的节点，最后将结果回复给客户端</p><p><strong>特征</strong></p><ul><li>透明接入，业务程序不用关心后端Redis实例，切换成本低</li><li>Proxy 的逻辑和存储的逻辑是隔离的</li><li>代理层多了一次转发，性能有所损耗</li></ul><p><strong>业界开源方案</strong></p><ul><li>Twtter开源的Twemproxy</li><li>豌豆荚开源的Codis</li></ul><h3 id="redis-主从架构">Redis 主从架构</h3><p>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑<strong>读高并发</strong>的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的 slave 节点，从节点负责读。所有的<strong>读请求全部走从节点</strong>。这样也可以很轻松实现水平扩容，<strong>支撑读高并发</strong>。<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311700471.png" alt="20200115180329317"></p><p>redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发</p><p><strong>redis replication 的核心机制</strong></p><ul><li><p>redis 采用<strong>异步方式</strong>复制数据到 slave 节点，不过 redis2.8 开始，slave node 会周期性地确认自己每次复制的数据量；</p></li><li><p>一个 master node 是可以配置多个 slave node 的；</p></li><li><p>slave node 也可以连接其他的 slave node；</p></li><li><p>slave node 做复制的时候，不会 block master node 的正常工作；</p></li></ul><ul><li>slave node 在做复制的时候，也不会 block 对自己的查询操作，它会用旧的数据集来提供服务；但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了；</li><li>slave node 主要用来进行横向扩容，做读写分离，扩容的 slave node 可以提高读的吞吐量。</li></ul><p>注意，如果采用了主从架构，那么建议必须<strong>开启</strong> master node 的持久化，不建议用 slave node 作为 master node 的数据热备，因为那样的话，如果你关掉 master 的持久化，可能在 master 宕机重启的时候数据是空的，然后可能一经过复制， slave node 的数据也丢了。</p><p>另外，master 的各种备份方案，也需要做。万一本地的所有文件丢失了，从备份中挑选一份 rdb 去恢复 master，这样才能<strong>确保启动的时候，是有数据的</strong>，即使采用了后续讲解的高可用机制，slave node 可以自动接管 master node，但也可能 sentinel 还没检测到 master failure，master node 就自动重启了，还是可能导致上面所有的 slave node 数据被清空。</p><p><strong>redis 主从复制的核心原理</strong></p><p>当启动一个 slave node 的时候，它会发送一个 <code>PSYNC</code> 命令给 master node。</p><p>如果这是 slave node 初次连接到 master node，那么会触发一次 <code>full resynchronization</code> 全量复制。此时 master 会启动一个后台线程，开始生成一份 <code>RDB</code> 快照文件，</p><p>同时还会将从客户端 client 新收到的所有写命令缓存在内存中。<code>RDB</code> 文件生成完毕后， master 会将这个 <code>RDB</code> 发送给 slave，slave 会先<strong>写入本地磁盘，然后再从本地磁盘加载到内存</strong>中</p><p>接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。</p><p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311702157.png" alt="20200115180337645"></p><p><strong>过程原理</strong></p><ol><li><p>当从库和主库建立MS关系后，会向主数据库发送SYNC命令</p></li><li><p>主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程)，并将期间接收到的写命令缓存起来</p></li><li><p>当快照完成后，主Redis会将快照文件和所有缓存的写命令发送给从Redis</p></li><li><p>从Redis接收到后，会载入快照文件并且执行收到的缓存的命令</p></li><li><p>之后，主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致</p></li></ol><p><strong>缺点</strong></p><p>所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主从从结构来解决</p><h3 id="redis集群的主从复制模型是怎样的？">Redis集群的主从复制模型是怎样的？</h3><p>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型，每个节点都会有N-1个复制品</p><h3 id="生产环境中的-redis-是怎么部署的？">生产环境中的 redis 是怎么部署的？</h3><p>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p><p>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>5 台机器对外提供读写，一共有 50g 内存。</p><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。</p><p>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p><h3 id="说说redis哈希槽的概念？">说说Redis哈希槽的概念？</h3><p>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</p><h3 id="redis集群会有写操作丢失吗？为什么？">Redis集群会有写操作丢失吗？为什么？</h3><p>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><h3 id="redis集群之间是如何复制的？">Redis集群之间是如何复制的？</h3><p>异步复制</p><h3 id="redis集群最大节点个数是多少？">Redis集群最大节点个数是多少？</h3><p>16384个</p><h3 id="redis集群如何选择数据库？">Redis集群如何选择数据库？</h3><p>Redis集群目前无法做数据库选择，默认在0数据库。</p><h2 id="分区">分区</h2><h3 id="redis是单线程的-如何提高多核cpu的利用率？">Redis是单线程的，如何提高多核CPU的利用率？</h3><p>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。</p><h3 id="为什么要做redis分区？">为什么要做Redis分区？</h3><p>分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升，Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。</p><h3 id="你知道有哪些redis分区实现方案？">你知道有哪些Redis分区实现方案？</h3><ul><li><p>客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。</p></li><li><p>代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy</p></li></ul><ul><li>查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。</li></ul><h3 id="redis分区有什么缺点？">Redis分区有什么缺点？</h3><ul><li>涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。</li><li>同时操作多个key,则不能使用Redis事务.</li><li>分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集（The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set）</li><li>当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。</li><li>分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。</li></ul><h2 id="分布式问题">分布式问题</h2><h3 id="redis实现分布式锁">Redis实现分布式锁</h3><p>Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问，且多客户端对Redis的连接并不存在竞争关系Redis中可以使用SETNX命令实现分布式锁。</p><p>当且仅当 key 不存在，将 key 的值设为 value。 若给定的 key 已经存在，则 SETNX 不做任何动作</p><p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p><p>返回值：设置成功，返回 1 。设置失败，返回 0 。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311706001.png" alt="20191213103148681" style="zoom:80%;" /><p>使用SETNX完成同步锁的流程及事项如下：</p><p>使用SETNX命令获取锁，若返回0（key已存在，锁已存在）则获取失败，反之获取成功</p><p>为了防止获取锁后程序出现异常，导致其他线程/进程调用SETNX命令总是返回0而进入死锁状态，需要为该key设置一个“合理”的过期时间</p><p>释放锁，使用DEL命令将锁数据删除</p><h3 id="如何解决-redis-的并发竞争-key-问题">如何解决 Redis 的并发竞争 Key 问题</h3><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同！</p><p>推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</p><p>基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。</p><p>在实践中，当然是从以可靠性为主。所以首推Zookeeper。</p><h3 id="分布式redis是前期做还是后期规模上来了再做好？为什么？">分布式Redis是前期做还是后期规模上来了再做好？为什么？</h3><p>既然Redis是如此的轻量（单实例只使用1M内存），为防止以后的扩容，最好的办法就是一开始就启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分区，在同一台服务器上启动多个实例。</p><p>一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻烦，但是从长久来看做这点牺牲是值得的。</p><p>这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。</p><h3 id="什么是-redlock">什么是 RedLock</h3><p>Redis 官方站提出了一种权威的基于 Redis 实现分布式锁的方式名叫 <em>Redlock</em>，此种方式比原先的单节点的方法更安全。它可以保证以下特性：</p><ol><li>安全特性：互斥访问，即永远只有一个 client 能拿到锁</li><li>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使原本锁住某资源的 client crash 了或者出现了网络分区</li><li>容错性：只要大部分 Redis 节点存活就可以正常提供服务</li></ol><h2 id="缓存异常">缓存异常</h2><h3 id="缓存雪崩">缓存雪崩</h3><p><strong>缓存雪崩</strong>是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p><strong>解决方案</strong></p><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。</li><li>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。</li></ol><h3 id="缓存穿透">缓存穿透</h3><p><strong>缓存穿透</strong>是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p><strong>解决方案</strong></p><ol><li><p>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</p></li><li><p>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</p></li><li><p>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力</p></li></ol><p><strong>附加</strong></p><p>对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。<br>Bitmap： 典型的就是哈希表<br>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了。</p><p>布隆过滤器（推荐）</p><p>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。</p><p>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。<br>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。</p><p>Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。<br>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><h3 id="缓存击穿">缓存击穿</h3><p><strong>缓存击穿</strong>是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><strong>解决方案</strong></p><ol><li>设置热点数据永远不过期。</li><li>加互斥锁，互斥锁</li></ol><h3 id="缓存预热">缓存预热</h3><p><strong>缓存预热</strong>就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p><strong>解决方案</strong></p><ol><li>直接写个缓存刷新页面，上线时手工操作一下；</li><li>数据量不大，可以在项目启动的时候自动进行加载；</li><li>定时刷新缓存；</li></ol><h3 id="缓存降级">缓存降级</h3><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p><strong>缓存降级</strong>的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p><ol><li><p>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p></li><li><p>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p></li><li><p>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p></li><li><p>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p></li></ol><p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。</p><h3 id="热点数据和冷数据">热点数据和冷数据</h3><p>热点数据，缓存才有价值</p><p>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。频繁修改的数据，看情况考虑使用缓存</p><p>对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。</p><p>数据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了。</p><p>那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。</p><h3 id="缓存热点key">缓存热点key</h3><p>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><strong>解决方案</strong></p><p>对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询</p><h2 id="常用工具">常用工具</h2><h3 id="redis支持的java客户端都有哪些？官方推荐用哪个？">Redis支持的Java客户端都有哪些？官方推荐用哪个？</h3><p>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。</p><h3 id="redis和redisson有什么关系？">Redis和Redisson有什么关系？</h3><p>Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)。</p><h3 id="jedis与redisson对比有什么优缺点？">Jedis与Redisson对比有什么优缺点？</h3><p>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><h2 id="其他问题">其他问题</h2><h3 id="redis与memcached的区别">Redis与Memcached的区别</h3><p>两者都是非关系型内存键值数据库，现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！Redis 与 Memcached 主要有以下不同：</p><table><thead><tr><th style="text-align:center">对比参数</th><th style="text-align:center">Redis</th><th style="text-align:center">Memcached</th></tr></thead><tbody><tr><td style="text-align:center">类型</td><td style="text-align:center">1. 支持内存 2. 非关系型数据库</td><td style="text-align:center">1. 支持内存 2. 键值对形式 3. 缓存形式</td></tr><tr><td style="text-align:center"><strong>数据存储类型</strong></td><td style="text-align:center">1. String 2. List 3. Set 4. Hash 5. Sort Set 【俗称ZSet】</td><td style="text-align:center">1. 文本型 2. 二进制类型</td></tr><tr><td style="text-align:center">查询【操作】类型</td><td style="text-align:center">1. 批量操作 2. 事务支持 3. 每个类型不同的CRUD</td><td style="text-align:center">1.常用的CRUD 2. 少量的其他命令</td></tr><tr><td style="text-align:center">附加功能</td><td style="text-align:center">1. 发布/订阅模式 2. 主从分区 3. 序列化支持 4. 脚本支持【Lua脚本】</td><td style="text-align:center">1. 多线程服务支持</td></tr><tr><td style="text-align:center"><strong>网络IO模型</strong></td><td style="text-align:center">1. 单线程的多路 IO 复用模型</td><td style="text-align:center">1. 多线程，非阻塞IO模式</td></tr><tr><td style="text-align:center">事件库</td><td style="text-align:center">自封转简易事件库AeEvent</td><td style="text-align:center">贵族血统的LibEvent事件库</td></tr><tr><td style="text-align:center"><strong>持久化支持</strong></td><td style="text-align:center">1. RDB 2. AOF</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center"><strong>集群模式</strong></td><td style="text-align:center">原生支持 cluster 模式，可以实现主从复制，读写分离</td><td style="text-align:center">没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据</td></tr><tr><td style="text-align:center">内存管理机制</td><td style="text-align:center">在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘</td><td style="text-align:center">Memcached 的数据则会一直在内存中，Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</td></tr><tr><td style="text-align:center"><strong>适用场景</strong></td><td style="text-align:center">复杂数据结构，有持久化，高可用需求，value存储内容较大</td><td style="text-align:center">纯key-value，数据量非常大，并发量非常大的业务</td></tr></tbody></table><p>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</p><p>(2) redis的速度比memcached快很多</p><p>(3) redis可以持久化其数据</p><h3 id="如何保证缓存与数据库双写时的数据一致性？">如何保证缓存与数据库双写时的数据一致性？</h3><p>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况</p><p>串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><p>还有一种方式就是可能会暂时产生不一致的情况，但是发生的几率特别小，就是<strong>先更新数据库，然后再删除缓存。</strong></p><table><thead><tr><th style="text-align:center">问题场景</th><th style="text-align:center">描述</th><th style="text-align:center">解决</th></tr></thead><tbody><tr><td style="text-align:center">先写缓存，再写数据库，缓存写成功，数据库写失败</td><td style="text-align:center">缓存写成功，但写数据库失败或者响应延迟，则下次读取（并发读）缓存时，就出现脏读</td><td style="text-align:center">这个写缓存的方式，本身就是错误的，需要改为先写数据库，把旧缓存置为失效；读取数据的时候，如果缓存不存在，则读取数据库再写缓存</td></tr><tr><td style="text-align:center">先写数据库，再写缓存，数据库写成功，缓存写失败</td><td style="text-align:center">写数据库成功，但写缓存失败，则下次读取（并发读）缓存时，则读不到数据</td><td style="text-align:center">缓存使用时，假如读缓存失败，先读数据库，再回写缓存的方式实现</td></tr><tr><td style="text-align:center">需要缓存异步刷新</td><td style="text-align:center">指数据库操作和写缓存不在一个操作步骤中，比如在分布式场景下，无法做到同时写缓存或需要异步刷新（补救措施）时候</td><td style="text-align:center">确定哪些数据适合此类场景，根据经验值确定合理的数据不一致时间，用户数据刷新的时间间隔</td></tr></tbody></table><h3 id="redis常见性能问题和解决方案？">Redis常见性能问题和解决方案？</h3><ol><li><p>Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化。</p></li><li><p>如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</p></li><li><p>为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。</p></li><li><p>尽量避免在压力较大的主库上增加从库</p></li><li><p>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</p></li><li><p>为了Master的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：Master&lt;–Slave1&lt;–Slave2&lt;–Slave3…，这样的结构也方便解决单点故障问题，实现Slave对Master的替换，也即，如果Master挂了，可以立马启用Slave1做Master，其他不变。</p></li></ol><h3 id="redis官方为什么不提供windows版本？">Redis官方为什么不提供Windows版本？</h3><p>因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。</p><h3 id="一个字符串类型的值能存储最大容量是多少？">一个字符串类型的值能存储最大容量是多少？</h3><p>512M</p><h3 id="redis如何做大量数据插入？">Redis如何做大量数据插入？</h3><p>Redis2.6开始redis-cli支持一种新的被称之为pipe mode的新模式用于执行大量数据插入工作。</p><h3 id="假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来？">假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？</h3><p>使用keys指令可以扫出指定模式的key列表。</p><p>对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</p><p>这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p><h3 id="使用redis做过异步队列吗-是如何实现的">使用Redis做过异步队列吗，是如何实现的</h3><p>使用list类型保存数据信息，rpush生产消息，lpop消费消息，当lpop没有消息时，可以sleep一段时间，然后再检查有没有信息，如果不想sleep的话，可以使用blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis可以通过pub/sub主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p><h3 id="redis如何实现延时队列">Redis如何实现延时队列</h3><p>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用zrangbyscore获取n秒之前的数据做轮询处理。</p><h3 id="redis回收进程如何工作的？">Redis回收进程如何工作的？</h3><ol><li>一个客户端运行了新的命令，添加了新的数据。</li><li>Redis检查内存使用情况，如果大于maxmemory的限制， 则根据设定好的策略进行回收。</li><li>一个新的命令被执行，等等。</li><li>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。</li></ol><p>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><h3 id="redis回收使用的是什么算法？">Redis回收使用的是什么算法？</h3><p>LRU算法</p><h2 id="整理的其他面试题">整理的其他面试题</h2><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://www.php.cn/redis/458425.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.php.cn/redis/458425.html.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">2023年最新redis面试题大全及答案（收藏）</div>            <div class="tag-link-sitename"> https://www.php.cn/redis/458425.html</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://www.jianshu.com/p/65765dd10671">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.jianshu.com/p/65765dd10671.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Redis面试题总结</div>            <div class="tag-link-sitename"> https://www.jianshu.com/p/65765dd10671</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://zhuanlan.zhihu.com/p/91539644">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/zhuanlan.zhihu.com/p/91539644.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">《进大厂系列》系列-Redis常见面试题（带答案）</div>            <div class="tag-link-sitename"> https://zhuanlan.zhihu.com/p/91539644</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;h3 id=&quot;什么是redis&quot;&gt;什么是Redis&lt;/h3&gt;
&lt;p&gt;Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（十一）进阶：Redis缓存穿透、击穿和雪崩的理解和学习</title>
    <link href="https://www.yuanyuanblog.me/posts/7e1ba8ba.html"/>
    <id>https://www.yuanyuanblog.me/posts/7e1ba8ba.html</id>
    <published>2023-01-28T21:09:23.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis的缓存穿透">Redis的缓存穿透</h2><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311734716.png" alt="image-20230131173419648" style="zoom:67%;" /><p>1、<strong>概念：</strong><br>用户需要查询一个数据，但是redis中没有（比如说mysql中id=-1的数），直接去请求MySQL，当很多用户同时请求并且都么有命中！于是都去请求了持久层的数据库，那么这样会给持久层数据库带来非常大的压力。一般出现这样的情况都不是正常用户，基本上都是恶意用户！</p><p>2、<strong>解决方案</strong><br>①<strong>布隆过滤器：</strong></p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311735980.png" alt="image-20230131173544908" style="zoom:67%;" /><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则<br>丢弃，从而避免了对底层存储系统的查询压力；<br>②<strong>缓存空对象：</strong></p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311736906.png" alt="image-20230131173604831" style="zoom:67%;" /><p>当存储层查不到，即使是空值，我们也将其存储起来并且在Redis中设置一个过期时间，之后再访问这个数据将会从Redis中访问，保护了持久层的数据库！</p><p>③<strong>存在的问题：</strong><br>1）如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；<br>2）即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><p><strong>注意：缓存穿透前提是：Redis和MySQL中都没有，然后不停的直接请求MySQL。</strong></p><h2 id="redis的缓存击穿">Redis的缓存击穿</h2><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311737120.png" alt="image-20230131173731073" style="zoom: 80%;" /><p>1、<strong>概念：</strong><br>是指一个非常热点的key，在不停的扛着大并发，当这个key失效时，一瞬间大量的请求冲到持久层的数据库中，就像在一堵墙上某个点凿开了一个洞！</p><p>2、<strong>解决方案：</strong><br>①<strong>设置热点key永不过期：</strong></p><p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。<br>②<strong>加互斥锁：</strong></p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311737595.png" alt="image-20230131173754548" style="zoom: 50%;" /><p>在查询持久层数据库时，保证了只有一个线程能够进行持久层数据查询，其他的线程让它睡眠几百毫秒，等待第一个线程查询完会回写到Redis缓存当中，剩下的线程可以正常查询Redis缓存，就不存在大量请求去冲击持久层数据库了！</p><p>③<strong>缺点：</strong><br>其实设置<strong>永不过期</strong>不合理！</p><h2 id="redis的缓存雪崩">Redis的缓存雪崩</h2><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311738347.png" alt="image-20230131173858307" style="zoom:80%;" /><p>1、<strong>概念：</strong><br>在某一个时间段，缓存的key大量集中同时过期了，所有的请求全部冲到持久层数据库上，导致持久层数据库挂掉！</p><p>范例：双十一零点抢购，这波商品比较集中的放在缓存，设置了失效时间为1个小时，那么到了零点，这批缓存全部失效了，而大量的请求过来时，全部冲过了缓存，冲到了持久层数据库！<br>2、<strong>解决方案：</strong></p><p>①<strong>Redis高可用：</strong><br>搭建Redis集群，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p><p>②<strong>限流降级：</strong><br>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p>③<strong>数据预热：</strong><br>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，<strong>让缓存失效的时间点尽量均匀</strong> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis的缓存穿透&quot;&gt;Redis的缓存穿透&lt;/h2&gt;
&lt;img src=&quot;https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311734716.png&quot; alt=&quot;image-2</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（十）进阶：Redis集群之哨兵模式的学习和理解</title>
    <link href="https://www.yuanyuanblog.me/posts/80a2964d.html"/>
    <id>https://www.yuanyuanblog.me/posts/80a2964d.html</id>
    <published>2023-01-28T21:09:18.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在Redis集群中我们讲到了，主机断开后，我们得手动设置另一个从机变成主机！这是不智能的！在实际工作中，我们都是用哨兵模式来自动切换主机。通俗点讲，就是自己去选择‘<strong>大哥</strong>’！</p><h2 id="概述">概述</h2><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 <strong>哨兵模式</strong> 。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。</p><p><strong>谋朝篡位</strong> 的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的 <strong>进程</strong> ，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><h2 id="配置哨兵">配置哨兵</h2><p>1、添加哨兵配置文件 sentinel.conf</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311749168.png" alt="20210126163100824"></p><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 1 （代表自动投票选举大哥！）</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>2、启动哨兵<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel dyjConfig/sentinel.conf   <span class="comment">#和启动Redis一致</span></span><br></pre></td></tr></table></figure><p>启动成功后如下图:</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311748506.png" alt="image-20230131174831462" style="zoom: 67%;" /><p>3、前提准备条件：<br>开启一台主机，两台从机，一主二从时最基本的！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311751848.png" alt="image-20230131175108812" style="zoom:67%;" /><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311751064.png" alt="image-20230131175120036" style="zoom: 80%;" /><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311751439.png" alt="image-20230131175131411" style="zoom:80%;" /><p>4、测试主机宕机后自动选取大哥，如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311751345.png" alt="image-20230131175152317" style="zoom:67%;" /><p>等待哨兵的默认配置时间时 30 秒！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311752542.png" alt="image-20230131175231450" style="zoom:67%;" /><p>再次查看redis信息：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311752755.png" alt="image-20230131175250725" style="zoom: 80%;" /><p>可以发现8381变成主机，8380依旧是从机！</p><p>我们将老大哥主机连接试试！可以发现6379变成从机了，由大哥变为小弟！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311753265.png" alt="image-20230131175313231" style="zoom:80%;" /><p>而6381成功成为主机大哥大！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311753033.png" alt="image-20230131175339993" style="zoom:80%;" /><h2 id="总结">总结</h2><p>1、优点<br>①哨兵集群，<strong>基于主从复制模式</strong> ，所有的主从配置优点，它全有<br>②主从可以切换，<strong>故障可以转移</strong> ，系统的 <strong>可用性</strong> 就会更好<br>③哨兵模式就是主从模式的升级，手动到自动，更加<strong>健壮！</strong></p><p>2、缺点<br>①Redis <strong>不好在线扩容</strong> 的，集群容量一旦到达上限，在线扩容就十分麻烦！<br>②实现哨兵模式的配置其实是很 <strong>麻烦</strong> 的，里面有很多选择！</p><p>3、注意点：以上所有的配置因为条件所限都是基于单机集群的前提下！有兴趣的可以自己搭建下正式集群下的多哨兵模式来监控！如下图：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311754173.png" alt="image-20230131175427122" style="zoom:67%;" /><p>4、哨兵的配置文件解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379 </span><br><span class="line">port 26379 </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel的工作目录 </span><br><span class="line">dir /tmp </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。 </span><br><span class="line"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了 </span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt; sentinel monitor mymaster 127.0.0.1 6379 2 </span><br><span class="line"></span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供 密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码 </span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt; </span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd </span><br><span class="line"></span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒 </span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt; </span><br><span class="line">sentinel down-after-milliseconds mymaster 30000 </span><br><span class="line"></span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步</span><br><span class="line">#这个数字越小，完成failover所需的时间就越长，</span><br><span class="line"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。 </span><br><span class="line">#可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。 </span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt; </span><br><span class="line">sentinel parallel-syncs mymaster 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。 </span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那 里同步数据时。 </span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。 </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时， slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了 </span><br><span class="line"># 默认三分钟 # sentinel failover-timeout &lt;master-name&gt; </span><br><span class="line">sentinel failover-timeout mymaster 180000 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SCRIPTS EXECUTION #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知 相关人员。 </span><br><span class="line">#对于脚本的运行结果有以下规则： </span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10 #若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。 </span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。 </span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。 </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等）， 将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信 息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配 置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无 法正常启动成功。 </span><br><span class="line">#通知脚本 </span><br><span class="line"># shell编程 </span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt; </span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 客户端重新配置主节点参数脚本 </span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已 经发生改变的信息。 </span><br><span class="line"># 以下参数将会在调用脚本时传给脚本: </span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt; </span><br><span class="line"># 目前&lt;state&gt;总是“failover”, </span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通 信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。 </span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt; </span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh </span><br><span class="line"># 一般都是由运维来配置！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在Redis集群中我们讲到了，主机断开后，我们得手动设置另一个从机变成主机！这是不智能的！在实际工作中，我们都是用哨兵模式来自动切换主机。通俗点讲，就是自己去选择‘&lt;strong&gt;大哥&lt;/strong&gt;’！&lt;/p&gt;
&lt;h2 id=&quot;概</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（九）进阶：Redis集群之如何配置主从复制模式？</title>
    <link href="https://www.yuanyuanblog.me/posts/26aa5093.html"/>
    <id>https://www.yuanyuanblog.me/posts/26aa5093.html</id>
    <published>2023-01-28T21:09:13.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>默认情况下，每台Redis服务器都是主节点；<br>由于个人服务器性能原因，以下的所有操作都是单机集群的概念！在实际工作中并不会这样配置，而是使用<strong>哨兵模式</strong>来监控！这篇文章的意义主要就是为了让大家了解主从复制这个概念！</p><h2 id="概念">概念</h2><p><strong>主从复制</strong>，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave 以读为主。</p><p>主要作用：<br>①数据冗余：主从复制实现了数据的热备份，是持久化之外的一种<strong>数据冗余</strong>方式。</p><p>②故障恢复：当主节点出现问题时，可以由从节点提供服务，实现<strong>快速的故障恢复</strong>；实际上是一种服务的冗余。</p><p>③负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p><p>④高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p><h2 id="环境配置-单机集群">环境配置（单机集群）</h2><p>1、基本查看命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping  <span class="comment">#测试是否连接成功！</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment">#查看当前redis信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment">#角色--主机</span></span><br><span class="line">connected_slaves:0  <span class="comment">#从机数量为0</span></span><br><span class="line">master_replid:b9565cf2edea63b7e9860f3ef1a170d59ff7a4d4  <span class="comment">#唯一标识的id</span></span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line"><span class="comment">#下面的这些咱不用管他是啥</span></span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>2、开启三台服务：<br>①复制三个配置文件：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311810372.png" alt="20210126143632916"  /><p>②修改以下配置：<br>端口：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311811596.png" alt="20210126143722422" style="zoom: 67%;" /><p>pid名：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311811912.png" alt="20210126143837459" style="zoom:80%;" /><p>log文件名：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311812438.png" alt="2021012614390448" style="zoom:67%;" /><p>dump.rdb名：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311811581.png" alt="2021012614393199" style="zoom: 67%;" /><p>③全部启动并查看：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311807306.png" alt="image-20230131180732247" style="zoom:67%;" /><p>查看所有Redis端口：证明启动成功啦！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311812368.png" alt="20210126144549129" style="zoom:67%;" /><h2 id="一主二从-单机测试">一主二从（单机测试）</h2><p>1、认大哥大!!！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311808861.png" alt="image-20230131180806822" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379  <span class="comment">#让本机认6379的机器为大哥！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication  <span class="comment">#查看信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave  <span class="comment">#从机</span></span><br><span class="line">master_host:127.0.0.1  <span class="comment">#主机ip</span></span><br><span class="line">master_port:6379   <span class="comment">#主机端口</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>2、第二台机器同理，我们看看主机的信息：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311808124.png" alt="image-20230131180846079" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment">#主机</span></span><br><span class="line">connected_slaves:2  <span class="comment">#有两台从机</span></span><br><span class="line"><span class="comment">#从机的ip、端口等信息</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=56,lag=1  </span><br><span class="line"><span class="comment">#从机的ip、端口等信息</span></span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=56,lag=1</span><br></pre></td></tr></table></figure><p>出现以上内容，证明我们配置成功了！<br>3、注意点：这种通过命令的配置是‘一次性的’，如果机器宕机、断电等，就需要重新认大哥大！<br>在实际工作中，我们都是通过配置文件中修改指定配置的！如下图：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311809697.png" alt="image-20230131180912646" style="zoom:67%;" /><p>可以修改以上配置来实现主从机的配置！</p><p>4、测试读写操作：<br>①主机写，从机读<br>写：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311813276.png" alt="20210126150841396"  /><p>读：</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311813885.png" alt="2021012615091430"></p><p>证明主从复制成功了！</p><p>②如果主机断开</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311822200.png" alt="20210126151029554"></p><p>从机可以正常读数据：</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311822690.png" alt="20210126151045629"></p><p>查看从机信息：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311815929.png" alt="image-20230131181505891" style="zoom:80%;" /><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311815452.png" alt="image-20230131181551412" style="zoom: 80%;" /><p>证明，虽然主机断开了，但是从机还是可以正常读取原先就有的数据的！</p><p>③如果断开的主机重新连接上</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311816214.png" alt="image-20230131181610165" style="zoom:67%;" /><p>从机也可正常连接上主机，因为配置了，会自动寻找主机。</p><p>④如果从机断开重连呢？</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311822638.png" alt="20210126151429797"></p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311816156.png" alt="image-20230131181634117" style="zoom: 80%;" /><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311816677.png" alt="image-20230131181646644" style="zoom:80%;" /><p>证明：如果从机断开重连，不会自动连接上主机！因为我们的配置是在从机上写的，而且是命令写的，重启时会重置！<br>⑤从机能写嘛？</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311823578.png" alt="20210126151640666"></p><p>从机只能读，不能写！</p><p>5、复制原理：<br>Slave 启动成功连接到 master 后会发送一个sync同步命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p>**全量复制：**而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p><strong>增量复制：</strong> Master 继续将新的所有收集到的修改命令依次传给slave，完成同步但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中<br>看到！</p><p>6、<strong>层层链路</strong></p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311823953.png" alt="屏幕截图 2023-01-31 181832" style="zoom: 50%;" /><p><strong>这时候也可以完成我们的主从复制！</strong><br>7、谋朝篡位<br>如果主机断开了连接，我们可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF no one</span><br></pre></td></tr></table></figure><p>让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候原来的老大修复了，那就重新连接成为小弟！！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311819195.png" alt="image-20230131181921153" style="zoom:67%;" /><div class="note warning flat"><p>老大没挂，也可以使用这个命令直接让自己变成老大！</p></div><h2 id="总结">总结</h2><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p><p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p><p>2、从容量上，单个Redis服务器内存容量有限，就算一Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该20G。</p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;默认情况下，每台Redis服务器都是主节点；&lt;br&gt;
由于个人服务器性能原因，以下的所有操作都是单机集群的概念！在实际工作中并不会这样配置，而是使用&lt;strong&gt;哨兵模式&lt;/strong&gt;来监控！这篇文章的意义主要就是为了让大家了解</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（八）进阶：Redis如何实现发布订阅功能？</title>
    <link href="https://www.yuanyuanblog.me/posts/10e6fd9c.html"/>
    <id>https://www.yuanyuanblog.me/posts/10e6fd9c.html</id>
    <published>2023-01-28T21:09:03.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><strong>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接受消息。</strong></p><p>Redis客户端可以订阅任意数量的频道！</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311835487.png" alt="image-20230131183508327"></p><h2 id="实现方式：">实现方式：</h2><p>①命令：<br>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311836873.png" alt="image-20230131183600816" style="zoom:80%;" /><p>②发布订阅的实现：<br>1、订阅端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE dingdada  <span class="comment">#订阅名字为 dingdada 的频道</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#等待推送的信息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span>  <span class="comment">#消息</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span>  <span class="comment">#来自哪个频道的消息</span></span><br><span class="line">3) <span class="string">&quot;hello world\xef\xbc\x81&quot;</span>  <span class="comment"># 消息的具体内容</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) <span class="string">&quot;my name is dyj\x81&quot;</span></span><br></pre></td></tr></table></figure><p>2、发送端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH dingdada <span class="string">&quot;hello world！&quot;</span>  <span class="comment">#发送消息到dingdada 频道</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH dingdada <span class="string">&quot;my name is dyj&quot;</span>  <span class="comment">#发送消息到dingdada 频道</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>如图所示：<br>订阅端：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311837061.png" alt="image-20230131183700026" style="zoom:67%;" /><p>发送端：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311837867.png" alt="image-20230131183718835" style="zoom:67%;" /><p>③PSUBSCRIBE 命令：订阅指定频道！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE + 频道。。 <span class="comment">#订阅给定的模式，可多个</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311837258.png" alt="image-20230131183751219" style="zoom:67%;" /><p>④PUBLISH 命令：发送消息至指定频道！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH + 频道 +消息  <span class="comment">#将信息 message 发送到指定的频道 channel</span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311838648.png" alt="image-20230131183819626" style="zoom:67%;" /><p>⑤PUNSUBSCRIBE命令：退订！</p><p>指示客户端退订指定模式，若果没有提供模式则退出所有模式。</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311840735.png" alt="20210126133958978"  /><p>⑥SUBSCRIBE：订阅，同上一致。</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311840007.png" alt="2021012613430393"></p><p>⑦UNSUBSCRIBE：退订，同上一致。</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311840417.png" alt="20210126134337144"></p><p><strong>⑧总结：</strong></p><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的<strong>即时聊天</strong>，<strong>群聊</strong>等功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接受消息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis客户端可以订阅任意数量的频道！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（七）进阶：Redis持久化之RDB和AOF</title>
    <link href="https://www.yuanyuanblog.me/posts/c78d1353.html"/>
    <id>https://www.yuanyuanblog.me/posts/c78d1353.html</id>
    <published>2023-01-28T21:08:58.000Z</published>
    <updated>2023-04-05T08:37:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Redis 是<strong>内存数据库</strong>，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了<strong>持久化功能</strong> !</p><h2 id="rdb-redis-database">RDB（Redis DataBase）</h2><p>①首先我们进入服务器找到dump.rdb文件：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302211349.png" alt="image-20230130221111301" style="zoom: 67%;" /><p>②测试触发rdb操作：vim打开redis.conf配置文件</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302211485.png" alt="image-20230130221141434" style="zoom: 67%;" /><p>为了方便测试，我们将其改为 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save 60 5  <span class="comment">#意思是在60秒内进行了5次操作，即写入rdb文件中进行持久化保存</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302212822.png" alt="image-20230130221218793" style="zoom: 80%;" /><p>③触发机制：<br>1、save的规则满足的情况下，会自动触发rdb规则,测试如下：<br>先手动删除dump.rdb文件，实验触发规则！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302213236.png" alt="image-20230130221304204" style="zoom: 67%;" /><p>在Redis中操作5次命令！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302213466.png" alt="image-20230130221316435" style="zoom: 67%;" /><p>查看是否生成dump.rdb文件!</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302213465.png" alt="image-20230130221336432" style="zoom: 67%;" /><p>2、执行flushall命令，也会触发rdb规则<br>再次删除dump.rdb文件！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302214892.png" alt="image-20230130221401862" style="zoom: 67%;" /><p>执行flushall操作命令！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302214515.png" alt="image-20230130221419484" style="zoom:80%;" /><p>正常生成成功！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302214919.png" alt="image-20230130221447888" style="zoom: 67%;" /><p>3、退出Redis，也会触发rdb规则<br>删除：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302215085.png" alt="image-20230130221508049" style="zoom: 67%;" /><p>退出：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302218793.png" alt="image-20230130221815754" style="zoom: 67%;" /><p>生成成功！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302214919.png" alt="image-20230130221447888" style="zoom: 67%;" /><p>④恢复rdb文件<br>1、只需将备份的rdb文件放在我们的redis启动目录即可，Redis启动的时候会自动检查dump.rdb文件并恢复其中的数据！<br>2、查找文件位置的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/bin&quot;</span>  <span class="comment"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure><p>⑤优缺点：<br><strong>优点：</strong><br>1、适合大规模的数据恢复！<br>2、对数据的完整性要求不高！<br><strong>缺点：</strong><br>1、需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！<br>2、fork进程的时候，会占用一定的内容空间！</p><p>⑥总结：<br>Redis会单独创建（fork）一个<strong>子进程</strong>来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是<strong>不进行任何IO操作</strong>的。</p><p>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！</p><p><strong>在生产环境我们会将这个文件进行备份！</strong></p><h2 id="aof-append-only-file">AOF（Append Only File）</h2><p>①Redis默认使用的是RDB模式，所以需要手动开启AOF模式！</p><p>只需要将<code>appendonly no</code>改为<code>appendonly yes</code>即可！</p><p>然后重启服务</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311622285.png" alt="image-20230131162221237" style="zoom: 67%;" /><p>发现新文件appendonly.aof！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311622914.png" alt="image-20230131162254877" style="zoom: 67%;" /><p>②aof文件内容：<br>先进行一些添加的操作：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311624634.png" alt="image-20230131162422593" style="zoom:67%;" /><p>然后我们可以vim打开appendonly.aof文件看看里面是什么？</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311625433.png" alt="image-20230131162512398" style="zoom: 67%;" /><p>我们可以发现里面存储的就是我们先前操作的命令！</p><p>③修复aof文件：<br>1、如果有个<strong>坏蛋</strong> 将我们的aof文件给修改了，加了点乱七八糟的东西，我们该如何修复呢？如下图所示：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311826607.png" alt="image-20230131182605551" style="zoom:67%;" /><p>2、重启下Redis看看：发现重启失败！报错<strong>配置信息加载失败</strong>！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311826282.png" alt="20210126104646486" style="zoom:67%;" /><p>3、我们可以使用redis-check-aof文件来进行修复！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof  <span class="comment">#修复appendonly.aof文件</span></span><br></pre></td></tr></table></figure><p>返回修复成功！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311826464.png" alt="20210126104914673" style="zoom: 80%;" /><p>4、我们再看看aof文件里面的内容！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311826703.png" alt="20210126104956815" style="zoom:80%;" /><p>5、再次重启试试！成功！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311833195.png" alt="20210126105158830" style="zoom: 80%;" /><div class="note warning flat"><p>细心的同学可能会发现虽然错误的内容少了，但是正确的也有一定的丢失！所以这个修复无法做到百分百修复！</p></div><p>④AOF重写规则！<br>aof默认的就是文件的无限追加，文件会越来越大！在配置文件中可以设置文件的大小！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301311829162.png" alt="image-20230131182947118" style="zoom:67%;" /><p>解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># appendfsync always # 每次修改都会 sync。消耗性能 </span><br><span class="line">appendfsync everysec # 每秒执行一次 sync，可能会丢失这1s的数据！ # appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot; # 持久化的文件的名字</span><br><span class="line">appendonly no # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下， rdb完全够用！</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100  #写入百分比</span><br><span class="line">auto-aof-rewrite-min-size 64mb  #写入的文件最大值是多少，一般在实际工作中我们会将其设置为5gb左右！</span><br></pre></td></tr></table></figure><p>⑤优缺点!<br><strong>优点：</strong><br>1、每一次修改都同步，文件的完整性会更加好！<br>2、每秒同步一次，最多会丢失一秒的数据！<br>3、从不同步，效率最高的！</p><p><strong>缺点：</strong><br>1、相对于数据文件来说，aof远远大于 rdb，修复的速度也比 rdb慢！<br>2、Aof 运行效率也要比 rdb 慢，所以我们redis默认的配置就是rdb持久化！</p><p>⑥<strong>总结</strong>：以下来自伟大的网友总结！<br>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化<br>4、同时开启两种持久化方式</p><ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Redis 是&lt;strong&gt;内存数据库&lt;/strong&gt;，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了&lt;strong&gt;持久化功能&lt;/strong&gt; !&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（六）进阶：Redis的配置文件详解</title>
    <link href="https://www.yuanyuanblog.me/posts/10eeeb05.html"/>
    <id>https://www.yuanyuanblog.me/posts/10eeeb05.html</id>
    <published>2023-01-28T21:08:52.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前面的学习我们只是知道了<strong>如何使用Redis</strong> ,但是我们作为开发人员，我们不仅要知其然，还要知其所以然，所以我们得从根本上理解，我们必须将Redis.conf（windows版叫redis.windows.conf）文件仔细的学习一下，提升自我！放飞自我！<br>在实际工作中：<strong>一些小小的配置，可以让你脱颖而出！</strong></p><ol><li><p>单位：Redis配置对大小写不敏感！</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302157136.png" alt="image-20230130215754076" style="zoom:80%;" /><p>注意这里：任何写法都可，不区分大小写。</p><p><strong>units are case insensitive so 1GB 1Gb 1gB are all the same.</strong></p></li><li><p>包含：搭建Redis集群时，可以使用includes包含其他配置文件</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302159890.png" alt="image-20230130215924828" style="zoom:80%;" /></li><li><p>网络：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302201300.png" alt="image-20230130220143232" style="zoom:80%;" /><p>解释如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 绑定的ip </span></span><br><span class="line">protected-mode <span class="built_in">yes</span> <span class="comment"># 保护模式 </span></span><br><span class="line">port 6379 <span class="comment"># 端口设置</span></span><br></pre></td></tr></table></figure></li><li><p>通用GENERAL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span> <span class="comment"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！ </span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！ </span></span><br><span class="line"><span class="comment"># 日志 </span></span><br><span class="line"><span class="comment"># Specify the server verbosity level. </span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing) </span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level) </span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably) 生产环境 </span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice </span><br><span class="line">logfile <span class="string">&quot;&quot;</span> <span class="comment"># 日志的文件位置名 </span></span><br><span class="line">databases 16 <span class="comment"># 数据库的数量，默认是 16 个数据库 </span></span><br><span class="line">always-show-logo <span class="built_in">yes</span> <span class="comment"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure></li><li><p>快照（RDB）：持久化，在规定的时间内，执行了多少次操作则会持久化到文件 .rdb .aof文件<br><strong>Redis是内存数据库，如果没有持久化，那么数据断电即失！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作 </span></span><br><span class="line">save 900 1 </span><br><span class="line"><span class="comment"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作 </span></span><br><span class="line">save 300 10 </span><br><span class="line"><span class="comment"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作 </span></span><br><span class="line">save 60 10000 </span><br><span class="line"><span class="comment"># 我们之后学习持久化，会自己定义这个测试！</span></span><br></pre></td></tr></table></figure></li><li><p>SECURITY 安全<br>可以在这里设置Redis的密码，默认是没有密码的。<br>①通过命令设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass  <span class="comment">#获取Redis的密码</span></span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span>  <span class="comment">#设置Redis的密码为123456</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># Ctrl+C 退出当前连接</span></span><br><span class="line">[root@dyjcomputer bin]<span class="comment"># redis-cli -p 6379  #重新连接</span></span><br><span class="line">127.0.0.1:6379&gt; ping  <span class="comment">#测试ping，失败，所有的命令都显示无权限</span></span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1  <span class="comment">#失败，所有的命令都显示无权限</span></span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line">127.0.0.1:6379&gt; auth 123456  <span class="comment">#auth + 密码  登陆上去</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; ping  <span class="comment">#正常</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass  <span class="comment">#获取密码，正常</span></span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><p>②通过修改配置文件设置，找到图示位置，添加密码</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302207972.png" alt="屏幕截图 2023-01-30 220637" style="zoom:80%;" /><p>重启Redis测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.  </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></li><li><p>限制CLIENTS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000   <span class="comment">#设置能连接上redis的最大客户端的数量 </span></span><br><span class="line">maxmemory &lt;bytes&gt;  <span class="comment">#redis 配置最大的内存容量 </span></span><br><span class="line">maxmemory-policy noeviction  <span class="comment">#内存到达上限之后的处理策略 </span></span><br><span class="line">1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">2、allkeys-lru ： 删除lru算法的key </span><br><span class="line">3、volatile-random：随机删除即将过期key </span><br><span class="line">4、allkeys-random：随机删除 </span><br><span class="line">5、volatile-ttl ： 删除即将过期的 </span><br><span class="line">6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure></li><li><p>APPEND ONLY 模式 aof配置（持久化保存）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no  <span class="comment">#默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下,rdb完全够用！ </span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>  <span class="comment">#持久化的文件的名字 </span></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会 sync。消耗性能 </span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync，可能会丢失这1s的数据！ </span></span><br><span class="line"><span class="comment"># appendfsync no  #不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前面的学习我们只是知道了&lt;strong&gt;如何使用Redis&lt;/strong&gt; ,但是我们作为开发人员，我们不仅要知其然，还要知其所以然，所以我们得从根本上理解，我们必须将Redis.conf（windows版叫redis.window</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（五）整合：SpringBoot如何整合Redis？</title>
    <link href="https://www.yuanyuanblog.me/posts/935f2624.html"/>
    <id>https://www.yuanyuanblog.me/posts/935f2624.html</id>
    <published>2023-01-28T21:08:47.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Spring作为当前最火的一个框架，既然我们学习了Redis，我们肯定是要在实际项目中使用，那么肯定首选整合SpringBoot啦！</p><p>首先简单介绍下SpringBoot对Jedis的支持吧，在1.×版本的时候，SpringBoot的底层还是使用Jedis来连接Redis的，但是在2.×版本后，就换成了Lettuce。两者的区别如下：<br><strong>Jedis:</strong> 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式！<br><strong>Lettuce:</strong> 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式！</p><p>如果你不太了解spring框架的话，建议可以先去看一下B站的教学视频</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://space.bilibili.com/95256449/channel/seriesdetail?sid=393820">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/space.bilibili.com/95256449/channel/seriesdetail?sid=393820.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">狂神说Java系列</div>            <div class="tag-link-sitename"> https://space.bilibili.com/95256449/channel/seriesdetail?sid=393820</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><ol><li><p>添加POM依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集成redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--序列化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok,自动生成set、get等方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置连接的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接：我们写个测试方法来进行最基本的连接测试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testRedis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;aasadasd!&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302140968.png" alt="image-20230130212827864"></p></li></ol><p>​出现上面结果则证明Redis连接成功！并且加数据获取数据也成功了！</p><ol start="4"><li><p>其他方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// redisTemplate  #操作不同的数据类型，api和我们的指令是一样的 </span><br><span class="line">// opsForValue  #操作字符串 类似String </span><br><span class="line">// opsForList  #操作List 类似List </span><br><span class="line">// opsForSet  #操作set</span><br><span class="line">// opsForHash  #操作hash</span><br><span class="line">// opsForZSet  #操作zset</span><br><span class="line">// opsForGeo   #操作geo</span><br><span class="line">// opsForHyperLogLog  #操作HyperLogLog</span><br><span class="line">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的 CRUD </span><br><span class="line">// 获取redis的连接对象 </span><br><span class="line">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); </span><br><span class="line">// connection.flushDb(); </span><br><span class="line">// connection.flushAll();</span><br></pre></td></tr></table></figure><p>如果是用基本RedisTemplate类来操作Redis的话，是基本上可以达到所有的效果的，因为具体方法和命令大体一致！</p></li><li><p>对象的保存和读取</p><p>新增一个User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;dingdada&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">23</span>);</span><br><span class="line">    user.setHigh(<span class="number">172</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：所以在操作Redis中，关于对象的保存我们得序列化才可以正常操作！</p><p>报错如下：</p><p>结论：所以在操作Redis中，关于对象的保存我们得序列化才可以正常操作！</p></li><li><p>自定义封装RedisTemplate类</p><p>一般来说使用官方提供的api基本上能满足我们的需求，但为了在工作中更容易操作Redis，我们一般会重新封装RedisTemplate类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 自己定义了一个RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化完成后我们再试试对象的添加获取：</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302140983.png" alt="image-20230130213717059"></p></li></ol><p>​NICE！一切正常！</p><ol start="7"><li><p>封装RedisUtils类：<br>在实际工作中，我们不可能用<strong>RedisTemplate</strong> 来操作Redis的，因为实在太繁琐，所以我们一般自定义一个RedisUtils工具类来操作Redis！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String keys)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.keys(keys);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入, 不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().setIfAbsent(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间,不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上常用的Redis操作都写在这里了，我们在工作中需要用什么，直接通过RedisUtils来使用即可！</p></li><li><p>使用RedisUtils<br>①首先将springboot项目启动起来：</p><p>②添加Contoller在web上测试添加和获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setRedisUtils&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getName</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; paramsMap)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;name&quot;</span>, redisUtil.get(paramsMap.get(<span class="string">&quot;name&quot;</span>).toString()));</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/setName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setName</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; paramsMap)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">nameKey</span> <span class="operator">=</span> paramsMap.get(<span class="string">&quot;nameKey&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">nameValue</span> <span class="operator">=</span> paramsMap.get(<span class="string">&quot;nameValue&quot;</span>).toString();</span><br><span class="line">        redisUtil.set(nameKey, nameValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;加入成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③测试工具类的基本使用：</p><p>在浏览器输入：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302142226.png" alt="image-20230130214233152" style="zoom: 67%;" /><p>测试获取：</p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302142846.png" alt="image-20230130214256809" style="zoom: 80%;" /></li><li><p>总结：通过本文的讲解大家可以发现，SpringBoot用起来真的是极度方便，整合Redis之后我们只需要简单的操作即可完美使用Redis！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Spring作为当前最火的一个框架，既然我们学习了Redis，我们肯定是要在实际项目中使用，那么肯定首选整合SpringBoot啦！&lt;/p&gt;
&lt;p&gt;首先简单介绍下SpringBoot对Jedis的支持吧，在1.×版本的时候，Sprin</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（四）整合：Redis在Jedis中如何使用和操作？</title>
    <link href="https://www.yuanyuanblog.me/posts/2bec93a8.html"/>
    <id>https://www.yuanyuanblog.me/posts/2bec93a8.html</id>
    <published>2023-01-28T21:08:41.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>​<strong>Jedis是Redis官方推荐的Java连接开发工具！</strong> 虽然现在的SpringBoot2.×版本已经将Jedis换成了Lettuce，但是我觉得还是有必要了解一下Jedis的使用！</p><ol><li><p>如何在java项目中整合Jedis并且连接Redis数据库？<br>①创建一个Maven项目</p><p>②导入Jedis和fastjson依赖，耐心等待下载完成！</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入jedis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新版包可以去maven查询：</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://mvnrepository.com">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/mvnrepository.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">maven仓库</div>            <div class="tag-link-sitename"> https://mvnrepository.com</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p>③连接Redis测试，此处为了方便测试，连接的是本地的Redis服务，连接远程需要更改配置文件和关闭防火墙。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Jedis 对象即可</span></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">// jedis 所有的命令就是我们之前的所有指令</span></span><br><span class="line">System.out.println(jedis.ping());</span><br></pre></td></tr></table></figure><p>返回PONG,证明连接成功！</p><p>④常用的API练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Jedis 对象即可</span></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">jedis.flushDB();<span class="comment">//清空当前库的所有数据</span></span><br><span class="line">jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;dingyongjun&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;high&quot;</span>,<span class="string">&quot;173&quot;</span>);   System.out.println(<span class="string">&quot;name:&quot;</span>+jedis.get(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;\nage:&quot;</span>+jedis.get(<span class="string">&quot;age&quot;</span>)+<span class="string">&quot;\nhigh&quot;</span>+jedis.get(<span class="string">&quot;high&quot;</span>));</span><br><span class="line">jedis.lpush(<span class="string">&quot;list&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list: &quot;</span>+jedis.lrange(<span class="string">&quot;list&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>⑤总结：在Jedis中连接使用Redis，和Redis控制台命令完全一致,更多的命令可以自己敲一下，加深印象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;Jedis是Redis官方推荐的Java连接开发工具！&lt;/strong&gt; 虽然现在的SpringBoot2.×版本已经将Jedis换成了Lettuce，但是我觉得还是有必要了解一下Jedis的使用！&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（三）基础：Redis中的事务和乐观锁如何实现？</title>
    <link href="https://www.yuanyuanblog.me/posts/ec266f89.html"/>
    <id>https://www.yuanyuanblog.me/posts/ec266f89.html</id>
    <published>2023-01-28T21:08:36.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li><p><strong>事务</strong><br>①<strong>原子性</strong>（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。<br>②<strong>一致性</strong>（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</p><p>③隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。<br>④持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。<br>在Redis事务没有没有隔离级别的概念！<br>在Redis单条命令式保证原子性的，但是事务不保证原子性！</p></li><li><p><strong>乐观锁</strong><br>①当程序中可能出现并发的情况时，就需要保证在并发情况下数据的准确性，以此确保当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。<br>②没有做好并发控制，就可能导致脏读、幻读和不可重复读等问题。<br><em>在Redis是可以实现<strong>乐观锁</strong>的！</em></p></li></ul><h2 id="redis如何实现事务？">Redis如何实现事务？</h2><p>①正常执行事务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingyongjun  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 26  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> high 172  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; get name  <span class="comment">#获取数据成功，证明事务执行成功</span></span><br><span class="line"><span class="string">&quot;dingyongjun&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;26&quot;</span></span><br></pre></td></tr></table></figure><p>②放弃事务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingyongjun  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 26  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard  <span class="comment">#放弃事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name  <span class="comment">#不会执行事务里面的添加操作</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>③编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingyongjun  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 23  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset name  <span class="comment">#输入一个错误的命令，这时候已经报错了，但是这个还是进入了事务的队列当中</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> high 173  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务，报错，并且所有的命令都不会执行</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get name  <span class="comment">#获取数据为空，证明没有执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>④运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingyongjun  <span class="comment">#添加字符串数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr name  <span class="comment">#对字符串数据进行自增操作</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 23  <span class="comment">#添加数据</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get age  <span class="comment">#获取数据</span></span><br><span class="line">QUEUED </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务。虽然对字符串数据进行自增操作报错了，但是其他的命令还是可以正常执行的</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;23&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get age  <span class="comment">#获取数据成功</span></span><br><span class="line"><span class="string">&quot;23&quot;</span></span><br></pre></td></tr></table></figure><p>⑤总结：由以上可以得出结论，Redis是支持单条命令事务的，但是事务并不能保证原子性！</p><h2 id="redis如何实现乐观锁？">Redis如何实现乐观锁？</h2><p>①watch（监视）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100  <span class="comment">#添加金钱100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> cost 0  <span class="comment">#添加花费0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  <span class="comment">#监控金钱</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 30  <span class="comment">#金钱-30</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby cost 30  <span class="comment">#花费+30</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行事务，成功！这时候数据没有发生变动才可以成功</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 70</span><br><span class="line">2) (<span class="built_in">integer</span>) 30</span><br></pre></td></tr></table></figure><p>②多线程测试watch</p><p><strong>线程1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#线程1</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100  <span class="comment">#添加金钱100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> cost 0  <span class="comment">#添加花费0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  <span class="comment">#开启监视（乐观锁）</span></span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; multi  <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20  <span class="comment">#金钱-20</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY cost 20   <span class="comment">#花费+20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment">#这里先不要执行，先执行线程2来修改被监视的值</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment">#执行报错，因为我们监视了money这个值，如果事务要对这个值进行操作前</span></span><br><span class="line"><span class="comment">#监视器会判断这个值是否正常，如果发生改变，事务执行失败！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p><strong>线程2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#线程2，这个在事务执行前操作执行</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY money 20  <span class="comment">#金钱+20</span></span><br><span class="line">(<span class="built_in">integer</span>) 120</span><br></pre></td></tr></table></figure><p>③总结：乐观锁和悲观锁的区别。</p><p><strong>悲观锁：</strong> 什么时候都会出问题，所以一直监视着，没有执行当前步骤完成前，不让任何线程执行，十分浪费性能！一般不使用！<br><strong>乐观锁：</strong> 只有更新数据的时候去判断一下，在此期间是否有人修改过被监视的这个数据，没有的话正常执行事务，反之执行失败！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事务&lt;/strong&gt;&lt;br&gt;
①&lt;strong&gt;原子性&lt;/strong&gt;（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。&lt;br&gt;
②&lt;strong&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（二）基础：三大特殊数据类型的学习和理解</title>
    <link href="https://www.yuanyuanblog.me/posts/49a93ae2.html"/>
    <id>https://www.yuanyuanblog.me/posts/49a93ae2.html</id>
    <published>2023-01-28T21:08:12.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<p>​在上一篇文章中我们讲了五大基本类型，他们是最常用的，而且百分之九十的程序员对于Redis只限于了解String这种最常用的。但是我个人认为，既然Redis官方提供了其他的数据类型，肯定是有相应的考量的，在某些特殊的业务场景中，这些特殊的类型还是能够给我们多一种解决思路！那么，这个学习就是值得的！！！接下来我们就来讲一讲三大特殊类型。</p><h3 id="geospatial：-地理位置"><strong>Geospatial：</strong> 地理位置</h3><p><strong>城市经纬度查询：</strong></p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://jingweidu.bmcx.com">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/jingweidu.bmcx.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">经纬度查询</div>            <div class="tag-link-sitename"> https://jingweidu.bmcx.com</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p>注意点1：<strong>两极</strong>无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</p><p>注意点2：有效的<strong>经度</strong>从-180度到180度。</p><p>注意点3：有效的<strong>纬度</strong>从-85.05112878度到85.05112878度。</p><p>注意点4：<strong>m</strong> 为米。<strong>km</strong> 为千米。<strong>mi</strong> 为英里。<strong>ft</strong> 为英尺。<br>①geoadd（添加）、geopos（查看）、geodist（计算距离）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd city 118.8921 31.32751 nanjing 197.30794 31.79322  </span><br><span class="line"><span class="comment">#当经纬度其中一个或者两个超过界限值，报错，信息如下：</span></span><br><span class="line">(error) ERR syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...</span><br><span class="line"><span class="comment">#添加城市经纬度 语法格式： geoadd key 经度 纬度 name +++可多个添加</span></span><br><span class="line"><span class="comment">#添加成功后返回添加成功的数量值</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd city 118.8921 31.32751 nanjing 117.30794 31.79322 hefei 102.82147 24.88554 kunming 91.13775 29.65262 lasa 116.23128 40.22077 beijing 106.54041 29.40268 chongqing  </span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE city 0 -1  <span class="comment">#注意：geo的查看方式和zset的命令是一致的，</span></span><br><span class="line"><span class="comment">#由此可知，geo本质上还是个集合，不过Redis官方对其进行了二次封装</span></span><br><span class="line">1) <span class="string">&quot;lasa&quot;</span></span><br><span class="line">2) <span class="string">&quot;kunming&quot;</span></span><br><span class="line">3) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">4) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">5) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos city nanjing  <span class="comment">#查看看指定城市的经纬度信息</span></span><br><span class="line">1) 1) <span class="string">&quot;118.89209836721420288&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.32750976275760735&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos city nanjing beijing  <span class="comment">#查看看多个城市的经纬度信息</span></span><br><span class="line">1) 1) <span class="string">&quot;118.89209836721420288&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.32750976275760735&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;116.23128265142440796&quot;</span></span><br><span class="line">   2) <span class="string">&quot;40.22076905438526495&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist city nanjing beijing   <span class="comment">#计算南京到北京之间的距离，默认返回单位是m</span></span><br><span class="line"><span class="string">&quot;1017743.1413&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist city nanjing beijing km  <span class="comment">#km  千米</span></span><br><span class="line"><span class="string">&quot;1017.7431&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist city nanjing beijing mi  <span class="comment">#mi  英里</span></span><br><span class="line"><span class="string">&quot;632.3978&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist city nanjing beijing ft  <span class="comment">#ft  英尺</span></span><br><span class="line"><span class="string">&quot;3339052.3010&quot;</span></span><br></pre></td></tr></table></figure><p>②georadius（查询附近位置）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE city 0 -1  <span class="comment">#查看城市</span></span><br><span class="line">1) <span class="string">&quot;lasa&quot;</span></span><br><span class="line">2) <span class="string">&quot;kunming&quot;</span></span><br><span class="line">3) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">4) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">5) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment">#查看指定位置的1000公里范围内有哪些城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 1000 km  </span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">2) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">3) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 400 km  <span class="comment">#查看指定位置的400公里范围内有哪些城市</span></span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 550 km  <span class="comment">#查看指定位置的550公里范围内有哪些城市</span></span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment">#查看指定位置的550公里范围内有哪些城市,withcoord指定返回城市的name</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 1000 km withcoord</span><br><span class="line">1) 1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;116.23128265142440796&quot;</span></span><br><span class="line">      2) <span class="string">&quot;40.22076905438526495&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;117.30793744325637817&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.79321915080526395&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;118.89209836721420288&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.32750976275760735&quot;</span></span><br><span class="line"><span class="comment">#查看指定位置的550公里范围内有哪些城市,withdist指定返回城市的’经纬度‘值</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 1000 km withcoord withdist</span><br><span class="line">1) 1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;408.3496&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;116.23128265142440796&quot;</span></span><br><span class="line">      2) <span class="string">&quot;40.22076905438526495&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">   2) <span class="string">&quot;732.6371&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;117.30793744325637817&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.79321915080526395&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;749.0265&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;118.89209836721420288&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.32750976275760735&quot;</span></span><br><span class="line"><span class="comment">#查看指定位置的550公里范围内有哪些城市,withhash指定返回城市的’经纬度‘的hash值</span></span><br><span class="line"><span class="comment">#如果两个城市的hash值越’像‘，证明城市距离越近！</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 1000 km withcoord withdist withhash</span><br><span class="line">1) 1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;408.3496&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069896088584598</span><br><span class="line">   4) 1) <span class="string">&quot;116.23128265142440796&quot;</span></span><br><span class="line">      2) <span class="string">&quot;40.22076905438526495&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">   2) <span class="string">&quot;732.6371&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4052763834193093</span><br><span class="line">   4) 1) <span class="string">&quot;117.30793744325637817&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.79321915080526395&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;749.0265&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4054278565840695</span><br><span class="line">   4) 1) <span class="string">&quot;118.89209836721420288&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.32750976275760735&quot;</span></span><br><span class="line"><span class="comment">#查看指定位置的550公里范围内有哪些城市,count num 指定返回’num‘个城市数据量</span></span><br><span class="line">127.0.0.1:6379&gt; georadius city 120 38 1000 km withcoord withdist withhash count 2</span><br><span class="line">1) 1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;408.3496&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4069896088584598</span><br><span class="line">   4) 1) <span class="string">&quot;116.23128265142440796&quot;</span></span><br><span class="line">      2) <span class="string">&quot;40.22076905438526495&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">   2) <span class="string">&quot;732.6371&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4052763834193093</span><br><span class="line">   4) 1) <span class="string">&quot;117.30793744325637817&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.79321915080526395&quot;</span></span><br></pre></td></tr></table></figure><p>③ georadiusbymember （查找指定元素指定范围内的元素）、geohash （返回经纬度的hash值）、zrange、zrem（使用zset命令操作geo）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询南京 500公里范围有哪些城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city nanjing 500 km</span><br><span class="line">1) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">2) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line"><span class="comment">#查询重庆 1500公里范围有哪些城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember city chongqing 1500 km</span><br><span class="line">1) <span class="string">&quot;lasa&quot;</span></span><br><span class="line">2) <span class="string">&quot;kunming&quot;</span></span><br><span class="line">3) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">4) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">5) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment">#返回北京和南京的经纬度的 hash值</span></span><br><span class="line">127.0.0.1:6379&gt; geohash city beijing nanjing</span><br><span class="line">1) <span class="string">&quot;wx4sucvncn0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wtsd1qyxfx0&quot;</span></span><br><span class="line"><span class="comment">#查看所有城市name</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE city 0 -1</span><br><span class="line">1) <span class="string">&quot;lasa&quot;</span></span><br><span class="line">2) <span class="string">&quot;kunming&quot;</span></span><br><span class="line">3) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">4) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">5) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment">#根据geo中的name删除g元素</span></span><br><span class="line">127.0.0.1:6379&gt; ZREM city lasa</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#删除成功</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE city 0 -1</span><br><span class="line">1) <span class="string">&quot;kunming&quot;</span></span><br><span class="line">2) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">3) <span class="string">&quot;hefei&quot;</span></span><br><span class="line">4) <span class="string">&quot;nanjing&quot;</span></span><br><span class="line">5) <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure><p>④总结：实际需求中，我们可以用来查询附近的人、计算两人之间的距离等。当然，那些所需的经纬度我们肯定要结合java代码来一次导入，手动查询和录入太过于浪费时间！</p><h3 id="hyperloglog：-基数"><strong>Hyperloglog：</strong> 基数</h3><p>首先得明白什么是<strong>基数</strong>？<br>再数学层面上可以说是：两个数据集中不重复的元素~<br>但是再Redis中，可能会有一定的误差性。 官方给出的误差率是<strong>0.81%</strong>。<br>Hyperloglog的<strong>优点：</strong> 占用的内存是固定的，2^64个元素，相当于只需要12kb的内存即可。效率极高！</p><p>①pfadd（添加数据集）、pfcount（统计数据集）、pfmegre（合并数据集-自动去重）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd dataList 1 2 3 4 5 6 7  <span class="comment">#添加数据集</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount dataList  <span class="comment">#统计数据集中的元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; pfadd dataList1 4 5 6 7 8 9 10  <span class="comment">#添加数据集</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount dataList1  <span class="comment">#统计数据集中的元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"><span class="comment">#将dataList 和dataList1  两个数据集合并成一个新的 newdata数据集，并且自动去重</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge newdata dataList dataList1  </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount newdata</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure><p>②总结：如果在实际业务中，允许一定的误差值，我们可以使用基数统计来计算~效率非常高！比如：网站的访问量，就可以利用<strong>Hyperloglog</strong>来进行计算统计！</p><h3 id="bitmap：-位存储"><strong>Bitmap：</strong> 位存储</h3><p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有0 和 1 两个状态！<br>①setbit（添加）、getset（获取）、bitcount（统计）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit login 1 1   <span class="comment">#添加周一已登陆 为1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 4 0  <span class="comment">#添加周四已登陆 为0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 6 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit login 7 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit login 1  <span class="comment">#获取周一是否登录</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit login 4  <span class="comment">#获取周四是否登陆</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitcount login  <span class="comment">#统计这周登陆的天数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><p>②总结：实际需求中，可能需要我们统计用户的登陆信息，员工的打卡信息等等。只要是事务的只有<strong>两个状态</strong>的，我们都可以用Bitmap来进行操作！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		在上一篇文章中我们讲了五大基本类型，他们是最常用的，而且百分之九十的程序员对于Redis只限于了解String这种最常用的。但是我个人认为，既然Redis官方提供了其他的数据类型，肯定是有相应的考量的，在某些特殊的业务场景中，这些特殊的类型还是能够给我们多一种解决思路</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis（一）入门：五大数据类型的学习和理解</title>
    <link href="https://www.yuanyuanblog.me/posts/f79f5101.html"/>
    <id>https://www.yuanyuanblog.me/posts/f79f5101.html</id>
    <published>2023-01-28T21:08:06.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><ol><li>Redis是什么？</li></ol><p>Redis（Remote Dictionary Server )，即远程字典服务 !<br>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><ol start="2"><li>Redis能干嘛？</li></ol><p>1、内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof） 2、效率高，可以用于高速缓存<br>3、发布订阅系统<br>4、地图信息分析<br>5、计时器、计数器（浏览量！）<br>6、…</p><h2 id="redis的基本了解">Redis的基本了解</h2><ol><li>首先我们可以看下官方文档是如何介绍Redis的：</li></ol><p>①、英文文档 <a href="https://redis.io/">点击跳转</a>.</p><p>②、中文文档 <a href="http://www.redis.cn/">点击跳转</a>.</p><p><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301302038746.png" alt="image-20230130203821567"></p><ol start="2"><li>Redis-Key<br>简单介绍一下Redis中对Key的操作命令。希望大家可以跟着注释敲一遍，简单记一下，都是最常用的命令！</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping  <span class="comment">#查看当前连接是否正常，正常返回PONG</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; clear  <span class="comment">#清楚当前控制台（为了更好的看到下面输入的命令）</span></span><br><span class="line">127.0.0.1:6379&gt; keys *  <span class="comment">#查看当前库里所有的key</span></span><br><span class="line">1) <span class="string">&quot;db&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL  <span class="comment">#清空所有库的内容</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys * </span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingdada  <span class="comment">#添加一个key为‘name’ value为‘dingdada’的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name  <span class="comment">#查询key为‘name’的value值</span></span><br><span class="line"><span class="string">&quot;dingdada&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name1 dingdada2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line"><span class="string">&quot;dingdada2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *  <span class="comment">#查看当前库里所有的key</span></span><br><span class="line">1) <span class="string">&quot;name1&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name  <span class="comment">#判断当前key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; move name 1  <span class="comment">#移除当前库1的key为‘name‘的数据</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL  <span class="comment">#再次清空所有库的内容</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多加几条数据 下面测试设置key的过期时间</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingdada</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name1 dingdada1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name2 dingdada2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 15  <span class="comment">#设置key为’name‘的数据过期时间为15秒 单位seconds</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name  <span class="comment">#查看当前key为’name‘的剩余生命周期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl name  <span class="comment">#如若返回-2，证明key已过期</span></span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get name    <span class="comment">#再次查询即为空</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="redis的五大数据类型">Redis的五大数据类型</h2><h3 id="string-字符串">String（字符串）</h3><p>①<strong>添加</strong>、<strong>查询</strong>、<strong>追加</strong>、<strong>获取长度</strong>，<strong>判断是否存在</strong>的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name dingdada  <span class="comment">#插入一个key为‘name’值为‘dingdada’的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name  <span class="comment">#获取key为‘name’的数据</span></span><br><span class="line"><span class="string">&quot;dingdada&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello world!&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *  <span class="comment">#查看当前库的所有数据</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name  <span class="comment">#判断key为‘name’的数据存在不存在，存在返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name1  <span class="comment">#不存在返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; APPEND name1 dingdada1  <span class="comment">#追加到key为‘name’的数据后拼接值为‘dingdada1’，如果key存在类似于java中字符串‘+’，不存在则新增一个，类似于Redis中的set name1 dingdada1 ，并且返回该数据的总长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line"><span class="string">&quot;dingdada1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN name1  <span class="comment">#查看key为‘name1’的字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; APPEND name1 ,dingdada2  <span class="comment">#追加，key存在的话，拼接‘+’，返回总长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line">127.0.0.1:6379&gt; STRLEN name1</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line"><span class="string">&quot;dingdada1,dingdada2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello world!&quot;</span>  <span class="comment">#注意点：插入的数据中如果有空格的数据，请用“”双引号，否则会报错！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello world!  <span class="comment">#报错，因为在Redis中空格就是分隔符，相当于该参数已结束</span></span><br><span class="line">(error) ERR syntax error</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 hello,world!  <span class="comment">#逗号是可以的</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>②<strong>自增</strong>、<strong>自减</strong>操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 0  <span class="comment">#插入一个初始值为0的数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr num  <span class="comment">#指定key为‘num’的数据自增1，返回结果  相当于java中 i++</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get num  <span class="comment">#一般用来做文章浏览量、点赞数、收藏数等功能</span></span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr num  <span class="comment">#指定key为‘num’的数据自减1，返回结果  相当于java中 i--</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; decr num  <span class="comment">#可以一直减为负数~</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; decr num  <span class="comment">#一般用来做文章取消点赞、取消收藏等功能</span></span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) -3</span><br><span class="line">127.0.0.1:6379&gt; INCRBY num 10  <span class="comment">#后面跟上by  指定key为‘num’的数据自增‘参数（10）’，返回结果</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; INCRBY num 10</span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br><span class="line">127.0.0.1:6379&gt; DECRBY num 3  <span class="comment">#后面跟上by  指定key为‘num’的数据自减‘参数（3）’，返回结果</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; DECRBY num 3</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br></pre></td></tr></table></figure><p>③<strong>截取</strong>、<strong>替换</strong>字符串操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#截取</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello world!&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 4  <span class="comment">#截取字符串，相当于java中的subString，下标从0开始，不会改变原有数据</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello world!&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1  <span class="comment">#0至-1相当于 get key1，效果一致，获取整条数据</span></span><br><span class="line"><span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="comment">#替换</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 <span class="string">&quot;hello,,,world!&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;hello,,,world!&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 5 888  <span class="comment">#此语句跟java中replace有点类似，下标也是从0开始，但是有区别：java中是指定替换字符，Redis中是从指定位置开始替换，替换的数据根据你所需替换的长度一致，返回值是替换后的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;hello888world!&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 5 67  <span class="comment">#该处只替换了两位</span></span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;hello678world!&quot;</span></span><br></pre></td></tr></table></figure><p>④<strong>设置过期时间</strong>、<strong>不存在设置</strong>操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置过期时间，跟Expire的区别是前者设置已存在的key的过期时间，而setex是在创建的时候设置过期时间</span></span><br><span class="line">127.0.0.1:6379&gt; setex name1 15  dingdada  <span class="comment">#新建一个key为‘name1’，值为‘dingdada’，过期时间为15秒的字符串数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl name1  <span class="comment">#查看key为‘name1’的key的过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ttl name1  <span class="comment">#返回为-2时证明该key已过期，即不存在</span></span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"><span class="comment">#不存在设置</span></span><br><span class="line">127.0.0.1:6379&gt; setnx name2 dingdada2  <span class="comment">#如果key为‘name2’不存在，新增数据，返回值1证明成功</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line"><span class="string">&quot;dingdada2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx name2 <span class="string">&quot;dingdada3&quot;</span>  <span class="comment">#如果key为‘name2’的已存在，设置失败，返回值0，也就是说这个跟set的区别是：set会替换原有的值，而setnx不会，存在即不设置，确保了数据误操作~</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get name2</span><br><span class="line"><span class="string">&quot;dingdada2&quot;</span></span><br></pre></td></tr></table></figure><p>⑤<strong>mset</strong>、<strong>mget</strong>操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3  <span class="comment">#插入多条数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *  <span class="comment">#查询所有数据</span></span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k3&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3  <span class="comment">#查询key为‘k1’，‘k2’，‘k3’的数据</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4  <span class="comment">#msetnx是一个原子性的操作，在一定程度上保证了事务！要么都成功，要么都失败！相当于if中的条件&amp;&amp;（与）</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k3&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MSETNX k5 v5 k4 v4  <span class="comment">#全部成功</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k4&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">4) <span class="string">&quot;k5&quot;</span></span><br><span class="line">5) <span class="string">&quot;k1&quot;</span></span><br></pre></td></tr></table></figure><p>⑥<strong>添加获取对象</strong>、<strong>getset</strong>操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里其实本质上还是字符串，但是我们讲其key巧妙的设计了一下。</span></span><br><span class="line"><span class="comment">##mset student:1:name  student 相当于类名，1 相当于id，name 相当于属性</span></span><br><span class="line"><span class="comment">#如果所需数据全部这样设计，那么我们在java的业务代码中，就不需要关注太多的key</span></span><br><span class="line"><span class="comment">#只需要找到student类，下面哪个id，需要哪个属性即可，减少了代码的繁琐，在一定程度上可以理解为这个一个类的对象！</span></span><br><span class="line">127.0.0.1:6379&gt; mset student:1:name dingdada student:1:age 22  <span class="comment">#新增一个key为‘student:1:name’，value为‘dingdada ’。。等数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *  <span class="comment">#查看所有的key</span></span><br><span class="line">1) <span class="string">&quot;student:1:age&quot;</span></span><br><span class="line">2) <span class="string">&quot;student:1:name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget student:1:age student:1:name  <span class="comment">#获取数据</span></span><br><span class="line">1) <span class="string">&quot;22&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##getset操作</span></span><br><span class="line">127.0.0.1:6379&gt; getset name1 dingdada1  <span class="comment">#先get再set，先获取key，如果没有，set值进去，返回的是get的值</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line"><span class="string">&quot;dingdada1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset name1 dingdada2  <span class="comment">##先获取key，如果有，set（替换）最新的值进去，返回的是get的值</span></span><br><span class="line"><span class="string">&quot;dingdada1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name1  <span class="comment">#替换成功</span></span><br><span class="line"><span class="string">&quot;dingdada2&quot;</span></span><br></pre></td></tr></table></figure><p>⑦<strong>总结</strong><br><em>String是Redis中最常用的一种数据类型，也是Redis中最简单的一种数据类型。首先，表面上它是字符串，但其实他可以灵活的表示字符串、整数、浮点数3种值。Redis会自动的识别这3种值。</em></p><h3 id="list-列表"><strong>List</strong>（列表）</h3><p>①lpush（左插入）、lrange（查询集合）、rpush（右插入）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lpush</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1  <span class="comment">#新增一个集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list v2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list v3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#lrange</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="comment">#查询list的所有元素值</span></span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 v1 v2 v3 v4 v5  <span class="comment">#批量添加集合元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;v1&quot;</span></span><br><span class="line"><span class="comment">###这里大家有没有注意到，先进去的会到后面，也就是我们的lpush的意思是左插入，l--left</span></span><br><span class="line"><span class="comment">#rpush</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1  <span class="comment">#指定查询列表中的元素，从下标零开始，1结束，两个元素</span></span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0  <span class="comment">#指定查询列表中的唯一元素</span></span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list rv0  <span class="comment">#右插入，跟lpush相反，这里添加进去元素是在尾部！</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1  <span class="comment">#查看集合所有元素</span></span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) <span class="string">&quot;rv0&quot;</span></span><br><span class="line"><span class="comment">##联想：这里我们是不是可以做一个，保存的记录值（如：账号密码的记录），</span></span><br><span class="line">每次都使用lpush，老的数据永远在后面，我们每次获取 0 0 位置的元素，是不是相当于更新了</span><br><span class="line">数据操作，但是数据记录还在？想要查询记录即可获取集合所有元素！，</span><br></pre></td></tr></table></figure><p>②lpop（左移除）、rpop（右移除）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lpop</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list  <span class="comment">#从头部开始移除第一个元素</span></span><br><span class="line"><span class="string">&quot;v5&quot;</span></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"><span class="comment">#rpop</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) <span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="comment">#从尾部开始移除第一个元素</span></span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br></pre></td></tr></table></figure><p>③lindex（查询指定下标元素）、llen（获取集合长度） 操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lindex</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 1  <span class="comment">#获取指定下标位置集合的元素，下标从0开始计数</span></span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0  <span class="comment">#相当于java中的indexof</span></span><br><span class="line"><span class="string">&quot;v4&quot;</span></span><br><span class="line"><span class="comment">#llen</span></span><br><span class="line">127.0.0.1:6379&gt; llen list  <span class="comment">#获取指定集合的元素长度，相当于java中的length或者size</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><p>④lrem（根据value移除指定的值）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 v2  <span class="comment">#移除集合list中的元素是v2的元素1个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 0 v3 <span class="comment">#移除集合list中的元素是v2的元素1个,这里的0和1效果是一致的</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list  v3 v2 v2 v2</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v2&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">5) <span class="string">&quot;v4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 3 v2  <span class="comment">#移除集合list中元素为v2 的‘3’个，这里的参数数量，如果实际中集合元素数量不达标，不会报错，全部移除后返回成功移除后的数量值</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br></pre></td></tr></table></figure><p>⑤ltrim（截取元素）、rpoplpush（移除指定集合中最后一个元素到一个新的集合中）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ltrim</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1 v2 v3 v4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v4&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) <span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2  <span class="comment">#通过下标截取指定的长度，这个list已经被改变了，只剩下我们所指定截取后的元素</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v3&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"><span class="comment">#rpoplpush</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1 v2 v3 v4 v5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list newlist  <span class="comment">#移除list集合中的最后一个元素到新的集合newlist中，返回值是移除的最后一个元素值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1  <span class="comment">#确实存在该newlist集合并且有刚刚移除的元素，证明成功</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure><p>⑥lset（更新）、linsert操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lset</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;v4&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; lset list 1 newV5  <span class="comment">#更新list集合中下标为‘1’的元素为‘newV5’</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="comment">#查看证明更新成功</span></span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;newV5&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="comment">##注意点：</span></span><br><span class="line">127.0.0.1:6379&gt; lset list1 0 vvvv  <span class="comment">#如果指定的‘集合’不存在，报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; lset list 8 vvv  <span class="comment">#如果集合存在，但是指定的‘下标’不存在，报错</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment">#linsert</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;newV5&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT list after v3 insertv3  <span class="comment">#在集合中的‘v3’元素 ‘(after)之后’ 加上一个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;newV5&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;insertv3&quot;</span></span><br><span class="line">5) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT list before v3 insertv3  <span class="comment">#在集合中的‘v3’元素 ‘(before)之前’ 加上一个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;v5&quot;</span></span><br><span class="line">2) <span class="string">&quot;newV5&quot;</span></span><br><span class="line">3) <span class="string">&quot;insertv3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">5) <span class="string">&quot;insertv3&quot;</span></span><br><span class="line">6) <span class="string">&quot;v2&quot;</span></span><br></pre></td></tr></table></figure><p>⑦小结：</p><ul><li>实际上是一个链表，before Node after ， left，right 都可以插入值</li><li>如果key 不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高！ 中间元素，相对来说效率会低一点~</li><li>消息排队！消息队列 （Lpush Rpop）， 栈（ Lpush Lpop）！</li></ul><h3 id="set-集合-元素唯一不重复"><strong>Set</strong>（集合）元素唯一不重复</h3><p>①sadd（添加）、smembers（查看所有元素）、sismember（判断是否存在）、scard（查看长度）、srem（移除指定元素）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set中所有的元素都是唯一的不重复的！</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set1 ding da mian tiao  <span class="comment">#添加set集合（可批量可单个，写法一致，不再赘述）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set1  <span class="comment">#查看set中所有元素</span></span><br><span class="line">1) <span class="string">&quot;mian&quot;</span></span><br><span class="line">2) <span class="string">&quot;da&quot;</span></span><br><span class="line">3) <span class="string">&quot;tiao&quot;</span></span><br><span class="line">4) <span class="string">&quot;ding&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 da  <span class="comment">#判断某个值在不在set中，在返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER set1 da1  <span class="comment">#不在返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SCARD set1  <span class="comment">#查看集合的长度，相当于size、length</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; srem set1 da  <span class="comment">#移除set中指定的元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set1  <span class="comment">#移除成功</span></span><br><span class="line">1) <span class="string">&quot;mian&quot;</span></span><br><span class="line">2) <span class="string">&quot;tiao&quot;</span></span><br><span class="line">3) <span class="string">&quot;ding&quot;</span></span><br></pre></td></tr></table></figure><p>②srandmember（抽随机）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset 1 2 3 4 5 6 7  <span class="comment">#在set中添加7个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br><span class="line">5) <span class="string">&quot;5&quot;</span></span><br><span class="line">6) <span class="string">&quot;6&quot;</span></span><br><span class="line">7) <span class="string">&quot;7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 1  <span class="comment">#随机抽取myset中1个元素返回</span></span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 1  <span class="comment">#随机抽取myset中1个元素返回</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 1  <span class="comment">#随机抽取myset中1个元素返回</span></span><br><span class="line">1) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset  <span class="comment">#不填后参数，默认抽1个值，但是下面返回不会带序号值</span></span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 3  <span class="comment">#随机抽取myset中3个元素返回</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 3  <span class="comment">#随机抽取myset中3个元素返回</span></span><br><span class="line">1) <span class="string">&quot;6&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure><p>③spop（随机删除元素）、smove（移动指定元素到新的集合中）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br><span class="line">5) <span class="string">&quot;5&quot;</span></span><br><span class="line">6) <span class="string">&quot;6&quot;</span></span><br><span class="line">7) <span class="string">&quot;7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset  <span class="comment">#随机删除1个元素，不指定参数值即删除1个</span></span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset 1  <span class="comment">#随机删除1个元素</span></span><br><span class="line">1) <span class="string">&quot;7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset 2  <span class="comment">#随机删除2个元素</span></span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset  <span class="comment">#查询删除后的结果</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;4&quot;</span></span><br><span class="line">3) <span class="string">&quot;6&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 1  <span class="comment">#移动指定set中的指定元素到新的set中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset  <span class="comment">#查询原来的set集合</span></span><br><span class="line">1) <span class="string">&quot;4&quot;</span></span><br><span class="line">2) <span class="string">&quot;6&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2  <span class="comment">#查询新的set集合，如果新的set存在，即往后加，如果不存在，则自动创建set并且加入进去</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>④sdiff（差集）、sinter（交集）、sunion（并集）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset1 1 2 3 4 5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 3 4 5 6 7</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset1</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br><span class="line">5) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) <span class="string">&quot;4&quot;</span></span><br><span class="line">3) <span class="string">&quot;5&quot;</span></span><br><span class="line">4) <span class="string">&quot;6&quot;</span></span><br><span class="line">5) <span class="string">&quot;7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset1 myset2  <span class="comment">#查询指定的set之间的差集，可以是多个set</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER myset1 myset2  <span class="comment">#查询指定的set之间的交集，可以是多个set</span></span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) <span class="string">&quot;4&quot;</span></span><br><span class="line">3) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion myset1 myset2  <span class="comment">#查询指定的set之间的并集，可以是多个set</span></span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br><span class="line">5) <span class="string">&quot;5&quot;</span></span><br><span class="line">6) <span class="string">&quot;6&quot;</span></span><br><span class="line">7) <span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><p>⑤总结：可实现共同好友、共同关注等需求。</p><h3 id="hash-哈希"><strong>Hash</strong>（哈希）</h3><p>①hset（添加hash）、hget（查询）、hgetall（查询所有）、hdel（删除hash中指定的值）、hlen（获取hash的长度）、hexists（判断key是否存在）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash name dingdada age 23  <span class="comment">#添加hash，可多个</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hget myhash name  <span class="comment">#获取hash中key是name的值</span></span><br><span class="line"><span class="string">&quot;dingdada&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hget myhash age  <span class="comment">#获取hash中key是age的值</span></span><br><span class="line"><span class="string">&quot;23&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash  <span class="comment">#获取hash中所有的值，包含key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;23&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash del <span class="built_in">test</span>  <span class="comment">#添加</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;23&quot;</span></span><br><span class="line">5) <span class="string">&quot;del&quot;</span></span><br><span class="line">6) <span class="string">&quot;test&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash del age  <span class="comment">#删除指定hash中的key（可多个），key删除后对应的value也会被删除</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash  <span class="comment">#获取指定hash的长度，相当于length、size</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash name  <span class="comment">#判断key是否存在于指定的hash，存在返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash age  <span class="comment">#判断key是否存在于指定的hash，不存在返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>②hkeys（获取所有key）、hvals（获取所有value）、hincrby（给值加增量）、hsetnx（存在不添加）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash age 23 high 173</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;23&quot;</span></span><br><span class="line">5) <span class="string">&quot;high&quot;</span></span><br><span class="line">6) <span class="string">&quot;173&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash  <span class="comment">#获取指定hash中的所有key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;high&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash   <span class="comment">#获取指定hash中的所有value</span></span><br><span class="line">1) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">2) <span class="string">&quot;23&quot;</span></span><br><span class="line">3) <span class="string">&quot;173&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash age 2  <span class="comment">#让hash中age的value指定+2(自增)</span></span><br><span class="line">(<span class="built_in">integer</span>) 25</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash age -1  <span class="comment">#让hash中age的value指定-1(自减)</span></span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash nokey novalue  <span class="comment">#添加不存在就新增返回新增成功的数量（只能单个增加哦）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 </span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash name miaotiao  <span class="comment">#添加存在则失败返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;dingdada&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;24&quot;</span></span><br><span class="line">5) <span class="string">&quot;high&quot;</span></span><br><span class="line">6) <span class="string">&quot;173&quot;</span></span><br><span class="line">7) <span class="string">&quot;nokey&quot;</span></span><br><span class="line">8) <span class="string">&quot;novalue&quot;</span></span><br></pre></td></tr></table></figure><p>③总结：比String更加适合存对象~</p><h3 id="zset-有序集合"><strong>zSet</strong>（有序集合）</h3><p>①zadd（添加）、zrange（查询）、zrangebyscore（排序小-大）、zrevrange（排序大-小）、zrangebyscore withscores（查询所有值包含key）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset 1 one 2 two 3 three  <span class="comment">#添加zset值，可多个</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 -1  <span class="comment">#查询所有的值</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">#-inf 负无穷  +inf 正无穷</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset -inf +inf  <span class="comment">#将zset的值根据key来从小到大排序并输出</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 0 1  <span class="comment">#只查询key&lt;=1的值并且排序从小到大</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 1 -1  <span class="comment">#从大到小排序输出</span></span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset -inf +inf withscores  <span class="comment">#查询指定zset的所有值，包含序号的值</span></span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;three&quot;</span></span><br><span class="line">6) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>②zrem（移除元素）、zcard（查看元素个数）、zcount（查询指定区间内的元素个数）操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 v1 2 v2 3 v3 4 v4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem myset v3  <span class="comment">#移除指定的元素，可多个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard myset  <span class="comment">#查看zset的元素个数，相当于长度，size。</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 0 100  <span class="comment">#查询指定区间内的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 0 2  <span class="comment">#查询指定区间内的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><p>③总结：成绩表排序，工资表排序，年龄排序等需求可以用zset来实现！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Redis是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redis（Remote Dictionary Server )，即远程字典服务 !&lt;br&gt;
是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、K</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuanblog.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis学习之旅</title>
    <link href="https://www.yuanyuanblog.me/posts/7b25d017.html"/>
    <id>https://www.yuanyuanblog.me/posts/7b25d017.html</id>
    <published>2023-01-28T00:11:43.000Z</published>
    <updated>2023-04-05T08:37:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="widows和linux下如何安装redis">Widows和Linux下如何安装Redis</h2><p>要学习什么之前就需要先安装它，那么我们首先来安装一下redis。</p><p>安装包可以去redis官网或者github中查看:</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://redis.io/download">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/redis.io/download.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">redis官网</div>            <div class="tag-link-sitename"> https://redis.io/download</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://github.com/microsoftarchive/redis/releases">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/microsoftarchive/redis/releases.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Windows版github地址</div>            <div class="tag-link-sitename"> https://github.com/microsoftarchive/redis/releases</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://github.com/redis/redis/releases">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/redis/redis/releases.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">redis官方github地址</div>            <div class="tag-link-sitename"> https://github.com/redis/redis/releases</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><hr><h4 id="widows下安装redis">Widows下安装Redis</h4><ol><li><p>去Windows版github地址下载.zip压缩包<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301282200477.png" style="zoom:80%;" /></p></li><li><p>下载完成后解压到你要存放的目录</p></li><li><p>查看文件夹内内容<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301282201616.png" style="zoom:80%;" /></p></li><li><p>先点击redis-server.exe启动Redis服务<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301282202828.png" style="zoom:80%;" /></p></li><li><p>再点击redis-cli.exe连接Redis<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301282202240.png" style="zoom: 80%;" /></p></li><li><p>测试Redis<br><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202301282203325.png" style="zoom:80%;" /></p></li></ol><h4 id="linux下安装redis">Linux下安装Redis</h4><ol><li><p>去redis官网或者redis官方github地址下载.tar.gz压缩包</p><p>或者直接使用<strong>wget</strong>或者<strong>curl</strong>命令下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   wget https://github.com/redis/redis/archive/7.0.8.tar.gz</span><br><span class="line"></span><br><span class="line">2. 使用`tar -zxvf 需要解压的包名`命令解压</span><br><span class="line"></span><br><span class="line">   &lt;img src=&quot;https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021218925.png&quot; alt=&quot;image-20230202121756828&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">3. 进入文件夹查看文件</span><br><span class="line"></span><br><span class="line">   &lt;img src=&quot;https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021219870.png&quot; alt=&quot;image-20230202121918831&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">4. 接下来我们安装基本环境gcc,安装命令：`yum install gcc-c++`，中途输入`y`即可</span><br><span class="line"></span><br><span class="line">   &lt;img src=&quot;https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021222435.png&quot; alt=&quot;image-20230202122206371&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   等待其安装完成，输入`gcc -v`查看当前gcc的版本：</span><br><span class="line"></span><br><span class="line">   ![image-20230202122315898](https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021223936.png)</span><br><span class="line"></span><br><span class="line">5. 在redis目录下使用`make &amp;&amp; make install`命令进行编译安装。</span><br><span class="line"></span><br><span class="line">6. Redis默认安装到了**/usr/local/bin**目录下</span><br><span class="line"></span><br><span class="line">   ![屏幕截图 2023-02-02 122807](https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021228756.png)</span><br><span class="line"></span><br><span class="line">7. 将解压后文件夹中配置文件拷贝过来，以后就用这个配置文件来启动Redis服务。</span><br><span class="line"></span><br><span class="line">   &lt;img src=&quot;https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021233631.png&quot; alt=&quot;image-20230202123301604&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">8. redis默认不是后台启动的，修改配置文件</span><br><span class="line"></span><br><span class="line">   ```bash</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">打开配置文件</span></span><br><span class="line">   vim redis.conf</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">将 daemonize 后的 no 改为 <span class="built_in">yes</span></span></span><br><span class="line">   daemonize yes</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">保存</span></span><br><span class="line">   wq!</span><br></pre></td></tr></table></figure></li><li><p>启动连接Redis服务并测试(这里我换了端口,因为6379被docker中的Redis占用了)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动redis服务</span></span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="comment">#连接redis服务</span></span><br><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/liaojie1314/PicGo@master/images/202302021244890.png" alt="image-20230202124443841" style="zoom:67%;" /></li></ol><h4 id="使用docker安装redis">使用docker安装Redis</h4><ol><li><p>安装docker</p><div class="note default simple"><p>以下命令基于CentOS环境</p></div><ol><li>下载工具</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><ol start="2"><li>设置镜像的仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #配置阿里云的镜像</span><br></pre></td></tr></table></figure><ol start="3"><li>更新yum软件包索引</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ol start="4"><li>安装docker相关配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="5"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前版本号，是否启动成功</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li></ol><div class="note info simple"><p>如果您想仔细学习docker,可以去我下面的文章看一看</p></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" /posts/f255ffad">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon//posts/f255ffad.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">docker</div>            <div class="tag-link-sitename"> /posts/f255ffad</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><ol start="2"><li>安装redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name myredis -v /home/redis/myredis/myredis.conf:/etc/redis/redis.conf -v /home/redis/myredis/data:/data -d redis redis-server /etc/redis/redis.conf  --appendonly yes  --requirepass 1111</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 参数详解 </summary>              <div class='content'>              <ul><li>–restart=always 总是开机启动</li><li>–log 日志方面</li><li>-p 6379:6379 将6379端口映射出去</li><li>–name 给这个容器取一个名字</li><li>-v 数据卷挂载<ul><li>/home/redis/myredis/myredis.conf:/etc/redis/redis.conf 这里是将 liunx 路径下的myredis.conf 和redis下的redis.conf 挂载在一起</li><li>/home/redis/myredis/data:/data 同上</li></ul></li><li>-d redis 表示后台启动redis</li><li>redis-server /etc/redis/redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录 /etc/redis/redis.conf 也就是liunx下的/home/redis/myredis/myredis.conf</li><li>–appendonly yes 开启redis 持久化</li><li>–requirepass 1111 设置密码 （如果你是通过docker 容器内部连接的话，就随意，可设可不设。但是如果想向外开放的话，一定要设置）</li></ul>              </div>            </details><p>如果你想要安装指定版本的redis可以去dockerhub查看redis版本，dockerhub中也提供了安装步骤</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://hub.docker.com/_/redis">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/hub.docker.com/_/redis.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">dockerhub的redis仓库</div>            <div class="tag-link-sitename"> https://hub.docker.com/_/redis</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><ol start="3"><li>测试redis<br>1、通过docker ps指令查看启动状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a |grep myredis <span class="comment"># 通过docker ps指令查看启动状态，是否成功.</span></span><br></pre></td></tr></table></figure><p>2、查看容器运行日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since 30m &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p>此处 --since 30m 是查看此容器30分钟之内的日志情况。</p><p>3、容器内部连接进行测试<br>进入容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;容器名&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>验证密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 密码</span><br></pre></td></tr></table></figure><ol start="4"><li>配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line">requirepass 000415</span><br><span class="line"></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line">databases 30</span><br><span class="line"></span><br><span class="line">always-show-logo yes</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line">replica-priority 100</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line"></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line">rdb-save-incremental-fsync yes</span><br></pre></td></tr></table></figure><p>可以去redis官网下载</p><p>至此Redis的安装已经完成了,接下来就让我们一起学习Redis吧!!!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;widows和linux下如何安装redis&quot;&gt;Widows和Linux下如何安装Redis&lt;/h2&gt;
&lt;p&gt;要学习什么之前就需要先安装它，那么我们首先来安装一下redis。&lt;/p&gt;
&lt;p&gt;安装包可以去redis官网或者github中查看:&lt;/p&gt;
&lt;div cl</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuanblog.me/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="redis" scheme="https://www.yuanyuanblog.me/tags/redis/"/>
    
  </entry>
  
</feed>
