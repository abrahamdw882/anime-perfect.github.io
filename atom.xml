<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>元渊`Blog</title>
  
  <subtitle>生活明朗,万物可爱</subtitle>
  <link href="https://www.yuanyuan.blog/atom.xml" rel="self"/>
  
  <link href="https://www.yuanyuan.blog/"/>
  <updated>2024-03-02T06:48:25.930Z</updated>
  <id>https://www.yuanyuan.blog/</id>
  
  <author>
    <name>元渊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改docker访问权限</title>
    <link href="https://www.yuanyuan.blog/posts/ef3c45df.html"/>
    <id>https://www.yuanyuan.blog/posts/ef3c45df.html</id>
    <published>2024-01-26T12:21:11.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题一-非root用户无法访问root">问题一:非root用户无法访问root</h2><h3 id="描述：">描述：</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240126122339.png" alt="image-20240126122339249"></p><h3 id="解决：">解决：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 666 /var/run/docker.sock</span><br></pre></td></tr></table></figure><h2 id="问题二-vscode-docker插件无法访问docker">问题二:vscode docker插件无法访问docker</h2><h3 id="描述：">描述：</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240126122503.png" alt="image-20240126122503375"></p><h3 id="解决：">解决：</h3><p>按照<a href="https://docs.docker.com/engine/install/linux-postinstall/">官网</a>修改<code>docker</code>权限</p><p>1、创建<code>docker</code> 组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><p>如果提示<code>groupadd: group 'docker' already exists</code>，表示这个组之前已经创建好了，可以直接进行下一步</p><p>2、添加你的用户到<code>docker</code>组中，将<code>$USER</code>替换成终端中@前面的用户名，如<code>liaojie314@liaojie314: /home/liaojie314</code>则修改为<code>liaojie314</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>我使用的是<code>ubuntu</code>系统，可以直接在终端中输入下面的命令更新组，其他非<code>linux</code>系统或者虚拟机需要重启才可以更新组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker </span><br></pre></td></tr></table></figure><h2 id="其他问题">其他问题</h2><p><code>WARNING: Error loading config file: /home/user/.docker/config.json: open /home/user/.docker/config.json: permission denied</code></p><p>可以用如下命令解决(将$USER替换成终端中@前面的用户名)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> <span class="string">&quot;<span class="variable">$USER</span>&quot;</span>:<span class="string">&quot;<span class="variable">$USER</span>&quot;</span> /home/<span class="string">&quot;<span class="variable">$USER</span>&quot;</span>/.docker -R</span><br><span class="line">sudo <span class="built_in">chmod</span> g+rwx <span class="string">&quot;<span class="variable">$HOME</span>/.docker&quot;</span> -R</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题一-非root用户无法访问root&quot;&gt;问题一:非root用户无法访问root&lt;/h2&gt;
&lt;h3 id=&quot;描述：&quot;&gt;描述：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@maste</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://www.yuanyuan.blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>修改docker默认存储位置</title>
    <link href="https://www.yuanyuan.blog/posts/d07ffb81.html"/>
    <id>https://www.yuanyuan.blog/posts/d07ffb81.html</id>
    <published>2024-01-25T23:59:32.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法1-修改docker默认存储位置">方法1. 修改docker默认存储位置</h2><h3 id="docker默认存储路径在-var-lib-docker下">docker默认存储路径在<code>/var/lib/docker</code>下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep -i <span class="built_in">dir</span></span><br><span class="line"><span class="comment">#Docker Root Dir: /var/lib/docker</span></span><br></pre></td></tr></table></figure><h3 id="修改默认路径：修改docker的systemd的配置文件">修改默认路径：修改docker的systemd的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移动文件位置</span></span><br><span class="line"><span class="built_in">cp</span> -a /var/lib/docker  /home/</span><br></pre></td></tr></table></figure><h3 id="编辑-etc-docker-daemon-json-文件">编辑<code> /etc/docker/daemon.json</code> 文件</h3><p>如果不存在得手动创建，如果你写了国内源的话，就在这下边在加一行就行，<strong>注意：添加<code>&quot;data-root&quot;: &quot;/data/docker&quot;</code>前面要添加逗号<code>&quot;,&quot;</code>，避免json格式不正确，报错</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;http://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/docker&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="重新加载配置查看路径是否修改成功">重新加载配置查看路径是否修改成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看相关信息</span></span><br><span class="line">docker info | grep -i <span class="built_in">dir</span></span><br><span class="line"><span class="comment">## Docker Root Dir: /data/docker</span></span><br></pre></td></tr></table></figure><h2 id="方法2-创建软连接">方法2.创建软连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移动文件位置</span></span><br><span class="line"><span class="built_in">cp</span> -a /var/lib/docker  /data/</span><br><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -fs /data/docker /var/lib/docker</span><br><span class="line"><span class="comment">#重新加载配置&amp;查看位置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">docker info | grep -i <span class="built_in">dir</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法1-修改docker默认存储位置&quot;&gt;方法1. 修改docker默认存储位置&lt;/h2&gt;
&lt;h3 id=&quot;docker默认存储路径在-var-lib-docker下&quot;&gt;docker默认存储路径在&lt;code&gt;/var/lib/docker&lt;/code&gt;下&lt;/h3&gt;
</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://www.yuanyuan.blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装ffmpeg</title>
    <link href="https://www.yuanyuan.blog/posts/f3c445e6.html"/>
    <id>https://www.yuanyuan.blog/posts/f3c445e6.html</id>
    <published>2024-01-25T23:03:59.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ffmpeg">ffmpeg</h2><p>FFmpeg是一个开源免费的多媒体计算机程序，可以用来记录、转换数字音频、视频，并能将其转化为流，能让用户访问几乎所有的视频格式，包括mkv、flv、mov等。同时FFmpeg是一个自由的开放源代码工具集，用于处理多媒体文件。它包含一组共享的音频和视频库，例如libavcodec，libavformat和libavutil。</p><p>使用FFmpeg，您可以在各种视频和音频格式之间转换，设置采样率，捕获流音频/视频以及调整视频大小。</p><p>FFmpeg具有非常强大的功能，包括视频采集、视频格式转换、视频抓图、给视频加水印等，同时还能兼容多个操作系统，比如Windows、Linux、Mac。ffmpeg可以在任意采样率之间进行转换，并使用高质量的多相滤波器动态调整视频大小。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125231534.png" alt="img"></p><p>官网：<a href="http://ffmpeg.org/">FFmpeg</a></p><h2 id="windows安装">Windows安装</h2><h3 id="下载">下载</h3><p>到ffmpeg官网下载安装包<a href="http://ffmpeg.org/download.html">Download FFmpeg</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125230651.png" alt="image-20240125230651187"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125230827.png" alt="image-20240125230826709"></p><h3 id="解压文件并将其中bin目录添加到环境变量中">解压文件并将其中bin目录添加到环境变量中</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125231106.png" alt="image-20240125231105934"></p><p>点击“系统属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量”，选择“Path”条目，点击“编辑-&gt;新建”，把<strong>bin文件夹路径</strong>复制粘贴进去，然后点击确定即可。</p><h3 id="测试是否安装成功">测试是否安装成功</h3><p>按win + R打开运行，输入cmd打开命令运行窗口</p><p>输入命令<code>ffmpeg –version</code>，输出以下信息即安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125231242.png" alt="image-20240125231241827"></p><h2 id="centos7">CentOS7</h2><p>1）安装epel-release，因为安装需要使用其他的repo源，所以需要epel支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release rpm</span><br></pre></td></tr></table></figure><p>2）安装Nux-Dextop源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p>3）环境都搭建好之后，就可以正式安装ffmpeg了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ffmpeg</span><br></pre></td></tr></table></figure><h2 id="ubuntu-22-04">Ubuntu 22.04</h2><p>ubuntu上安装就十分简单了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ffmpeg</span><br><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure><p>看到下面的信息就说明安装成功了</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125232101.png" alt="image-20240125232100845"></p><h3 id="简单使用转换mp4-webm">简单使用转换mp4 webm</h3><p>使用<code>ffmpeg</code>转换音频和视频文件时，不必指定输入和输出格式。 FFmpeg自动检测输入文件的格式，并从文件扩展名中猜测输出格式。</p><p>以下是两个简单的示例，将视频文件从mp4转换为webm。将音频文件从mp3转换为ogg。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.webm</span><br><span class="line">ffmpeg -i input.mp3 output.ogg</span><br></pre></td></tr></table></figure><h3 id="指定编解码器">指定编解码器</h3><p>转换文件时，使用<code>-c</code>选项指定编解码器。它可以是任何受支持的解码器/编码器的名称，也可以是仅复制输入流的特殊值<code>copy</code>。</p><p>下面的例子，使用<code>libvpx</code>视频编解码器和<code>libvorbis</code>音频编解码器将视频文件从mp4转换为webm。使用<code>libopus</code>编解码器将音频文件从mp3转换为ogg。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libvpx -c:a libvorbis output.webm</span><br><span class="line">ffmpeg -i input.mp3 -c:a libopus output.ogg</span><br></pre></td></tr></table></figure><p>更多可查看<a href="https://www.ffmpeg.org/documentation.html">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ffmpeg&quot;&gt;ffmpeg&lt;/h2&gt;
&lt;p&gt;FFmpeg是一个开源免费的多媒体计算机程序，可以用来记录、转换数字音频、视频，并能将其转化为流，能让用户访问几乎所有的视频格式，包括mkv、flv、mov等。同时FFmpeg是一个自由的开放源代码工具集，用于处理多媒</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="ffmpeg" scheme="https://www.yuanyuan.blog/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装cuda和cudnn</title>
    <link href="https://www.yuanyuan.blog/posts/61ad5516.html"/>
    <id>https://www.yuanyuan.blog/posts/61ad5516.html</id>
    <published>2024-01-25T21:55:20.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装显卡驱动">安装显卡驱动</h2><h3 id="方法一-推荐-ubuntu自带">方法一(推荐)ubuntu自带</h3><p>在软件和<strong>更新应用</strong>中选择<strong>附加驱动</strong>，选择带server结尾的驱动进行安装(应用更改)</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125220039.png" alt="image-20240125220038661"></p><h3 id="方法二官网下载">方法二官网下载</h3><p>英文地址：<a href="https://www.nvidia.com/Download/Find.aspx?lang=en-us#">Official Advanced Driver Search | NVIDIA</a></p><p>中文地址：<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn#">官方驱动 | NVIDIA</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125223302.png" alt="img"></p><h4 id="更新软件列表和安装必要软件-依赖">更新软件列表和安装必要软件、依赖</h4><p>终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure><h4 id="禁用默认驱动">禁用默认驱动</h4><p>在安装NVIDIA驱动以前需要禁止系统自带显卡驱动nouveau</p><p>在终端输入命令打开blacklist.conf文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>或者新建一个单独的blacklist-nouveau.conf文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure><p>在打开的文件末尾输入并保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>最后更新一下系统的<em>initramfs</em>镜像文件，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>完成以上步骤后，重启电脑。然后在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>如果没有输出的话就说明禁用了nouveau</p><h4 id="进入tty模式">进入tty模式</h4><p>到这一步需要关闭图形界面，推荐使用其他设备阅读。</p><ul><li>关闭图形界面进入tty模式</li></ul><p>终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo telinit 3</span><br></pre></td></tr></table></figure><p>输入如下命令可以重新打开图形界面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo telinit 5</span><br></pre></td></tr></table></figure><ul><li>进入tty以后需要输入用户名和密码登录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125223729.png" alt="img"></p><p>输入用户名和密码后，出现这个画面就是登录成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125223907.png" alt="image-20240125223906918"></p><h4 id="禁用x-window服务">禁用X-window服务</h4><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service gdm3 stop</span><br></pre></td></tr></table></figure><h4 id="安装">安装</h4><p>输入以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 NVIDIA-Linux-x86_64-525.53.run   <span class="comment">#给下载的驱动赋予可执行权限</span></span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-525.53.run –no-opengl-files -no-x-check   <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>-no-opengl-files：只安装驱动文件，不安装OpenGL文件。</p><p>-no-x-check：安装驱动时关闭X服务，不设置可能导致安装失败。</p><p>会出现的选项：</p><ul><li>Install Nvidia’s 32-bit compatibility libraries?<br>选择 <code>No</code></li><li>Would you like to run the nvidia-xconfig utility to automatically update your X configuration file so that the NVIDIA X driver dill be used dhen you restart X? Any pre-existing X configuration file will be backed up.<br>选择 <code>Yes</code></li></ul><h4 id="返回图形界面">返回图形界面</h4><p>再次启动X-window服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service gdm3 start</span><br></pre></td></tr></table></figure><h3 id="查看cuda-version">查看CUDA Version</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125215719.png" alt="image-20240125215719581"></p><h2 id="安装cuda">安装cuda</h2><h3 id="下载">下载</h3><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">官网</a></p><p>选择小于你的cuda版本进行下载</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125220416.png" alt="image-20240125220416293"></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125220321.png" alt="image-20240125220321476"></p><p>下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run</span><br><span class="line">sudo sh cuda_11.8.0_520.61.05_linux.run</span><br></pre></td></tr></table></figure><h3 id="安装">安装</h3><p>在运行<code>sudo sh cuda_11.8.0_520.61.05_linux.run</code>时，<code>不要安装驱动、不要安装驱动、不要安装驱动，重要的事情说三遍</code></p><p>操作为：选择<code>continue</code>-&gt;输入<code>accept</code>-&gt;按<code>空格</code>取消<code>Driver</code>选项-&gt;选择<code>Install</code>安装。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125221015.png" alt="image-20240125221014946"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125221130.png" alt="image-20240125221130388"></p><h3 id="配置环境变量">配置环境变量</h3><p>安装完成后需要配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/cuda-11.8/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/local/cuda-11.8/lib64  </span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LIBRARY_PATH</span>:/usr/local/cuda-11.8/lib64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="查看cuda版本">查看cuda版本</h3><p>使用如下命令查看cuda版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V <span class="comment"># 或者nvcc --version</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125222728.png" alt="image-20240125222728221"></p><p>出现上述信息即安装成功</p><h2 id="安装cudnn">安装cudnn</h2><h3 id="下载">下载</h3><p>官网下载<code>cuda</code>对应版本的<code>cudnn</code>以及操作系统对应版本：<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse805-111">https://developer.nvidia.com/rdp/cudnn-archive#a-collapse805-111</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125222018.png" alt="image-20240125222017900"></p><h3 id="安装">安装</h3><p>使用如下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i </span><br></pre></td></tr></table></figure><h3 id="查看cudnn版本">查看cudnn版本</h3><p>使用如下命令查看cudnn版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep cudnn</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125223103.png" alt="image-20240125223103120"></p><h2 id="问题">问题</h2><h3 id="描述">描述</h3><p>在使用<code>sudo apt update</code>时出现如下错误</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125233854.png" alt="image-20240125233854286">网上都是清一色的<code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 15198637E3EC4A60</code>，但是这只是其他情况，这里的cudnn还是有一些问题，运行后显示<code>gpg: keyserver receive failed: No data</code>，没有找到对应的key。</p><h3 id="解决方法">解决方法</h3><p>回忆安装cuda的过程，发现所有的key都在<code>/usr/share/keyrings/</code>里，<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker">cuda安装</a>时设置仓库源和GPG key的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \</span><br><span class="line">      &amp;&amp; curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \</span><br><span class="line">      &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \</span><br><span class="line">            sed &#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27; | \</span><br><span class="line">            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br></pre></td></tr></table></figure><p>其中是先下载再安装到<code>/usr/share/keyrings</code>。<br>因此我这里也缺少一个key，然后前往<code>/var/cudnn-local-repo-ubuntu2204-8.9.6.50</code>文件夹，发现包含许多gpg文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /var/cudnn-local-repo-ubuntu2204-8.9.6.50/*.gpg /usr/share/keyrings/ </span><br><span class="line"><span class="comment"># 将/var/cudnn-local-repo-ubuntu2204-8.9.6.50文件夹中所有以.gpg结尾的文件复制到/usr/share/keyrings即可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装显卡驱动&quot;&gt;安装显卡驱动&lt;/h2&gt;
&lt;h3 id=&quot;方法一-推荐-ubuntu自带&quot;&gt;方法一(推荐)ubuntu自带&lt;/h3&gt;
&lt;p&gt;在软件和&lt;strong&gt;更新应用&lt;/strong&gt;中选择&lt;strong&gt;附加驱动&lt;/strong&gt;，选择带server结尾的驱</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu高版本安装低版本GCC</title>
    <link href="https://www.yuanyuan.blog/posts/221a238.html"/>
    <id>https://www.yuanyuan.blog/posts/221a238.html</id>
    <published>2024-01-25T21:19:11.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu高版本如何安装低版本gcc-以ubuntu-22-04安装gcc5为例">Ubuntu高版本如何安装低版本GCC (以Ubuntu 22.04安装GCC5为例)</h2><h2 id="默认安装gcc">默认安装GCC</h2><p>通过如下命令安装的gcc版本太高</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential # 安装 GCC、G++ 和 make 等工具</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo apt install gcc <span class="comment">#只安装gcc</span></span></span><br></pre></td></tr></table></figure><p>使用<code>gcc --version</code>查看gcc版本</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125212139.png" alt="image-20240125212138862"></p><h2 id="添加源">添加源</h2><p>如果想用低版本的gcc，比如gcc5，尝试输入命令 <code>sudo apt-get install gcc-5</code>。会提示找不到gcc5的安装包，那么就需要添加较低版本的源。</p><p>网上搜索得到gcc5对应的Ubuntu版本为16，接下来就对Ubuntu22.04的源文件source.list进行编辑，增加Ubuntu16的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list #通过命令用gedit编辑器（也选择其他编辑器，如vim，mousepad等）打开sources.list文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下内容</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><p>保存文件后，输入命令更新源 <code>sudo apt-get update</code></p><p>如果出现如下错误：</p><p>这个错误发生是因为你的系统缺少用于验证 Ubuntu 软件包的公钥。APT 包管理器使用这些公钥来确保软件包的真实性。解决这个问题的方法是导入缺失的公钥。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125212733.png" alt="image-20240125212732828"></p><p>使用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5</span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>然后再更新源 <code>sudo apt-get update</code></p><h2 id="安装低版本">安装低版本</h2><p>查看gcc5可选的版本 <code>apt-cache policy gcc-5</code></p><p>选择其中一个版本进行安装<code>sudo apt-get install gcc-5=5.4.0-6ubuntu1~16.04.12</code><br>g++5的安装是类似的步骤</p><h2 id="设置默认版本">设置默认版本</h2><p>然后查看gcc版本 <code>gcc -v</code>，发现版本并没有改变<br>通过命令<code>ls /usr/bin/gcc*</code>查询本机gcc已安装的版本</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125213711.png" alt="image-20240125213711285"></p><p>这个时候需要管理多版本的gcc，使我们想要的gcc5成为默认版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 40</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 50 # 11为你系统安装的版本</span><br><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125214109.png" alt="image-20240125214109116"></p><p>根据提示，选择gcc-5对应的编号1 回车即可</p><p>最后<code>gcc -v</code>查看默认gcc版本，此时已经切换为gcc5</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125214139.png" alt="image-20240125214139258"></p><p>如果要对g++的多版本进行管理，只需将上面命令行中的gcc替换为g++</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ubuntu高版本如何安装低版本gcc-以ubuntu-22-04安装gcc5为例&quot;&gt;Ubuntu高版本如何安装低版本GCC (以Ubuntu 22.04安装GCC5为例)&lt;/h2&gt;
&lt;h2 id=&quot;默认安装gcc&quot;&gt;默认安装GCC&lt;/h2&gt;
&lt;p&gt;通过如下命令安</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="gcc" scheme="https://www.yuanyuan.blog/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu搜狗输入法无法输中文</title>
    <link href="https://www.yuanyuan.blog/posts/2a61be20.html"/>
    <id>https://www.yuanyuan.blog/posts/2a61be20.html</id>
    <published>2024-01-25T20:09:39.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<p>搜狗输入法linux<a href="https://shurufa.sogou.com/linux">下载地址</a></p><p>根据<a href="https://shurufa.sogou.com/linux/guide">官方教程</a>安装成功后发现只能输入英文，无法输入中文</p><h2 id="原因">原因</h2><p>主要原因是缺少依赖包导致的。</p><h2 id="解决方式">解决方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2</span><br><span class="line">sudo apt install libgsettings-qt1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搜狗输入法linux&lt;a href=&quot;https://shurufa.sogou.com/linux&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://shurufa.sogou.com/linux/guide&quot;&gt;官方教程&lt;/a&gt;安装成功后发现只能输入</summary>
      
    
    
    
    <category term="问题" scheme="https://www.yuanyuan.blog/categories/%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="sogou" scheme="https://www.yuanyuan.blog/tags/sogou/"/>
    
  </entry>
  
  <entry>
    <title>jetbrains全家桶激活</title>
    <link href="https://www.yuanyuan.blog/posts/9db61e87.html"/>
    <id>https://www.yuanyuan.blog/posts/9db61e87.html</id>
    <published>2024-01-23T11:24:18.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-jetbrains">下载 JetBrains</h2><ul><li><a href="https://www.jetbrains.com/">JetBrains 官网</a> 下载需要的开发者 <code>IDE工具</code></li></ul><h2 id="激活文件下载">激活文件下载</h2><ul><li>打开 <a href="https://3.jetbra.in/">JETBRA</a> 激活网站，此网站将做一次解析，前面带“地球”的，状态为当前在线可用，点击任意一个可用的链接进入。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/VScodePicGo/img/202401231142883.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/VScodePicGo/img/202401231143797.png" alt=""></p><h2 id="下载-jetbra-zip">下载 <code>jetbra.zip</code></h2><ul><li>将 jetbra.zip解压到指定目录，推荐 JetBrains安装目录下</li></ul><h2 id="修改配置文件">修改配置文件</h2><p>进入 IDE-&gt;安装位置-&gt;bin目录， 在 xxxxxx.vmoptions文件最末尾追加如下配置信息；或者在 <code>ide</code> 中help -&gt; Edit Custom VM Options…打开xxxxxx.vmoptions</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:xxx\JetBrains\jetbra/ja-netfilter.jar=jetbrains </span><br><span class="line"># 其中ja-netfilter.jar为jetbra.zip解压的文件,xxx\JetBrains\为JetBrains安装目录(请删除注释)</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure><h2 id="填写激活码">填写激活码</h2><ul><li>打开第二步中的 激活网站上指定 IDE栏的 Copy to clipboard，激活码将复制到剪切板。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/VScodePicGo/img/202401231143988.png" alt=""></p><ul><li>启动 IDE，在help -&gt; register -&gt; Get license from -&gt; Activation code 处，粘贴 Ctrl + V，点击激活即可。</li></ul><p>更多信息请参考jetbra.zip中的readme.txt文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载-jetbrains&quot;&gt;下载 JetBrains&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains 官网&lt;/a&gt; 下载需要的开发者 &lt;code&gt;IDE工具&lt;/code&gt;&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="工具" scheme="https://www.yuanyuan.blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile例子</title>
    <link href="https://www.yuanyuan.blog/posts/36423b00.html"/>
    <id>https://www.yuanyuan.blog/posts/36423b00.html</id>
    <published>2023-07-08T20:41:04.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos">centos</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> liaojie1314&lt;<span class="number">1517438366</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end----&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="cuda-cudnn-tensorrt">cuda+cudnn+TensorRT</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> CUDA_VERSION=<span class="number">11.4</span>.<span class="number">2</span></span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nvidia/cuda:$&#123;CUDA_VERSION&#125;-cudnn8-devel-ubuntu$&#123;OS_VERSION&#125;</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;liaojie1314&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TRT_VERSION <span class="number">8.2</span>.<span class="number">0.6</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup user account</span></span><br><span class="line"><span class="keyword">ARG</span> uid=<span class="number">1000</span></span><br><span class="line"><span class="keyword">ARG</span> gid=<span class="number">1000</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupadd -r -f -g <span class="variable">$&#123;gid&#125;</span> trtuser &amp;&amp; useradd -o -r -u <span class="variable">$&#123;uid&#125;</span> -g <span class="variable">$&#123;gid&#125;</span> -ms /bin/bash trtuser</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> usermod -aG sudo trtuser</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;trtuser:nvidia&#x27;</span> | chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /workspace &amp;&amp; <span class="built_in">chown</span> trtuser /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Required to build Ubuntu 20.04 without user prompts with DLFW container</span></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install requried libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-key adv --recv-keys --keyserver keyserver.ubuntu.com A4B469963BF863CC &amp;&amp; apt-get update &amp;&amp; apt-get install -y software-properties-common</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> add-apt-repository ppa:ubuntu-toolchain-r/test</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">    libcurl4-openssl-dev \</span></span><br><span class="line"><span class="language-bash">    wget \</span></span><br><span class="line"><span class="language-bash">    zlib1g-dev \</span></span><br><span class="line"><span class="language-bash">    git \</span></span><br><span class="line"><span class="language-bash">    pkg-config \</span></span><br><span class="line"><span class="language-bash">    sudo \</span></span><br><span class="line"><span class="language-bash">    ssh \</span></span><br><span class="line"><span class="language-bash">    libssl-dev \</span></span><br><span class="line"><span class="language-bash">    pbzip2 \</span></span><br><span class="line"><span class="language-bash">    pv \</span></span><br><span class="line"><span class="language-bash">    bzip2 \</span></span><br><span class="line"><span class="language-bash">    unzip \</span></span><br><span class="line"><span class="language-bash">    devscripts \</span></span><br><span class="line"><span class="language-bash">    lintian \</span></span><br><span class="line"><span class="language-bash">    fakeroot \</span></span><br><span class="line"><span class="language-bash">    dh-make \</span></span><br><span class="line"><span class="language-bash">    build-essential</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install python3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">      python3 \</span></span><br><span class="line"><span class="language-bash">      python3-pip \</span></span><br><span class="line"><span class="language-bash">      python3-dev \</span></span><br><span class="line"><span class="language-bash">      python3-wheel &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /usr/local/bin &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -s /usr/bin/python3 python &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -s /usr/bin/pip3 pip;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install TensorRT</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> v=<span class="string">&quot;<span class="variable">$&#123;TRT_VERSION%.*&#125;</span>-1+cuda<span class="variable">$&#123;CUDA_VERSION%.*&#125;</span>&quot;</span> &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp;\</span></span><br><span class="line"><span class="language-bash">    sudo apt-get install libnvinfer8=<span class="variable">$&#123;v&#125;</span> libnvonnxparsers8=<span class="variable">$&#123;v&#125;</span> libnvparsers8=<span class="variable">$&#123;v&#125;</span> libnvinfer-plugin8=<span class="variable">$&#123;v&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        libnvinfer-dev=<span class="variable">$&#123;v&#125;</span> libnvonnxparsers-dev=<span class="variable">$&#123;v&#125;</span> libnvparsers-dev=<span class="variable">$&#123;v&#125;</span> libnvinfer-plugin-dev=<span class="variable">$&#123;v&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        python3-libnvinfer=<span class="variable">$&#123;v&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PyPI packages</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install setuptools&gt;=41.0.0</span></span><br><span class="line"><span class="comment"># COPY requirements.txt /tmp/requirements.txt</span></span><br><span class="line"><span class="comment"># RUN pip3 install -r /tmp/requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install jupyter jupyterlab</span></span><br><span class="line"><span class="comment"># Workaround to remove numpy installed with tensorflow</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 install --upgrade numpy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Cmake</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /tmp &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4-Linux-x86_64.sh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> +x cmake-3.14.4-Linux-x86_64.sh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./cmake-3.14.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> ./cmake-3.14.4-Linux-x86_64.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Download NGC client</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /usr/local/bin &amp;&amp; wget https://ngc.nvidia.com/downloads/ngccli_cat_linux.zip &amp;&amp; unzip ngccli_cat_linux.zip &amp;&amp; <span class="built_in">cd</span> ngc-cli/ &amp;&amp; <span class="built_in">chmod</span> u+x ngc &amp;&amp; <span class="built_in">rm</span> ../ngccli_cat_linux.zip ../ngc-cli.md5 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;no-apikey\nascii\n&quot;</span> | ./ngc config <span class="built_in">set</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set environment and working directory</span></span><br><span class="line"><span class="keyword">ENV</span> TRT_LIBPATH /usr/lib/x86_64-linux-gnu</span><br><span class="line"><span class="keyword">ENV</span> TRT_OSSPATH /workspace/TensorRT</span><br><span class="line"><span class="keyword">ENV</span> LD_LIBRARY_PATH=<span class="string">&quot;$&#123;LD_LIBRARY_PATH&#125;:$&#123;TRT_OSSPATH&#125;/build/out:$&#123;TRT_LIBPATH&#125;&quot;</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> trtuser</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;centos&quot;&gt;centos&lt;/h3&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://www.yuanyuan.blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose例子</title>
    <link href="https://www.yuanyuan.blog/posts/bad9d448.html"/>
    <id>https://www.yuanyuan.blog/posts/bad9d448.html</id>
    <published>2023-07-08T20:40:53.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="kavita漫画">Kavita漫画</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">kavita:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">kizaing/kavita:latest</span>    <span class="comment"># Change latest to nightly for latest develop builds (can&#x27;t go back to stable)</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">kavita</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./manga:/manga</span>            <span class="comment"># Manga is just an example you can have the name you want. See the following</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./comics:/comics</span>          <span class="comment"># Use as many as you want</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./books:/books</span>            <span class="comment">#</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/kavita/config</span>     <span class="comment"># Change &#x27;./data if you want to have the config files in a different place.</span></span><br><span class="line">                                        <span class="comment"># /kavita/config must not be changed</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Your/Timezone</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span> <span class="comment"># Change the public port (the first 5000) if you have conflicts with other services</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><h3 id="lazydocker">lazydocker</h3><p>lazydocker<strong>是一个TUI应用程序，可以帮助您在一个地方管理和监控所有的Docker容器</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lazydocker:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">https://github.com/jesseduffield/lazydocker.git</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">BASE_IMAGE_BUILDER:</span> <span class="string">golang</span></span><br><span class="line">        <span class="attr">GOARCH:</span> <span class="string">amd64</span></span><br><span class="line">        <span class="attr">GOARM:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lazyteam/lazydocker</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lazydocker</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/.config/jesseduffield/lazydocker</span></span><br></pre></td></tr></table></figure><h3 id="mysql一主二从同步高可用集群">MySQL一主二从同步高可用集群</h3><h4 id="docker-compose文件配置">docker-compose文件配置</h4><p>建立如下目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br><span class="line">├── master</span><br><span class="line">│   └── docker-compose.yml</span><br><span class="line">├── slave1</span><br><span class="line">│   └── docker-compose.yml</span><br><span class="line">└── slave2</span><br><span class="line">    └── docker-compose.yml</span><br></pre></td></tr></table></figure><p>master/docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span>  <span class="comment"># 使用docker-compose版本3</span></span><br><span class="line"><span class="attr">services:</span>  <span class="comment"># 定义服务</span></span><br><span class="line">  <span class="attr">mysql_master:</span>  <span class="comment"># 定义一个名为mysql_master的服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.20</span>  <span class="comment"># 使用MySQL 8.0.20镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-master</span>  <span class="comment"># 指定容器名称为mysql_master</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span>  <span class="comment"># 在容器退出时自动重新启动</span></span><br><span class="line">    <span class="attr">command:</span>  <span class="comment"># 容器启动时执行的命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--server-id=1</span>  <span class="comment"># 设置MySQL服务器的ID为1，用于复制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay_log=relay-log</span> <span class="comment"># 开启中继日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=mysql</span>  <span class="comment"># 忽略在binlog中记录的数据库，这里为mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 禁用DNS解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每个事务提交时将日志写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync-binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_method=O_DIRECT</span>  <span class="comment"># 使用直接IO刷新InnoDB缓冲区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-bin=master-log</span>   <span class="comment"># 开启二进制日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_bin-index=master-bin.index</span>  <span class="comment"># 指定binlog索引文件名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connections=500</span>  <span class="comment"># 最大的并发连接数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connect_errors=100</span>  <span class="comment"># 连接错误的最大次数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span>  <span class="comment"># 设置服务器的字符集为UTF-8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-storage-engine=INNODB</span>  <span class="comment"># 设置默认存储引擎为InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span>  <span class="comment"># 设置默认身份验证插件为mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--expire-logs-days=7</span>  <span class="comment"># 设置binlog日志自动删除的天数为7天</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=information_schema</span>  <span class="comment"># 忽略在binlog中记录的数据库，这里为information_schema</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=performance_schema</span>  <span class="comment"># 忽略在binlog中记录的数据库，这里为performance_schema</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=sys</span>  <span class="comment"># 忽略在binlog中记录的数据库，这里为sys</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--gtid_mode=on</span>  <span class="comment"># 开启全局事务标识</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--enforce_gtid_consistency=on</span>  <span class="comment"># 强制全局事务标识的一致性</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_format=mixed</span>  <span class="comment"># 二进制日志的格式为混合模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync_binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_storage_engine=InnoDB</span>  <span class="comment"># 默认的存储引擎是InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--performance_schema_max_table_instances=400</span>  <span class="comment"># 性能模式中最大的表实例数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_definition_cache=400</span>  <span class="comment"># 表定义缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-external-locking</span>  <span class="comment"># 跳过外部锁定</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_allowed_packet=100G</span>  <span class="comment"># 数据包的最大大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_open_cache=512</span>  <span class="comment"># 表缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sort_buffer_size=2M</span>  <span class="comment"># 排序缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--net_buffer_length=4K</span>  <span class="comment"># 网络缓冲区的长度</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_buffer_size=2M</span>  <span class="comment"># 读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_rnd_buffer_size=256K</span>  <span class="comment"># 随机读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--thread_cache_size=64</span>  <span class="comment"># 线程缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tmp_table_size=64M</span>  <span class="comment"># 临时表的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--lower_case_table_names=1</span>  <span class="comment"># 表名是否区分大小写，1表示不区分大小写</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span>  <span class="comment"># SQL模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--explicit_defaults_for_timestamp=true</span>  <span class="comment"># 如果设置为true，则对于TIMESTAMP列，使用显式DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP定义</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 跳过DNS解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--open_files_limit=65535</span>  <span class="comment"># 可打开文件的数量限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_expire_logs_seconds=600000</span>  <span class="comment"># 当二进制日志文件超过指定秒数时，将被自动删除</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--slow_query_log=1</span>  <span class="comment"># 启用慢查询日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--long_query_time=3</span>  <span class="comment"># 超过指定秒数的查询将被认为是慢查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_queries_not_using_indexes=on</span>  <span class="comment"># 记录未使用索引的查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_buffer_pool_size=512M</span>  <span class="comment"># InnoDB缓冲池的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_file_size=256M</span>  <span class="comment"># InnoDB日志文件的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_buffer_size=64M</span>  <span class="comment"># InnoDB日志缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每次事务提交时，是否将日志缓冲区的内容刷新到磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_lock_wait_timeout=50</span>  <span class="comment"># InnoDB锁等待超时时间</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_max_dirty_pages_pct=90</span>  <span class="comment"># InnoDB脏页的最大百分比</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_read_io_threads=8</span>  <span class="comment"># InnoDB读线程的数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_write_io_threads=8</span>  <span class="comment"># InnoDB写线程的数量</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment"># 定义容器和主机之间的端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;33061:3306&quot;</span>  <span class="comment"># 将容器的3306端口映射到主机的33061端口</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 定义环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">1024</span>  <span class="comment"># 设置MySQL的root用户密码为1024</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span> <span class="comment">#解决时区问题</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment"># 定义数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span>  <span class="comment"># 将本地的master目录挂载到容器的/var/lib/mysql目录中</span></span><br></pre></td></tr></table></figure><p>slave1/docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql_slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.20</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-slave1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--server-id=2</span>  <span class="comment"># 设置MySQL服务器的唯一标识</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay-log-index=slave-relay-bin.index</span>  <span class="comment"># 设置中继日志索引的文件名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay-log=relay-log</span>  <span class="comment"># 开启中继日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-bin=master-log</span>  <span class="comment"># 开启二进制日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_only=ON</span> <span class="comment"># 启用只读属性</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay_log_purge=0</span> <span class="comment"># 是否自动清空不再需要中继日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-slave-updates=1</span>  <span class="comment"># 开启从服务器记录二进制日志更新的功能</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connections=200</span>  <span class="comment"># 设置最大连接数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connect_errors=10</span>  <span class="comment"># 设置最大连接错误数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span>  <span class="comment"># 设置服务器默认字符集为utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-storage-engine=INNODB</span>  <span class="comment"># 设置默认的存储引擎为InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span>  <span class="comment"># 设置默认的身份验证插件为mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_slave_updates=1</span>  <span class="comment"># 开启从服务器记录二进制日志更新的功能</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=information_schema</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=performance_schema</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=sys</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=mysql</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 禁用主机名解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每次事务提交时刷新日志缓冲区内容到磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync-binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_method=O_DIRECT</span>  <span class="comment"># 设置InnoDB的日志刷新方式为直接刷新</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--gtid_mode=on</span>  <span class="comment"># 开启全局事务标识</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--enforce_gtid_consistency=on</span>  <span class="comment"># 强制全局事务标识的一致性</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_format=mixed</span>  <span class="comment"># 设置二进制日志的格式为混合模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync_binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_storage_engine=InnoDB</span>  <span class="comment"># 设置默认的存储引擎为InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--performance_schema_max_table_instances=400</span>  <span class="comment"># 设置性能模式中最大的表实例数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_definition_cache=400</span>  <span class="comment"># 设置表定义缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-external-locking</span>  <span class="comment"># 跳过外部锁定</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_allowed_packet=100G</span>  <span class="comment"># 设置数据包的最大大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_open_cache=512</span>  <span class="comment"># 设置表缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sort_buffer_size=2M</span>  <span class="comment"># 设置排序缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--net_buffer_length=4K</span>  <span class="comment"># 设置网络缓冲区的长度</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_buffer_size=2M</span>  <span class="comment"># 设置读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_rnd_buffer_size=256K</span>  <span class="comment"># 设置随机读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--thread_cache_size=64</span>  <span class="comment"># 设置线程缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tmp_table_size=64M</span>  <span class="comment"># 设置临时表的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--lower_case_table_names=1</span>  <span class="comment"># 设置表名是否区分大小写，1表示不区分大小写</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span>  <span class="comment"># 设置SQL模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--explicit_defaults_for_timestamp=true</span>  <span class="comment"># 如果设置为true，则对于TIMESTAMP列，使用显式DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP定义</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 跳过DNS解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--open_files_limit=65535</span>  <span class="comment"># 设置可打开文件的数量限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_expire_logs_seconds=600000</span>  <span class="comment"># 当二进制日志文件超过指定秒数时，将被自动删除</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--slow_query_log=1</span>  <span class="comment"># 启用慢查询日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--long_query_time=3</span>  <span class="comment"># 设置超过指定秒数的查询将被认为是慢查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_queries_not_using_indexes=on</span>  <span class="comment"># 记录未使用索引的查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_buffer_pool_size=512M</span>  <span class="comment"># 设置InnoDB缓冲池的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_file_size=256M</span>  <span class="comment"># 设置InnoDB日志文件的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_buffer_size=64M</span>  <span class="comment"># 设置InnoDB日志缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每次事务提交时，是否将日志缓冲区的内容刷新到磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_lock_wait_timeout=50</span>  <span class="comment"># 设置InnoDB锁等待超时时间</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_max_dirty_pages_pct=90</span>  <span class="comment"># 设置InnoDB脏页的最大百分比</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_read_io_threads=8</span>  <span class="comment"># 设置InnoDB读线程的数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_write_io_threads=8</span>  <span class="comment"># 设置InnoDB写线程的数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--master_info_repository=TABLE</span> <span class="comment">#指定存储主服务器信息的文件的类型</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay_log_info_repository=FILE</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;33062:3306&quot;</span>  <span class="comment"># 将容器的3306端口映射到主机的33062端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">1024</span> <span class="comment"># root用户密码</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_HOST:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span> <span class="comment"># 指定主服务器的地址</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_PORT:</span> <span class="number">33061</span> <span class="comment"># 指定主服务器的端口</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_USER:</span> <span class="string">root</span> <span class="comment"># 主服务器的root用户</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_PASSWORD:</span> <span class="number">1024</span> <span class="comment"># 主服务器的root密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span>  <span class="comment"># 将本地的slave1目录挂载到容器的/var/lib/mysql目录中</span></span><br></pre></td></tr></table></figure><p>slave2/docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql_slave2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.20</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-slave2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--server-id=3</span>  <span class="comment"># 设置MySQL服务器的唯一标识</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay-log-index=slave-relay-bin.index</span>  <span class="comment"># 设置中继日志索引的文件名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay-log=relay-log</span>  <span class="comment"># 开启中继日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-bin=master-log</span>  <span class="comment"># 开启二进制日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_only=ON</span> <span class="comment"># 启用只读属性</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay_log_purge=0</span> <span class="comment"># 是否自动清空不再需要中继日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-slave-updates=1</span>  <span class="comment"># 开启从服务器记录二进制日志更新的功能</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connections=200</span>  <span class="comment"># 设置最大连接数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_connect_errors=10</span>  <span class="comment"># 设置最大连接错误数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span>  <span class="comment"># 设置服务器默认字符集为utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-storage-engine=INNODB</span>  <span class="comment"># 设置默认的存储引擎为InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span>  <span class="comment"># 设置默认的身份验证插件为mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_slave_updates=1</span>  <span class="comment"># 开启从服务器记录二进制日志更新的功能</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=information_schema</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=performance_schema</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=sys</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog-ignore-db=mysql</span>  <span class="comment"># 忽略复制的数据库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 禁用主机名解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每次事务提交时刷新日志缓冲区内容到磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync-binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_method=O_DIRECT</span>  <span class="comment"># 设置InnoDB的日志刷新方式为直接刷新</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--gtid_mode=on</span>  <span class="comment"># 开启全局事务标识</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--enforce_gtid_consistency=on</span>  <span class="comment"># 强制全局事务标识的一致性</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_format=mixed</span>  <span class="comment"># 设置二进制日志的格式为混合模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sync_binlog=1</span>  <span class="comment"># 立即将binlog写入磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_storage_engine=InnoDB</span>  <span class="comment"># 设置默认的存储引擎为InnoDB</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--performance_schema_max_table_instances=400</span>  <span class="comment"># 设置性能模式中最大的表实例数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_definition_cache=400</span>  <span class="comment"># 设置表定义缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-external-locking</span>  <span class="comment"># 跳过外部锁定</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--max_allowed_packet=100G</span>  <span class="comment"># 设置数据包的最大大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--table_open_cache=512</span>  <span class="comment"># 设置表缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sort_buffer_size=2M</span>  <span class="comment"># 设置排序缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--net_buffer_length=4K</span>  <span class="comment"># 设置网络缓冲区的长度</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_buffer_size=2M</span>  <span class="comment"># 设置读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--read_rnd_buffer_size=256K</span>  <span class="comment"># 设置随机读缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--thread_cache_size=64</span>  <span class="comment"># 设置线程缓存的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tmp_table_size=64M</span>  <span class="comment"># 设置临时表的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--lower_case_table_names=1</span>  <span class="comment"># 设置表名是否区分大小写，1表示不区分大小写</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--sql-mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span>  <span class="comment"># 设置SQL模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--explicit_defaults_for_timestamp=true</span>  <span class="comment"># 如果设置为true，则对于TIMESTAMP列，使用显式DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP定义</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--skip-name-resolve</span>  <span class="comment"># 跳过DNS解析</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--open_files_limit=65535</span>  <span class="comment"># 设置可打开文件的数量限制</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--binlog_expire_logs_seconds=600000</span>  <span class="comment"># 当二进制日志文件超过指定秒数时，将被自动删除</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--slow_query_log=1</span>  <span class="comment"># 启用慢查询日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--long_query_time=3</span>  <span class="comment"># 设置超过指定秒数的查询将被认为是慢查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log_queries_not_using_indexes=on</span>  <span class="comment"># 记录未使用索引的查询</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_buffer_pool_size=512M</span>  <span class="comment"># 设置InnoDB缓冲池的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_file_size=256M</span>  <span class="comment"># 设置InnoDB日志文件的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_log_buffer_size=64M</span>  <span class="comment"># 设置InnoDB日志缓冲区的大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_flush_log_at_trx_commit=1</span>  <span class="comment"># 每次事务提交时，是否将日志缓冲区的内容刷新到磁盘</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_lock_wait_timeout=50</span>  <span class="comment"># 设置InnoDB锁等待超时时间</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_max_dirty_pages_pct=90</span>  <span class="comment"># 设置InnoDB脏页的最大百分比</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_read_io_threads=8</span>  <span class="comment"># 设置InnoDB读线程的数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--innodb_write_io_threads=8</span>  <span class="comment"># 设置InnoDB写线程的数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--master_info_repository=TABLE</span> <span class="comment">#指定存储主服务器信息的文件的类型</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--relay_log_info_repository=FILE</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;33063:3306&quot;</span>  <span class="comment"># 将容器的3306端口映射到主机的33062端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">1024</span> <span class="comment"># root用户密码</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_HOST:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span> <span class="comment"># 指定主服务器的地址</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_PORT:</span> <span class="number">33061</span> <span class="comment"># 指定主服务器的端口</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_USER:</span> <span class="string">root</span> <span class="comment"># 主服务器的root用户</span></span><br><span class="line">      <span class="attr">MYSQL_MASTER_PASSWORD:</span> <span class="number">1024</span> <span class="comment"># 主服务器的root密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span>  <span class="comment"># 设置时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span>  <span class="comment"># 将本地的slave1目录挂载到容器的/var/lib/mysql目录中</span></span><br></pre></td></tr></table></figure><h4 id="主节点配置">主节点配置</h4><p>进入主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p #登录mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装semisync_master模块，通过扩展库来安装半同步复制模块，需要指定扩展库的文件名，命令如下：</span></span><br><span class="line">install plugin rpl_semi_sync_master soname &#x27;semisync_master.so&#x27;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看系统全局参数，命令如下：</span></span><br><span class="line">show global variables like &#x27;rpl_semi%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128210200.png" alt="image-20240128210159629"></p><p>rpl_semi_sync_master_timeout就是半同步复制时等待应答的最长等待时间，默认是10秒，可以根据情况自行调整。rpl_semi_sync_master_wait_point其实表示一种半同步复制的方式。半同步复制有两种方式，一种是我们现在看到的这种默认的AFTER_SYNC方式。这种方式下，主库把日志写入binlog，并且复制给从库，然后开始等待从库的响应。从库返回成功后，主库再提交事务，接着给客户端返回一个成功响应。而另一种方式是叫做AFTER_COMMIT方式。他不是默认的。这种方式，在主库写入binlog后，等待binlog复制到从库，主库就提交自己的本地事务，再等待从库返回给自己一个成功响应，然后主库再给客户端返回响应。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开半同步复制的开关，命令如下：</span></span><br><span class="line">set global rpl_semi_sync_master_enabled=ON;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看系统全局参数，命令如下：</span></span><br><span class="line">show global variables like &#x27;rpl_semi%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128210338.png" alt="image-20240128210337964"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">授权，命令如下：</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1024&#x27;; #1024替换为你主节点设置的密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1024&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;#查看master的binlog信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128211025.png" alt="image-20240128211024997"></p><blockquote><p>需要注意的是File和Position的值，在配置从节点时需要对应上。</p></blockquote><h4 id="从节点配置">从节点配置</h4><p>进入每个slave节点操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-slave1 bash</span><br><span class="line">docker exec -it mysql-slave2 bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p #登录mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置主从同步，命令如下：</span></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&#x27;192.168.1.10&#x27;,</span><br><span class="line">MASTER_PORT=33061,</span><br><span class="line">MASTER_USER=&#x27;root&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;1024&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;master-log.000003&#x27;,</span><br><span class="line">MASTER_LOG_POS=895;</span><br><span class="line">set global read_only=1; #设置只读</span><br><span class="line">set global relay_log_purge=0; #不自动删除中继日志</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装semisync_master模块，通过扩展库来安装半同步复制模块，需要指定扩展库的文件名，命令如下：</span></span><br><span class="line">install plugin rpl_semi_sync_master soname &#x27;semisync_master.so&#x27;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开半同步复制的开关，命令如下：</span></span><br><span class="line">set global rpl_semi_sync_master_enabled=ON;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启主从配置，查看从节点状态，命令如下：</span></span><br><span class="line">START SLAVE;</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128212508.png" alt="image-20240128212507992"></p><p>最后授权就可以使用navicat连接了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">授权，命令如下：</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1024&#x27;; #1024替换为你从节点设置的密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1024&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="redis高可用一主二从三哨兵集群">redis高可用一主二从三哨兵集群</h3><p>建立如下目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel</span><br><span class="line">├── redis</span><br><span class="line">│   ├── docker-compose.yml</span><br><span class="line">└── sentinel</span><br><span class="line">    ├── docker-compose.yml</span><br><span class="line">    ├── sentinel1.conf</span><br><span class="line">    ├── sentinel2.conf</span><br><span class="line">    └── sentinel3.conf</span><br></pre></td></tr></table></figure><h4 id="一主二从">一主二从</h4><p>其中redis目录下docker-compose.yml文件内容如下:</p><p><code>protected-mode no</code>：关闭就可以其他地方连接使用了</p><p><code>slave-announce-ip</code>：使用宿主机的ip</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;4.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-master</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="number">1024</span> <span class="string">--protected-mode</span> <span class="literal">no</span> <span class="string">--slave-announce-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span> <span class="string">--slave-announce-port</span> <span class="number">6379</span> <span class="string">--masterauth</span> <span class="number">1024</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./master_data:/data</span></span><br><span class="line">  <span class="attr">slave1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="string">redis-master</span> <span class="number">6379</span>  <span class="string">--requirepass</span> <span class="number">1024</span> <span class="string">--protected-mode</span> <span class="literal">no</span> <span class="string">--slave-announce-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span> <span class="string">--masterauth</span> <span class="number">1024</span> <span class="string">--slave-announce-port</span> <span class="number">6380</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6380</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./slave-1_data:/data</span></span><br><span class="line">  <span class="attr">slave2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-slave-2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="string">redis-master</span> <span class="number">6379</span>  <span class="string">--requirepass</span> <span class="number">1024</span> <span class="string">--protected-mode</span> <span class="literal">no</span> <span class="string">--slave-announce-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span> <span class="string">--masterauth</span> <span class="number">1024</span> <span class="string">--slave-announce-port</span> <span class="number">6381</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./slave-2_data:/data</span></span><br></pre></td></tr></table></figure><h4 id="redis启用密码认证">Redis启用密码认证</h4><p>Redis主从和clsuter支持密码认证的。<strong>redis启用密码认证一定要requirepass和masterauth同时设置</strong>。如果主节点设置了requirepass登录验证，在主从切换，slave在和master做数据同步的时候首先需要发送一个ping的消息给主节点判断主节点是否存活，再监听主节点的端口是否联通，发送数据同步等都会用到master的登录密码，否则无法登录，log会出现响应的报错。也就是说slave的masterauth和master的requirepass是对应的，所以建议redis启用密码时将各个节点的masterauth和requirepass设置为相同的密码，降低运维成本。当然设置为不同也是可以的，注意slave节点masterauth和master节点requirepass的对应关系就行。</p><ul><li><strong>masterauth作用</strong>：主要是针对master对应的slave节点设置的，在slave节点数据同步的时候用到。</li><li><strong>requirepass作用</strong>：对登录权限做限制，redis每个节点的requirepass可以是独立、不同的。</li></ul><h4 id="redis-sentinel">Redis Sentinel</h4><p>Redis 的 Sentinel 系统用于管理多个 Redis 服务器（instance）， 该系统执行以下三个任务：</p><ul><li><strong>监控</strong>（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li><li><strong>提醒</strong>（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li><li><strong>自动故障迁移</strong>（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</li></ul><p>Redis Sentinel 是一个<strong>分布式系统</strong>， 你可以在一个架构中运行多个 Sentinel 进程（progress）， 这些进程使用<strong>流言协议（gossipprotocols)</strong> 来接收关于主服务器是否下线的信息， 并使用<strong>投票协议（agreementprotocols）</strong> 来决定是否执行自动故障迁移， 以及选择哪个从服务器作为新的主服务器。 虽然 Redis Sentinel 释出为一个单独的可执行文件 redis-sentinel ， 但实际上它只是一个运行在特殊模式下的 Redis 服务器， 你可以在启动一个普通 Redis 服务器时通过给定 –sentinel 选项来启动 Redis Sentinel 。</p><p>sentinel哨兵目录下docker-compose.yml文件内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;4.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26379</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">26380</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26381</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis_default</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>sentinel1.conf、sentinel2.conf、sentinel3.conf中内容如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line"># 自定义集群名，其中192.168.1.10 为 宿主机 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2）</span><br><span class="line">sentinel monitor mymaster 192.168.1.10 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel auth-pass mymaster 1024</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><p>分别在redis和sentinel目录下使用docker compose up -d运行，加参数 -d 可以实现后台运行</p><p>看到如下打印输出说明集群已经启动起来了</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128155338.png" alt="image-20240128155338122"></p><h4 id="验证">验证</h4><p>主节点</p><p><code>docker exec -it redis-master redis-cli</code>进入主机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">info之前先进行授权 auth redis_pwd（requirepass的值）</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>可以看到当前redis的角色和从节点数以及从节点信息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128161339.png" alt="image-20240128161339299"></p><p>从节点</p><p><code>docker exec -it redis-slave-1 redis-cli</code>进入从机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">info之前先进行授权 auth redis_pwd（requirepass的值）</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128161910.png" alt="image-20240128161910647"></p><p>哨兵节点</p><p><code>docker exec -it redis-sentinel-1 bash</code>查看哨兵信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 26379 #连接客户端，注意端口号为26379</span><br><span class="line">info sentinel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128163828.png" alt="image-20240128163827930"></p><p>在sentinel目录下<code>docker compose logs -f</code>查看日志</p><p>此时我们停掉redis-master</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop redis-master</span><br></pre></td></tr></table></figure><p>查看哨兵日志可以发现哨兵经过投票将新的master节点赋予了redis-slave-1(你的可能跟我的不一样，根据你的从节点容器ip确定)</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128174741.png" alt="image-20240128174740836"></p><p>进入redis-slave-1查看信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis-slave-1 redis-cli #进入redis-slave-1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">info之前先进行授权 auth redis_pwd（requirepass的值）</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>发现redis-slave-1的角色变为了master</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240128164834.png" alt="image-20240128164834009"></p><h4 id="主观下线和客观下线">主观下线和客观下线</h4><p>由上述配置知down-after-milliseconds 选项指定了 Sentinel 认为服务器已经断线所需的毫秒数。 如果服务器在给定的毫秒数之内， 没有返回 Sentinel 发送的 PING 命令的回复， 或者返回一个错误， 那么 Sentinel 将这个服务器标记为主观下线（subjectively down，简称 SDOWN）</p><ul><li>主观下线（Subjectively Down， 简称 SDOWN）指的是单个 Sentinel 实例对服务器做出的下线判断。</li><li>客观下线（Objectively Down， 简称 ODOWN）指的是多个 Sentinel 实例在对同一个服务器做出 SDOWN 判断， 并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后， 得出的服务器下线判断。 （一个 Sentinel 可以通过向另一个 Sentinel 发送 SENTINEL is-master-down-by-addr 命令来询问对方是否认为给定的服务器已下线。）客观下线条件<strong>只适用于主服务器</strong></li></ul><p>如果一个服务器没有在 master-down-after-milliseconds 选项所指定的时间内， 对向它发送 PING 命令的 Sentinel 返回一个有效回复[+PONG 、 -LOADING 或者 -MASTERDOWN 。]， 那么 Sentinel 就会将这个服务器标记为主观下线。</p><h4 id="sentinel-命令">Sentinel 命令</h4><ul><li>PING ：返回 PONG 。</li><li>SENTINEL masters ：列出所有被监视的主服务器，以及这些主服务器的当前状态。</li><li>SENTINEL slaves ：列出给定主服务器的所有从服务器，以及这些从服务器的当前状态。 SENTINEL get-master-addr-by-name ： 返回给定名字的主服务器的 IP 地址和端口号。 如果这个主服务器正在执行故障转移操作， 或者针对这个主服务器的故障转移操作已经完成， 那么这个命令返回新的主服务器的 IP 地址和端口号。</li><li>SENTINEL reset ： 重置所有名字和给定模式 pattern 相匹配的主服务器。 pattern 参数是一个 Glob 风格的模式。 重置操作清楚主服务器目前的所有状态， 包括正在执行中的故障转移， 并移除目前已经发现和关联的， 主服务器的所有从服务器和 Sentinel 。</li><li>SENTINEL failover ： 当主服务器失效时， 在不询问其他 Sentinel 意见的情况下， 强制开始一次自动故障迁移 （不过发起故障转移的 Sentinel 会向其他 Sentinel 发送一个新的配置，其他 Sentinel 会根据这个配置进行相应的更新）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;kavita漫画&quot;&gt;Kavita漫画&lt;/h3&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://www.yuanyuan.blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jenv管理多版本jdk</title>
    <link href="https://www.yuanyuan.blog/posts/9f01ffa.html"/>
    <id>https://www.yuanyuan.blog/posts/9f01ffa.html</id>
    <published>2023-07-05T19:24:26.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装">安装</h3><h4 id="linux-os-x">Linux / OS X</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jenv/jenv.git ~/.jenv</span><br></pre></td></tr></table></figure><h3 id="添加环境变量">添加环境变量</h3><h4 id="bash">Bash</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="zsh">Zsh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="添加jdk位置">添加jdk位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv add /usr/local/java/jdk1.8.0_371/</span><br></pre></td></tr></table></figure><h3 id="使用">使用</h3><h4 id="列出全部jdk">列出全部jdk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jenv versions</span></span><br><span class="line">  system</span><br><span class="line">  oracle64-1.6.0.39</span><br><span class="line">* oracle64-1.7.0.11</span><br></pre></td></tr></table></figure><h4 id="设置全局jdk版本">设置全局jdk版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv global oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h4 id="设置全局jdk版本-每个目录">设置全局jdk版本(每个目录)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv local oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h4 id="设置终端jdk版本">设置终端jdk版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv shell oracle64-1.6.0.39</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;h4 id=&quot;linux-os-x&quot;&gt;Linux / OS X&lt;/h4&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="jenv" scheme="https://www.yuanyuan.blog/tags/jenv/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu22.04安装配置neo4j</title>
    <link href="https://www.yuanyuan.blog/posts/157e09f6.html"/>
    <id>https://www.yuanyuan.blog/posts/157e09f6.html</id>
    <published>2023-07-05T18:44:09.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<p>neo4j 5 对 jre 版本要求是 17 及以上，且最好是 openjdk，使用比较新的 ubuntu 系统安装比较好， centos7 因为没有维护，yum 找不到 openjdk-17了。</p><h3 id="安装-openjdk-17-可以不安装-安装neo4j时默认会安装">安装 openjdk-17(可以不安装,安装neo4j时默认会安装)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get -y install openjdk-17-jdk openjdk-17-dbg openjdk-17-jre </span><br><span class="line">java -version </span><br></pre></td></tr></table></figure><h3 id="添加-neo4j-的仓库">添加 neo4j 的仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo apt-key add -</span><br><span class="line">echo &#x27;deb https://debian.neo4j.com stable latest&#x27; | sudo tee -a /etc/apt/sources.list.d/neo4j.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo add-apt-repository universe</span><br></pre></td></tr></table></figure><h3 id="安装-neo4j">安装 neo4j</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt list -a neo4j <span class="comment">#显示 neo4j 各个版本，选择自己需要的</span></span></span><br><span class="line">sudo apt-get -y install neo4j=1:5.5.0 # 选择 5.5 版本</span><br></pre></td></tr></table></figure><h3 id="查看版本">查看版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j --version</span><br></pre></td></tr></table></figure><h3 id="设置初始密码">设置初始密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo neo4j-admin dbms set-initial-password &lt;password&gt; # &lt;password&gt; 记得改成自己密码</span><br></pre></td></tr></table></figure><h3 id="修改-neo4j-监听地址">修改 neo4j 监听地址</h3><p>找到 neo4j 的配置文件，将服务监听地址改成全局地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/neo4j/neo4j.conf</span><br></pre></td></tr></table></figure><p>取消掉如下 3 行的注释，保存配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.default_listen_address=0.0.0.0</span><br><span class="line">server.http.listen_address=:7474</span><br><span class="line">server.http.advertised_address=:7474</span><br></pre></td></tr></table></figure><h3 id="启动-neo4j-服务">启动 neo4j 服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start neo4j.service</span><br></pre></td></tr></table></figure><p>ss -ntlp 看到 neo4j 监听端口，就说明启动成功了</p><p>访问 <a href="http://localhost:7474">http://localhost:7474</a>，输入账号 neo4j 以及自己设置的密码，就可以登录了。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125203804.png" alt="截图 2024-01-25 20-33-59" style="zoom:80%;" /><h3 id="安装-apoc-插件">安装 apoc 插件</h3><p>Neo4j 5 版本 apoc 插件改成了两个部分 apoc-core 和 apoc-extend，5.5 版本就下 5.5 的插件</p><ul><li>apoc-core <a href="https://github.com/neo4j/apoc">GitHub - neo4j/apoc</a></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125205953.png" alt="Snipaste_2024-01-25_20-56-12" style="zoom:80%;" /><ul><li>apoc-extended  <a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures">GitHub - neo4j-contrib/neo4j-apoc-procedures: Awesome Procedures On Cypher for Neo4j - codenamed “apoc”</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240125210103.png" alt="Snipaste_2024-01-25_20-56-12"></p><p>下好了后放到 neo4j 的 plugins 目录，这个目录可以在 neo4j.conf 中找到，本次安装默认配置的路径是 <strong>/var/lib/neo4j/plugins</strong></p><p>编辑 neo4j 配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/neo4j/neo4j.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消以下行的注释，添加 apoc 扩展</span></span><br><span class="line">dbms.security.procedures.unrestricted=apoc.*</span><br></pre></td></tr></table></figure><p>在 /etc/neo4j/ 目录下新建 apoc.conf 文件，添加 apoc 插件配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/neo4j/apoc.conf</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下行</span></span><br><span class="line">apoc.import.file.enabled=true</span><br><span class="line">apoc.import.file.use_neo4j_config=false</span><br></pre></td></tr></table></figure><p>重新启动 neo4j 访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;neo4j 5 对 jre 版本要求是 17 及以上，且最好是 openjdk，使用比较新的 ubuntu 系统安装比较好， centos7 因为没有维护，yum 找不到 openjdk-17了。&lt;/p&gt;
&lt;h3 id=&quot;安装-openjdk-17-可以不安装-安装neo4</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuan.blog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="neo4j" scheme="https://www.yuanyuan.blog/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu终端美化</title>
    <link href="https://www.yuanyuan.blog/posts/969f7c6b.html"/>
    <id>https://www.yuanyuan.blog/posts/969f7c6b.html</id>
    <published>2023-07-04T11:59:45.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非root用户安装">非root用户安装</h2><p>本教程会安装zsh，autojump，zsh-autosuggestions，zsh-syntax-highlighting等插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cd ~ # 到用户目录</span><br><span class="line">mkdir software # 创建目录，在该目录下安装zsh和其他插件</span><br><span class="line">cd software</span><br><span class="line">wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download</span><br><span class="line">mkdir zsh &amp;&amp; unxz zsh.tar.xz &amp;&amp; tar -xvf zsh.tar -C zsh --strip-components 1</span><br><span class="line">cd zsh</span><br><span class="line"></span><br><span class="line">./configure --prefix=$HOME/software</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 安装路径放到PATH中</span></span><br><span class="line">echo &#x27;export PATH=&quot;$HOME/software/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行下面命令</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">cd ~/software # 回software目录，安装ohmyzsh，用于自动生成.zshrc文件</span><br><span class="line">git clone https://github.com/ohmyzsh/ohmyzsh.git</span><br><span class="line">cd ohmyzsh/tools/</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这儿会让选择是否将zsh设置为默认的shell，选择n</span></span><br><span class="line">echo &quot;zsh&quot; &gt;&gt; ~/.bashrc # 每次打开终端，在最后都让他去执行zsh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装 zsh-autosuggestions （自动补全可能路径）</span></span><br><span class="line">cd ~/software # 回到software目录，安装zsh-autosuggestions插件</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 autojump （快速跳转）</span></span><br><span class="line">git clone https://github.com/joelthelion/autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">./install.py   #如果这里提示没有安装 python，请自行安装python，可以考虑直接安装anaconda</span><br><span class="line"></span><br><span class="line">echo &quot;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh&quot; &gt;&gt; ~/.zshrc </span><br><span class="line"></span><br><span class="line">cd ~/software # 回software目录，下载语法高亮插件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装 zsh-syntax-highlighting （终端输入高亮 正确路径下划线）</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新插件配置</span></span><br><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)</span></span><br><span class="line">source .zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;非root用户安装&quot;&gt;非root用户安装&lt;/h2&gt;
&lt;p&gt;本教程会安装zsh，autojump，zsh-autosuggestions，zsh-syntax-highlighting等插件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="wine" scheme="https://www.yuanyuan.blog/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装wine</title>
    <link href="https://www.yuanyuan.blog/posts/818c90c8.html"/>
    <id>https://www.yuanyuan.blog/posts/818c90c8.html</id>
    <published>2023-06-30T19:41:14.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在ubuntu中想要运行windows应用时，就需要安装wine。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt update</span><br><span class="line">wget -qO- https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo apt-add-repository &quot;deb http://dl.winehq.org/wine-builds/ubuntu/ $(lsb_release -cs) main&quot;</span><br><span class="line">sudo apt install --install-recommends winehq-stable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看wine版本</span></span><br><span class="line">wine --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们在ubuntu中想要运行windows应用时，就需要安装wine。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="wine" scheme="https://www.yuanyuan.blog/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>postgresql</title>
    <link href="https://www.yuanyuan.blog/posts/126df961.html"/>
    <id>https://www.yuanyuan.blog/posts/126df961.html</id>
    <published>2023-06-28T20:59:23.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装postgresql">安装postgresql</h1><h2 id="在ubuntu上安装">在ubuntu上安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><p>我们同时安装 PostgreSQL contrib 软件包，它可以提供 PostgreSQL 数据库系统的一些额外特性。</p><p>一旦安装完成， PostgreSQL 服务将会自动启动。使用<code>psql</code>工具通过连接 PostgreSQL 数据库并且打印它的版本来验证安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql -c &quot;SELECT version();&quot;</span><br></pre></td></tr></table></figure><h3 id="postgresql-角色和身份认证方式">PostgreSQL 角色和身份认证方式</h3><p>PostgreSQL 数据库访问权限是通过角色来处理的。一个角色代表一个数据库用户或者一个数据库用户组。</p><p>PostgreSQL 支持多种身份认证方式。最常用的方法如下：</p><ul><li>Trust - 只要满足<code>pg_hba.conf</code>定义的条件，一个角色就可以不使用密码就能连接服务器</li><li>Password - 通过密码，一个角色可以连接服务器。密码可以被存储为 scram-sha-256, md5, 和 password(明文)。</li><li>Ident - 仅仅支持 TCP/IP 连接。它通常通过一个可选的用户名映射表，获取客户端操作系统用户名。</li><li>Peer - 和 Ident 一样，仅仅支持本地连接。</li></ul><p>PostgreSQL 客户端身份验证通常被定义在<code>pg_hba.conf</code>文件中。默认情况下，对于本地连接，PostgreSQL 被设置成身份认证防范 peer。</p><p>为了以<code>postgres</code>用户身份登录 PostgreSQL 服务器，首先切换用户，然后使用<code>psql</code>工具访问 PostgreSQL并设置初始密码(方便使用数据库管理工具如navicat连接)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres</span><br><span class="line">psql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置初始密码</span></span><br><span class="line">\password postgres</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">ALTER USER postgres WITH PASSWORD &#x27;xxxxxx&#x27;;</span><br></pre></td></tr></table></figure><p>从这里开始，你可以与 PostgreSQL 实例交互。退出 PostgreSQL Shell，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure><p>你也可以不切换用户，而使用<code>sudo</code>命令访问 PostgreSQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p>通常，<code>postgres</code>用户仅仅在本地被使用。</p><h3 id="创建-postgresql-角色和数据库-可选">创建 PostgreSQL 角色和数据库(可选)</h3><p>仅仅超级用户和拥有<code>CREATEROLE</code>权限的角色可以创建新角色。</p><p>在下面的例子中，我们创建一个名称为<code>yuanyuan</code>的角色，一个名称为<code>yuanyuandb</code>的数据库，并且授予数据库上的权限：</p><p>01.创建一个新的 PostgreSQL 角色：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres -c &quot;createuser yuanyuan&quot;</span><br></pre></td></tr></table></figure><p>02.创建一个新的 PostgreSQL 数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - postgres -c &quot;createdb yuanyuandb&quot;</span><br></pre></td></tr></table></figure><p>想要授权用户操作数据库，连接到 PostgreSQL shell:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p>并且运行下面的 query:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on database yuanyuandb to yuanyuan;</span><br></pre></td></tr></table></figure><h3 id="启用远程访问-postgresql-服务器-可选">启用远程访问 PostgreSQL 服务器(可选)</h3><p>默认情况下，PostgreSQL 服务器仅仅监听本地网络接口：<code>127.0.0.1</code>。</p><p>为了允许远程访问你的 PostgreSQL 服务器，打开配置文件<code>postgresql.conf</code>并且在<code>CONNECTIONS AND AUTHENTICATION</code>一节添加<code>listen_addresses = '*'</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/postgresql/12/main/postgresql.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONNECTIONS AND AUTHENTICATION</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- Connection Settings -</span></span><br><span class="line"></span><br><span class="line">listen_addresses = &#x27;*&#x27;     # what IP address(es) to listen on;</span><br></pre></td></tr></table></figure><p>保存文件并且重启 PostgreSQL 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql restart</span><br></pre></td></tr></table></figure><p>使用<code>ss</code>工具验证修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -nlt | grep 5432</span><br></pre></td></tr></table></figure><p>输出显示 PostgreSQL 服务器正在监听所有的网络接口(<code>0.0.0.0</code>):</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LISTEN  0        244              0.0.0.0:5432           0.0.0.0:*              </span><br><span class="line">LISTEN  0        244                 [::]:5432              [::]:*</span><br></pre></td></tr></table></figure><p>下一步就是配置服务器接受远程连接，编辑<code>pg_hba.conf</code>文件。</p><p>下面是一些例子，显示不同的用户场景：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span><br><span class="line"></span><br><span class="line"># The user yuanyuan can access all databases from all locations using md5 password</span><br><span class="line">host    all             yuanyuan        0.0.0.0/0                md5</span><br><span class="line"></span><br><span class="line"># The user yuanyuan can access only the yuanyuandb from all locations using md5 password</span><br><span class="line">host    yuanyuandb      yuanyuan        0.0.0.0/0                md5</span><br><span class="line"></span><br><span class="line"># The user yuanyuan can access all databases from a trusted location (192.168.1.134) without a password</span><br><span class="line">host    all             yuanyuan        192.168.1.134            trust</span><br></pre></td></tr></table></figure><p>最后一步就是在你的防火墙上打开端口<code>5432</code>端口。</p><p>假设你正在使用<code>UFW</code>来管理你的防火墙，并且你想允许从<code>192.168.1.0/24</code>子网过来的访问，你应该运行下面的命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow proto tcp from 192.168.1.0/24 to any port 5432</span><br></pre></td></tr></table></figure><p>确保你的防火墙被配置好，并仅仅接受来自受信任 IP 范围的连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装postgresql&quot;&gt;安装postgresql&lt;/h1&gt;
&lt;h2 id=&quot;在ubuntu上安装&quot;&gt;在ubuntu上安装&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.yuanyuan.blog/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="postgresql" scheme="https://www.yuanyuan.blog/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>dos常用指令</title>
    <link href="https://www.yuanyuan.blog/posts/5784a051.html"/>
    <id>https://www.yuanyuan.blog/posts/5784a051.html</id>
    <published>2023-05-03T20:10:06.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dos-的基本介绍">dos 的基本介绍</h2><p>Dos： Disk Operating System 磁盘操作系统, 简单说一下 windows 的目录结构</p><h2 id="dos-的基本操作原理">dos 的基本操作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201204.png" alt="image-20230503201204522"></p><h2 id="目录操作指令">目录操作指令</h2><p>查看当前目录是什么</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201247.png" alt="image-20230503201247375"></p><h3 id="切换目录">切换目录</h3><p>切换到其他盘下：盘符号 F 盘</p><p>案例演示：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201328.png" alt="image-20230503201328280"></p><p>切换到当前盘的其他目录下 (使用相对路径和绝对路径演示)<br>案例演示：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201348.png" alt="image-20230503201348645"></p><p>切换到上一级：</p><blockquote><p>cd …</p></blockquote><p>切换到根目录：</p><blockquote><p>cd \</p></blockquote><h3 id="新建目录-md-make-directory">新建目录 md （make directory）</h3><p>新建一个目录：</p><blockquote><p>md dirName</p></blockquote><p>新建多个目录：</p><blockquote><p>md dirName1 dirName2</p></blockquote><h3 id="删除目录">删除目录</h3><p>删除空目录</p><blockquote><p>rd dirName</p></blockquote><p>删除目录以及下面的子目录和文件，不带询问</p><blockquote><p>rd /q/s dirName</p></blockquote><p>删除目录以及下面的子目录和文件，带询问</p><blockquote><p>rd /s dirName</p></blockquote><h2 id="文件的操作">文件的操作</h2><h3 id="新建或追加内容到文件">新建或追加内容到文件</h3><blockquote><p>echo xxx &gt; d:\1.txt</p><p>echo xxx &gt; 2.txt</p></blockquote><h3 id="复制或移动文件">复制或移动文件</h3><p>复制</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201856.png" alt="image-20230503201848117"></p><p>移动</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503201916.png" alt="image-20230503201916469"></p><h3 id="删除文件">删除文件</h3><p>删除指定文件</p><blockquote><p>del 1.txt</p><p>del /f “Read Only Test File.txt”  强制删除文件</p></blockquote><p>删除所有txt文件</p><blockquote><p>del *.txt</p></blockquote><h2 id="其它指令">其它指令</h2><h3 id="清屏">清屏</h3><blockquote><p>cls</p></blockquote><h3 id="退出-dos">退出 dos</h3><blockquote><p>exit</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dos-的基本介绍&quot;&gt;dos 的基本介绍&lt;/h2&gt;
&lt;p&gt;Dos： Disk Operating System 磁盘操作系统, 简单说一下 windows 的目录结构&lt;/p&gt;
&lt;h2 id=&quot;dos-的基本操作原理&quot;&gt;dos 的基本操作原理&lt;/h2&gt;
&lt;p&gt;&lt;im</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="dos" scheme="https://www.yuanyuan.blog/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>mongodb安装</title>
    <link href="https://www.yuanyuan.blog/posts/40605bfe.html"/>
    <id>https://www.yuanyuan.blog/posts/40605bfe.html</id>
    <published>2023-05-02T16:09:25.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows安装mongodb">windows安装mongodb</h2><h3 id="下载文件">下载文件</h3><p>首先在mongodb的官方网站上下载最新版本的mongodb安装程序</p><p>下载网址：<a href="https://www.mongodb.com/try/download/community?tck=docs_server">MongoDB Community Download | MongoDB</a></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503183640.png" alt="image-20230503183639389" style="zoom: 50%;" /><h3 id="安装">安装</h3><p>下载好后双击安装，目录自行选择，这里以安装在E目录为例</p><p>安装好后原本是没有data文件和log文件夹的，这里我们需要自己手动创建这两个文件夹，并且要在data文件夹中在创建一个db文件夹</p><h3 id="启动应用服务">启动应用服务</h3><p>以管理员身份运行cmd命令窗口，并进入至E:\MongoDB\bin目录下，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath E:\MongoDB\data\db</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503184044.png" alt="image-20230503184044345"></p><p>再打开一个cmd命令窗口，并且还是以管理员身份打开，进入到E:\MongoDB\bin目录下，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503184140.png" alt="image-20230503184139974"></p><p>如果出现这个界面就说明MongoDb已经启动成功了，但是要注意，这两个cmd命令框关闭后那么MongoDB也就结束服务了</p><h3 id="使用配置文件启动mongodb服务">使用配置文件启动MongoDB服务</h3><p>在<strong>E:\MongoDB\config</strong>下创建一个<strong>mongodb.conf</strong>文件，加入配置文件与直接运行命令的效果是一样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbpath=E:\MongoDb\data\db             # 数据库文件</span><br><span class="line">logpath=E:\MongoDB\log\mongodb.log    # 日志文件</span><br><span class="line">logappend=true                        # 日志采用追加模式，配置后mongodb日志会追加到现有的日志文件，不会重新创建一个新文件</span><br><span class="line">journal=true                          # 启用日志文件，默认启用</span><br><span class="line">quiet=true                            # 这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为 false</span><br><span class="line">port=27017                            # 端口号 默认为 27017</span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc create MongoDB binPath= &quot;E:\MongoDB\bin\mongod.exe --service --config=E:\MongoDb\config\mongodb.conf&quot;</span><br></pre></td></tr></table></figure><h3 id="添加环境变量">添加环境变量</h3><p>此时进入至mongodb的目录才可以使用mongodb的命令行工具，如果在其他的目录，是不可以使用mongodb的命令行工具的，我们可以将mongodb的目录加入至环境变量，这样在任何位置都可以使用mongodb命令行工具了</p><p>将mongodb的bin目录加入至path环境变量中即可</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503184610.png" alt="image-20230503184609716"></p><h2 id="ubuntu安装mongodb">ubuntu安装mongodb</h2><h3 id="导入包管理系统使用的公钥">导入包管理系统使用的公钥</h3><p>从终端安装<code>gnupg</code>（如果尚不可用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnupg</span><br></pre></td></tr></table></figure><p>发出以下命令以导入 MongoDB 公共 GPG 密钥https://pgp.mongodb.com/server-6.0.asc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \</span><br><span class="line">   sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg \</span><br><span class="line">   --dearmor</span><br></pre></td></tr></table></figure><h3 id="为-mongodb-创建一个列表文件">为 MongoDB 创建一个列表文件</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230502161557.png" alt="image-20230502161556772"></p><p><code>/etc/apt/sources.list.d/mongodb-org-6.0.list</code>为您的 Ubuntu 版本创建列表文件 。</p><p>单击适合您的 Ubuntu 版本的选项卡。如果您不确定主机正在运行哪个 Ubuntu 版本，请在主机上打开终端或 shell 并执行<code>lsb_release -dc</code>.</p><div class="tabs" id="mongodb-org-6.0.list"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mongodb-org-6.0.list-1">Ubuntu 22.04 Jammy)</button></li><li class="tab"><button type="button" data-href="#mongodb-org-6.0.list-2">Ubuntu 20.04 (Focal)</button></li><li class="tab"><button type="button" data-href="#mongodb-org-6.0.list-3">Ubuntu 18.04 (Bionic)</button></li><li class="tab"><button type="button" data-href="#mongodb-org-6.0.list-4">Ubuntu 16.04 (Xenial)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mongodb-org-6.0.list-1"><p><code>/etc/apt/sources.list.d/mongodb-org-6.0.list</code> 为**Ubuntu 22.04 (Jammy)**创建 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mongodb-org-6.0.list-2"><p><code>/etc/apt/sources.list.d/mongodb-org-6.0.list</code> 为**Ubuntu 20.04 (Focal)**创建 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mongodb-org-6.0.list-3"><p><code>/etc/apt/sources.list.d/mongodb-org-6.0.list</code> 为**Ubuntu 18.04 (Bionic)**创建 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/6.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mongodb-org-6.0.list-4"><p><code>/etc/apt/sources.list.d/mongodb-org-6.0.list</code> 为**Ubuntu 16.04 (Xenial)**创建 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/6.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="重新加载本地包数据库">重新加载本地包数据库</h3><p>发出以下命令重新加载本地包数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装-mongodb-包">安装 MongoDB 包</h3><div class="tabs" id="mongodb-org-6.0.list"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mongodb-org-6.0.list-1">安装最新稳定版本的 MongoDB</button></li><li class="tab"><button type="button" data-href="#mongodb-org-6.0.list-2">安装特定版本的 MongoDB</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mongodb-org-6.0.list-1"><p>要安装最新的稳定版本，请发出以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mongodb-org-6.0.list-2"><p>要安装特定版本，您必须单独指定每个组件包以及版本号，如下例所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org=6.0.7 mongodb-org-database=6.0.7 mongodb-org-server=6.0.7 mongodb-org-mongos=6.0.7 mongodb-org-tools=6.0.7</span><br></pre></td></tr></table></figure><p>如果您只安装<code>mongodb-org=6.0.7</code>而不包含组件包，则无论您指定哪个版本，都将安装每个 MongoDB 包的最新版本。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>尽管您可以指定 MongoDB 的任何可用版本， <code>apt-get</code>但当有新版本可用时将升级包。为了防止意外升级，您可以将软件包固定在当前安装的版本上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;mongodb-org hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-database hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-server hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-mongosh hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-mongos hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-tools hold&quot; | sudo dpkg --set-selections</span><br></pre></td></tr></table></figure><p>使用<code>mongo</code>命令进入MongoDB shell</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230502161939.png" alt="image-20230502161939006"></p><p>如果出现找不到mongo命令，可使用<code>mongosh</code>命令查看（新版本）</p><h2 id="docker-安装-mongodb">Docker 安装 MongoDB</h2><h3 id="拉取指定版本mongodb镜像">拉取指定版本MongoDB镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:4.4</span><br></pre></td></tr></table></figure><h3 id="运行容器">运行容器</h3><p>运行 mongo 容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mongo -v 本地目录:/data/db -p 27017:27017 mongo:4.4 --auth</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-p 27017:27017</strong> ：映射容器服务的 27017(后) 端口到宿主机的 27017(前) 端口,外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。</li><li><strong>–auth</strong>：需要密码才能访问容器服务。</li></ul><h3 id="进入容器-并进入到admin数据库">进入容器，并进入到admin数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230502170129.png" alt="image-20230502170128664"></p><h2 id="mongodb基础配置">mongodb基础配置</h2><h3 id="创建一个超级管理员root">创建一个超级管理员root</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;your password&quot;, roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]&#125;);</span><br><span class="line">db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;your password&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&#x27;readWriteAnyDatabase&#x27;]&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230502162144.png" alt="image-20230502162144553"></p><h3 id="验证用户是否添加成功">验证用户是否添加成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;root&quot;, &quot;your password&quot;) #如果返回1，则表示成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230502162538.png" alt="image-20230502162537800"></p><h3 id="修改默认端口和希望外网访问-可选">修改默认端口和希望外网访问(可选)</h3><p><strong>vim /etc/mongodb.conf</strong></p><p>修改端口</p><p><strong>port=端口号</strong></p><p>外网访问</p><p>将<strong>bind_ip = 127.0.0.1</strong>修改<strong>bind_ip = 0.0.0.0</strong>，同时记得关闭防火墙</p><blockquote><p>开启服务</p></blockquote><p>sudo service mongodb start</p><blockquote><p>停止服务</p></blockquote><p>sudo service mongodb stop</p><blockquote><p>重启服务</p></blockquote><p>sudo service mongodb restart</p><p>修改端口后进入mongodb:<strong>mongo --port 端口号</strong></p><div class="tip warning faa-horizontal animated-hover"><p>必须另外创建自己的数据库和对应的用户，root数据库不能直接使用</p></div><h2 id="卸载-mongodb-社区版-ubuntu">卸载 MongoDB 社区版(ubuntu)</h2><h3 id="停止-mongodb">停止 MongoDB</h3><p><a href="https://www.mongodb.com/docs/manual/reference/program/mongod/#mongodb-binary-bin.mongod"><code>mongod</code></a>通过发出以下命令来停止该进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure><h3 id="删除包">删除包</h3><p>删除您之前安装的所有 MongoDB 软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge mongodb-org*</span><br></pre></td></tr></table></figure><h3 id="删除数据目录">删除数据目录</h3><p>删除 MongoDB 数据库和日志文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -r /var/log/mongodb</span><br><span class="line">sudo rm -r /var/lib/mongodb</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows安装mongodb&quot;&gt;windows安装mongodb&lt;/h2&gt;
&lt;h3 id=&quot;下载文件&quot;&gt;下载文件&lt;/h3&gt;
&lt;p&gt;首先在mongodb的官方网站上下载最新版本的mongodb安装程序&lt;/p&gt;
&lt;p&gt;下载网址：&lt;a href=&quot;https://w</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="mongodb" scheme="https://www.yuanyuan.blog/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>golang开篇</title>
    <link href="https://www.yuanyuan.blog/posts/67893972.html"/>
    <id>https://www.yuanyuan.blog/posts/67893972.html</id>
    <published>2023-04-30T19:22:32.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是golang">什么是Golang</h2><p>Golang（也称为Go）是一种开源编程语言，由Google开发。它结合了静态编译语言的性能和动态语言的开发效率，适用于构建可靠、高效、并发的软件。</p><p>Golang的设计目标是简单、高效、可靠。它支持并发编程，内置垃圾回收机制，具有强大的标准库和丰富的第三方库支持，同时还具有良好的跨平台支持。Golang的语法简洁明了，易于学习和使用，同时支持面向对象编程和函数式编程。</p><p>Golang被广泛应用于构建Web应用、网络服务、分布式系统、云计算等领域。它已经成为了一种流行的编程语言，并且在不断发展和完善。</p><h2 id="golang-的学习方向">Golang 的学习方向</h2><ol><li><p>区块链研发工程师</p></li><li><p>Go服务器端/游戏软件工程师</p></li><li><p>Golang分布式/云计算软件工程师</p></li></ol><h2 id="golang应用领域">Golang应用领域</h2><ol><li>区块链的应用开发</li><li>后台的服务应用</li><li>云计算/云服务后台应用</li></ol><h2 id="go-语言的诞生">Go 语言的诞生</h2><h3 id="go-语言的核心开发团队-三个大牛">Go 语言的核心开发团队-三个大牛</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230430212145.png" alt="image-20230430212144529"></p><h3 id="google-创造-golang-的原因">Google 创造 Golang 的原因</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230430212324.png" alt="image-20230430212324319"></p><h3 id="golang-的发展历程">Golang 的发展历程</h3><ul><li>2007 年，谷歌工程师 Rob Pike, Ken Thompson 和 Robert Griesemer 开始设计一门全新的语言，这是Go 语言的最初原型。</li><li>2009 年 11 月 10 日，Google 将 Go 语言以开放源代码的方式向全球发布。</li><li>2015 年 8 月 19 日，Go 1.5 版发布，本次更新中移除了”最后残余的 C 代码”</li><li>2017 年 2 月 17 日，Go 语言 Go 1.8 版发布。</li><li>2017 年 8 月 24 日，Go 语言 Go 1.9 版发布。 1.9.2 版本</li><li>2018 年 2 月 16 日，Go 语言 Go 1.10 版发布。</li></ul><h2 id="golang-的语言的特点">Golang 的语言的特点</h2><blockquote><p>简介：</p></blockquote><p>Go 语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容 Go 语言：Go = C + Python , 说明 Go 语言既有 C 静态语言程序的运行速度，又能达到 Python 动态语言的快速开发。</p><ol><li>C 语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等<br>等，也保留了和 C 语言一样的编译执行方式及弱化的指针<br>举一个案例(体验)：</li></ol>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go 语言的指针的使用特点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPtr</span><span class="params">(num *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">*num = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入<em>包的概念</em>，用于组织程序结构，<em>Go 语言的一个文件都要归属于一个包</em>，而不能单独存在。</li></ol><ol start="3"><li><p>垃圾回收机制，内存自动回收，不需开发人员管理</p></li><li><p>天然并发 (重要特点)<br>(1) 从语言层面支持并发，实现简单<br>(2) goroutine，轻量级线程，可实现大并发处理，高效利用多核。<br>(3) 基于 CPS 并发模型(Communicating Sequential Processes )实现</p></li><li><p>吸收了管道通信机制，形成 Go 语言特有的管道 channel 通过管道 channel , 可以实现不同的 goroute之间的相互通信。</p></li><li><p>函数可以返回多个值。举例：</p></li></ol>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个函数，实现同时返回 和，差</span></span><br><span class="line"><span class="comment">//go 函数支持返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSumAndSub</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span> ) &#123;</span><br><span class="line">sum := n1 + n2 <span class="comment">//go 语句后面不要带分号.</span></span><br><span class="line">sub := n1 - n2</span><br><span class="line"><span class="keyword">return</span> sum , sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>新的创新：比如切片 slice、延时执行 defer</li></ol><h2 id="搭建go开发环境">搭建go开发环境</h2><h3 id="下载-sdk-工具包">下载 SDK 工具包</h3><ol><li>Go 语言的官网为：<a href="https://go.dev/">https://go.dev/</a></li><li>SDK 下载地址：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></li><li>选择os对应的 sdk 版本(建议使用stable versions即稳定版)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230503190154.png" alt="image-20230503190154398"></p><h3 id="windows下搭建go开发环境">windows下搭建go开发环境</h3><h4 id="安装">安装</h4><p>这里以<strong>go1.20.4.windows-amd64.zip</strong>为例</p><p>下载完后解压缩后会得到 go 文件夹，其中 <code>/bin</code> 目录包含了 go 源码包编译出的编译器（go）、文档工具（godoc）、格式化工具（gofmt），即是我们要进行配置的目录。</p><h4 id="配置环境变量">配置环境变量</h4><p>我们需要添加两个环境变量：</p><blockquote><p>GOROOT：SDK 的根目录，即解压缩后 go 文件夹所在的路径（例如 D:\GoEnv\go）<br>GOPATH：工作目录，即以后我们的 go 项目的工作路径，可以随意地址一个目录；</p></blockquote><p>同时还需要把 SDK 下的 /bin 目录添加到系统 Path 环境变量下，添加完成后在 cmd 中输入 go version 命令检查是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; go version</span><br><span class="line">go version go1.20.4 windows/amd64</span><br></pre></td></tr></table></figure><p>同时可以使用 <code>go env</code> 查看我们配置的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">env</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">set</span> GOPATH=E:\GoProject</span><br><span class="line"><span class="built_in">set</span> GOROOT=D:\GoEnv\go</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="配置-go-代理">配置 Go 代理</h4><p>通过 go get 命令下载各种依赖时，经常需要访问 github/google 等网站，这些网站访问速度可能会比较慢，所以我们可以进行配置代理，保证快速稳定的下载访问。</p><p>这里推荐 <a href="http://goproxy.io">goproxy.io</a>，它是全球最早的 Go modules 镜像代理服务之一，采用 CDN 加速服务为开发者提供依赖下载， 该服务由一批热爱开源，热爱 Go 语言的年轻人开发维护。</p><p>配置的方式就是在用户变量或系统变量下添加 GOPROXY 环境变量，变量值填写 <a href="https://goproxy.io">https://goproxy.io</a>,direct，添加完成后，可以再次使用 go env 命令查看到该环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; go <span class="built_in">env</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">set</span> GOPROXY=https://goproxy.io,direct</span><br><span class="line">... </span><br></pre></td></tr></table></figure><h3 id="linux下搭建go开发环境">Linux下搭建go开发环境</h3><p>以<code>go1.20.4.linux-amd64.tar.gz</code>为例</p><h4 id="解压">解压</h4><p>使用命令 <code>tar -xzvf go1.20.4.linux-amd64.tar.gz -C /usr/local/ </code>  解压</p><h4 id="配置">配置</h4><p>go语言的环境变量配置，需要两个值：</p><ol><li><code>GOROOT</code>是系统上安装Go软件包的位置</li><li><code>GOPATH</code>是工作目录的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/liaojie1314/GOPATH <span class="comment"># 请替换liaojie1314为你的用户名</span></span><br><span class="line">sudo <span class="built_in">chmod</span> -R 0777 GOPATH</span><br></pre></td></tr></table></figure><p>打开<code>~/.bashrc</code>或<code>/etc/profile</code>文件，写入如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=$HOME/GOPATH  # $HOME/GOPATH为工作目录，即以后我们的 go 项目的工作路径</span><br><span class="line">export GOROOT=/usr/local/go # SDK 的根目录，即解压缩后 go 文件夹所在的路径</span><br><span class="line">export PATH=$GOPATH/bin:$GOROOT/bin:$PATH</span><br></pre></td></tr></table></figure><p>保存后执行<code>source ~/.bashrc</code>使配置生效</p><h4 id="测试">测试</h4><p>在命令行执行<code>go version</code> 如果能够显示正确的版本号则证明配置成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是golang&quot;&gt;什么是Golang&lt;/h2&gt;
&lt;p&gt;Golang（也称为Go）是一种开源编程语言，由Google开发。它结合了静态编译语言的性能和动态语言的开发效率，适用于构建可靠、高效、并发的软件。&lt;/p&gt;
&lt;p&gt;Golang的设计目标是简单、高效、可靠。</summary>
      
    
    
    
    <category term="编程基础" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="golang" scheme="https://www.yuanyuan.blog/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu22.04更新cmake</title>
    <link href="https://www.yuanyuan.blog/posts/170c5cd0.html"/>
    <id>https://www.yuanyuan.blog/posts/170c5cd0.html</id>
    <published>2023-04-05T15:43:17.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查是否安装cmake">检查是否安装<code>cmake</code></h2><p>查看<code>cmake</code>版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake --version</span><br></pre></td></tr></table></figure><p>如果输出如下，表示未安装<code>cmake</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: cmake: command not found</span><br></pre></td></tr></table></figure><h2 id="使用apt-get安装cmake">使用apt-get安装<code>cmake</code></h2><p>注意：使用<code>apt-get</code>安装的是低版本的<code>cmake</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install cmake</span><br></pre></td></tr></table></figure><p>查看版本，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cmake --version</span><br><span class="line">cmake version 3.16.3</span><br></pre></td></tr></table></figure><p>很多时候，低版本的<code>cmake</code>并不能满足我们的需求。</p><p>卸载<code>apt-get</code>安装的<code>cmake</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y remove cmake</span><br></pre></td></tr></table></figure><h2 id="源码安装指定版本cmake">源码安装指定版本<code>cmake</code></h2><p>通过源码安装，我们可以安装指定版本的<code>cmake</code>。</p><p><code>cmake</code>官方为我们提供了各个版本的源码包，列表链接为：</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://cmake.org/files">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/cmake.org/files.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">cmake官网</div>            <div class="tag-link-sitename"> https://cmake.org/files</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230405155802.png" alt="image-20230405154931293"></p><p>访问源码包列表链接，可以选择我们指定的版本下载安装。</p><p>目前最新版本是<code>cmake 3.26.3</code>。</p><h3 id="下载cmake-3-26-3">下载<code>cmake 3.26.3 </code></h3><p>在喜欢的路径下，执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://cmake.org/files/LatestRelease/cmake-3.26.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压">解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf cmake-3.26.3.tar.gz</span><br></pre></td></tr></table></figure><p>解压后，会在当前路径下生成一个<code>cmake-3.26.3</code>文件夹。</p><p>进入<code>cmake-3.26.0</code>文件夹中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd cmake-3.26.0</span><br></pre></td></tr></table></figure><h3 id="安装">安装</h3><p><strong>第一步：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure</span><br></pre></td></tr></table></figure><p>如果报错<code>Could NOT find OpenSSL</code></p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install libssl-dev</span><br></pre></td></tr></table></figure><p>然后，重新执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure </span><br></pre></td></tr></table></figure><p><strong>第二步：</strong></p><p>执行<code>make</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make clean &amp;&amp; sudo make -j8 </span><br></pre></td></tr></table></figure><p>如果出现<code>fatal error: curses.h: 没有那个文件或目录</code>，使用如下命令安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure><p><strong>第三步：</strong></p><p>执行<code>make install</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>验证是否安装成功：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20230405160206.png" alt="image-20230405160205894"></p><p>如果看到版本号，表示安装成功！</p><h2 id="卸载源码安装的cmake">卸载源码安装的<code>cmake</code></h2><p>注意，<code>sudo apt remove cmake</code> 命令无法卸载源码安装的<code>cmake</code>。</p><p>如需卸载源码安装的<code>cmake</code>，需要进入到安装时执行<code>make install</code>时的路径下， 执行卸载命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;检查是否安装cmake&quot;&gt;检查是否安装&lt;code&gt;cmake&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;查看&lt;code&gt;cmake&lt;/code&gt;版本：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="安装" scheme="https://www.yuanyuan.blog/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="cmake" scheme="https://www.yuanyuan.blog/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>前端框架</title>
    <link href="https://www.yuanyuan.blog/posts/89e03522.html"/>
    <id>https://www.yuanyuan.blog/posts/89e03522.html</id>
    <published>2023-03-31T16:09:20.000Z</published>
    <updated>2024-03-02T06:48:25.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack-构建-vue3项目">webpack 构建 Vue3项目</h1><h3 id="1-初始化项目结构-跟cli-结构保持一致">1.初始化项目结构（跟cli 结构保持一致）</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202304011622487.png" alt="image-20230401162245300"></p><h3 id="2-安装所需要的依赖包">2.安装所需要的依赖包</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@vue/compiler-sfc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.38&quot;</span><span class="punctuation">,</span> <span class="comment">//解析vue文件</span></span><br><span class="line">        <span class="attr">&quot;clean-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//打包 的时候清空dist</span></span><br><span class="line">        <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.7.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理css文件</span></span><br><span class="line">        <span class="attr">&quot;friendly-errors-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.7.0&quot;</span><span class="punctuation">,</span> <span class="comment">//美化dev</span></span><br><span class="line">        <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.0&quot;</span><span class="punctuation">,</span> <span class="comment">//html 模板</span></span><br><span class="line">        <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.3&quot;</span><span class="punctuation">,</span>  <span class="comment">//处理less</span></span><br><span class="line">        <span class="attr">&quot;less-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//处理less文件</span></span><br><span class="line">        <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理style样式</span></span><br><span class="line">        <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.3.1&quot;</span><span class="punctuation">,</span> <span class="comment">//处理ts</span></span><br><span class="line">        <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.8.2&quot;</span><span class="punctuation">,</span> <span class="comment">//ts</span></span><br><span class="line">        <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.38&quot;</span><span class="punctuation">,</span> <span class="comment">//vue</span></span><br><span class="line">        <span class="attr">&quot;vue-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">//解析vue</span></span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.74.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.10.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.10.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-tsc-init-生成ts-文件-如果没有tsc-安装npm-install-typescript-g">3.tsc --init 生成ts 文件 如果没有tsc 安装npm install typescript -g</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;scripthost&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tests/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tests/**/*.tsx&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-配置vue-声明文件不然ts-识别不了vue-后缀">4.配置vue 声明文件不然ts 识别不了vue 后缀</h3><p>在<code>src</code>目录下新建<code>env.d.ts</code></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202304011626379.png" alt="image-20230401162653337"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置vue 声明文件不然ts 识别不了vue 后缀</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">component</span>:<span class="title class_">DefineComponent</span>&lt;&#123;&#125;,&#123;&#125;,<span class="built_in">any</span>&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-编写webpack-config-js">5.编写webpack.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Configuration</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/dist/index&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;friendly-errors-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Configuration</span>&#125; //配置智能提示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.ts&#x27;</span>, <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[hash].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">//出口文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="comment">//解析vue 模板</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="comment">//解析 less</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//解析css</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,  <span class="comment">//解析ts</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">configFile</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;tsconfig.json&#x27;</span>),</span><br><span class="line">                    <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span> <span class="comment">//html模板</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(), <span class="comment">//打包清空dist</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(), <span class="comment">//解析vue</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">compilationSuccessInfo</span>:&#123; <span class="comment">//美化样式</span></span><br><span class="line">                <span class="attr">messages</span>:[<span class="string">&#x27;You application is running here http://localhost:9001&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>) <span class="comment">// 别名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>] <span class="comment">//识别后缀</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">stats</span>:<span class="string">&quot;errors-only&quot;</span>, <span class="comment">//取消提示</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">9001</span>,</span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">        <span class="attr">vue</span>: <span class="string">&quot;Vue&quot;</span> <span class="comment">//CDN 引入</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack-构建-vue3项目&quot;&gt;webpack 构建 Vue3项目&lt;/h1&gt;
&lt;h3 id=&quot;1-初始化项目结构-跟cli-结构保持一致&quot;&gt;1.初始化项目结构（跟cli 结构保持一致）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdeli</summary>
      
    
    
    
    <category term="前端" scheme="https://www.yuanyuan.blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端框架" scheme="https://www.yuanyuan.blog/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>gitignore文件</title>
    <link href="https://www.yuanyuan.blog/posts/843cc845.html"/>
    <id>https://www.yuanyuan.blog/posts/843cc845.html</id>
    <published>2023-03-31T15:52:43.000Z</published>
    <updated>2024-03-02T06:48:25.926Z</updated>
    
    <content type="html"><![CDATA[<p>在本地的代码目录中，有些文件或者目录我们并不想提交到仓库中，比如一些运行日志等文件。这样的话，我们提交代码时，就只能一个一个文件去<code>git add</code>，太麻烦了。</p><p>为了解决这个问题，Git里面有一个<code>.gitignore</code>文件。可以指定Git需要忽略哪些文件。配置好之后，Git就会自动忽略满足配置的文件。这样，我们就可以尽情的使用<code>git add .</code>来添加文件了。</p><h2 id="git-忽略规则优先级">Git 忽略规则优先级</h2><p>在 <code>.gitingore</code> 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p><ol><li>从命令行中读取可用的忽略规则</li><li>当前目录定义的规则</li><li>父级目录定义的规则，依次递推</li><li><code>$GIT_DIR/info/exclude</code> 文件中定义的规则</li><li><code>core.excludesfile</code>中定义的全局规则</li></ol><h2 id="git-忽略规则匹配语法">Git 忽略规则匹配语法</h2><p>在 <code>.gitignore</code> 文件中，每一行的忽略规则的语法如下：</p><ul><li>空格不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li>开头的文件标识注释，可以使用反斜杠进行转义</li><li><code>!</code>开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用<code>!</code>也不会再次被包含。可以使用反斜杠进行转义</li><li><code>/</code>结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/</code>开始的模式匹配项目跟目录</li><li>如果一个模式不包含斜杠，则它匹配相对于当前<code>.gitignore</code>文件路径的内容，如果该模式不在<code>.gitignore</code>文件中，则相对于项目根目录</li><li><code>**</code> 匹配多级目录，可在开始，中间，结束</li><li><code>?</code> 通用匹配单个字符</li><li><code>*</code> 通用匹配零个或多个字符</li><li><code>[]</code> 通用匹配单个字符列表</li></ul><h2 id="匹配示例">匹配示例</h2><ul><li><code>bin/</code>: 忽略当前路径下的<code>bin</code>文件夹，该文件夹下的所有内容都会被忽略，不忽略<code>bin</code>文件</li><li><code>/bin</code>: 忽略根目录下的bin文件</li><li><code>/*.c</code>: 忽略 <code>cat.c</code>，不忽略 <code>build/cat.c</code></li><li><code>debug/*.obj</code>: 忽略 <code>debug/io.obj</code>，不忽略 <code>debug/common/io.obj</code> 和 <code>tools/debug/io.obj</code></li><li><code>**/foo</code>: 忽略<code>/foo</code>, <code>a/foo</code>, <code>a/b/foo</code>等</li><li><code>a/**/b</code>: 忽略<code>a/b</code>, <code>a/x/b</code>, <code>a/x/y/b</code>等</li><li><code>!/bin/run.sh</code>: 不忽略 <code>bin</code> 目录下的 <code>run.sh</code> 文件</li><li><code>*.log</code>: 忽略所有 <code>.log</code> 文件</li><li><code>config.php</code>: 忽略当前路径的 <code>config.php</code> 文件</li></ul><h2 id="特殊情况">特殊情况</h2><h3 id="文件已经提交过">文件已经提交过</h3><p>这里面有一些特殊情况需要考虑，比如某文件已经被提交过了，之后再对他做了一个<code>.gitignore</code>的忽略的话。忽略是不会生效的，需要我们手动先将缓存删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地的缓存</span></span><br><span class="line">git rm -r --cached .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新提交</span></span><br><span class="line">git commit -am &#x27;gitignore&#x27;</span><br></pre></td></tr></table></figure><h3 id="添加一个已经配置忽略的文件">添加一个已经配置忽略的文件</h3><p>再比如，我们忽略了文件夹A，但是现在要往文件夹A中添加代码文件。你会发现你没法把文件夹A中的代码提交。因为文件夹A被忽略了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制添加</span></span><br><span class="line">git add -f 文件A/xxx.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常提交</span></span><br><span class="line">git commit -am &#x27;xxx&#x27;</span><br></pre></td></tr></table></figure><h2 id="检查文件为什么被忽略">检查文件为什么被忽略</h2><p>由于<code>.gitignore</code>文件经常会配置很多内容，某些文件你并不能很直观的知道为什么被忽略了。所以Git提供了一个检查忽略的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git check-ignore -v 文件夹A/xxx.js</span><br></pre></td></tr></table></figure><h2 id="最后附一个官方示例">最后附一个官方示例</h2><div class='tag-link-1'><a class="tag-Link" target="_blank" href=" https://github.com/github/gitignore">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/github/gitignore.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">官方示例</div>            <div class="tag-link-sitename"> https://github.com/github/gitignore</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本地的代码目录中，有些文件或者目录我们并不想提交到仓库中，比如一些运行日志等文件。这样的话，我们提交代码时，就只能一个一个文件去&lt;code&gt;git add&lt;/code&gt;，太麻烦了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Git里面有一个&lt;code&gt;.gitignore&lt;/cod</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="git" scheme="https://www.yuanyuan.blog/tags/git/"/>
    
  </entry>
  
</feed>
