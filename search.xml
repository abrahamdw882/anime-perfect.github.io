<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AOSP</title>
      <link href="/posts/83d775da.html"/>
      <url>/posts/83d775da.html</url>
      
        <content type="html"><![CDATA[<p>AOSP<br>相关网站</p><p>官方地址</p><blockquote><p><a href="http://source.android.com/">http://source.android.com/</a></p></blockquote><p>清华大学镜像</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkinter</title>
      <link href="/posts/5dda0ead.html"/>
      <url>/posts/5dda0ead.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Tkinter"><a href="#什么是-Tkinter" class="headerlink" title="什么是 Tkinter"></a>什么是 Tkinter</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Tkinter 是使用 python 进行窗口视窗设计的模块. 简单的构造, 多平台, 多系统的兼容性, 能让它成为让你快速入门定制窗口文件的好助手. 它在 python 窗口视窗模块中是一款简单型的. 所以用来入门, 熟悉 窗口视窗的使用, 非常有必要.</p><h1 id="Label-amp-Button-标签和按钮"><a href="#Label-amp-Button-标签和按钮" class="headerlink" title="Label &amp; Button 标签和按钮"></a>Label &amp; Button 标签和按钮</h1><h2 id="窗口主体框架"><a href="#窗口主体框架" class="headerlink" title="窗口主体框架"></a>窗口主体框架</h2><p>每一个 tkinter 应用的主体框架都可以包含下面这部分. 定义 <code>window</code> 窗口 和 <code>window</code>的一些属性, 然后书写窗口内容, 最后执行window.mainloop让窗口活起来.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;my window&#x27;</span>)</span><br><span class="line">window.geometry(<span class="string">&#x27;200x100&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是窗口的内容</span></span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h2 id="窗口内容"><a href="#窗口内容" class="headerlink" title="窗口内容"></a>窗口内容</h2><p>这次我们会建立一个用来描述的标签 <code>tk.Label</code>, 比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = tk.Label(window, </span><br><span class="line">    text=<span class="string">&#x27;OMG! this is TK!&#x27;</span>,    <span class="comment"># 标签的文字</span></span><br><span class="line">    bg=<span class="string">&#x27;green&#x27;</span>,     <span class="comment"># 背景颜色</span></span><br><span class="line">    font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>),     <span class="comment"># 字体和字体大小</span></span><br><span class="line">    width=<span class="number">15</span>, height=<span class="number">2</span>  <span class="comment"># 标签长宽</span></span><br><span class="line">    )</span><br><span class="line">l.pack()    <span class="comment"># 固定窗口位置</span></span><br></pre></td></tr></table></figure><p>我们也可以通过变量的形式控制标签的显示, 这时我们引入按钮 <code>tk.Button</code> 的概念, 没点一次按钮, 标签变化一次. 用一下内容替换上面的标签. 并把需要变化的文字存成变量 <code>var</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var = tk.StringVar()    <span class="comment"># 这时文字变量储存器</span></span><br><span class="line">l = tk.Label(window, </span><br><span class="line">    textvariable=var,   <span class="comment"># 使用 textvariable 替换 text, 因为这个可以变化</span></span><br><span class="line">    bg=<span class="string">&#x27;green&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>), width=<span class="number">15</span>, height=<span class="number">2</span>)</span><br><span class="line">l.pack()</span><br></pre></td></tr></table></figure><p>接着我们来做 按钮 <code>tk.Button</code>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = tk.Button(window, </span><br><span class="line">    text=<span class="string">&#x27;hit me&#x27;</span>,      <span class="comment"># 显示在按钮上的文字</span></span><br><span class="line">    width=<span class="number">15</span>, height=<span class="number">2</span>, </span><br><span class="line">    command=hit_me)     <span class="comment"># 点击按钮式执行的命令</span></span><br><span class="line">b.pack()    <span class="comment"># 按钮位置</span></span><br></pre></td></tr></table></figure><p>那么点击是的命令我们用 <code>if else</code> 语句来判断. 用 <code>on_hit</code> 来判断当前状态.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">on_hit = <span class="literal">False</span>  <span class="comment"># 默认初始状态为 False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():</span><br><span class="line">    <span class="keyword">global</span> on_hit</span><br><span class="line">    <span class="keyword">if</span> on_hit == <span class="literal">False</span>:     <span class="comment"># 从 False 状态变成 True 状态</span></span><br><span class="line">        on_hit = <span class="literal">True</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;you hit me&#x27;</span>)   <span class="comment"># 设置标签的文字为 &#x27;you hit me&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:       <span class="comment"># 从 True 状态变成 False 状态</span></span><br><span class="line">        on_hit = <span class="literal">False</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment"># 设置 文字为空</span></span><br></pre></td></tr></table></figure><h1 id="Entry-amp-Text-输入-文本框"><a href="#Entry-amp-Text-输入-文本框" class="headerlink" title="Entry &amp; Text 输入, 文本框"></a>Entry &amp; Text 输入, 文本框</h1><h2 id="窗口主体框架-1"><a href="#窗口主体框架-1" class="headerlink" title="窗口主体框架"></a>窗口主体框架</h2><p>每一个tkinter应用的主体框架都包含以下几部分：</p><ul><li>主窗口: <code>window</code>，及主窗口的一些基本属性（标题、大小）</li><li>让窗口活起来：<code>window.mainloop()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;my window&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##窗口尺寸</span></span><br><span class="line">window.geometry(<span class="string">&#x27;200x200&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##显示出来</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h2 id="窗口内容（窗口上的控件）"><a href="#窗口内容（窗口上的控件）" class="headerlink" title="窗口内容（窗口上的控件）"></a>窗口内容（窗口上的控件）</h2><p>创建按钮分别触发两种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b1 = tk.Button(window,text=<span class="string">&quot;insert point&quot;</span>,width=<span class="number">15</span>,height=<span class="number">2</span>,command=insert_point)</span><br><span class="line">b1.pack()</span><br><span class="line"></span><br><span class="line">b2 = tk.Button(window,text=<span class="string">&quot;insert end&quot;</span>,command=insert_end)</span><br><span class="line">b2.pack()</span><br></pre></td></tr></table></figure><p>创建输入框entry，用户输入任何内容都显示为*</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e = tk.Entry(window,show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">e.pack()</span><br></pre></td></tr></table></figure><p>创建一个文本框用于显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = tk.Text(window,height=<span class="number">2</span>)</span><br><span class="line">t.pack()</span><br></pre></td></tr></table></figure><p>定义触发事件时的函数（注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_point</span>():</span><br><span class="line">    var = e.get()</span><br><span class="line">    t.insert(<span class="string">&#x27;insert&#x27;</span>,var)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_end</span>():</span><br><span class="line">    var = e.get()</span><br><span class="line">    t.insert(<span class="string">&#x27;end&#x27;</span>,var)</span><br></pre></td></tr></table></figure><h1 id="Listbox-列表部件"><a href="#Listbox-列表部件" class="headerlink" title="Listbox 列表部件"></a>Listbox 列表部件</h1><h2 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;my window&#x27;</span>)</span><br><span class="line">window.geometry(<span class="string">&#x27;200x200&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建一个label用于显示"><a href="#创建一个label用于显示" class="headerlink" title="创建一个label用于显示"></a>创建一个label用于显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 = tk.StringVar()    <span class="comment">#创建变量</span></span><br><span class="line">l =tk.Label(window,bg=<span class="string">&#x27;yellow&#x27;</span>,width=<span class="number">4</span>,textvariable=var1)</span><br><span class="line">l.pack()</span><br></pre></td></tr></table></figure><h2 id="创建一个方法用于按钮的点击事件"><a href="#创建一个方法用于按钮的点击事件" class="headerlink" title="创建一个方法用于按钮的点击事件"></a>创建一个方法用于按钮的点击事件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    value = lb.get(lb.curselection())   <span class="comment">#获取当前选中的文本</span></span><br><span class="line">    var1.<span class="built_in">set</span>(value)     <span class="comment">#为label设置值</span></span><br></pre></td></tr></table></figure><h2 id="创建一个按钮"><a href="#创建一个按钮" class="headerlink" title="创建一个按钮"></a>创建一个按钮</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b1 = tk.Button(window, text=<span class="string">&#x27;print selection&#x27;</span>, width=<span class="number">15</span>,</span><br><span class="line">              height=<span class="number">2</span>, command=print_selection)</span><br><span class="line">b1.pack()</span><br></pre></td></tr></table></figure><h2 id="创建一个Listbox和变量var2，并将var2的值赋给Listbox"><a href="#创建一个Listbox和变量var2，并将var2的值赋给Listbox" class="headerlink" title="创建一个Listbox和变量var2，并将var2的值赋给Listbox"></a>创建一个Listbox和变量var2，并将var2的值赋给Listbox</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var2 = tk.StringVar()</span><br><span class="line">var2.<span class="built_in">set</span>((<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>)) <span class="comment">#为变量设置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Listbox</span></span><br><span class="line"></span><br><span class="line">lb = tk.Listbox(window, listvariable=var2)  <span class="comment">#将var2的值赋给Listbox</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个list并将值循环添加到Listbox控件中</span></span><br><span class="line">list_items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_items:</span><br><span class="line">    lb.insert(<span class="string">&#x27;end&#x27;</span>, item)  <span class="comment">#从最后一个位置开始加入值</span></span><br><span class="line">lb.insert(<span class="number">1</span>, <span class="string">&#x27;first&#x27;</span>)       <span class="comment">#在第一个位置加入&#x27;first&#x27;字符</span></span><br><span class="line">lb.insert(<span class="number">2</span>, <span class="string">&#x27;second&#x27;</span>)      <span class="comment">#在第二个位置加入&#x27;second&#x27;字符</span></span><br><span class="line">lb.delete(<span class="number">2</span>)                <span class="comment">#删除第二个位置的字符</span></span><br><span class="line">lb.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示主窗口</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h1 id="Radiobutton-选择按钮"><a href="#Radiobutton-选择按钮" class="headerlink" title="Radiobutton 选择按钮"></a>Radiobutton 选择按钮</h1><h2 id="radiobutton-部件"><a href="#radiobutton-部件" class="headerlink" title="radiobutton 部件"></a>radiobutton 部件</h2><p>首先我们需要定义一个 <code>var</code> 用来将 radiobutton 的值和 Label 的值联系在一起. 然后创建一个radiobutton部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var = tk.StringVar()</span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;yellow&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)</span><br><span class="line">l.pack()</span><br><span class="line"></span><br><span class="line">r1 = tk.Radiobutton(window, text=<span class="string">&#x27;Option A&#x27;</span>,</span><br><span class="line">                    variable=var, value=<span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">                    command=print_selection)</span><br><span class="line">r1.pack()</span><br></pre></td></tr></table></figure><p>其中<code>variable=var</code>, <code>value=&#39;A&#39;</code>的意思就是，当我们鼠标选中了其中一个选项，把value的值<code>A</code>放到变量var中，然后赋值给<code>variable</code></p><h2 id="触发功能"><a href="#触发功能" class="headerlink" title="触发功能"></a>触发功能</h2><p>我们将定义一个功能, 用来对选择的 radiobutton 进行操作. <code>print_selection</code> 功能就是选择了某个 radiobutton 后我们会在屏幕上打印的选项.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    l.config(text=<span class="string">&#x27;you have selected &#x27;</span> + var.get())</span><br></pre></td></tr></table></figure><p>当触发这个函数功能时，我们的 <code>label</code> 中就会显示 <code>text</code> 所赋值的字符串即 ‘you have selected’, 后面则是我们所选中的选项 <code>var.get()</code>就是获取到变量 <code>var</code> 的值， 举个例子就是我们一开始所做的将选项 “option A” 选中时的值以 “A” 放入 <code>var</code> 中， 所以获取的也就是A 即如果我们这时候选中 “option A” 选项，label显示的值则是 “you have selected A”.</p><h1 id="Scale-尺度"><a href="#Scale-尺度" class="headerlink" title="Scale 尺度"></a>Scale 尺度</h1><h2 id="scale-部件"><a href="#scale-部件" class="headerlink" title="scale 部件"></a>scale 部件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = tk.Scale(window, label=<span class="string">&#x27;try me&#x27;</span>, from_=<span class="number">5</span>, to=<span class="number">11</span>, orient=tk.HORIZONTAL,</span><br><span class="line">             length=<span class="number">200</span>, showvalue=<span class="number">0</span>, tickinterval=<span class="number">2</span>, resolution=<span class="number">0.01</span>, command=print_selection)</span><br><span class="line">s.pack()</span><br></pre></td></tr></table></figure><p>这里的参数<code>label</code>是指scale部件的名称，即在这里scale部件名称为try me</p><ul><li>参数<code>from_=5，to=11</code>的意思就是从5到11，即这个滚动条最小值为5，最大值为11（这里使用from_是因为在python中有from这个关键词）</li><li>参数<code>orient=tk.HORIZONTAL</code>在这里就是设置滚动条的方向，如我们所看到的效果图，这里<code>HORIZONTAL</code>就是横向。</li><li>参数<code>length</code>这里是指滚动条部件的长度，但注意的是和其他部件width表示不同，width表示的是以字符为单位，比如<code>width=4</code>，就是4个字符的长度，而此处的<code>length=200</code>，是指我们常用的像素为单位，即长度为200个像素</li><li>参数<code>resolution=0.01</code>这里我们可以借助数学题来理解，我们做的很多数学题都会让我们来保留几位小数，此处的0.01就是保留2位小数，即效果图中的5.00 9.00等等后面的两位小数，如果保留一位就是<code>resolution=0.1</code> 这里的<code>showvalue</code>就是设置在滚动条上方的显示。<code>showvalue=0</code>，上方无结果显示，如果改为<code>showvalue=1</code>,则显示在上面。</li><li>参数<code>tickinterval</code>设置的就是坐标的间隔，此处为tickinterval=2，显示的即为5.00 7.00 9.00 11.00 如果改为tickinterval=3则为5.00 8.00 11.00</li></ul><h2 id="触发功能-1"><a href="#触发功能-1" class="headerlink" title="触发功能"></a>触发功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;yellow&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)</span><br><span class="line">l.pack()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>(<span class="params">v</span>):</span><br><span class="line">    l.config(text=<span class="string">&#x27;you have selected &#x27;</span> + v)</span><br></pre></td></tr></table></figure><p>这里相比前面多了参数<code>v</code>，这里的参数v即将滚动条定位的数据，即如效果图中最开始，定位到5.00，<code>label</code>中显示you have selected 5.00</p><h1 id="Checkbutton-勾选项"><a href="#Checkbutton-勾选项" class="headerlink" title="Checkbutton 勾选项"></a>Checkbutton 勾选项</h1><h2 id="Checkbutton部件"><a href="#Checkbutton部件" class="headerlink" title="Checkbutton部件"></a>Checkbutton部件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1 = tk.IntVar()</span><br><span class="line">c1 = tk.Checkbutton(window, text=<span class="string">&#x27;Python&#x27;</span>, variable=var1, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                    command=print_selection)</span><br><span class="line">c1.pack()</span><br></pre></td></tr></table></figure><p>参数<code>onvalue</code>和前面讲的部件<code>radiobutton</code>中的value相似， 当我们选中了这个checkbutton，<code>onvalue</code>的值1就会放入到<code>var1</code>中， 然后var1将其赋值给参数<code>variable</code>，<code>offvalue</code>用法相似，但是<code>offvalue</code>是在没有选中这个checkbutton时，<code>offvalue</code>的值1放入var1，然后赋值给参数<code>variable</code> 这是创建一个checkbutton部件，以此类推，可以创建多个checkbutton</p><h2 id="触发功能-2"><a href="#触发功能-2" class="headerlink" title="触发功能"></a>触发功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    <span class="keyword">if</span> (var1.get() == <span class="number">1</span>) &amp; (var2.get() == <span class="number">0</span>):   <span class="comment">#如果选中第一个选项，未选中第二个选项</span></span><br><span class="line">        l.config(text=<span class="string">&#x27;I love only Python &#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (var1.get() == <span class="number">0</span>) &amp; (var2.get() == <span class="number">1</span>): <span class="comment">#如果选中第二个选项，未选中第一个选项</span></span><br><span class="line">        l.config(text=<span class="string">&#x27;I love only C++&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (var1.get() == <span class="number">0</span>) &amp; (var2.get() == <span class="number">0</span>):  <span class="comment">#如果两个选项都未选中</span></span><br><span class="line">        l.config(text=<span class="string">&#x27;I do not love either&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l.config(text=<span class="string">&#x27;I love both&#x27;</span>)             <span class="comment">#如果两个选项都选中</span></span><br></pre></td></tr></table></figure><p>相对于前面学过的 <code>print_selection</code>，这一段比较长，其实功能差不多，只不过加了<code>if...elif...else</code>来选择控制而已即如代码注释，<code>config</code>在前面已经讲过就是将参数<code>text</code>的值显示，这里的<code>var1.get() == 1</code> 就是前面所说的var1获得的变量<code>onvalue=1</code>，<code>var1.get() == 0</code>即是<code>var1</code>获得的变量<code>offvalu=0</code>同理<code>var2</code>也是如此。</p><h1 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a>Canvas 画布</h1><h2 id="Canvas部件"><a href="#Canvas部件" class="headerlink" title="Canvas部件"></a>Canvas部件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas = tk.Canvas(window, bg=<span class="string">&#x27;blue&#x27;</span>, height=<span class="number">100</span>, width=<span class="number">200</span>)</span><br><span class="line">canvas.pack()</span><br></pre></td></tr></table></figure><p>这里的参数和以往学过的部件一样，所以就不再一一解释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_file = tk.PhotoImage(file=<span class="string">&#x27;ins.gif&#x27;</span>)</span><br><span class="line">image = canvas.create_image(<span class="number">10</span>, <span class="number">10</span>, anchor=<span class="string">&#x27;nw&#x27;</span>, image=image_file)</span><br></pre></td></tr></table></figure><p>这里的代码主要是实现我们最终看到的在左上角的那张小图片。 <code>image_file = tk.PhotoImage(file=&#39;ins.gif&#39;)</code>这一句是创造一个变量存放<code>ins.gif</code>这张图片。 <code>image = canvas.create_image(10, 10, anchor=&#39;nw&#39;, image=image_file)</code>里面的参数<code>10,10</code>就是图片放入画布的坐标， 而这里的<code>anchor=nw</code>则是把图片的左上角作为锚定点，在加上刚刚给的坐标位置，即可将图片位置确定。 最后一个参数的意思大家应该都知道，就是将刚刚存入的图片变量，赋值给<code>image</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x0, y0, x1, y1= <span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">80</span></span><br><span class="line">line = canvas.create_line(x0, y0, x1, y1)</span><br></pre></td></tr></table></figure><p>这段代码主要实现的是画一条直线，后面<code>()</code>中给的参数就是线段两点的坐标，两点确定一条直线。此处给的就是从坐标(50,50)到(80,80)画一条直线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oval = canvas.create_oval(x0, y0, x1, y1, fill=<span class="string">&#x27;red&#x27;</span>)  <span class="comment">#创建一个圆，填充色为`red`红色</span></span><br><span class="line">arc = canvas.create_arc(x0+<span class="number">30</span>, y0+<span class="number">30</span>, x1+<span class="number">30</span>, y1+<span class="number">30</span>, start=<span class="number">0</span>, extent=<span class="number">180</span>)  <span class="comment">#创建一个扇形</span></span><br><span class="line">rect = canvas.create_rectangle(<span class="number">100</span>, <span class="number">30</span>, <span class="number">100</span>+<span class="number">20</span>, <span class="number">30</span>+<span class="number">20</span>)   <span class="comment">#创建一个矩形</span></span><br></pre></td></tr></table></figure><p>这里面就是创建扇形时多了两个没见过的参数<code>start=0</code>和<code>extent=180</code>，其实就是从0度到180度，就好像扇子的边打开一样。在我们看来就是个半圆， 如果改为<code>extent=90</code>，我们看到的就是一个1/4圆</p><h2 id="触发功能-3"><a href="#触发功能-3" class="headerlink" title="触发功能"></a>触发功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">moveit</span>():</span><br><span class="line">    canvas.move(rect, <span class="number">0</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这里的触发不再是以往的print_selection了，哈哈，那么这里的是怎么样的功能呢，首先我们从单词理解来看就是移动的函数，在视频中也演示过了， 就是我们每点一次button 矩形就会移动这里<code>canvas.move(rect, 0, 2)</code>的参数<code>(rect,0,2)</code>就是移动<code>rect</code>这个变量，即我们看到的矩形 后面的0和2，也就是横坐标移动0个单位，纵坐标移动2个单位，简单的说就是每次点击，横向不动，纵向移动两个单位。</p><h1 id="Menubar-菜单"><a href="#Menubar-菜单" class="headerlink" title="Menubar 菜单"></a>Menubar 菜单</h1><h2 id="menubar-部件"><a href="#menubar-部件" class="headerlink" title="menubar 部件"></a>menubar 部件</h2><p>下面是我们制作整个菜单栏的流程, 我们先需要加入一个 Menubar 作为整体框架, 然后再在 Menubar 中加一些部件.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方</span></span><br><span class="line">menubar = tk.Menu(window)</span><br><span class="line"></span><br><span class="line"><span class="comment">##定义一个空菜单单元</span></span><br><span class="line">filemenu = tk.Menu(menubar, tearoff=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##将上面定义的空菜单命名为`File`，放在菜单栏中，就是装入那个容器中</span></span><br><span class="line">menubar.add_cascade(label=<span class="string">&#x27;File&#x27;</span>, menu=filemenu)</span><br><span class="line"></span><br><span class="line"><span class="comment">##在`File`中加入`New`的小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。</span></span><br><span class="line"><span class="comment">##如果点击这些单元, 就会触发`do_job`的功能</span></span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;New&#x27;</span>, command=do_job)</span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;Open&#x27;</span>, command=do_job)<span class="comment">##同样的在`File`中加入`Open`小菜单</span></span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;Save&#x27;</span>, command=do_job)<span class="comment">##同样的在`File`中加入`Save`小菜单</span></span><br><span class="line"></span><br><span class="line">filemenu.add_separator()<span class="comment">##这里就是一条分割线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##同样的在`File`中加入`Exit`小菜单,此处对应命令为`window.quit`</span></span><br><span class="line">filemenu.add_command(label=<span class="string">&#x27;Exit&#x27;</span>, command=window.quit)</span><br></pre></td></tr></table></figure><p>同样的我们在定义另一个菜单<code>Edit</code>也是如此和定义的<code>File</code>菜单一样 这里再来看一下效果中比较不一样的菜单就是<code>File</code>中的<code>Import</code>菜单, 在这个菜单选项中, 我们还能分支出更多的选项.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">submenu = tk.Menu(filemenu)<span class="comment">##和上面定义菜单一样，不过此处实在`File`上创建一个空的菜单</span></span><br><span class="line">filemenu.add_cascade(label=<span class="string">&#x27;Import&#x27;</span>, menu=submenu, underline=<span class="number">0</span>)<span class="comment">##给放入的菜单`submenu`命名为`Import`</span></span><br><span class="line">submenu.add_command(label=<span class="string">&quot;Submenu1&quot;</span>, command=do_job)<span class="comment">##这里和上面也一样，在`Import`中加入一个小菜单命令`Submenu1`</span></span><br></pre></td></tr></table></figure><h2 id="触发功能-4"><a href="#触发功能-4" class="headerlink" title="触发功能"></a>触发功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_job</span>():</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    l.config(text=<span class="string">&#x27;do &#x27;</span>+ <span class="built_in">str</span>(counter))</span><br><span class="line">    counter+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里的功能就是每触发一次命令，counter就会+1，在label上的显示就会从 do 0 ,do 1 , do 2… </p><h1 id="Frame-框架"><a href="#Frame-框架" class="headerlink" title="Frame 框架"></a>Frame 框架</h1><h2 id="Frame-部件"><a href="#Frame-部件" class="headerlink" title="Frame 部件"></a>Frame 部件</h2><p>Frame 是一个在 Windows 上分离小区域的部件, 它能将 Windows 分成不同的区,然后存放不同的其他部件. 同时一个 Frame 上也能再分成两个 Frame, Frame 可以认为是一种容器.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###定义一个`label`显示`on the window`</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;on the window&#x27;</span>).pack()</span><br><span class="line"></span><br><span class="line"><span class="comment">###在`window`上创建一个`frame`</span></span><br><span class="line">frm = tk.Frame(window)</span><br><span class="line">frm.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment">###在刚刚创建的`frame`上创建两个`frame`，我们可以把它理解成一个大容器里套了一个小容器，即`frm`上有两个`frame` ，`frm_l`和`frm_r`</span></span><br><span class="line"></span><br><span class="line">frm_l = tk.Frame(frm)</span><br><span class="line">frm_r = tk.Frame(frm)</span><br><span class="line"></span><br><span class="line"><span class="comment">###这里是控制小的`frm`部件在大的`frm`的相对位置，此处`frm_l`就是在`frm`的左边，`frm_r`在`frm`的右边</span></span><br><span class="line">frm_l.pack(side=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">frm_r.pack(side=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###这里的三个label就是在我们创建的frame上定义的label部件，还是以容器理解，就是容器上贴了标签，来指明这个是什么，解释这个容器。</span></span><br><span class="line">tk.Label(frm_l, text=<span class="string">&#x27;on the frm_l1&#x27;</span>).pack()<span class="comment">##这个`label`长在`frm_l`上，显示为`on the frm_l1`</span></span><br><span class="line">tk.Label(frm_l, text=<span class="string">&#x27;on the frm_l2&#x27;</span>).pack()<span class="comment">##这个`label`长在`frm_l`上，显示为`on the frm_l2`</span></span><br><span class="line">tk.Label(frm_r, text=<span class="string">&#x27;on the frm_r1&#x27;</span>).pack()<span class="comment">##这个`label`长在`frm_r`上，显示为`on the frm_r1`</span></span><br></pre></td></tr></table></figure><h1 id="messagebox-弹窗"><a href="#messagebox-弹窗" class="headerlink" title="messagebox 弹窗"></a>messagebox 弹窗</h1><h2 id="messagebox部件"><a href="#messagebox部件" class="headerlink" title="messagebox部件"></a>messagebox部件</h2><p>其实这里的<code>messagebox</code>就是我们平时看到的弹窗。 我们首先需要定义一个触发功能，来触发这个弹窗 这里我们就放上以前学过的<code>button</code>按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tk.Button(window, text=<span class="string">&#x27;hit me&#x27;</span>, command=hit_me).pack()</span><br></pre></td></tr></table></figure><p>通过触发功能，调用<code>messagebox</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():</span><br><span class="line">   tk.messagebox.showinfo(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;hahahaha&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里点击button按钮就会弹出提示对话窗</p><p>下面给出几种形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tk.messagebox.showinfo(title=<span class="string">&#x27;&#x27;</span>,message=<span class="string">&#x27;&#x27;</span>)<span class="comment">#提示信息对话窗</span></span><br><span class="line">tk.messagebox.showwarning()<span class="comment">#提出警告对话窗</span></span><br><span class="line">tk.messagebox.showerror()<span class="comment">#提出错误对话窗</span></span><br><span class="line">tk.messagebox.askquestion()<span class="comment">#询问选择对话窗</span></span><br></pre></td></tr></table></figure><p>如果给出如下定义就是打印出我们所选项对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():</span><br><span class="line">   <span class="built_in">print</span>(tk.messagebox.askquestion(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;hahahaha&#x27;</span>))</span><br></pre></td></tr></table></figure><p>同样创建方法都是一样的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tk.messagebox.askquestion())<span class="comment">#返回yes和no</span></span><br><span class="line"><span class="built_in">print</span>(tk.messagebox.askokcancel())<span class="comment">#返回true和false</span></span><br><span class="line"><span class="built_in">print</span>(tk.messagebox.askyesno())<span class="comment">#返回true和false</span></span><br><span class="line"><span class="built_in">print</span>(tk.messagebox.askretrycancel())<span class="comment">#返回true和false</span></span><br></pre></td></tr></table></figure><h1 id="pack-grid-place-放置位置"><a href="#pack-grid-place-放置位置" class="headerlink" title="pack grid place 放置位置"></a>pack grid place 放置位置</h1><h2 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h2><p>首先我们先看看我们常用的<code>pack()</code>, 他会按照上下左右的方式排列. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tk.Label(window, text=<span class="string">&#x27;1&#x27;</span>).pack(side=<span class="string">&#x27;top&#x27;</span>)<span class="comment">#上</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;1&#x27;</span>).pack(side=<span class="string">&#x27;bottom&#x27;</span>)<span class="comment">#下</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;1&#x27;</span>).pack(side=<span class="string">&#x27;left&#x27;</span>)<span class="comment">#左</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;1&#x27;</span>).pack(side=<span class="string">&#x27;right&#x27;</span>)<span class="comment">#右</span></span><br></pre></td></tr></table></figure><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p>接下里我们在看看<code>grid()</code>, grid 是方格, 所以所有的内容会被放在这些规律的方格中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        tk.Label(window, text=<span class="number">1</span>).grid(row=i, column=j, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>以上的代码就是创建一个四行三列的表格，其实<code>grid</code>就是用表格的形式定位的。这里的参数 <code>row</code>为行，<code>colum</code>为列，<code>padx</code>就是单元格左右间距，<code>pady</code>就是单元格上下间距。</p><h2 id="place"><a href="#place" class="headerlink" title="place"></a>place</h2><p>再接下来就是<code>place()</code>, 这个比较容易理解，就是给精确的坐标来定位，如此处给的<code>（20,10）</code>，就是将这个部件放在坐标为<code>（x，y）</code>的这个位置 后面的参数<code>anchor=nw</code>就是前面所讲的锚定点是西北角。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tk.Label(window, text=<span class="number">1</span>).place(x=<span class="number">20</span>, y=<span class="number">10</span>, anchor=<span class="string">&#x27;nw&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="案例-登录窗口"><a href="#案例-登录窗口" class="headerlink" title="案例: 登录窗口"></a>案例: 登录窗口</h5><p>1.界面创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># welcome image</span></span><br><span class="line">canvas = tk.Canvas(window, height=<span class="number">200</span>, width=<span class="number">500</span>)<span class="comment">#创建画布</span></span><br><span class="line">image_file = tk.PhotoImage(file=<span class="string">&#x27;welcome.gif&#x27;</span>)<span class="comment">#加载图片文件</span></span><br><span class="line">image = canvas.create_image(<span class="number">0</span>,<span class="number">0</span>, anchor=<span class="string">&#x27;nw&#x27;</span>, image=image_file)<span class="comment">#将图片置于画布上</span></span><br><span class="line">canvas.pack(side=<span class="string">&#x27;top&#x27;</span>)<span class="comment">#放置画布（为上端）</span></span><br></pre></td></tr></table></figure><p>这里创建的就是我们效果图中的welcome, 如果你想使用和我一样的 welcome 的图片, 你可以在<a href="/liaojie.github.io/medias/welcome.gif">这里</a>下载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user information</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;User name: &#x27;</span>).place(x=<span class="number">50</span>, y= <span class="number">150</span>)<span class="comment">#创建一个`label`名为`User name: `置于坐标（50,150）</span></span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;Password: &#x27;</span>).place(x=<span class="number">50</span>, y= <span class="number">190</span>)</span><br><span class="line"></span><br><span class="line">var_usr_name = tk.StringVar()<span class="comment">#定义变量</span></span><br><span class="line">var_usr_name.<span class="built_in">set</span>(<span class="string">&#x27;example@python.com&#x27;</span>)<span class="comment">#变量赋值&#x27;example@python.com&#x27;</span></span><br><span class="line">entry_usr_name = tk.Entry(window, textvariable=var_usr_name)<span class="comment">#创建一个`entry`，显示为变量`var_usr_name`即图中的`example@python.com`</span></span><br><span class="line">entry_usr_name.place(x=<span class="number">160</span>, y=<span class="number">150</span>)</span><br><span class="line">var_usr_pwd = tk.StringVar()</span><br><span class="line">entry_usr_pwd = tk.Entry(window, textvariable=var_usr_pwd, show=<span class="string">&#x27;*&#x27;</span>)<span class="comment">#`show`这个参数将输入的密码变为`***`的形式</span></span><br><span class="line">entry_usr_pwd.place(x=<span class="number">160</span>, y=<span class="number">190</span>)</span><br></pre></td></tr></table></figure><p>这里就是创建我们熟悉的登录界面，就是常见的用户名，密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># login and sign up button</span></span><br><span class="line">btn_login = tk.Button(window, text=<span class="string">&#x27;Login&#x27;</span>, command=usr_login)<span class="comment">#定义一个`button`按钮，名为`Login`,触发命令为`usr_login`</span></span><br><span class="line">btn_login.place(x=<span class="number">170</span>, y=<span class="number">230</span>)</span><br><span class="line">btn_sign_up = tk.Button(window, text=<span class="string">&#x27;Sign up&#x27;</span>, command=usr_sign_up)</span><br><span class="line">btn_sign_up.place(x=<span class="number">270</span>, y=<span class="number">230</span>)</span><br></pre></td></tr></table></figure><p>这里定义的就是我们的登录按钮。</p><p>2.触发功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">usr_login</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usr_sign_up</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>3.触发的 usr_login 功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##这两行代码就是获取用户输入的`usr_name`和`usr_pwd`</span></span><br><span class="line">usr_name = var_usr_name.get()</span><br><span class="line">usr_pwd = var_usr_pwd.get()</span><br><span class="line"></span><br><span class="line"><span class="comment">##这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。</span></span><br><span class="line"><span class="comment">##中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usrs_info.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> usr_file:</span><br><span class="line">        usrs_info = pickle.load(usr_file)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line"> <span class="comment">##这里就是我们在没有读取到`usr_file`的时候，程序会创建一个`usr_file`这个文件，并将管理员</span></span><br><span class="line"> <span class="comment">##的用户和密码写入，即用户名为`admin`密码为`admin`。</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usrs_info.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> usr_file:</span><br><span class="line">        usrs_info = &#123;<span class="string">&#x27;admin&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">        pickle.dump(usrs_info, usr_file)</span><br></pre></td></tr></table></figure><p>这一部分就是将用户输入的用户名和密码获取到，和我们保存在<code>usr_file</code>中的数据对比。针对正确的密码和错误的密码分别对待.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗`how are you?`加上你的用户名。</span></span><br><span class="line"><span class="keyword">if</span> usr_name <span class="keyword">in</span> usrs_info:</span><br><span class="line">    <span class="keyword">if</span> usr_pwd == usrs_info[usr_name]:</span><br><span class="line">        tk.messagebox.showinfo(title=<span class="string">&#x27;Welcome&#x27;</span>, message=<span class="string">&#x27;How are you? &#x27;</span> + usr_name)</span><br><span class="line">    <span class="comment">##如果用户名匹配成功，而密码输入错误，则会弹出&#x27;Error, your password is wrong, try again.&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tk.messagebox.showerror(message=<span class="string">&#x27;Error, your password is wrong, try again.&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:   <span class="comment"># 如果发现用户名不存在</span></span><br><span class="line">    is_sign_up = tk.messagebox.askyesno(<span class="string">&#x27;Welcome&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;You have not sign up yet. Sign up today?&#x27;</span>)</span><br><span class="line">    <span class="comment"># 提示需不需要注册新用户</span></span><br><span class="line">    <span class="keyword">if</span> is_sign_up:</span><br><span class="line">        usr_sign_up()</span><br></pre></td></tr></table></figure><p>4.usr_sign_up 界面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window_sign_up = tk.Toplevel(window)</span><br><span class="line">window_sign_up.geometry(<span class="string">&#x27;350x200&#x27;</span>)</span><br><span class="line">window_sign_up.title(<span class="string">&#x27;Sign up window&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这一段首先是创建一个注册的窗口。这里和以往不同的是，多了一个<code>tk.Toplevel</code>我们打个比方，就好像我们前面所学 的<code>frame</code>一样，就是在编辑的功能下还有很多功能一样，这里就是在主体窗口的<code>window</code>上创建一个<code>Sign up window</code>窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new_name = tk.StringVar()<span class="comment">#将输入的注册名赋值给变量</span></span><br><span class="line">new_name.<span class="built_in">set</span>(<span class="string">&#x27;example@python.com&#x27;</span>)<span class="comment">#将最初显示定为&#x27;example@python.com&#x27;</span></span><br><span class="line">tk.Label(window_sign_up, text=<span class="string">&#x27;User name: &#x27;</span>).place(x=<span class="number">10</span>, y= <span class="number">10</span>)<span class="comment">#将`User name:`放置在坐标（10,10）。</span></span><br><span class="line">entry_new_name = tk.Entry(window_sign_up, textvariable=new_name)<span class="comment">#创建一个注册名的`entry`，变量为`new_name`</span></span><br><span class="line">entry_new_name.place(x=<span class="number">150</span>, y=<span class="number">10</span>)<span class="comment">#`entry`放置在坐标（150,10）.</span></span><br><span class="line"></span><br><span class="line">new_pwd = tk.StringVar()</span><br><span class="line">tk.Label(window_sign_up, text=<span class="string">&#x27;Password: &#x27;</span>).place(x=<span class="number">10</span>, y=<span class="number">50</span>)</span><br><span class="line">entry_usr_pwd = tk.Entry(window_sign_up, textvariable=new_pwd, show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">entry_usr_pwd.place(x=<span class="number">150</span>, y=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">new_pwd_confirm = tk.StringVar()</span><br><span class="line">tk.Label(window_sign_up, text=<span class="string">&#x27;Confirm password: &#x27;</span>).place(x=<span class="number">10</span>, y= <span class="number">90</span>)</span><br><span class="line">entry_usr_pwd_confirm = tk.Entry(window_sign_up, textvariable=new_pwd_confirm, show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">entry_usr_pwd_confirm.place(x=<span class="number">150</span>, y=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的 sign_to_Mofan_Python 我们再后面接着说</span></span><br><span class="line">btn_comfirm_sign_up = tk.Button(window_sign_up, text=<span class="string">&#x27;Sign up&#x27;</span>, command=sign_to_Mofan_Python)</span><br><span class="line">btn_comfirm_sign_up.place(x=<span class="number">150</span>, y=<span class="number">130</span>)</span><br></pre></td></tr></table></figure><p>相信大家对这一段代码已经很熟悉了，因为这是大家前面所学过的知识。其实就是像我们平时所见的注册窗口有一样，在<code>Sign up window</code>窗口 上添加<code>new_name</code>，<code>new_pwd</code>， <code>new_pwd_confirm</code>，还有最后一个注册按钮。这里便于大家复习，我们将new_name这段详细介绍一下（如代码注释）。 到这里就完成了我们这个注册的主要界面用户名，密码，确认密码。</p><p>5.sign_to_Mofan_Python() 功能 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">usr_sign_up</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign_to_Mofan_Python</span>():</span><br><span class="line">        <span class="comment">##以下三行就是获取我们注册时所输入的信息</span></span><br><span class="line">        np = new_pwd.get()</span><br><span class="line">        npf = new_pwd_confirm.get()</span><br><span class="line">        nn = new_name.get()</span><br><span class="line"></span><br><span class="line">        <span class="comment">##这里是打开我们记录数据的文件，将注册信息读出</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usrs_info.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> usr_file:</span><br><span class="line">            exist_usr_info = pickle.load(usr_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment">##这里就是判断，如果两次密码输入不一致，则提示`&#x27;Error&#x27;, &#x27;Password and confirm password must be the same!&#x27;`</span></span><br><span class="line">        <span class="keyword">if</span> np != npf:</span><br><span class="line">            tk.messagebox.showerror(<span class="string">&#x27;Error&#x27;</span>, <span class="string">&#x27;Password and confirm password must be the same!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">##如果用户名已经在我们的数据文件中，则提示`&#x27;Error&#x27;, &#x27;The user has already signed up!&#x27;`</span></span><br><span class="line">        <span class="keyword">elif</span> nn <span class="keyword">in</span> exist_usr_info:</span><br><span class="line">            tk.messagebox.showerror(<span class="string">&#x27;Error&#x27;</span>, <span class="string">&#x27;The user has already signed up!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">##最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功`&#x27;Welcome&#x27;, &#x27;You have successfully signed up!&#x27;`</span></span><br><span class="line">        <span class="comment">##然后销毁窗口。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exist_usr_info[nn] = np</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usrs_info.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> usr_file:</span><br><span class="line">                pickle.dump(exist_usr_info, usr_file)</span><br><span class="line">            tk.messagebox.showinfo(<span class="string">&#x27;Welcome&#x27;</span>, <span class="string">&#x27;You have successfully signed up!&#x27;</span>)</span><br><span class="line">            <span class="comment">##然后销毁窗口。</span></span><br><span class="line">            window_sign_up.destroy()</span><br></pre></td></tr></table></figure><p>这里其实和前面所讲的<code>login</code>功能类似，如代码注释。</p><p>如果两次密码输入不一致，则提示<code>&#39;Error&#39;</code>, <code>&#39;Password and confirm password must be the same!&#39;</code></p><p>如果用户名已经在我们的数据文件中，则提示<code>&#39;Error&#39;</code>, <code>&#39;The user has already signed up!&#39;</code></p><p>注册成功就是我们一开始展示的效果图。</p><p>更多代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line"><span class="comment"># root.title(&#x27;我的第一个Python窗体&#x27;)</span></span><br><span class="line"><span class="comment"># root.geometry(&#x27;240x240&#x27;) # 这里的乘号不是 * ，而是小写英文字母 x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lb = Label(root, text=&#x27;我是第一个标签&#x27;,</span></span><br><span class="line"><span class="comment">#            bg=&#x27;#d3fbfb&#x27;,</span></span><br><span class="line"><span class="comment">#            fg=&#x27;red&#x27;,</span></span><br><span class="line"><span class="comment">#            font=(&#x27;华文新魏&#x27;, 32),</span></span><br><span class="line"><span class="comment">#            width=20,</span></span><br><span class="line"><span class="comment">#            height=2,</span></span><br><span class="line"><span class="comment">#            relief=SUNKEN)</span></span><br><span class="line"><span class="comment"># lb.pack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="comment"># msg1 = Message(root, text=&#x27;&#x27;&#x27;我的水平起始位置相对窗体 0.2，垂直起始位置为绝对位置 80 像素，我的高度是窗体高度的0.4，宽度是200像素&#x27;&#x27;&#x27;, relief=GROOVE)</span></span><br><span class="line"><span class="comment"># msg1.place(relx=0.2, y=80, relheight=0.4, width=200)</span></span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 时钟</span></span><br><span class="line"><span class="string"># 方法一：利用configure()方法或config()来实现文本变化</span></span><br><span class="line"><span class="string">import tkinter</span></span><br><span class="line"><span class="string">import time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def gettime():</span></span><br><span class="line"><span class="string">    timestr = time.strftime(&quot;%H:%M:%S&quot;)  # 获取当前的时间并转化为字符串</span></span><br><span class="line"><span class="string">    lb.configure(text=timestr)  # 重新设置标签文本</span></span><br><span class="line"><span class="string">    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tkinter.Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;时钟&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = tkinter.Label(root, text=&#x27;&#x27;, fg=&#x27;blue&#x27;, font=(&quot;黑体&quot;, 80))</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">gettime()</span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 方法二：利用textvariable变量属性来实现文本变化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import tkinter</span></span><br><span class="line"><span class="string">import time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def gettime():</span></span><br><span class="line"><span class="string">    var.set(time.strftime(&quot;%H:%M:%S&quot;))  # 获取当前时间</span></span><br><span class="line"><span class="string">    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tkinter.Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;时钟&#x27;)</span></span><br><span class="line"><span class="string">var = tkinter.StringVar()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = tkinter.Label(root, textvariable=var, fg=&#x27;blue&#x27;, font=(&quot;黑体&quot;, 80))</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">gettime()</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;from tkinter import *</span></span><br><span class="line"><span class="string">import time</span></span><br><span class="line"><span class="string">import datetime</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def gettime():</span></span><br><span class="line"><span class="string">    s = str(datetime.datetime.now()) + &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">    txt.insert(END, s)</span></span><br><span class="line"><span class="string">    root.after(1000, gettime)  # 每隔1s调用函数 gettime 自身获取时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string">txt = Text(root)</span></span><br><span class="line"><span class="string">txt.pack()</span></span><br><span class="line"><span class="string">gettime()</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run1():</span></span><br><span class="line"><span class="string">    a = float(inp1.get())</span></span><br><span class="line"><span class="string">    b = float(inp2.get())</span></span><br><span class="line"><span class="string">    s = &#x27;%0.2f+%0.2f=%0.2f\n&#x27; % (a, b, a + b)</span></span><br><span class="line"><span class="string">    txt.insert(END, s)  # 追加显示运算结果</span></span><br><span class="line"><span class="string">    inp1.delete(0, END)  # 清空输入</span></span><br><span class="line"><span class="string">    inp2.delete(0, END)  # 清空输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run2(x, y):</span></span><br><span class="line"><span class="string">    a = float(x)</span></span><br><span class="line"><span class="string">    b = float(y)</span></span><br><span class="line"><span class="string">    s = &#x27;%0.2f+%0.2f=%0.2f\n&#x27; % (a, b, a + b)</span></span><br><span class="line"><span class="string">    txt.insert(END, s)  # 追加显示运算结果</span></span><br><span class="line"><span class="string">    inp1.delete(0, END)  # 清空输入</span></span><br><span class="line"><span class="string">    inp2.delete(0, END)  # 清空输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.geometry(&#x27;460x240&#x27;)</span></span><br><span class="line"><span class="string">root.title(&#x27;简单加法器&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb1 = Label(root, text=&#x27;请输入两个数，按下面两个按钮之一进行加法计算&#x27;)</span></span><br><span class="line"><span class="string">lb1.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.1)</span></span><br><span class="line"><span class="string">inp1 = Entry(root)</span></span><br><span class="line"><span class="string">inp1.place(relx=0.1, rely=0.2, relwidth=0.3, relheight=0.1)</span></span><br><span class="line"><span class="string">inp2 = Entry(root)</span></span><br><span class="line"><span class="string">inp2.place(relx=0.6, rely=0.2, relwidth=0.3, relheight=0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 方法-直接调用 run1()</span></span><br><span class="line"><span class="string">btn1 = Button(root, text=&#x27;方法一&#x27;, command=run1)</span></span><br><span class="line"><span class="string">btn1.place(relx=0.1, rely=0.4, relwidth=0.3, relheight=0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 方法二利用 lambda 传参数调用run2()</span></span><br><span class="line"><span class="string">btn2 = Button(root, text=&#x27;方法二&#x27;, command=lambda: run2(inp1.get(), inp2.get()))</span></span><br><span class="line"><span class="string">btn2.place(relx=0.6, rely=0.4, relwidth=0.3, relheight=0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在窗体垂直自上而下位置60%处起，布局相对窗体高度40%高的文本框</span></span><br><span class="line"><span class="string">txt = Text(root)</span></span><br><span class="line"><span class="string">txt.place(rely=0.6, relheight=0.4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 单选框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def Mysel():</span></span><br><span class="line"><span class="string">    dic = &#123;0: &#x27;甲&#x27;, 1: &#x27;乙&#x27;, 2: &#x27;丙&#x27;&#125;</span></span><br><span class="line"><span class="string">    s = &quot;您选了&quot; + dic.get(var.get()) + &quot;项&quot;</span></span><br><span class="line"><span class="string">    lb.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;单选按钮&#x27;)</span></span><br><span class="line"><span class="string">lb = Label(root)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var = IntVar()</span></span><br><span class="line"><span class="string">rd1 = Radiobutton(root, text=&quot;甲&quot;, variable=var, value=0, command=Mysel)</span></span><br><span class="line"><span class="string">rd1.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rd2 = Radiobutton(root, text=&quot;乙&quot;, variable=var, value=1, command=Mysel)</span></span><br><span class="line"><span class="string">rd2.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rd3 = Radiobutton(root, text=&quot;丙&quot;, variable=var, value=2, command=Mysel)</span></span><br><span class="line"><span class="string">rd3.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 复选框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string">import tkinter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run():</span></span><br><span class="line"><span class="string">    if (CheckVar1.get() == 0 and CheckVar2.get() == 0 and CheckVar3.get() == 0 and CheckVar4.get() == 0):</span></span><br><span class="line"><span class="string">        s = &#x27;您还没选择任何爱好项目&#x27;</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        s1 = &quot;足球&quot; if CheckVar1.get() == 1 else &quot;&quot;</span></span><br><span class="line"><span class="string">        s2 = &quot;篮球&quot; if CheckVar2.get() == 1 else &quot;&quot;</span></span><br><span class="line"><span class="string">        s3 = &quot;游泳&quot; if CheckVar3.get() == 1 else &quot;&quot;</span></span><br><span class="line"><span class="string">        s4 = &quot;田径&quot; if CheckVar4.get() == 1 else &quot;&quot;</span></span><br><span class="line"><span class="string">        s = &quot;您选择了%s %s %s %s&quot; % (s1, s2, s3, s4)</span></span><br><span class="line"><span class="string">    lb2.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tkinter.Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;复选框&#x27;)</span></span><br><span class="line"><span class="string">lb1 = Label(root, text=&#x27;请选择您的爱好项目&#x27;)</span></span><br><span class="line"><span class="string">lb1.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CheckVar1 = IntVar()</span></span><br><span class="line"><span class="string">CheckVar2 = IntVar()</span></span><br><span class="line"><span class="string">CheckVar3 = IntVar()</span></span><br><span class="line"><span class="string">CheckVar4 = IntVar()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ch1 = Checkbutton(root, text=&#x27;足球&#x27;, variable=CheckVar1, onvalue=1, offvalue=0)</span></span><br><span class="line"><span class="string">ch2 = Checkbutton(root, text=&#x27;篮球&#x27;, variable=CheckVar2, onvalue=1, offvalue=0)</span></span><br><span class="line"><span class="string">ch3 = Checkbutton(root, text=&#x27;游泳&#x27;, variable=CheckVar3, onvalue=1, offvalue=0)</span></span><br><span class="line"><span class="string">ch4 = Checkbutton(root, text=&#x27;田径&#x27;, variable=CheckVar4, onvalue=1, offvalue=0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ch1.pack()</span></span><br><span class="line"><span class="string">ch2.pack()</span></span><br><span class="line"><span class="string">ch3.pack()</span></span><br><span class="line"><span class="string">ch4.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn = Button(root, text=&quot;OK&quot;, command=run)</span></span><br><span class="line"><span class="string">btn.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb2 = Label(root, text=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">lb2.pack()</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 列表框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def ini():</span></span><br><span class="line"><span class="string">    Lstbox1.delete(0, END)</span></span><br><span class="line"><span class="string">    list_items = [&quot;数学&quot;, &quot;物理&quot;, &quot;化学&quot;, &quot;语文&quot;, &quot;外语&quot;]</span></span><br><span class="line"><span class="string">    for item in list_items:</span></span><br><span class="line"><span class="string">        Lstbox1.insert(END, item)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def clear():</span></span><br><span class="line"><span class="string">    Lstbox1.delete(0, END)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def ins():</span></span><br><span class="line"><span class="string">    if entry.get() != &#x27;&#x27;:</span></span><br><span class="line"><span class="string">        if Lstbox1.curselection() == ():</span></span><br><span class="line"><span class="string">            Lstbox1.insert(Lstbox1.size(), entry.get())</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            Lstbox1.insert(Lstbox1.curselection(), entry.get())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def updt():</span></span><br><span class="line"><span class="string">    if entry.get() != &#x27;&#x27; and Lstbox1.curselection() != ():</span></span><br><span class="line"><span class="string">        selected = Lstbox1.curselection()[0]</span></span><br><span class="line"><span class="string">        Lstbox1.delete(selected)</span></span><br><span class="line"><span class="string">        Lstbox1.insert(selected, entry.get())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def delt():</span></span><br><span class="line"><span class="string">    if Lstbox1.curselection() != ():</span></span><br><span class="line"><span class="string">        Lstbox1.delete(Lstbox1.curselection())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;列表框实验&#x27;)</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame1 = Frame(root, relief=RAISED)</span></span><br><span class="line"><span class="string">frame1.place(relx=0.0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame2 = Frame(root, relief=GROOVE)</span></span><br><span class="line"><span class="string">frame2.place(relx=0.5)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Lstbox1 = Listbox(frame1)</span></span><br><span class="line"><span class="string">Lstbox1.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">entry = Entry(frame2)</span></span><br><span class="line"><span class="string">entry.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn1 = Button(frame2, text=&#x27;初始化&#x27;, command=ini)</span></span><br><span class="line"><span class="string">btn1.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn2 = Button(frame2, text=&#x27;添加&#x27;, command=ins)</span></span><br><span class="line"><span class="string">btn2.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn3 = Button(frame2, text=&#x27;插入&#x27;, command=ins)  # 添加和插入功能实质上是一样的</span></span><br><span class="line"><span class="string">btn3.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn4 = Button(frame2, text=&#x27;修改&#x27;, command=updt)</span></span><br><span class="line"><span class="string">btn4.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn5 = Button(frame2, text=&#x27;删除&#x27;, command=delt)</span></span><br><span class="line"><span class="string">btn5.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">btn6 = Button(frame2, text=&#x27;清空&#x27;, command=clear)</span></span><br><span class="line"><span class="string">btn6.pack(fill=X)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 组合框</span></span><br><span class="line"><span class="string">from tkinter.ttk import *</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def calc(event):</span></span><br><span class="line"><span class="string">    a = float(t1.get())</span></span><br><span class="line"><span class="string">    b = float(t2.get())</span></span><br><span class="line"><span class="string">    dic = &#123;0: a + b, 1: a - b, 2: a * b, 3: a / b&#125;</span></span><br><span class="line"><span class="string">    c = dic[comb.current()]</span></span><br><span class="line"><span class="string">    lbl.config(text=str(c))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;四则运算&#x27;)</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">t1 = Entry(root)</span></span><br><span class="line"><span class="string">t1.place(relx=0.1, rely=0.1, relwidth=0.2, relheight=0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">t2 = Entry(root)</span></span><br><span class="line"><span class="string">t2.place(relx=0.5, rely=0.1, relwidth=0.2, relheight=0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var = StringVar()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">comb = Combobox(root, textvariable=var, values=[&#x27;加&#x27;, &#x27;减&#x27;, &#x27;乘&#x27;, &#x27;除&#x27;, ])</span></span><br><span class="line"><span class="string">comb.place(relx=0.1, rely=0.5, relwidth=0.2)</span></span><br><span class="line"><span class="string">comb.bind(&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;, calc)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lbl = Label(root, text=&#x27;结果&#x27;)</span></span><br><span class="line"><span class="string">lbl.place(relx=0.5, rely=0.7, relwidth=0.2, relheight=0.3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 滑块</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def show(event):</span></span><br><span class="line"><span class="string">    s = &#x27;滑块的取值为&#x27; + str(var.get())</span></span><br><span class="line"><span class="string">    lb.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;滑块实验&#x27;)</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x180&#x27;)</span></span><br><span class="line"><span class="string">var = DoubleVar()</span></span><br><span class="line"><span class="string">scl = Scale(root, orient=HORIZONTAL, length=200, from_=1.0, to=5.0, label=&#x27;请拖动滑块&#x27;, tickinterval=1, resolution=0.05,</span></span><br><span class="line"><span class="string">            variable=var)</span></span><br><span class="line"><span class="string">scl.bind(&#x27;&lt;ButtonRelease-1&gt;&#x27;, show)</span></span><br><span class="line"><span class="string">scl.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = Label(root, text=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 菜单</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def new():</span></span><br><span class="line"><span class="string">    s = &#x27;新建&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def ope():</span></span><br><span class="line"><span class="string">    s = &#x27;打开&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def sav():</span></span><br><span class="line"><span class="string">    s = &#x27;保存&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def cut():</span></span><br><span class="line"><span class="string">    s = &#x27;剪切&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def cop():</span></span><br><span class="line"><span class="string">    s = &#x27;复制&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def pas():</span></span><br><span class="line"><span class="string">    s = &#x27;粘贴&#x27;</span></span><br><span class="line"><span class="string">    lb1.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def popupmenu(event):</span></span><br><span class="line"><span class="string">    mainmenu.post(event.x_root, event.y_root)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;菜单实验&#x27;)</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb1 = Label(root, text=&#x27;显示信息&#x27;, font=(&#x27;黑体&#x27;, 32, &#x27;bold&#x27;))</span></span><br><span class="line"><span class="string">lb1.place(relx=0.2, rely=0.2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mainmenu = Menu(root)</span></span><br><span class="line"><span class="string">menuFile = Menu(mainmenu)  # 菜单分组 menuFile</span></span><br><span class="line"><span class="string">mainmenu.add_cascade(label=&quot;文件&quot;, menu=menuFile)</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&quot;新建&quot;, command=new)</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&quot;打开&quot;, command=ope)</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&quot;保存&quot;, command=sav)</span></span><br><span class="line"><span class="string">menuFile.add_separator()  # 分割线</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&quot;退出&quot;, command=root.destroy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">menuEdit = Menu(mainmenu)  # 菜单分组 menuEdit</span></span><br><span class="line"><span class="string">mainmenu.add_cascade(label=&quot;编辑&quot;, menu=menuEdit)</span></span><br><span class="line"><span class="string">menuEdit.add_command(label=&quot;剪切&quot;, command=cut)</span></span><br><span class="line"><span class="string">menuEdit.add_command(label=&quot;复制&quot;, command=cop())</span></span><br><span class="line"><span class="string">menuEdit.add_command(label=&quot;粘贴&quot;, command=pas())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.config(menu=mainmenu)</span></span><br><span class="line"><span class="string">root.bind(&#x27;Button-3&#x27;, popupmenu)  # 根窗体绑定鼠标右击响应事件</span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 子窗体</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def newwind():</span></span><br><span class="line"><span class="string">    winNew = Toplevel(root)</span></span><br><span class="line"><span class="string">    winNew.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string">    winNew.title(&#x27;新窗体&#x27;)</span></span><br><span class="line"><span class="string">    lb2 = Label(winNew, text=&#x27;我在新窗体上&#x27;)</span></span><br><span class="line"><span class="string">    lb2.place(relx=0.2, rely=0.2)</span></span><br><span class="line"><span class="string">    btClose = Button(winNew, text=&#x27;关闭&#x27;, command=winNew.destroy)</span></span><br><span class="line"><span class="string">    btClose.place(relx=0.7, rely=0.5)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&#x27;新建窗体实验&#x27;)</span></span><br><span class="line"><span class="string">root.geometry(&#x27;320x240&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb1 = Label(root, text=&#x27;主窗体&#x27;, font=(&#x27;黑体&#x27;, 32, &#x27;bold&#x27;))</span></span><br><span class="line"><span class="string">lb1.place(relx=0.2, rely=0.2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mainmenu = Menu(root)</span></span><br><span class="line"><span class="string">menuFile = Menu(mainmenu)</span></span><br><span class="line"><span class="string">mainmenu.add_cascade(label=&#x27;菜单&#x27;, menu=menuFile)</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&#x27;新窗体&#x27;, command=newwind)</span></span><br><span class="line"><span class="string">menuFile.add_separator()</span></span><br><span class="line"><span class="string">menuFile.add_command(label=&#x27;退出&#x27;, command=root.destroy)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.config(menu=mainmenu)</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 交互对话框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string">import tkinter.messagebox</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def xz():</span></span><br><span class="line"><span class="string">    answer = tkinter.messagebox.askokcancel(&#x27;请选择&#x27;, &#x27;请选择确定或取消&#x27;)</span></span><br><span class="line"><span class="string">    if answer:</span></span><br><span class="line"><span class="string">        lb.config(text=&#x27;已确认&#x27;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        lb.config(text=&#x27;已取消&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = Label(root, text=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">btn = Button(root, text=&#x27;弹出对话框&#x27;, command=xz)</span></span><br><span class="line"><span class="string">btn.pack()</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 输入对话框</span></span><br><span class="line"><span class="string">from tkinter.simpledialog import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def xz():</span></span><br><span class="line"><span class="string">    s = askstring(&#x27;请输入&#x27;, &#x27;请输入一串文字&#x27;)</span></span><br><span class="line"><span class="string">    lb.config(text=s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = Label(root, text=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">btn = Button(root, text=&#x27;弹出输入对话框&#x27;, command=xz)</span></span><br><span class="line"><span class="string">btn.pack()</span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 文件选择对话框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string">import tkinter.filedialog</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def xz():</span></span><br><span class="line"><span class="string">    filename = tkinter.filedialog.askopenfilename()</span></span><br><span class="line"><span class="string">    if filename != &#x27;&#x27;:</span></span><br><span class="line"><span class="string">        lb.config(text=&#x27;您选择的文件是&#x27; + filename)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        lb.config(text=&#x27;您没有选择任何文件&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = Label(root, text=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">btn = Button(root, text=&#x27;弹出文件选择对话框&#x27;, command=xz)</span></span><br><span class="line"><span class="string">btn.pack()</span></span><br><span class="line"><span class="string">root.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 颜色选择对话框</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string">import tkinter.colorchooser</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def xz():</span></span><br><span class="line"><span class="string">    color = tkinter.colorchooser.askcolor()</span></span><br><span class="line"><span class="string">    colorstr = str(color)</span></span><br><span class="line"><span class="string">    print(&#x27;打印字符串%s 切掉后=%s&#x27; % (colorstr, colorstr[-9:-2]))</span></span><br><span class="line"><span class="string">    lb.config(text=colorstr[-9:-2], background=colorstr[-9:-2])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lb = Label(root, text=&#x27;请关注颜色的变化&#x27;)</span></span><br><span class="line"><span class="string">lb.pack()</span></span><br><span class="line"><span class="string">btn = Button(root, text=&#x27;弹出颜色选择对话框&#x27;, command=xz)</span></span><br><span class="line"><span class="string">btn.pack()</span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图片</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 插入文件图片</span></span><br><span class="line"><span class="string">import tkinter as tk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tk.Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个标签类, [justify]:对齐方式</span></span><br><span class="line"><span class="string">textLabel = tk.Label(root, text=&quot;右边会看到一个图片\n&quot;,</span></span><br><span class="line"><span class="string">                     justify=tk.LEFT)  # 左对齐</span></span><br><span class="line"><span class="string">textLabel.pack(side=tk.LEFT)  # 自动对齐,side：方位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个图片管理类</span></span><br><span class="line"><span class="string">photo = tk.PhotoImage(file=&quot;shop.png&quot;)  # file：t图片路径</span></span><br><span class="line"><span class="string">imgLabel = tk.Label(root, image=photo)  # 把图片整合到标签类中</span></span><br><span class="line"><span class="string">imgLabel.pack(side=tk.RIGHT)  # 自动对齐</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tk.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;import tkinter as tk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tk.Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 增加背景图片</span></span><br><span class="line"><span class="string">photo = tk.PhotoImage(file=&quot;shop.png&quot;)</span></span><br><span class="line"><span class="string">theLabel = tk.Label(root,</span></span><br><span class="line"><span class="string">                    text=&quot;我是内容,\n请你阅读&quot;,</span></span><br><span class="line"><span class="string">                    # 内容</span></span><br><span class="line"><span class="string">                    justify=tk.LEFT,</span></span><br><span class="line"><span class="string">                    # 对齐方式</span></span><br><span class="line"><span class="string">                    image=photo,</span></span><br><span class="line"><span class="string">                    # 加入图片</span></span><br><span class="line"><span class="string">                    compound=tk.CENTER,</span></span><br><span class="line"><span class="string">                    # 关键:设置为背景图片</span></span><br><span class="line"><span class="string">                    font=(&quot;华文行楷&quot;, 20),</span></span><br><span class="line"><span class="string">                    # 字体和字号</span></span><br><span class="line"><span class="string">                    fg=&quot;white&quot;)  # 前景色</span></span><br><span class="line"><span class="string">theLabel.pack()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tk.mainloop()&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 插入文件图片</span></span><br><span class="line"><span class="string">import tkinter as tk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = tk.Tk()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame1 = tk.Frame(root)  # 这是上面的框架</span></span><br><span class="line"><span class="string">frame2 = tk.Frame(root)  # 这是下面的框架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var = tk.StringVar()  # 储存文字的类</span></span><br><span class="line"><span class="string">var.set(&quot;右边会看到一个图片，\n换行&quot;)  # 设置文字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个标签类, [justify]:对齐方式，[frame]所属框架</span></span><br><span class="line"><span class="string">textLabel = tk.Label(frame1, textvariable=var,</span></span><br><span class="line"><span class="string">                     justify=tk.LEFT)  # 显示文字内容</span></span><br><span class="line"><span class="string">textLabel.pack(side=tk.LEFT)  # 自动对齐,side：方位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个图片管理类</span></span><br><span class="line"><span class="string">photo = tk.PhotoImage(file=&quot;shop.png&quot;)  # file：t图片路径</span></span><br><span class="line"><span class="string">imgLabel = tk.Label(frame1, image=photo)  # 把图片整合到标签类中</span></span><br><span class="line"><span class="string">imgLabel.pack(side=tk.RIGHT)  # 自动对齐</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def callback():  # 触发的函数</span></span><br><span class="line"><span class="string">    var.set(&quot;设置文字&quot;)  # 设置文字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># [frame]所属框架 ，text 文字内容 command：触发方法</span></span><br><span class="line"><span class="string">theButton = tk.Button(frame2, text=&quot;我是下面的按钮&quot;, command=callback)</span></span><br><span class="line"><span class="string">theButton.pack()  # 自动对齐</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frame1.pack(padx=10, pady=10)  # 上框架对齐</span></span><br><span class="line"><span class="string">frame2.pack(padx=10, pady=10)  # 下框架对齐</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tk.mainloop()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;# 摄像头</span></span><br><span class="line"><span class="string">from tkinter import *</span></span><br><span class="line"><span class="string">import cv2</span></span><br><span class="line"><span class="string">from PIL import Image, ImageTk</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def take_snapshot():</span></span><br><span class="line"><span class="string">    print(&quot;有人给你点赞啦！&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def video_loop():</span></span><br><span class="line"><span class="string">    success, img = camera.read()  # 从摄像头读取照片</span></span><br><span class="line"><span class="string">    if success:</span></span><br><span class="line"><span class="string">        cv2.waitKey(100)</span></span><br><span class="line"><span class="string">        cv2image = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)  # 转换颜色从BGR到RGBA</span></span><br><span class="line"><span class="string">        current_image = Image.fromarray(cv2image)  # 将图像转换成Image对象</span></span><br><span class="line"><span class="string">        imgtk = ImageTk.PhotoImage(image=current_image)</span></span><br><span class="line"><span class="string">        panel.imgtk1 = imgtk</span></span><br><span class="line"><span class="string">        panel.config(image=imgtk)</span></span><br><span class="line"><span class="string">        root.after(1, video_loop)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">camera = cv2.VideoCapture(0)  # 摄像头</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root = Tk()</span></span><br><span class="line"><span class="string">root.title(&quot;opencv + tkinter&quot;)</span></span><br><span class="line"><span class="string"># root.protocol(&#x27;WM_DELETE_WINDOW&#x27;, detector)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">panel = Label(root)  # initialize image panel</span></span><br><span class="line"><span class="string">panel.pack(padx=10, pady=10)</span></span><br><span class="line"><span class="string"># root.config(cursor=&quot;arrow&quot;)</span></span><br><span class="line"><span class="string">btn = Button(root, text=&quot;点赞!&quot;, command=take_snapshot)</span></span><br><span class="line"><span class="string">btn.pack(fill=&quot;both&quot;, expand=True, padx=10, pady=10)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">video_loop()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root.mainloop()</span></span><br><span class="line"><span class="string"># 当一切都完成后，关闭摄像头并释放所占资源</span></span><br><span class="line"><span class="string">camera.release()</span></span><br><span class="line"><span class="string">cv2.destroyAllWindows()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android数据库</title>
      <link href="/posts/d7893ec2.html"/>
      <url>/posts/d7893ec2.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>1.创建一个类继承于SQLiteOpenHelper</p><p>实现里面的方法,创建构造方法<br>参数解释:</p><ul><li>@param context to use for locating paths to the the database 上下文</li><li>@param name of the database file, or null for an in-memory database 数据库名称</li><li>@param factory to use for creating cursor objects, or null for the default 游标工厂</li><li>@param version number of the database (starting at 1); if the database is older 版本号</li></ul><p>2.创建对象新建数据库</p><p>调用getReadableDatabase()/getWriteableDatabase()方法即可创建数据库<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line"><span class="type">db_DatabaseHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">db_DatabaseHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">helper.getWritableDatabase();</span><br></pre></td></tr></table></figure></p><h2 id="onCreate-SQLiteDatabase-db"><a href="#onCreate-SQLiteDatabase-db" class="headerlink" title="onCreate(SQLiteDatabase db)"></a>onCreate(SQLiteDatabase db)</h2><p>第一次创建数据库的时候调用该函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据表(表名单独用类保存为常量)</span></span><br><span class="line"><span class="comment">//1.编写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;create table&quot;</span> + TABLE_NAME + <span class="string">&quot;_id integer, name varhcar(50), age integer, salary integer&quot;</span>;</span><br><span class="line"><span class="comment">//2.执行sql语句</span></span><br><span class="line">db.execSQL(sql);</span><br></pre></td></tr></table></figure><h2 id="onUpgrade-SQLiteDatabase-db-int-oldVersion-int-newVersion"><a href="#onUpgrade-SQLiteDatabase-db-int-oldVersion-int-newVersion" class="headerlink" title="onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)"></a>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)</h2><p>当数据库升级的时候调用该函数<br>根据版本号不同对数据库做相应的处理（增减字段等）</p><h2 id="编写DAO操作类"><a href="#编写DAO操作类" class="headerlink" title="编写DAO操作类"></a>编写DAO操作类</h2><p>1.通过helper对象获取SQLiteDatabase对象<br>2.编写sql语句<br>3.SQLiteDatabase对象执行sql语句<br>4.关闭数据库</p><p>eg:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">QLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into &quot;</span> + db_Constants.TABLE_NAME + <span class="string">&quot;(_id,name,age,salary,phone,address)values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">db.execSQL(sql, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">21</span>,<span class="number">3500</span>,<span class="string">&quot;13678088714&quot;</span>,<span class="string">&quot;陕西西安&quot;</span>&#125;);</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><br>5.查询操作</p><ul><li>查询操作调用方法rawQuery(sql,null);</li><li>该方法返回游标对象 Cursor</li><li>moveToNext()遍历返回结果</li><li>getColumnIndex(“columnName”); 通过列名获取列号</li><li>getString(index)\getInt(index); 通过列号获取数据</li><li>关闭游标、数据库。</li></ul><p>eg:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from &quot;</span> + db_Constants.TABLE_NAME;</span><br><span class="line"><span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.rawQuery(sql,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(index);</span><br><span class="line">    Log.d(TAG, name);</span><br><span class="line">&#125;</span><br><span class="line">cursor.close();</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure></p><h2 id="使用Android-API操作数据"><a href="#使用Android-API操作数据" class="headerlink" title="使用Android API操作数据"></a>使用Android API操作数据</h2><p>Android提供了数据操作的API，使操作数据库变得更加简单</p><p>插入</p><ul><li>insert(数据表名称， null, ContentValues);</li><li>ContentValues是map容器，通过put()添加键值对及列名与其对应的值</li><li>@return (long)新插入的行号，若为-1表示发生错误</li></ul><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="comment">//String sql = &quot;insert into &quot; + db_Constants.TABLE_NAME + &quot;(_id,name,age,salary,phone,address)values(?,?,?,?,?,?)&quot;;</span></span><br><span class="line"><span class="comment">//db.execSQL(sql, new Object[]&#123;1,&quot;张*&quot;,2*,****,&quot;136****8714&quot;,&quot;陕西**&quot;&#125;);</span></span><br><span class="line"><span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">values.put(<span class="string">&quot;_id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">values.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张*&quot;</span>);</span><br><span class="line">values.put(<span class="string">&quot;salary&quot;</span>, ****);</span><br><span class="line">values.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;1367****714&quot;</span>);</span><br><span class="line">values.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;陕西**&quot;</span>);</span><br><span class="line">db.insert(db_Constants.TABLE_NAME, <span class="literal">null</span>, values);</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><p>删除</p><ul><li>delete(数据表名称, 条件, 参数)</li><li>参数是用字符串数组表示，代替条件中的‘?’</li><li>@return (int)影响行数</li></ul><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="comment">//String sql = &quot;delete from &quot; + db_Constants.TABLE_NAME + &quot; where age = 30&quot;;</span></span><br><span class="line"><span class="comment">//db.execSQL(sql);</span></span><br><span class="line">String[] Args = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">Args[<span class="number">0</span>] = <span class="string">&quot;30&quot;</span>;</span><br><span class="line">db.delete(db_Constants.TABLE_NAME,<span class="string">&quot;age = ?&quot;</span>,Args);</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><p>更新</p><ul><li>update(数据表名称, ContentValues, 条件, 参数)</li><li>return (int)影响行数</li></ul><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="comment">//String sql = &quot;update &quot; + db_Constants.TABLE_NAME + &quot; set salary = 6500 where age =21&quot;;</span></span><br><span class="line"><span class="comment">//db.execSQL(sql);</span></span><br><span class="line"><span class="type">ContentValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">values.put(<span class="string">&quot;salary&quot;</span>, <span class="number">6500</span>);</span><br><span class="line">String[] Args = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">Args[<span class="number">0</span>] = <span class="string">&quot;30&quot;</span>;</span><br><span class="line">db.update(db_Constants.TABLE_NAME, values, <span class="string">&quot;age = ?&quot;</span>, Args);</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><p>查询</p><ul><li>query(数据表名称, 返回字段, 条件, 参数, 分组, HAVING,排序)</li><li>HAVING 是条件中有函数的时候使用</li><li>@return (Cursor)游标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mhelper.getWritableDatabase();</span><br><span class="line"><span class="comment">// String sql = &quot;select * from &quot; + db_Constants.TABLE_NAME;</span></span><br><span class="line"><span class="comment">// Cursor cursor = db.rawQuery(sql,null);</span></span><br><span class="line"><span class="comment">// while(cursor.moveToNext())&#123;</span></span><br><span class="line"><span class="comment">//     int index = cursor.getColumnIndex(&quot;name&quot;);</span></span><br><span class="line"><span class="comment">//     String name = cursor.getString(index);</span></span><br><span class="line"><span class="comment">//     Log.d(TAG, name);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// cursor.close();</span></span><br><span class="line"><span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> db.query(db_Constants.TABLE_NAME, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cursor.getString(index);</span><br><span class="line">Log.d(TAG, name);</span><br><span class="line">&#125;</span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>安全性</p><ul><li>当数据库在进行写操作时，由于异常发生，可能导致数据前后出现不一致的对象，因此有必要采用事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.beginTransaction();<span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//数据操作</span></span><br><span class="line">db.setTransactionSuccessful();</span><br><span class="line">&#125;<span class="keyword">catch</span>(exception e)&#123;</span><br><span class="line"><span class="comment">//处理异常</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">db.endTransaction();<span class="comment">//关闭事务</span></span><br><span class="line">db.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高效性</p><ul><li>在执行大量数据操作时，普通方式会重复打开关闭数据库，而开启事务后，是将数据先写入内存，再一次性写入数据。</li></ul><p><a href="https://github.com/liaojie1314/DatabaseDemo">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb</title>
      <link href="/posts/1479d6d2.html"/>
      <url>/posts/1479d6d2.html</url>
      
        <content type="html"><![CDATA[<p>ADB是什么？</p><p>ADB是android debug bridge—&gt; 安卓调试桥</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>一般来说,作为android开发人员,不需要下载。在sdk里自带就有。在sdk的platform-tools目录下就有。</p><p>如果是测试人员的话,可以到这个地址上去下载:</p><p><a href="https://adbshell.com/downloads">ADB下载</a></p><p>下载好了然后需要配置环境变量:</p><p>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;Path(添加adb.exe的文件夹路径)-&gt;一直点击确定即可</p><p>测试:WIN+R,输入cmd进入命令行,输入adb出现下面结果就说明成功了</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/adb环境配置成功.png" alt=""></p><h2 id="手机配置"><a href="#手机配置" class="headerlink" title="手机配置"></a>手机配置</h2><ul><li>打开开发者模式—-&gt;不同手机不一样,可以在设置里搜索一下。默认开发者模式是不可见的,需要多次点击android版本号</li><li>要允许USB调试</li><li>允许Usb安装应用</li><li>关闭各种系统优化</li></ul><p>插上手机usb时,可能会弹窗需要授权,点击允许就可以了。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="查看设备"><a href="#查看设备" class="headerlink" title="查看设备"></a>查看设备</h3><p><code>adb devices</code>:查看当前连接设备</p><h3 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h3><p>命令:<code>adb remount</code></p><p>remount就是重新挂载的意思。</p><p>一般做系统开发才会用到这个命令。</p><p>比如说,你要推送东西进system目录下,你需要重新挂载,默认情况下是只读的状态。</p><p>如果出现如下提示,提示说我不是root,我得adb root才行。那我们就执行一下adb root,再执行adb remount</p><blockquote><p>Not running as root. Try “adb root” first.</p></blockquote><h3 id="设备重启"><a href="#设备重启" class="headerlink" title="设备重启"></a>设备重启</h3><p>命令:<code>adb reboot</code></p><p>如果提示你不是root的,你切换一下root用户就好了。</p><h3 id="设备关机"><a href="#设备关机" class="headerlink" title="设备关机"></a>设备关机</h3><p><code>adb shell reboot -p</code></p><h3 id="选择设备"><a href="#选择设备" class="headerlink" title="选择设备"></a>选择设备</h3><p>如果你执行adb名的话,则会提示你有多台设备,比如说,我电脑现在有两个手机设备</p><p>我执行adb reboot</p><p>就会提示多台设备,可以加-s参数来指定设备。</p><p><code>adb -s xxx设备名称</code></p><h3 id="进入shell"><a href="#进入shell" class="headerlink" title="进入shell"></a>进入shell</h3><p>命令:<code>adb shell</code></p><p>就进入到了安卓系统的shell了。</p><h2 id="常用的shell命令"><a href="#常用的shell命令" class="headerlink" title="常用的shell命令"></a>常用的shell命令</h2><h3 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h3><p><code>ls -l</code></p><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><p><code>cd 目录地址</code></p><p>比如说我去查看data/data/下的目录,这个是我们应用的内部目录,里面有很多包名,对应着各应用的文件夹。</p><p>我没有权限,那怎么办呢？我们输入su就可以了</p><h3 id="查看文件路径"><a href="#查看文件路径" class="headerlink" title="查看文件路径"></a>查看文件路径</h3><p><code>pwd</code></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>rm命令,如果是文件夹则要加参数-r,强制删除-f,force</code></p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p><code>mkdir 文件夹名称</code></p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><code>touch 文件名</code></p><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p><code>mv 需要移动的文件 移动到的文件夹路径(./ 当前路径)</code></p><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><p>有时候临时查看,我们可以用里面的命令cat,vim,vi,more这些命令可能没有,被阉割掉了。或者说本来就是没有的,毕竟android要的是linux的内核。</p><p><code>cat 文件名</code></p><p>发现全是乱码。怎么解决呢？得设置一下编码</p><blockquote><p>chcp 65001</p></blockquote><p>65001是utf-8,936是gbk,再看就行了</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="从Android系统中拉取文件出来"><a href="#从Android系统中拉取文件出来" class="headerlink" title="从Android系统中拉取文件出来"></a>从Android系统中拉取文件出来</h3><p>命令: <code>adb pull 内部文件地址 本地目录</code></p><p>如果我们进去里面是用了su命令的, 切换到超级用户。我们就要先adb root</p><h3 id="推送文件到android系统中"><a href="#推送文件到android系统中" class="headerlink" title="推送文件到android系统中"></a>推送文件到android系统中</h3><p>命令: <code>adb push 本地文件 安卓系统内部路径</code></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="抓取Log"><a href="#抓取Log" class="headerlink" title="抓取Log"></a>抓取Log</h3><p>命令: <code>adb logcat &gt; xxx.log</code></p><p>输入ctrl+c停止抓取log</p><p>adb抓取Log有好些个参数,比如说等级,输出时间之类的。</p><p>一般建议全抓取,然后用Notepad++来搜索Log</p><h3 id="ADB获取包名"><a href="#ADB获取包名" class="headerlink" title="ADB获取包名"></a>ADB获取包名</h3><p>应用场景: 我们在开发的时候,有时需要打开别人的应用,如果没有别人的文档的时候。你怎么知道别人的action,category之类的是什么呢？或者用显式意图,你也得知道别人的包名和入口类的全名称呀。然后构建compoment,用于启动。</p><p>那怎么获取到包名呢？</p><p>我一般会用logcat抓取log,然后过滤一些特定的标识</p><p>比如说<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">logcat | grep cmp=</span><br></pre></td></tr></table></figure></p><p>然后去打开你的目标应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locat | grep START</span><br></pre></td></tr></table></figure><p>这个也是有的</p><h3 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h3><p>命令: <code>adb install 本地apk地址</code></p><p>直接拖拽apk也可</p><p>不过需要这个手机端得允许usb安装应用</p><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p><code>adb uninstall 包名</code></p><p>直接adb跟包名就好,一般我们只卸载自己的,不过你可以去卸载一下系统的应用试试看！</p><p>一般系统应用的目录是:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/system/priv-app</span><br><span class="line">/system/app</span><br></pre></td></tr></table></figure></p><p>第三方应用的目录在<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app</span><br></pre></td></tr></table></figure></p><h3 id="启动一个Acitivity"><a href="#启动一个Acitivity" class="headerlink" title="启动一个Acitivity"></a>启动一个Acitivity</h3><p>命令: <code>adb shell am start -n 包名/类名</code></p><p>这种是显示意图启动</p><p>后面的斜杠不是或的意思,就是要两个都写。比如说:</p><blockquote><p>adb shell am start -n com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity</p></blockquote><p>这样子就启动了google浏览器了, 前提是得有哈。</p><h3 id="adb发送广播"><a href="#adb发送广播" class="headerlink" title="adb发送广播"></a>adb发送广播</h3><p>这个做系统开发比较常用,比如说做一些测试的时候。不需要写代码。</p><p>直接发就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a 参数</span><br><span class="line"></span><br><span class="line">[-a ] action (常用) [-d &lt;DATA_URI&gt;] data的Uri [-t &lt;MIME_TYPE&gt;] mime type [-c [-c ] ...] category (一般) [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...] （字符串参数 先是key 再是value） [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...] (布尔类型参数 先是key 再是value） [-e|--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...] （整型参数 先是key 再是value） [-n ] 组件名称 [-f ] [] flags</span><br></pre></td></tr></table></figure><p>这样子,我们写个广播接收者,然后我们发送一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBroadcast</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;TestBroadcast&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context,Intent intent)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> intent.getAction();</span><br><span class="line">        Log.d(TAG,<span class="string">&quot;action is == &gt; &quot;</span> + action);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;net.example.test.ACTION.TEST&quot;</span>.equals(action)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isHansom</span> <span class="operator">=</span> intent.getBooleanExtra(<span class="string">&quot;isHansom&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">monies</span> <span class="operator">=</span> intent.getIntExtra(<span class="string">&quot;money&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">            Log.d(TAG,<span class="string">&quot;text == &gt; &quot;</span> + text);</span><br><span class="line">            Log.d(TAG,<span class="string">&quot;isHansom == &gt; &quot;</span> + isHansom);</span><br><span class="line">            Log.d(TAG,<span class="string">&quot;monies == &gt; &quot;</span> + monies);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.test.TestBroadcast&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;net.example.test.ACTION.TEST&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ADB截图"><a href="#ADB截图" class="headerlink" title="ADB截图"></a>ADB截图</h3><p><code>adb shell screencap -p /sdcard/screen.pngadb pull /sdcard/screen.png ./</code></p><p>截图,放到特定位置</p><h3 id="ADB发送模拟按键"><a href="#ADB发送模拟按键" class="headerlink" title="ADB发送模拟按键"></a>ADB发送模拟按键</h3><p>命令: <code>adb shell input keyevent  键码（keyCode）</code></p><p>具体的KeyCode可以去看源码:</p><p>android.view.KeyEvent</p><p>Home和Back按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEYCODE_HOME</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">/** Key code constant: Back key. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEYCODE_BACK</span> <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>eg: <code>adb shell input keyevent 3</code></p>]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号</title>
      <link href="/posts/f66864f1.html"/>
      <url>/posts/f66864f1.html</url>
      
        <content type="html"><![CDATA[<p>订阅号开发(服务号需要企业认证,不适合个人开发)</p><h2 id="1-注册微信公众号"><a href="#1-注册微信公众号" class="headerlink" title="1 注册微信公众号"></a>1 注册微信公众号</h2><p>1.注册网站</p><p>官网:<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>2.注册流程</p><p>1)打开官网,点击右上角的立即注册<br>2)选择订阅号注册<br>3)依次输入要求的信息,勾上我同意,点击注册<br>4)选择中国内地,点击确定<br>5)选择订阅号确定<br>6)主体类型选择个人,填写好信息点击继续<br>7)填写好信息点击完成</p><p>关键词回复:</p><ul><li>半匹配:只要包含关键字即可</li><li>全匹配:跟名字一样</li></ul><h2 id="开发者自行开发"><a href="#开发者自行开发" class="headerlink" title="开发者自行开发"></a>开发者自行开发</h2><h3 id="接口测试号"><a href="#接口测试号" class="headerlink" title="接口测试号"></a>接口测试号</h3><p>位置: 微信官方文档-&gt;开始开发-&gt;接口测试号申请</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/接口配置文件.png" alt=""></p><p>打开WebStorm创建一个简单的服务器:</p><p>在工程文件夹下导包:<br><code>npm install express</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//验证服务器的有效性</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure><p>此时得到的是一个本地网址:<a href="http://localhost:3000,要将其转换为外部可访问网址才行">http://localhost:3000,要将其转换为外部可访问网址才行</a><br>工具:将内网映射成外网 <code>ngrok</code></p><p>指令: <code>ngrok http 3000</code><br>观察<code>Forwarding</code>后面即为外网网址</p><p>将网址加上<code>/html</code>输入在浏览器（例如: <a href="http://xxx.ngrok.io/html">http://xxx.ngrok.io/html</a> ）<br>（注意:有的浏览器可能无法访问，换个浏览器就好）</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ngrok.png" alt=""></p><p>有Gitub账号可直接登录，若没有账号可以先注册再登录</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/occount.png" alt=""></p><p>重新打开ngrok输入ngrok http 3000 —authtoken 加上上图authtoken后面的内容</p><p>（例如: ngrok http 3000 —authtoken 23RthpB7QpLdHrBTivoitz4CzZ8_4a9AcRX3ZuKKBXWfoPSYe）</p><p>将最终得到的网址填入URL栏,Token随便填写即可(尽量复杂)</p><p>填好之后在服务器上进行测试:</p><p>导入sha1库:<code>npm install sha1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//验证服务器的有效性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.微信服务器直到开发者服务器是哪个</span></span><br><span class="line"><span class="comment">- 测试号管理器上填写url开发者服务器地址</span></span><br><span class="line"><span class="comment">    -使用ngrok 内网穿透 将本地端口号开启的服务映射为外网可以访问的网址</span></span><br><span class="line"><span class="comment">    - ngrok http 3000</span></span><br><span class="line"><span class="comment">- Token</span></span><br><span class="line"><span class="comment">    - 参与微信签名加密的一个参数</span></span><br><span class="line"><span class="comment">2.开发者服务器 -验证消息是否来自微信服务器</span></span><br><span class="line"><span class="comment">    目的:计算得出signature微信加密签名,和微信传递过来的signature进项对比,如果一样说明消息来自于微信服务器,如果不一样说明表示不是微信服务器发送的消息</span></span><br><span class="line"><span class="comment">    1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span></span><br><span class="line"><span class="comment">    2.将数组里所有参数拼接成一个字符串,进行sha1加密</span></span><br><span class="line"><span class="comment">    3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"><span class="comment">    如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line"><span class="comment">    如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//定义配置对象</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">appID</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">appsecret</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收处理所有参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">    <span class="comment">//console.log(req.query);</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">  signature: &#x27;&#x27;,    //微信的加密签名</span></span><br><span class="line"><span class="comment">  echostr: &#x27;&#x27;,   //微信的随机字符串</span></span><br><span class="line"><span class="comment">  timestamp: &#x27;&#x27;,  //微信发送请求的时间戳</span></span><br><span class="line"><span class="comment">  nonce: &#x27;&#x27; //微信的随机数字</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> arr = [timestamp, nonce, token];</span><br><span class="line">    <span class="keyword">const</span> arrSort = arr.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrSort)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.将数组里所有参数拼接成一个字符串,进行sha1加密</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="keyword">const</span> sha1Str = <span class="title function_">sha1</span>(str);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(signature);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sha1Str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">        <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">        res.<span class="title function_">send</span>(echostr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="模块化代码"><a href="#模块化代码" class="headerlink" title="模块化代码:"></a>模块化代码:</h3><p>新建config文件夹,在该文件夹下新建index.js文件</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置对象模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">appID</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">appsecret</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建wechat文件夹,在该文件下新建auth.js文件</p><p>auth.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">      signature: &#x27;&#x27;,    //微信的加密签名</span></span><br><span class="line"><span class="comment">      echostr: &#x27;&#x27;,   //微信的随机字符串</span></span><br><span class="line"><span class="comment">      timestamp: &#x27;&#x27;,  //微信发送请求的时间戳</span></span><br><span class="line"><span class="comment">      nonce: &#x27;&#x27; //微信的随机数字</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> arr = [timestamp, nonce, token];</span><br><span class="line">        <span class="keyword">const</span> arrSort = arr.<span class="title function_">sort</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arrSort)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.将数组里所有参数拼接成一个字符串,进行sha1加密</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        <span class="keyword">const</span> sha1Str = <span class="title function_">sha1</span>(str);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(signature);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sha1Str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">            <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">            res.<span class="title function_">send</span>(echostr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入auto模块</span></span><br><span class="line"><span class="keyword">const</span> auth = <span class="built_in">require</span>(<span class="string">&#x27;./wechat/auth&#x27;</span>)</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//接收处理所有参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">auth</span>())</span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取access_token</h3><p>位置: 微信官方文档-&gt;开始开发-&gt;获取access_token</p><p>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。</p><p>公众平台的API调用所需的access_token的使用及生成方式说明：</p><p>1、建议公众号开发者使用中控服务器统一获取和刷新access_token，其他业务逻辑服务器所使用的access_token均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致access_token覆盖而影响业务；</p><p>2、目前access_token的有效期通过返回的expire_in来传达，目前是7200秒之内的值。中控服务器需要根据这个有效时间提前去刷新新access_token。在刷新过程中，中控服务器可对外继续输出的老access_token，此时公众平台后台会保证在5分钟内，新老access_token都可用，这保证了第三方业务的平滑过渡；</p><p>3、access_token的有效时间可能会在未来有调整，所以中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新access_token的接口，这样便于业务服务器在API调用获知access_token已超时的情况下，可以触发access_token的刷新流程。</p><p>4、对于可能存在风险的调用，在开发者进行获取 access_token调用时进入风险调用确认流程，需要用户管理员确认后才可以成功获取。具体流程为：</p><p>开发者通过某IP发起调用-&gt;平台返回错误码[89503]并同时下发模板消息给公众号管理员-&gt;公众号管理员确认该IP可以调用-&gt;开发者使用该IP再次发起调用-&gt;调用成功。</p><p>如公众号管理员第一次拒绝该IP调用，用户在1个小时内将无法使用该IP再次发起调用，如公众号管理员多次拒绝该IP调用，该IP将可能长期无法发起调用。平台建议开发者在发起调用前主动与管理员沟通确认调用需求，或请求管理员开启IP白名单功能并将该IP加入IP白名单列表。</p><p>公众号和小程序均可以使用AppID和AppSecret调用本接口来获取access_token。AppID和AppSecret可在“微信公众平台-开发-基本配置”页中获得（需要已经成为开发者，且帐号没有异常状态）。<strong>调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。</strong>小程序无需配置IP白名单。</p><p>接口调用请求说明<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span><br></pre></td></tr></table></figure><br>参数说明</p><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>grant_type</td><td>是</td><td>获取access_token填写client_credential</td></tr><tr><td>appid</td><td>是</td><td>第三方用户唯一凭证</td></tr><tr><td>secret</td><td>是</td><td>第三方用户唯一凭证密钥，即appsecret</td></tr></tbody></table></div><p>返回说明</p><p>正常情况下，微信会返回下述JSON数据包给公众号：</p><blockquote><p>{“access_token”:”ACCESS_TOKEN”,”expires_in”:7200}</p></blockquote><p>参数说明</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>access_token</td><td>获取到的凭证</td></tr><tr><td>expires_in</td><td>凭证有效时间，单位：秒</td></tr></tbody></table></div><p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p><blockquote><p>{“errcode”:40013,”errmsg”:”invalid appid”}</p></blockquote><p>返回码说明</p><div class="table-container"><table><thead><tr><th>返回码</th><th>说明</th></tr></thead><tbody><tr><td>-1</td><td>系统繁忙，此时请开发者稍候再试</td></tr><tr><td>0</td><td>请求成功</td></tr><tr><td>40001</td><td>AppSecret错误或者AppSecret不属于这个公众号，请开发者确认AppSecret的正确性</td></tr><tr><td>40002</td><td>请确保grant_type字段值为client_credential</td></tr><tr><td>40164</td><td>调用接口的IP地址不在白名单中，请在接口IP白名单中进行设置。</td></tr><tr><td>89503</td><td>此IP调用需要管理员确认,请联系管理员</td></tr><tr><td>89501</td><td>此IP正在等待管理员确认,请联系管理员</td></tr><tr><td>89506</td><td>24小时内该IP被管理员拒绝调用两次，24小时内不可再使用该IP调用</td></tr><tr><td>89507</td><td>1小时内该IP被管理员拒绝调用一次，1小时内不可再使用该IP调用</td></tr></tbody></table></div><p>在wechat文件夹下新建accessToken.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">access_token：微信调用接口全局唯一凭证</span></span><br><span class="line"><span class="comment">特点:</span></span><br><span class="line"><span class="comment">    1.唯一</span></span><br><span class="line"><span class="comment">    2.有效期为2小时,提前5分钟重新请求</span></span><br><span class="line"><span class="comment">    3.接口权限 每天2000次</span></span><br><span class="line"><span class="comment">    https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    设计思路:</span></span><br><span class="line"><span class="comment">        1.首次本地没有,发送请求获取access_token,保存下来(本地文件)</span></span><br><span class="line"><span class="comment">        2.第二次或以后:</span></span><br><span class="line"><span class="comment">            - 先去本地读取文件,判断它是否过期</span></span><br><span class="line"><span class="comment">                - 过期了</span></span><br><span class="line"><span class="comment">                    - 重新请求,保存下来,覆盖之前的文件(保证文件是唯一的)</span></span><br><span class="line"><span class="comment">                - 没过期</span></span><br><span class="line"><span class="comment">                    - 直接使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        整理思路:</span></span><br><span class="line"><span class="comment">            读取本地文件(readAccessToken):</span></span><br><span class="line"><span class="comment">                - 本地有文件</span></span><br><span class="line"><span class="comment">                    - 判断它是否过期(isValidAccessToken)</span></span><br><span class="line"><span class="comment">                        - 过期了</span></span><br><span class="line"><span class="comment">                           - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)</span></span><br><span class="line"><span class="comment">                        - 没过期</span></span><br><span class="line"><span class="comment">                           - 直接使用</span></span><br><span class="line"><span class="comment">                - 本地没有文件</span></span><br><span class="line"><span class="comment">                    - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//只需要引入request-promise-native库</span></span><br><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">&#x27;request-promise-native&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;writeFile, readFile&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入config文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;appID, appsecret&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个类,获取access_token</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用来获取access_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//定义请求的地址</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#x27;</span> + appID + <span class="string">&#x27;&amp;secret=&#x27;</span> + appsecret;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需要下载俩个库</span></span><br><span class="line"><span class="comment">        request</span></span><br><span class="line"><span class="comment">        request-promise-native 返回值是一个promise对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                      access_token: &#x27;53_ASJAH4U8r3yuEZFT4NCdzgLcBZN-W0rPy-0sBU0bizFlnxrXJ8rl8VxCZqllW8A_MZTTYr3eNnQN8GX-TUv4vuB-YuHde5BLlNN38fK-pb0ZujB7yE-5XwkX5NBX7bEA-yY7v2V2Wu8W-G</span></span><br><span class="line"><span class="comment">    SASVHcAFAKNZ&#x27;,</span></span><br><span class="line"><span class="comment">                      expires_in: 7200</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="comment">//设置access_token的过期时间 单位毫秒</span></span><br><span class="line">                    res.<span class="property">expires_in</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>() + (res.<span class="property">expires_in</span> - <span class="number">300</span>) * <span class="number">1000</span>;</span><br><span class="line">                    <span class="comment">//将promise的对象的状态改为成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;getAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来保存access_token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessToken 要保存的凭据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">saveAccessToken</span>(<span class="params">accessToken</span>) &#123;</span><br><span class="line">        <span class="comment">//将对象转化为json字符串</span></span><br><span class="line">        accessToken = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(accessToken);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">writeFile</span>(<span class="string">&#x27;./accessToken.txt&#x27;</span>, accessToken, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件保存成功&#x27;</span>);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;saveAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来读取access_token的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">readAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//读取本地文件中的access_taken</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">readFile</span>(<span class="string">&#x27;./accessToken.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取成功&#x27;</span>);</span><br><span class="line">                    <span class="comment">//将json字符串转化成js对象</span></span><br><span class="line">                    data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;readAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来检查access_token是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">isValidAccessToken</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//检查传入的参数是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (!data &amp;&amp; !data.<span class="property">access_token</span> &amp;&amp; !data.<span class="property">expires_in</span>) &#123;</span><br><span class="line">            <span class="comment">//代表access_token无效</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查传入的参数是否在有效期内</span></span><br><span class="line">        <span class="comment">// if (data.expires_in&lt;Date.now())&#123;</span></span><br><span class="line">        <span class="comment">//     //过期了</span></span><br><span class="line">        <span class="comment">//     return false;</span></span><br><span class="line">        <span class="comment">// &#125;else &#123;</span></span><br><span class="line">        <span class="comment">//     //没有过期</span></span><br><span class="line">        <span class="comment">//     return true;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">expires_in</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来获取没有过期的access_token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125; <span class="variable">access_token</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">fetchAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//优化</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">access_token</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">expires_in</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="comment">//说明之前保存过access_token,并且access_token有效,直接使用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">access_token</span>,</span><br><span class="line">                <span class="attr">expires_in</span>: <span class="variable language_">this</span>.<span class="property">expires_in</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readAccessToken</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地有文件</span></span><br><span class="line">                <span class="comment">//判断它是否过期(isValidAccessToken)</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(res)) &#123;</span><br><span class="line">                    <span class="comment">//有效的</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">//resolve(res);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//过期了</span></span><br><span class="line">                    <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                    <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                    <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">// resolve(res);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地没有文件</span></span><br><span class="line">                <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                <span class="comment">// resolve(res);</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//将access_token挂载到this上</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">access_token</span> = res.<span class="property">access_token</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">expires_in</span> = res.<span class="property">expires_in</span>;</span><br><span class="line">                <span class="comment">//返回res包装了一层promise对象(此对象为成功的对象)</span></span><br><span class="line">                <span class="comment">//是this.readAccessToken()最终返回值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟测试</span></span><br><span class="line"><span class="keyword">const</span> w = <span class="keyword">new</span> <span class="title class_">Wechat</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  读取本地文件(readAccessToken):</span></span><br><span class="line"><span class="comment">       - 本地有文件</span></span><br><span class="line"><span class="comment">           - 判断它是否过期(isValidAccessToken)</span></span><br><span class="line"><span class="comment">               - 过期了</span></span><br><span class="line"><span class="comment">                  - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)</span></span><br><span class="line"><span class="comment">               - 没过期</span></span><br><span class="line"><span class="comment">                  - 直接使用</span></span><br><span class="line"><span class="comment">       - 本地没有文件</span></span><br><span class="line"><span class="comment">           - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">w.<span class="title function_">fetchAccessToken</span>();</span><br></pre></td></tr></table></figure><h3 id="获取用户发送的消息"><a href="#获取用户发送的消息" class="headerlink" title="获取用户发送的消息"></a>获取用户发送的消息</h3><p>扫描测试号二维码关注测试公众号,发送一条消息进行测试</p><p>auto.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1.将参与微信加密签名的三个参数(timestamp,nonce,token)组合在一起,按照字典序排序(0-9,a-z)形成一个数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                const arr = [timestamp, nonce, token];</span></span><br><span class="line"><span class="comment">                const arrSort = arr.sort();</span></span><br><span class="line"><span class="comment">                console.log(arrSort)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //2.将数组里所有参数拼接成一个字符串,进行sha1加密</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                const str = arr.join(&#x27;&#x27;);</span></span><br><span class="line"><span class="comment">                console.log(str);</span></span><br><span class="line"><span class="comment">                const sha1Str = sha1(str);</span></span><br><span class="line"><span class="comment">                console.log(sha1Str);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简写</span></span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">            signature: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">            timestamp: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">            nonce: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">            openid: &#x27;&#x27; //用户的微信ID</span></span><br><span class="line"><span class="comment">             &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行app.js得到如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> signature: &#x27;&#x27;,</span><br><span class="line"> timestamp: &#x27;&#x27;,</span><br><span class="line"> nonce: &#x27;&#x27;,</span><br><span class="line"> openid: &#x27;&#x27; //用户的微信ID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来<br>在if中最后加上<code>res.end(&#39;&#39;);</code>即可</p><p>在项目下新建<code>utils</code>工具包文件夹,在里面新建一个文件<code>tool.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">工具函数包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">getUserDataAsync</span>(<span class="params">req</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> xmlData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">                    <span class="comment">//读取的数据是buffer,需要将其转化为字符串</span></span><br><span class="line">                    xmlData += data.<span class="title function_">toString</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当数据接收完毕时,会触发当前</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xmlData);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>auth.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">//引入tool模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;getUserDataAsync&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(req.query);</span></span><br><span class="line">            <span class="comment">//接收请求体中的数据,流式数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xmlData = <span class="keyword">await</span> <span class="title function_">getUserDataAsync</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlData);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行app.js得到如下信息:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[gh_3b6b3cd4d8e8]]&gt;&lt;/ToUserName&gt; //开发中id           </span><br><span class="line">&lt;FromUserName&gt;&lt;![CDATA[okzHZ6Xb1dMfGx1fti6VV4en0aTU]]&gt;&lt;/FromUserName&gt;//用户 openid</span><br><span class="line">&lt;CreateTime&gt;1643090286&lt;/CreateTime&gt;//发送的时间戳</span><br><span class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;//发送消息类型                      </span><br><span class="line">&lt;Content&gt;&lt;![CDATA[123]]&gt;&lt;/Content&gt;//内容                      </span><br><span class="line">&lt;MsgId&gt;23523394398679914&lt;/MsgId&gt;//消息id 微信服务器会默认保存3天用户发送的数据,通过次id三天内就可以找到此消息数据                                     </span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure></p><p>接下来我们要得到xml中的数据</p><p>tool.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">工具函数包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//npm install xml2js 导包</span></span><br><span class="line"><span class="comment">//引入xml2js,将xml数据转化为js对象</span></span><br><span class="line"><span class="keyword">const</span> &#123;parseString&#125; = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">getUserDataAsync</span>(<span class="params">req</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> xmlData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">                    <span class="comment">//读取的数据是buffer,需要将其转化为字符串</span></span><br><span class="line">                    xmlData += data.<span class="title function_">toString</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当数据接收完毕时,会触发当前</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xmlData);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parseXMLAsync</span>(<span class="params">xmlData</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">parseString</span>(xmlData,&#123;<span class="attr">trim</span>:<span class="literal">true</span>&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!err)&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;parseXMLAsync方法出了问题:&#x27;</span>+err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>auth.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">//引入tool模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;getUserDataAsync,parseXMLAsync&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(req.query);</span></span><br><span class="line">            <span class="comment">//接收请求体中的数据,流式数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xmlData = <span class="keyword">await</span> <span class="title function_">getUserDataAsync</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlData);</span><br><span class="line">            <span class="comment">//将xml数据解析为js对象</span></span><br><span class="line">            <span class="keyword">const</span> jsData = <span class="keyword">await</span> <span class="title function_">parseXMLAsync</span>(xmlData);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(jsData);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行app.js得到如下信息:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  xml: &#123;</span><br><span class="line">    ToUserName: [ &#x27;gh_3b6b3cd4d8e8&#x27; ],</span><br><span class="line">    FromUserName: [ &#x27;okzHZ6Xb1dMfGx1fti6VV4en0aTU&#x27; ],</span><br><span class="line">    CreateTime: [ &#x27;1643091294&#x27; ],</span><br><span class="line">    MsgType: [ &#x27;text&#x27; ],</span><br><span class="line">    Content: [ &#x27;111&#x27; ],</span><br><span class="line">    MsgId: [ &#x27;23523410572447438&#x27; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>格式化得到的数据:</p><p>tool.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">工具函数包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//npm install xml2js 导包</span></span><br><span class="line"><span class="comment">//引入xml2js,将xml数据转化为js对象</span></span><br><span class="line"><span class="keyword">const</span> &#123;parseString&#125; = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">getUserDataAsync</span>(<span class="params">req</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> xmlData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">                    <span class="comment">//读取的数据是buffer,需要将其转化为字符串</span></span><br><span class="line">                    xmlData += data.<span class="title function_">toString</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当数据接收完毕时,会触发当前</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xmlData);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parseXMLAsync</span>(<span class="params">xmlData</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">parseString</span>(xmlData, &#123;<span class="attr">trim</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;parseXMLAsync方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">formatMessage</span>(<span class="params">jsData</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> message = &#123;&#125;;</span><br><span class="line">        <span class="comment">//获取xml对象</span></span><br><span class="line">        jsData = jsData.<span class="property">xml</span>;</span><br><span class="line">        <span class="comment">//判断数据是否为一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> jsData === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历对象</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> jsData) &#123;</span><br><span class="line">                <span class="comment">//获取属性值</span></span><br><span class="line">                <span class="keyword">let</span> value = jsData[key];</span><br><span class="line">                <span class="comment">//过滤空数据</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) &amp;&amp; value.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//将合法数据赋值到message对象上</span></span><br><span class="line">                    message[key] = value[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>auth.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">//引入tool模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;getUserDataAsync,parseXMLAsync,formatMessage&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(req.query);</span></span><br><span class="line">            <span class="comment">//接收请求体中的数据,流式数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xmlData = <span class="keyword">await</span> <span class="title function_">getUserDataAsync</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlData);</span><br><span class="line">            <span class="comment">//将xml数据解析为js对象</span></span><br><span class="line">            <span class="keyword">const</span> jsData = <span class="keyword">await</span> <span class="title function_">parseXMLAsync</span>(xmlData);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(jsData);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//格式化数据</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="title function_">formatMessage</span>(jsData);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">            <span class="comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span></span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行app.js得到如下信息:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; CreateTime: &#x27;1643092243&#x27;, MsgId: &#x27;23523424720943421&#x27; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="简单的自动回复"><a href="#简单的自动回复" class="headerlink" title="简单的自动回复"></a>简单的自动回复</h3><p>微信官方文档-&gt;基础消息能力-&gt;被动回复用户消息</p><p>当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个POST请求，开发者可以在响应包（Get）中返回特定XML结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。</p><p>微信服务器在将用户的消息发给公众号的开发者服务器地址（开发者中心处配置）后，微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次，如果在调试中，发现用户无法收到响应的消息，可以检查是否消息处理超时。关于重试的消息排重，有msgid的消息推荐使用msgid排重。事件类型消息推荐使用FromUserName + CreateTime 排重。</p><p>如果开发者希望增强安全性，可以在开发者中心处开启消息加密，这样，用户发给公众号的消息以及公众号被动回复用户消息都会继续加密，详见被动回复消息加解密说明。</p><p>假如服务器无法保证在五秒内处理并回复，必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试（这种情况下，可以使用客服消息接口进行异步回复），否则，将出现严重的错误提示。详见下面说明：</p><p>1、直接回复success（推荐方式） 2、直接回复空串（指字节长度为0的空字符串，而不是XML结构体中content字段的内容为空）</p><p>一旦遇到以下情况，微信都会在公众号会话中，向用户下发系统提示“该公众号暂时无法提供服务，请稍后再试”：</p><p>1、开发者在5秒内未回复任何内容 2、开发者回复了异常数据，比如JSON数据等</p><p>另外，请注意，回复图片（不支持gif动图）等多媒体消息时需要预先通过素材管理接口上传临时素材到微信服务器，可以使用素材管理中的临时素材，也可以使用永久素材。</p><p>各消息类型需要的XML数据包结构如下：</p><h5 id="回复文本消息"><a href="#回复文本消息" class="headerlink" title="回复文本消息"></a>回复文本消息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">  &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</span><br><span class="line">  &lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</span><br><span class="line">  &lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</span><br><span class="line">  &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</span><br><span class="line">  &lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，文本为text</td></tr><tr><td>Content</td><td>是</td><td>回复的消息内容（换行：在content中能够换行，微信客户端就支持换行显示）</td></tr></tbody></table></div><h5 id="回复图片消息"><a href="#回复图片消息" class="headerlink" title="回复图片消息"></a>回复图片消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[image]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，图片为image</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id。</td></tr></tbody></table></div><h5 id="回复语音消息"><a href="#回复语音消息" class="headerlink" title="回复语音消息"></a>回复语音消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[voice]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Voice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Voice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间戳 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，语音为voice</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id</td></tr></tbody></table></div><h5 id="回复视频消息"><a href="#回复视频消息" class="headerlink" title="回复视频消息"></a>回复视频消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[video]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[title]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[description]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，视频为video</td></tr><tr><td>MediaId</td><td>是</td><td>通过素材管理中的接口上传多媒体文件，得到的id</td></tr><tr><td>Title</td><td>否</td><td>视频消息的标题</td></tr><tr><td>Description</td><td>否</td><td>视频消息的描述</td></tr></tbody></table></div><h5 id="回复音乐消息"><a href="#回复音乐消息" class="headerlink" title="回复音乐消息"></a>回复音乐消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[music]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Music</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[TITLE]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[DESCRIPTION]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MusicUrl</span>&gt;</span>&lt;![CDATA[MUSIC_Url]]&gt;<span class="tag">&lt;/<span class="name">MusicUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HQMusicUrl</span>&gt;</span>&lt;![CDATA[HQ_MUSIC_Url]]&gt;<span class="tag">&lt;/<span class="name">HQMusicUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ThumbMediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">ThumbMediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Music</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，音乐为music</td></tr><tr><td>Title</td><td>否</td><td>音乐标题</td></tr><tr><td>Description</td><td>否</td><td>音乐描述</td></tr><tr><td>MusicURL</td><td>否</td><td>音乐链接</td></tr><tr><td>HQMusicUrl</td><td>否</td><td>高质量音乐链接，WIFI环境优先使用该链接播放音乐</td></tr><tr><td>ThumbMediaId</td><td>是</td><td>缩略图的媒体id，通过素材管理中的接口上传多媒体文件，得到的id</td></tr></tbody></table></div><h5 id="回复图文消息"><a href="#回复图文消息" class="headerlink" title="回复图文消息"></a>回复图文消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[news]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ArticleCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">ArticleCount</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Articles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[title1]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[description1]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PicUrl</span>&gt;</span>&lt;![CDATA[picurl]]&gt;<span class="tag">&lt;/<span class="name">PicUrl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Url</span>&gt;</span>&lt;![CDATA[url]]&gt;<span class="tag">&lt;/<span class="name">Url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Articles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ToUserName</td><td>是</td><td>接收方帐号（收到的OpenID）</td></tr><tr><td>FromUserName</td><td>是</td><td>开发者微信号</td></tr><tr><td>CreateTime</td><td>是</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>是</td><td>消息类型，图文为news</td></tr><tr><td>ArticleCount</td><td>是</td><td>图文消息个数；当用户发送文本、图片、语音、视频、图文、地理位置这六种消息时，开发者只能回复1条图文消息；其余场景最多可回复8条图文消息</td></tr><tr><td>Articles</td><td>是</td><td>图文消息信息，注意，如果图文数超过限制，则将只发限制内的条数</td></tr><tr><td>Title</td><td>是</td><td>图文消息标题</td></tr><tr><td>Description</td><td>是</td><td>图文消息描述</td></tr><tr><td>PicUrl</td><td>是</td><td>图片链接，支持JPG、PNG格式，较好的效果为大图360 <em> 200，小图200 </em> 200</td></tr><tr><td>Url</td><td>是</td><td>点击图文消息跳转链接</td></tr></tbody></table></div><p>auth.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">//引入tool模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;getUserDataAsync, parseXMLAsync, formatMessage&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(req.query);</span></span><br><span class="line">            <span class="comment">//接收请求体中的数据,流式数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xmlData = <span class="keyword">await</span> <span class="title function_">getUserDataAsync</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// console.log(xmlData);</span></span><br><span class="line">            <span class="comment">//将xml数据解析为js对象</span></span><br><span class="line">            <span class="keyword">const</span> jsData = <span class="keyword">await</span> <span class="title function_">parseXMLAsync</span>(xmlData);</span><br><span class="line">            <span class="comment">// console.log(jsData);</span></span><br><span class="line">            <span class="comment">//格式化数据</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="title function_">formatMessage</span>(jsData);</span><br><span class="line">            <span class="comment">// console.log(message);</span></span><br><span class="line">            <span class="comment">// console.log(message.Content)</span></span><br><span class="line">            <span class="keyword">let</span> content = <span class="string">&#x27;你在说什么?&#x27;</span>;</span><br><span class="line">            <span class="comment">//判断用户发送的消息是不是文本消息</span></span><br><span class="line">            <span class="keyword">if</span> (message.<span class="property">MsgType</span>===<span class="string">&#x27;text&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//判断用户发送的内容具体是什么</span></span><br><span class="line">                <span class="keyword">if</span> (message.<span class="property">Content</span>===<span class="string">&#x27;1&#x27;</span>)&#123;<span class="comment">//全匹配</span></span><br><span class="line">                    content=<span class="string">&#x27;你好!!&#x27;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Content</span>===<span class="string">&#x27;2&#x27;</span>)&#123;</span><br><span class="line">                    content=<span class="string">&#x27;hello~~&#x27;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Content</span>.<span class="title function_">match</span>(<span class="string">&#x27;爱&#x27;</span>))&#123;<span class="comment">//半匹配</span></span><br><span class="line">                    content=<span class="string">&#x27;我爱你&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//最终回复用户的消息</span></span><br><span class="line">            <span class="keyword">let</span> replyMessage = <span class="string">&#x27;&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[&#x27;</span>+message.<span class="property">FromUserName</span>+<span class="string">&#x27;]]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA[&#x27;</span>+message.<span class="property">ToUserName</span>+<span class="string">&#x27;]]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;&#x27;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>()+<span class="string">&#x27;&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&lt;Content&gt;&lt;![CDATA[&#x27;</span>+content+<span class="string">&#x27;]]&gt;&lt;/Content&gt;&lt;/xml&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回响应给微信服务器</span></span><br><span class="line">            res.<span class="title function_">send</span>(replyMessage);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span></span><br><span class="line">            <span class="comment">// res.end(&#x27;&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行app.js即可测试公众号</p><h3 id="定义回复用户消息的模块文件"><a href="#定义回复用户消息的模块文件" class="headerlink" title="定义回复用户消息的模块文件"></a>定义回复用户消息的模块文件</h3><h4 id="接收普通消息"><a href="#接收普通消息" class="headerlink" title="接收普通消息"></a>接收普通消息</h4><p>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。</p><p>请注意：</p><blockquote><p>关于重试的消息排重，推荐使用msgid排重。<br>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。详情请见“发送消息-被动回复消息”。<br>如果开发者需要对用户消息在5秒内立即做出回应，即使用“发送消息-被动回复消息”接口向用户被动回复消息时，可以在</p></blockquote><p>公众平台官网的开发者中心处设置消息加密。开启加密后，用户发来的消息和开发者回复的消息都会被加密（但开发者通过客服接口等API调用形式向用户发送消息，则不受影响）。关于消息加解密的详细说明，请见“发送消息-被动回复消息加解密说明”。 各消息类型的推送XML数据包结构如下：</p><h5 id="文本消息"><a href="#文本消息" class="headerlink" title="文本消息"></a>文本消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1348831860<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[text]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[this is a test]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，文本为text</td></tr><tr><td>Content</td><td>文本消息内容</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="图片消息"><a href="#图片消息" class="headerlink" title="图片消息"></a>图片消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1348831860<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[image]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PicUrl</span>&gt;</span>&lt;![CDATA[this is a url]]&gt;<span class="tag">&lt;/<span class="name">PicUrl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，图片为image</td></tr><tr><td>PicUrl</td><td>图片链接（由系统生成）</td></tr><tr><td>MediaId</td><td>图片消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="语音消息"><a href="#语音消息" class="headerlink" title="语音消息"></a>语音消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1357290913<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[voice]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Format</span>&gt;</span>&lt;![CDATA[Format]]&gt;<span class="tag">&lt;/<span class="name">Format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>语音为voice</td></tr><tr><td>MediaId</td><td>语音消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>Format</td><td>语音格式，如amr，speex等</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><p>请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recognition字段（注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要24小时生效。开发者可以重新关注此帐号进行测试）。开启语音识别后的语音XML数据包如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1357290913<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[voice]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Format</span>&gt;</span>&lt;![CDATA[Format]]&gt;<span class="tag">&lt;/<span class="name">Format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Recognition</span>&gt;</span>&lt;![CDATA[腾讯微信团队]]&gt;<span class="tag">&lt;/<span class="name">Recognition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>语音为voice</td></tr><tr><td>MediaId</td><td>语音消息媒体id，可以调用获取临时素材接口拉取该媒体</td></tr><tr><td>Format</td><td>语音格式：amr</td></tr><tr><td>Recognition</td><td>语音识别结果，UTF8编码</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="视频消息"><a href="#视频消息" class="headerlink" title="视频消息"></a>视频消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1357290913<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[video]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ThumbMediaId</span>&gt;</span>&lt;![CDATA[thumb_media_id]]&gt;<span class="tag">&lt;/<span class="name">ThumbMediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>视频为video</td></tr><tr><td>MediaId</td><td>视频消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>ThumbMediaId</td><td>视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="小视频消息"><a href="#小视频消息" class="headerlink" title="小视频消息"></a>小视频消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1357290913<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[shortvideo]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MediaId</span>&gt;</span>&lt;![CDATA[media_id]]&gt;<span class="tag">&lt;/<span class="name">MediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ThumbMediaId</span>&gt;</span>&lt;![CDATA[thumb_media_id]]&gt;<span class="tag">&lt;/<span class="name">ThumbMediaId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>小视频为shortvideo</td></tr><tr><td>MediaId</td><td>视频消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>ThumbMediaId</td><td>视频消息缩略图的媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="地理位置消息"><a href="#地理位置消息" class="headerlink" title="地理位置消息"></a>地理位置消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1351776360<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[location]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Location_X</span>&gt;</span>23.134521<span class="tag">&lt;/<span class="name">Location_X</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Location_Y</span>&gt;</span>113.358803<span class="tag">&lt;/<span class="name">Location_Y</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Scale</span>&gt;</span>20<span class="tag">&lt;/<span class="name">Scale</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Label</span>&gt;</span>&lt;![CDATA[位置信息]]&gt;<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，地理位置为location</td></tr><tr><td>Location_X</td><td>地理位置纬度</td></tr><tr><td>Location_Y</td><td>地理位置经度</td></tr><tr><td>Scale</td><td>地图缩放大小</td></tr><tr><td>Label</td><td>地理位置信息</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h5 id="链接消息"><a href="#链接消息" class="headerlink" title="链接消息"></a>链接消息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1351776360<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[link]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[公众平台官网链接]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[公众平台官网链接]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Url</span>&gt;</span>&lt;![CDATA[url]]&gt;<span class="tag">&lt;/<span class="name">Url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>1234567890123456<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>接收方微信号</td></tr><tr><td>FromUserName</td><td>发送方微信号，若为普通用户，则是一个OpenID</td></tr><tr><td>CreateTime</td><td>消息创建时间</td></tr><tr><td>MsgType</td><td>消息类型，链接为link</td></tr><tr><td>Title</td><td>消息标题</td></tr><tr><td>Description</td><td>消息描述</td></tr><tr><td>Url</td><td>消息链接</td></tr><tr><td>MsgId</td><td>消息id，64位整型</td></tr></tbody></table></div><h4 id="接收事件推送"><a href="#接收事件推送" class="headerlink" title="接收事件推送"></a>接收事件推送</h4><p>在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息。其中，某些事件推送在发生后，是允许开发者回复用户的，某些则不允许，详细内容如下：</p><h5 id="关注-取消关注事件"><a href="#关注-取消关注事件" class="headerlink" title="关注/取消关注事件"></a>关注/取消关注事件</h5><p>用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的URL。方便开发者给用户下发欢迎消息或者做帐号的解绑。为保护用户数据隐私，开发者收到用户取消关注事件时需要删除该用户的所有信息。</p><p>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。</p><p>关于重试的消息排重，推荐使用FromUserName + CreateTime 排重。</p><p>假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。</p><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[FromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[subscribe]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，subscribe(订阅)、unsubscribe(取消订阅)</td></tr></tbody></table></div><h5 id="扫描带参数二维码事件"><a href="#扫描带参数二维码事件" class="headerlink" title="扫描带参数二维码事件"></a>扫描带参数二维码事件</h5><p>用户扫描带场景值二维码时，可能推送以下两种事件：</p><blockquote><p>如果用户还未关注公众号，则用户可以关注公众号，关注后微信会将带场景值关注事件推送给开发者。<br>如果用户已经关注公众号，则微信会将带场景值扫描事件推送给开发者。</p></blockquote><ol><li>用户未关注时，进行关注后的事件推送</li></ol><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[FromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[subscribe]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EventKey</span>&gt;</span>&lt;![CDATA[qrscene_123123]]&gt;<span class="tag">&lt;/<span class="name">EventKey</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Ticket</span>&gt;</span>&lt;![CDATA[TICKET]]&gt;<span class="tag">&lt;/<span class="name">Ticket</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，subscribe</td></tr><tr><td>EventKey</td><td>事件KEY值，qrscene_为前缀，后面为二维码的参数值</td></tr><tr><td>Ticket</td><td>二维码的ticket，可用来换取二维码图片</td></tr></tbody></table></div><ol><li>用户已关注时的事件推送</li></ol><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[FromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[SCAN]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EventKey</span>&gt;</span>&lt;![CDATA[SCENE_VALUE]]&gt;<span class="tag">&lt;/<span class="name">EventKey</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Ticket</span>&gt;</span>&lt;![CDATA[TICKET]]&gt;<span class="tag">&lt;/<span class="name">Ticket</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span> </span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，SCAN</td></tr><tr><td>EventKey</td><td>事件KEY值，是一个32位无符号整数，即创建二维码时的二维码scene_id</td></tr><tr><td>Ticket</td><td>二维码的ticket，可用来换取二维码图片</td></tr></tbody></table></div><h5 id="上报地理位置事件"><a href="#上报地理位置事件" class="headerlink" title="上报地理位置事件"></a>上报地理位置事件</h5><p>用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每5秒上报一次地理位置，公众号可以在公众平台网站中修改以上设置。上报地理位置时，微信会将上报地理位置事件推送到开发者填写的URL。</p><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[LOCATION]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Latitude</span>&gt;</span>23.137466<span class="tag">&lt;/<span class="name">Latitude</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Longitude</span>&gt;</span>113.352425<span class="tag">&lt;/<span class="name">Longitude</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Precision</span>&gt;</span>119.385040<span class="tag">&lt;/<span class="name">Precision</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，LOCATION</td></tr><tr><td>Latitude</td><td>地理位置纬度</td></tr><tr><td>Longitude</td><td>地理位置经度</td></tr><tr><td>Precision</td><td>地理位置精度</td></tr></tbody></table></div><h5 id="自定义菜单事件"><a href="#自定义菜单事件" class="headerlink" title="自定义菜单事件"></a>自定义菜单事件</h5><p>用户点击自定义菜单后，微信会把点击事件推送给开发者，请注意，点击菜单弹出子菜单，不会产生上报。</p><p>点击菜单拉取消息时的事件推送</p><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[FromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[CLICK]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EventKey</span>&gt;</span>&lt;![CDATA[EVENTKEY]]&gt;<span class="tag">&lt;/<span class="name">EventKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，CLICK</td></tr><tr><td>EventKey</td><td>事件KEY值，与自定义菜单接口中KEY值对应</td></tr></tbody></table></div><p>点击菜单跳转链接时的事件推送</p><p>推送XML数据包示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[FromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>123456789<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[VIEW]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">EventKey</span>&gt;</span>&lt;![CDATA[www.qq.com]]&gt;<span class="tag">&lt;/<span class="name">EventKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>参数说明：</p><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToUserName</td><td>开发者微信号</td></tr><tr><td>FromUserName</td><td>发送方帐号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td>MsgType</td><td>消息类型，event</td></tr><tr><td>Event</td><td>事件类型，VIEW</td></tr><tr><td>EventKey</td><td>事件KEY值，设置的跳转URL</td></tr></tbody></table></div><p>在wechat文件夹下新建template.js,reply.js文件</p><p>template.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加工处理最终回复用户消息的模板(xml数据)</span></span><br><span class="line"><span class="comment">mediaID:上传素材得到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> replayMessage = <span class="string">&#x27;&lt;xml&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;ToUserName&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">toUserName</span> + <span class="string">&#x27;]]&gt;&lt;/ToUserName&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;FromUserName&gt;&lt;![CDATA[&#x27;</span> + message.<span class="property">fromUserName</span> + <span class="string">&#x27;]]&gt;&lt;/FromUserName&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;CreateTime&gt;&#x27;</span> + options.<span class="property">createTime</span> + <span class="string">&#x27;&lt;/CreateTime&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;MsgType&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">msgType</span> + <span class="string">&#x27;]]&gt;&lt;/MsgType&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;text&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;Content&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">content</span> + <span class="string">&#x27;]]&gt;&lt;/Content&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;image&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;Image&gt;&lt;MediaId&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">mediaID</span> + <span class="string">&#x27;]]&gt;&lt;/MediaId&gt;&lt;/Image&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;voice&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;Voice&gt;&lt;MediaId&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">mediaID</span> + <span class="string">&#x27;]]&gt;&lt;/MediaId&gt;&lt;/Voice&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;video&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;Video&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;MediaId&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">mediaID</span> + <span class="string">&#x27;]]&gt;&lt;/MediaId&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;Title&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">title</span> + <span class="string">&#x27;]]&gt;&lt;/Title&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;Description&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">description</span> + <span class="string">&#x27;]]&gt;&lt;/Description&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;/Video&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;music&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;Music&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;Title&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">title</span> + <span class="string">&#x27;]]&gt;&lt;/Title&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;Description&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">description</span> + <span class="string">&#x27;]]&gt;&lt;/Description&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;MusicUrl&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">musicUrl</span> + <span class="string">&#x27;]]&gt;&lt;/MusicUrl&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;HQMusicUrl&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">hpMusicUrl</span> + <span class="string">&#x27;]]&gt;&lt;/HQMusicUrl&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;ThumbMediaId&gt;&lt;![CDATA[&#x27;</span> + options.<span class="property">mediaID</span> + <span class="string">&#x27;]]&gt;&lt;/ThumbMediaId&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;/Music&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">msgType</span> === <span class="string">&#x27;news&#x27;</span>) &#123;</span><br><span class="line">        replyMessage += <span class="string">&#x27;&lt;ArticleCount&gt;&#x27;</span> + options.<span class="property">content</span>.<span class="property">length</span> + <span class="string">&#x27;&lt;/ArticleCount&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;Articles&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        options.<span class="property">content</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            replyMessage += <span class="string">&#x27;&lt;item&gt;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&lt;Title&gt;&lt;![CDATA[&#x27;</span> + item.<span class="property">title</span> + <span class="string">&#x27;]]&gt;&lt;/Title&gt;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&lt;Description&gt;&lt;![CDATA[&#x27;</span> + item.<span class="property">description</span> + <span class="string">&#x27;]]&gt;&lt;/Description&gt;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&lt;PicUrl&gt;&lt;![CDATA[&#x27;</span> + item.<span class="property">picUrl</span> + <span class="string">&#x27;]]&gt;&lt;/PicUrl&gt;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&lt;Url&gt;&lt;![CDATA[&#x27;</span> + item.<span class="property">url</span> + <span class="string">&#x27;]]&gt;&lt;/Url&gt;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&lt;/item&gt;&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        replayMessage += <span class="string">&#x27;&lt;/Articles&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    replayMessage += <span class="string">&#x27;&lt;/xml&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> replayMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reply.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理用户发送的消息的类型和内容,决定返回不同的内容给用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        <span class="attr">toUserName</span>: message.<span class="property">FromUserName</span>,</span><br><span class="line">        <span class="attr">fromUserName</span>: message.<span class="property">ToUserName</span>,</span><br><span class="line">        <span class="attr">createTime</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">        <span class="attr">magType</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;你在说什么?&#x27;</span>;</span><br><span class="line">    <span class="comment">//判断用户发送的消息是不是文本消息</span></span><br><span class="line">    <span class="keyword">if</span> (message.<span class="property">MsgType</span> === <span class="string">&#x27;text&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//判断用户发送的内容具体是什么</span></span><br><span class="line">        <span class="keyword">if</span> (message.<span class="property">Content</span> === <span class="string">&#x27;1&#x27;</span>) &#123;<span class="comment">//全匹配</span></span><br><span class="line">            content = <span class="string">&#x27;你好!!&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Content</span> === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">            content = <span class="string">&#x27;hello~~&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Content</span>.<span class="title function_">match</span>(<span class="string">&#x27;爱&#x27;</span>)) &#123;<span class="comment">//半匹配</span></span><br><span class="line">            content = <span class="string">&#x27;我爱你&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">MsgType</span> === <span class="string">&#x27;image&#x27;</span>) &#123;</span><br><span class="line">        options.<span class="property">msgType</span> = <span class="string">&#x27;image&#x27;</span>;</span><br><span class="line">        options.<span class="property">mediaID</span> = message.<span class="property">MediaId</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">PicUrl</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">MsgType</span> === <span class="string">&#x27;voice&#x27;</span>) &#123;</span><br><span class="line">        options.<span class="property">msgType</span> = <span class="string">&#x27;voice&#x27;</span>;</span><br><span class="line">        options.<span class="property">mediaID</span> = message.<span class="property">MediaId</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">Recognition</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">MsgType</span> === <span class="string">&#x27;location&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;维度:&#x27;</span> + message.<span class="property">Location_X</span> + <span class="string">&#x27; 经度:&#x27;</span> + message.<span class="property">Location_Y</span> + <span class="string">&#x27; 缩放大小:&#x27;</span> + message.<span class="property">Scale</span></span><br><span class="line">            + <span class="string">&#x27; 位置信息:&#x27;</span> + message.<span class="property">Label</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">PicUrl</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">MsgType</span> === <span class="string">&#x27;event&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (message.<span class="property">Event</span> === <span class="string">&#x27;subscribe&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//用户订阅事件</span></span><br><span class="line">            content = <span class="string">&quot;感谢您的订阅&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (message.<span class="property">EventKey</span>) &#123;</span><br><span class="line">                content = <span class="string">&#x27;用户扫描了带参数的二维码关注事件&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Event</span> === <span class="string">&#x27;unsubscribe&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;无情取关&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Event</span> === <span class="string">&#x27;SCAN&#x27;</span>) &#123;</span><br><span class="line">            content = <span class="string">&#x27;用户已经关注,再次扫描了带参数的二维码关注事件&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Event</span> === <span class="string">&#x27;LOCATION&#x27;</span>) &#123;</span><br><span class="line">            content = <span class="string">&#x27;维度:&#x27;</span> + message.<span class="property">Latitude</span> + <span class="string">&#x27; 经度:&#x27;</span> + message.<span class="property">Longitude</span> + <span class="string">&#x27; 精度:&#x27;</span> + message.<span class="property">Precision</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">Event</span> === <span class="string">&#x27;CLICK&#x27;</span>) &#123;</span><br><span class="line">            content = <span class="string">&#x27;你点击了按钮:&#x27;</span> + message.<span class="property">EventKey</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options.<span class="property">content</span> = content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>auth.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入config模块</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入template模块</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;./template&quot;</span>);</span><br><span class="line"><span class="comment">//引入reply模块</span></span><br><span class="line"><span class="keyword">const</span> reply = <span class="built_in">require</span>(<span class="string">&quot;./reply&quot;</span>);</span><br><span class="line"><span class="comment">//引入sha1模块</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&quot;sha1&quot;</span>);</span><br><span class="line"><span class="comment">//引入tool模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;getUserDataAsync, parseXMLAsync, formatMessage&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证服务器有效性的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">        <span class="comment">//微信服务器提交的参数</span></span><br><span class="line">        <span class="comment">//console.log(req.query);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123;signature, echostr, timestamp, nonce&#125; = req.<span class="property">query</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;token&#125; = config;</span><br><span class="line">        <span class="keyword">const</span> sha1str = <span class="title function_">sha1</span>([timestamp, nonce, token].<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        微信服务器会发送俩种类型的消息给开发者</span></span><br><span class="line"><span class="comment">        1.GET请求</span></span><br><span class="line"><span class="comment">            - 验证服务器的有效性</span></span><br><span class="line"><span class="comment">        2.POST请求</span></span><br><span class="line"><span class="comment">            - 微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//3.加密完成就生成了一个signature,和微信传递过来的signature进项对比,</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sha1Str === signature) &#123;</span><br><span class="line">                <span class="comment">//如果一样说明消息来自于微信服务器,返回echostr给微信服务器</span></span><br><span class="line">                res.<span class="title function_">send</span>(echostr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不一样说明表示不是微信服务器发送的消息,返回error</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//微信服务器会将用户发送的数据以POST请求的方式转发到开发者服务器</span></span><br><span class="line">            <span class="comment">//验证消息来自于微信服务器</span></span><br><span class="line">            <span class="keyword">if</span> (sha1str !== signature) &#123;</span><br><span class="line">                <span class="comment">//说明消息不是微信服务器的</span></span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(req.query);</span></span><br><span class="line">            <span class="comment">//接收请求体中的数据,流式数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xmlData = <span class="keyword">await</span> <span class="title function_">getUserDataAsync</span>(req);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// console.log(xmlData);</span></span><br><span class="line">            <span class="comment">//将xml数据解析为js对象</span></span><br><span class="line">            <span class="keyword">const</span> jsData = <span class="keyword">await</span> <span class="title function_">parseXMLAsync</span>(xmlData);</span><br><span class="line">            <span class="comment">// console.log(jsData);</span></span><br><span class="line">            <span class="comment">//格式化数据</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="title function_">formatMessage</span>(jsData);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> options=<span class="title function_">reply</span>(message);</span><br><span class="line">            <span class="comment">//最终回复用户的消息</span></span><br><span class="line">            <span class="keyword">const</span> replyMessage = <span class="title function_">template</span>(options);</span><br><span class="line">            <span class="comment">//返回响应给微信服务器</span></span><br><span class="line">            res.<span class="title function_">send</span>(replyMessage);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果开发者服务器没有返回响应给微信服务器,微信服务器会发送三次请求过来</span></span><br><span class="line">            <span class="comment">// res.end(&#x27;&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意:接收语音识别结果、获取用户地理位置需在测试号管理界面开启</p><h3 id="实现自定义菜单"><a href="#实现自定义菜单" class="headerlink" title="实现自定义菜单"></a>实现自定义菜单</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>请注意：</p><blockquote><p>自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。<br>一级菜单最多4个汉字，二级菜单最多8个汉字，多出来的部分将会以“…”代替。<br>创建自定义菜单后，菜单的刷新策略是，在用户进入公众号会话页或公众号profile页时，如果发现上一次拉取菜单的请求在5分钟以前，就会拉取一下菜单，如果菜单有更新，就会刷新客户端的菜单。测试时可以尝试取消关注公众账号后再次关注，则可以看到创建后的效果。</p></blockquote><p>自定义菜单接口可实现多种类型按钮，如下：</p><blockquote><p>click：点击推事件用户点击click类型按钮后，微信服务器会通过消息接口推送消息类型为event的结构给开发者（参考消息接口指南），并且带上按钮中开发者填写的key值，开发者可以通过自定义的key值与用户进行交互；<br>view：跳转URL用户点击view类型按钮后，微信客户端将会打开开发者在按钮中填写的网页URL，可与网页授权获取用户基本信息接口结合，获得用户基本信息。<br>scancode_push：扫码推事件用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后显示扫描结果（如果是URL，将进入URL），且会将扫码的结果传给开发者，开发者可以下发消息。<br>scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框用户点击按钮后，微信客户端将调起扫一扫工具，完成扫码操作后，将扫码的结果传给开发者，同时收起扫一扫工具，然后弹出“消息接收中”提示框，随后可能会收到开发者下发的消息。<br>pic_sysphoto：弹出系统拍照发图用户点击按钮后，微信客户端将调起系统相机，完成拍照操作后，会将拍摄的相片发送给开发者，并推送事件给开发者，同时收起系统相机，随后可能会收到开发者下发的消息。<br>pic_photo_or_album：弹出拍照或者相册发图用户点击按钮后，微信客户端将弹出选择器供用户选择“拍照”或者“从手机相册选择”。用户选择后即走其他两种流程。<br>pic_weixin：弹出微信相册发图器用户点击按钮后，微信客户端将调起微信相册，完成选择操作后，将选择的相片发送给开发者的服务器，并推送事件给开发者，同时收起相册，随后可能会收到开发者下发的消息。<br>location_select：弹出地理位置选择器用户点击按钮后，微信客户端将调起地理位置选择工具，完成选择操作后，将选择的地理位置发送给开发者的服务器，同时收起位置选择工具，随后可能会收到开发者下发的消息。<br>media_id：下发消息（除文本消息）用户点击media_id类型按钮后，微信服务器会将开发者填写的永久素材id对应的素材下发给用户，永久素材类型可以是图片、音频、视频 、图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。<br>view_limited：跳转图文消息URL用户点击view_limited类型按钮后，微信客户端将打开开发者在按钮中填写的永久素材id对应的图文消息URL，永久素材类型只支持图文消息。请注意：永久素材id必须是在“素材管理/新增永久素材”接口上传后获得的合法id。<br>article_id：用户点击 article_id 类型按钮后，微信客户端将会以卡片形式，下发开发者在按钮中填写的图文消息<br>    article_view_limited：类似 view_limited，但不使用 media_id 而使用 article_id</p></blockquote><p>注意: 草稿接口灰度完成后，将不再支持图文信息类型的 media_id 和 view_limited，有需要的，请使用 article_id 和 article_view_limited 代替</p><p>请注意，3到8的所有事件，仅支持微信iPhone5.4.1以上版本，和Android5.4以上版本的微信用户，旧版本微信用户点击后将没有回应，开发者也不能正常接收到事件推送。9～12，是专门给第三方平台旗下未微信认证（具体而言，是资质认证未通过）的订阅号准备的事件类型，它们是没有事件推送的，能力相对受限，其他类型的公众号不必使用。</p><p>接口调用请求说明</p><p>http请求方式：POST（请使用https协议） <a href="https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN</a></p><p>click和view的请求示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;button&quot;:[</span><br><span class="line">    &#123;  </span><br><span class="line">         &quot;type&quot;:&quot;click&quot;,</span><br><span class="line">         &quot;name&quot;:&quot;今日歌曲&quot;,</span><br><span class="line">         &quot;key&quot;:&quot;V1001_TODAY_MUSIC&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">          &quot;name&quot;:&quot;菜单&quot;,</span><br><span class="line">          &quot;sub_button&quot;:[</span><br><span class="line">          &#123;    </span><br><span class="line">              &quot;type&quot;:&quot;view&quot;,</span><br><span class="line">              &quot;name&quot;:&quot;搜索&quot;,</span><br><span class="line">              &quot;url&quot;:&quot;http://www.soso.com/&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">                &quot;type&quot;:&quot;miniprogram&quot;,</span><br><span class="line">                &quot;name&quot;:&quot;wxa&quot;,</span><br><span class="line">                &quot;url&quot;:&quot;http://mp.weixin.qq.com&quot;,</span><br><span class="line">                &quot;appid&quot;:&quot;wx286b93c14bbf93aa&quot;,</span><br><span class="line">                &quot;pagepath&quot;:&quot;pages/lunar/index&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">              &quot;type&quot;:&quot;click&quot;,</span><br><span class="line">              &quot;name&quot;:&quot;赞一下我们&quot;,</span><br><span class="line">              &quot;key&quot;:&quot;V1001_GOOD&quot;</span><br><span class="line">           &#125;]</span><br><span class="line">      &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他新增按钮类型的请求示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;button&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;扫码&quot;, </span><br><span class="line">            &quot;sub_button&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;scancode_waitmsg&quot;, </span><br><span class="line">                    &quot;name&quot;: &quot;扫码带提示&quot;, </span><br><span class="line">                    &quot;key&quot;: &quot;rselfmenu_0_0&quot;, </span><br><span class="line">                    &quot;sub_button&quot;: [ ]</span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;scancode_push&quot;, </span><br><span class="line">                    &quot;name&quot;: &quot;扫码推事件&quot;, </span><br><span class="line">                    &quot;key&quot;: &quot;rselfmenu_0_1&quot;, </span><br><span class="line">                    &quot;sub_button&quot;: [ ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;发图&quot;, </span><br><span class="line">            &quot;sub_button&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;pic_sysphoto&quot;, </span><br><span class="line">                    &quot;name&quot;: &quot;系统拍照发图&quot;, </span><br><span class="line">                    &quot;key&quot;: &quot;rselfmenu_1_0&quot;, </span><br><span class="line">                   &quot;sub_button&quot;: [ ]</span><br><span class="line">                 &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;pic_photo_or_album&quot;, </span><br><span class="line">                    &quot;name&quot;: &quot;拍照或者相册发图&quot;, </span><br><span class="line">                    &quot;key&quot;: &quot;rselfmenu_1_1&quot;, </span><br><span class="line">                    &quot;sub_button&quot;: [ ]</span><br><span class="line">                &#125;, </span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;pic_weixin&quot;, </span><br><span class="line">                    &quot;name&quot;: &quot;微信相册发图&quot;, </span><br><span class="line">                    &quot;key&quot;: &quot;rselfmenu_1_2&quot;, </span><br><span class="line">                    &quot;sub_button&quot;: [ ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;发送位置&quot;, </span><br><span class="line">            &quot;type&quot;: &quot;location_select&quot;, </span><br><span class="line">            &quot;key&quot;: &quot;rselfmenu_2_0&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           &quot;type&quot;: &quot;media_id&quot;, </span><br><span class="line">           &quot;name&quot;: &quot;图片&quot;, </span><br><span class="line">           &quot;media_id&quot;: &quot;MEDIA_ID1&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">           &quot;type&quot;: &quot;view_limited&quot;, </span><br><span class="line">           &quot;name&quot;: &quot;图文消息&quot;, </span><br><span class="line">           &quot;media_id&quot;: &quot;MEDIA_ID2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;article_id&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;发布后的图文消息&quot;,</span><br><span class="line">            &quot;article_id&quot;: &quot;ARTICLE_ID1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;article_view_limited&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;发布后的图文消息&quot;,</span><br><span class="line">            &quot;article_id&quot;: &quot;ARTICLE_ID2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明</p><div class="table-container"><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>button</td><td>是</td><td>一级菜单数组，个数应为1~3个</td></tr><tr><td>sub_button</td><td>否</td><td>二级菜单数组，个数应为1~5个</td></tr><tr><td>type</td><td>是</td><td>菜单的响应动作类型，view表示网页类型，click表示点击类型，miniprogram表示小程序类型</td></tr><tr><td>name</td><td>是</td><td>菜单标题，不超过16个字节，子菜单不超过60个字节</td></tr><tr><td>key</td><td>click等点击类型必须</td><td>菜单KEY值，用于消息接口推送，不超过128字节</td></tr><tr><td>url</td><td>view、miniprogram类型必须</td><td>网页 链接，用户点击菜单可打开链接，不超过1024字节。 type为miniprogram时，不支持小程序的老版本客户端将打开本url。</td></tr><tr><td>media_id</td><td>media_id类型和view_limited类型必须</td><td>调用新增永久素材接口返回的合法media_id</td></tr><tr><td>appid</td><td>miniprogram类型必须</td><td>小程序的appid（仅认证公众号可配置）</td></tr><tr><td>pagepath</td><td>miniprogram类型必须</td><td>小程序的页面路径</td></tr><tr><td>article_id</td><td>article_id类型和article_view_limited类型必须</td><td>发布后获得的合法 article_id</td></tr></tbody></table></div><p>返回结果</p><p>正确时的返回JSON数据包如下：</p><blockquote><p>{“errcode”:0,”errmsg”:”ok”}</p></blockquote><p>错误时的返回JSON数据包如下（示例为无效菜单名长度）：</p><blockquote><p>{“errcode”:40018,”errmsg”:”invalid button name size”}</p></blockquote><h4 id="删除接口"><a href="#删除接口" class="headerlink" title="删除接口"></a>删除接口</h4><p>使用接口创建自定义菜单后，开发者还可使用接口删除当前使用的自定义菜单。另请注意，在个性化菜单时，调用此接口会删除默认菜单及全部个性化菜单。</p><p>请求说明</p><p>http请求方式：GET <a href="https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN</a></p><p>返回说明</p><p>对应创建接口，正确的Json返回结果:</p><blockquote><p>{“errcode”:0,”errmsg”:”ok”}</p></blockquote><p>代码:</p><p>在wechat文件夹下新建menu.js文件用来存储发送回去的数据:</p><p>menu.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义菜单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;button&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;click&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;戳我呀~&quot;</span>,</span><br><span class="line">            <span class="string">&quot;key&quot;</span>: <span class="string">&quot;CLICK&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;菜单二&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sub_button&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;view&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;百度搜索&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;scancode_waitmsg&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;扫码带提示&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;扫码带提示&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//     &quot;type&quot;: &quot;scancode_push&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;name&quot;: &quot;扫码推事件&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;key&quot;: &quot;扫码推事件&quot;</span></span><br><span class="line">                <span class="comment">// &#125;,</span></span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//     &quot;type&quot;: &quot;media_id&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;name&quot;: &quot;点击按钮发送图片&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;media_id&quot;: &quot;MEDIA_ID1&quot;</span></span><br><span class="line">                <span class="comment">// &#125;,</span></span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//     &quot;type&quot;: &quot;view_limited&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;name&quot;: &quot;图文消息&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;media_id&quot;: &quot;MEDIA_ID2&quot;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;发图&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sub_button&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pic_sysphoto&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;系统拍照发图&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;系统拍照发图&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pic_photo_or_album&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;拍照或者相册发图&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;拍照或者相册发图&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pic_weixin&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;微信相册发图&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;微信相册发图&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;发送位置&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;location_select&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;rselfmenu_2_0&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为创建菜单需要用到access_token值,所以我们在accessToken.js文件下增加俩个函数:创建菜单和删除菜单,并改名为wechat.js</p><p>wechat.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">access_token：微信调用接口全局唯一凭证</span></span><br><span class="line"><span class="comment">特点:</span></span><br><span class="line"><span class="comment">    1.唯一</span></span><br><span class="line"><span class="comment">    2.有效期为2小时,提前5分钟重新请求</span></span><br><span class="line"><span class="comment">    3.接口权限 每天2000次</span></span><br><span class="line"><span class="comment">    https请求方式: GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    设计思路:</span></span><br><span class="line"><span class="comment">        1.首次本地没有,发送请求获取access_token,保存下来(本地文件)</span></span><br><span class="line"><span class="comment">        2.第二次或以后:</span></span><br><span class="line"><span class="comment">            - 先去本地读取文件,判断它是否过期</span></span><br><span class="line"><span class="comment">                - 过期了</span></span><br><span class="line"><span class="comment">                    - 重新请求,保存下来,覆盖之前的文件(保证文件是唯一的)</span></span><br><span class="line"><span class="comment">                - 没过期</span></span><br><span class="line"><span class="comment">                    - 直接使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        整理思路:</span></span><br><span class="line"><span class="comment">            读取本地文件(readAccessToken):</span></span><br><span class="line"><span class="comment">                - 本地有文件</span></span><br><span class="line"><span class="comment">                    - 判断它是否过期(isValidAccessToken)</span></span><br><span class="line"><span class="comment">                        - 过期了</span></span><br><span class="line"><span class="comment">                           - 重新请求(getAccessToken),保存下来,覆盖之前的文件(保证文件是唯一的)(saveAccessToken)</span></span><br><span class="line"><span class="comment">                        - 没过期</span></span><br><span class="line"><span class="comment">                           - 直接使用</span></span><br><span class="line"><span class="comment">                - 本地没有文件</span></span><br><span class="line"><span class="comment">                    - 发送请求获取access_token(getAccessToken),保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入menu模块</span></span><br><span class="line"><span class="keyword">const</span> menu=<span class="built_in">require</span>(<span class="string">&#x27;./menu&#x27;</span>);</span><br><span class="line"><span class="comment">//只需要引入request-promise-native库</span></span><br><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">&#x27;request-promise-native&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;writeFile, readFile&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入config文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;appID, appsecret&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个类,获取access_token</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用来获取access_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//定义请求的地址</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#x27;</span> + appID + <span class="string">&#x27;&amp;secret=&#x27;</span> + appsecret;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需要下载俩个库</span></span><br><span class="line"><span class="comment">        request</span></span><br><span class="line"><span class="comment">        request-promise-native 返回值是一个promise对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                      access_token: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">                      expires_in: </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="comment">//设置access_token的过期时间 单位毫秒</span></span><br><span class="line">                    res.<span class="property">expires_in</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>() + (res.<span class="property">expires_in</span> - <span class="number">300</span>) * <span class="number">1000</span>;</span><br><span class="line">                    <span class="comment">//将promise的对象的状态改为成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;getAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来保存access_token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessToken 要保存的凭据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">saveAccessToken</span>(<span class="params">accessToken</span>) &#123;</span><br><span class="line">        <span class="comment">//将对象转化为json字符串</span></span><br><span class="line">        accessToken = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(accessToken);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">writeFile</span>(<span class="string">&#x27;./accessToken.txt&#x27;</span>, accessToken, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件保存成功&#x27;</span>);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;saveAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来读取access_token的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">readAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//读取本地文件中的access_taken</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">readFile</span>(<span class="string">&#x27;./accessToken.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取成功&#x27;</span>);</span><br><span class="line">                    <span class="comment">//将json字符串转化成js对象</span></span><br><span class="line">                    data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;readAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来检查access_token是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">isValidAccessToken</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//检查传入的参数是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (!data &amp;&amp; !data.<span class="property">access_token</span> &amp;&amp; !data.<span class="property">expires_in</span>) &#123;</span><br><span class="line">            <span class="comment">//代表access_token无效</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查传入的参数是否在有效期内</span></span><br><span class="line">        <span class="comment">// if (data.expires_in&lt;Date.now())&#123;</span></span><br><span class="line">        <span class="comment">//     //过期了</span></span><br><span class="line">        <span class="comment">//     return false;</span></span><br><span class="line">        <span class="comment">// &#125;else &#123;</span></span><br><span class="line">        <span class="comment">//     //没有过期</span></span><br><span class="line">        <span class="comment">//     return true;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">expires_in</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来获取没有过期的access_token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125; <span class="variable">access_token</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">fetchAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//优化</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">access_token</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">expires_in</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="comment">//说明之前保存过access_token,并且access_token有效,直接使用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">access_token</span>,</span><br><span class="line">                <span class="attr">expires_in</span>: <span class="variable language_">this</span>.<span class="property">expires_in</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readAccessToken</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地有文件</span></span><br><span class="line">                <span class="comment">//判断它是否过期(isValidAccessToken)</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(res)) &#123;</span><br><span class="line">                    <span class="comment">//有效的</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">//resolve(res);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//过期了</span></span><br><span class="line">                    <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                    <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                    <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">// resolve(res);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地没有文件</span></span><br><span class="line">                <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                <span class="comment">// resolve(res);</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//将access_token挂载到this上</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">access_token</span> = res.<span class="property">access_token</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">expires_in</span> = res.<span class="property">expires_in</span>;</span><br><span class="line">                <span class="comment">//返回res包装了一层promise对象(此对象为成功的对象)</span></span><br><span class="line">                <span class="comment">//是this.readAccessToken()最终返回值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来创建自定义菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu 菜单的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">createMenu</span>(<span class="params">menu</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取access_token</span></span><br><span class="line">                <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                <span class="keyword">const</span> url = <span class="string">`https://api.weixin.qq.com/cgi-bin/menu/create?access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>, <span class="attr">body</span>: menu&#125;);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;createMenu方法出了问题:&#x27;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来删除自定义菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">deleteMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                <span class="keyword">const</span> url = <span class="string">`GET https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span></span><br><span class="line">                (e) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;deleteMenu方法出了问题:&#x27;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> w=<span class="keyword">new</span> <span class="title class_">Wechat</span>();</span><br><span class="line">    <span class="comment">//删除之前定义的菜单</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> w.<span class="title function_">deleteMenu</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">//创建新的菜单</span></span><br><span class="line">    result = <span class="keyword">await</span> w.<span class="title function_">createMenu</span>(menu);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><br>运行wechat.js得到如下结果:</p><blockquote><p>{ errcode: 0, errmsg: ‘ok’ }<br>{ errcode: 0, errmsg: ‘ok’ }</p></blockquote><h2 id="网页开发"><a href="#网页开发" class="headerlink" title="网页开发"></a>网页开发</h2><h3 id="获取ticket"><a href="#获取ticket" class="headerlink" title="获取ticket"></a>获取ticket</h3><p>自己写页面:<br>在项目下新建一个views文件夹,在里面新建search.ejs文件</p><p>search.ejs<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;search&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;h1&gt;这是一个搜索页面&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>然后配置模板资源目录、配置模板引擎、渲染页面,将渲染好的页面通过<code>render</code>方法返回给用户<br>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入auto模块</span></span><br><span class="line"><span class="keyword">const</span> auth = <span class="built_in">require</span>(<span class="string">&#x27;./wechat/auth&#x27;</span>);</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//配置模板资源目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>,<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">//页面路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//渲染页面,将渲染好的页面返回给用户</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接收处理所有参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">auth</span>())</span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure></p><p>运行app.js,输入ngrok网址+<code>/search</code>得到如下结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/search页面.png" alt=""></p><p>接下来我们使用微信给我们提供的工具:<code>JS-SDK</code></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">官方文档</a></p><p>首先我们需要获得ticket(获取方式与access_token大同小异)</p><p>在utils文件夹下新建api.js用来存放api接口:</p><p>api.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//地址前缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">&#x27;https://api.weixin.qq.com/cgi-bin/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">accessToken</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>token?grant_type=client_credential`</span>,</span><br><span class="line">    <span class="attr">ticket</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>ticket/getticket?type=jsapi`</span>,</span><br><span class="line">    <span class="attr">menu</span>: &#123;</span><br><span class="line">        <span class="attr">create</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>menu/create?`</span>,</span><br><span class="line">        <span class="attr">delete</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>menu/delete?`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tool.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">工具函数包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//npm install xml2js 导包</span></span><br><span class="line"><span class="comment">//引入xml2js,将xml数据转化为js对象</span></span><br><span class="line"><span class="keyword">const</span> &#123;parseString&#125; = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>);</span><br><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;writeFile, readFile&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//引入path模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125;=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">getUserDataAsync</span>(<span class="params">req</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> xmlData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            req</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当流式数据传递过来时会触发当前事件,会将数据注入到回调函数中</span></span><br><span class="line">                    <span class="comment">// console.log(data);</span></span><br><span class="line">                    <span class="comment">//读取的数据是buffer,需要将其转化为字符串</span></span><br><span class="line">                    xmlData += data.<span class="title function_">toString</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//当数据接收完毕时,会触发当前</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xmlData);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parseXMLAsync</span>(<span class="params">xmlData</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">parseString</span>(xmlData, &#123;<span class="attr">trim</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;parseXMLAsync方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">formatMessage</span>(<span class="params">jsData</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> message = &#123;&#125;;</span><br><span class="line">        <span class="comment">//获取xml对象</span></span><br><span class="line">        jsData = jsData.<span class="property">xml</span>;</span><br><span class="line">        <span class="comment">//判断数据是否为一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> jsData === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历对象</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> jsData) &#123;</span><br><span class="line">                <span class="comment">//获取属性值</span></span><br><span class="line">                <span class="keyword">let</span> value = jsData[key];</span><br><span class="line">                <span class="comment">//过滤空数据</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) &amp;&amp; value.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//将合法数据赋值到message对象上</span></span><br><span class="line">                    message[key] = value[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">writeFileAsync</span>(<span class="params">data, fileName</span>) &#123;</span><br><span class="line">        <span class="comment">//将对象转化为json字符串</span></span><br><span class="line">        data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">        <span class="comment">//使用绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> filePath = <span class="title function_">resolve</span>(__dirname,fileName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">writeFile</span>(filePath, data, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件保存成功&#x27;</span>);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;writeFileAsync方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">readFileAsync</span>(<span class="params">fileName</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = <span class="title function_">resolve</span>(__dirname,fileName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取成功&#x27;</span>);</span><br><span class="line">                    <span class="comment">//将json字符串转化成js对象</span></span><br><span class="line">                    data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">                    <span class="title function_">resolve</span>(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;readFileAsync方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>wechat.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入menu模块</span></span><br><span class="line"><span class="keyword">const</span> menu=<span class="built_in">require</span>(<span class="string">&#x27;./menu&#x27;</span>);</span><br><span class="line"><span class="comment">//只需要引入request-promise-native库</span></span><br><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">&#x27;request-promise-native&#x27;</span>);</span><br><span class="line"><span class="comment">//引入api模块</span></span><br><span class="line"><span class="keyword">const</span> api=<span class="built_in">require</span>(<span class="string">&#x27;../utils/api&#x27;</span>)</span><br><span class="line"><span class="comment">//引入工具函数</span></span><br><span class="line"><span class="keyword">const</span> &#123;writeFileAsync,readFileAsync&#125;=<span class="built_in">require</span>(<span class="string">&#x27;../utils/tool&#x27;</span>);</span><br><span class="line"><span class="comment">//引入config文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;appID, appsecret&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个类,获取access_token</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用来获取access_token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//定义请求的地址</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.accessToken&#125;</span>&amp;appid=<span class="subst">$&#123;appID&#125;</span>&amp;secret=<span class="subst">$&#123;appsecret&#125;</span>`</span>;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需要下载俩个库</span></span><br><span class="line"><span class="comment">        request</span></span><br><span class="line"><span class="comment">        request-promise-native 返回值是一个promise对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">                    <span class="comment">//设置access_token的过期时间 单位毫秒</span></span><br><span class="line">                    res.<span class="property">expires_in</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>() + (res.<span class="property">expires_in</span> - <span class="number">300</span>) * <span class="number">1000</span>;</span><br><span class="line">                    <span class="comment">//将promise的对象的状态改为成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;getAccessToken方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来保存access_token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessToken 要保存的凭据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">saveAccessToken</span>(<span class="params">accessToken</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">writeFileAsync</span>(accessToken,<span class="string">&#x27;access_token.txt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来读取access_token的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">readAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">readFileAsync</span>(<span class="string">&#x27;access_token.txt&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来检查access_token是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">isValidAccessToken</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//检查传入的参数是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (!data &amp;&amp; !data.<span class="property">access_token</span> &amp;&amp; !data.<span class="property">expires_in</span>) &#123;</span><br><span class="line">            <span class="comment">//代表access_token无效</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">expires_in</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来获取没有过期的access_token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125; <span class="variable">access_token</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">fetchAccessToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//优化</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">access_token</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">expires_in</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="comment">//说明之前保存过access_token,并且access_token有效,直接使用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">access_token</span>,</span><br><span class="line">                <span class="attr">expires_in</span>: <span class="variable language_">this</span>.<span class="property">expires_in</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readAccessToken</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地有文件</span></span><br><span class="line">                <span class="comment">//判断它是否过期(isValidAccessToken)</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidAccessToken</span>(res)) &#123;</span><br><span class="line">                    <span class="comment">//有效的</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">//resolve(res);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//过期了</span></span><br><span class="line">                    <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                    <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                    <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                    <span class="comment">// resolve(res);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地没有文件</span></span><br><span class="line">                <span class="comment">//发送请求获取access_token(getAccessToken)</span></span><br><span class="line">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getAccessToken</span>();</span><br><span class="line">                <span class="comment">//保存下来(本地文件)(saveAccessToken)</span></span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveAccessToken</span>(res);</span><br><span class="line">                <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                <span class="comment">// resolve(res);</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//将access_token挂载到this上</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">access_token</span> = res.<span class="property">access_token</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">expires_in</span> = res.<span class="property">expires_in</span>;</span><br><span class="line">                <span class="comment">//返回res包装了一层promise对象(此对象为成功的对象)</span></span><br><span class="line">                <span class="comment">//是this.readAccessToken()最终返回值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用来获取jsapi_ticket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getTicket</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//定义请求的地址</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.ticket&#125;</span>&amp;access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">            <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//将promise的对象的状态改为成功的状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                        <span class="attr">ticket</span>:res.<span class="property">ticket</span>,</span><br><span class="line">                        <span class="attr">expires_in</span>:<span class="title class_">Date</span>.<span class="title function_">now</span>() + (res.<span class="property">expires_in</span> - <span class="number">300</span>) * <span class="number">1000</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;getTicket方法出了问题:&#x27;</span> + err);</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来保存jsapi_ticket的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ticket 要保存的票据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">saveTicket</span>(<span class="params">ticket</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">writeFileAsync</span>(ticket,<span class="string">&#x27;ticket.txt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来读取ticket的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">readTicket</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">readFileAsync</span>(<span class="string">&#x27;ticket.txt&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来检查ticket是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">isValidTicket</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//检查传入的参数是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (!data &amp;&amp; !data.<span class="property">ticket</span> &amp;&amp; !data.<span class="property">expires_in</span>) &#123;</span><br><span class="line">            <span class="comment">//代表ticket无效</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">expires_in</span> &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来获取没有过期的ticket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125; <span class="variable">ticket</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">fetchTicket</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//优化</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ticket</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ticket_expires_in</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isValidTicket</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="comment">//说明之前保存过ticket,并且ticket有效,直接使用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">ticket</span>: <span class="variable language_">this</span>.<span class="property">ticket</span>,</span><br><span class="line">                <span class="attr">expires_in</span>: <span class="variable language_">this</span>.<span class="property">expires_in</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">readTicket</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地有文件</span></span><br><span class="line">                <span class="comment">//判断它是否过期(isValidTicket)</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidTicket</span>(res)) &#123;</span><br><span class="line">                    <span class="comment">//有效的</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//过期了</span></span><br><span class="line">                    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getTicket</span>();</span><br><span class="line">                    <span class="comment">//保存下来(本地文件)(saveTicket)</span></span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveTicket</span>(res);</span><br><span class="line">                    <span class="comment">//将请求回来的access_token返回出去</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="keyword">async</span> err =&gt; &#123;</span><br><span class="line">                <span class="comment">//本地没有文件</span></span><br><span class="line">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getTicket</span>();</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">saveTicket</span>(res);</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//将ticket挂载到this上</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ticket</span> = res.<span class="property">ticket</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ticket_expires_in</span> = res.<span class="property">expires_in</span>;</span><br><span class="line">                <span class="comment">//返回res包装了一层promise对象(此对象为成功的对象)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来创建自定义菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu 菜单的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">createMenu</span>(<span class="params">menu</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取access_token</span></span><br><span class="line">                <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.menu.create&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>, <span class="attr">body</span>: menu&#125;);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;createMenu方法出了问题:&#x27;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来删除自定义菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;unknown&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">deleteMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.menu.<span class="keyword">delete</span>&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;deleteMenu方法出了问题:&#x27;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> w=<span class="keyword">new</span> <span class="title class_">Wechat</span>();</span><br><span class="line">    <span class="comment">/*//删除之前定义的菜单</span></span><br><span class="line"><span class="comment">    let result = await w.deleteMenu();</span></span><br><span class="line"><span class="comment">    console.log(result);</span></span><br><span class="line"><span class="comment">    //创建新的菜单</span></span><br><span class="line"><span class="comment">    result = await w.createMenu(menu);</span></span><br><span class="line"><span class="comment">    console.log(result);*/</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> w.<span class="title function_">fetchTicket</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>将Wechat暴露出去:在最后添加<code>module.exports = Wechat;</code>并把上面的测试代码注释掉<br>即:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*(async ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">    const w=new Wechat();</span></span><br><span class="line"><span class="comment">    /!*!//删除之前定义的菜单</span></span><br><span class="line"><span class="comment">    let result = await w.deleteMenu();</span></span><br><span class="line"><span class="comment">    console.log(result);</span></span><br><span class="line"><span class="comment">    //创建新的菜单</span></span><br><span class="line"><span class="comment">    result = await w.createMenu(menu);</span></span><br><span class="line"><span class="comment">    console.log(result);*!/</span></span><br><span class="line"><span class="comment">    const data = await w.fetchTicket();</span></span><br><span class="line"><span class="comment">    console.log(data);</span></span><br><span class="line"><span class="comment">&#125;)()*/</span></span><br></pre></td></tr></table></figure><p>在config文件夹下的index.js中添加<code>url: &#39;ngrok地址&#39;</code></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入sha1加密</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line"><span class="comment">//引入config文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;url&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>);</span><br><span class="line"><span class="comment">//引入auto模块</span></span><br><span class="line"><span class="keyword">const</span> auth = <span class="built_in">require</span>(<span class="string">&#x27;./wechat/auth&#x27;</span>);</span><br><span class="line"><span class="comment">//引入wechat模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Wechat</span> = <span class="built_in">require</span>(<span class="string">&#x27;./wechat/wechat&#x27;</span>);</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//配置模板资源目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">//创建实例对象</span></span><br><span class="line"><span class="keyword">const</span> wechatApi = <span class="keyword">new</span> <span class="title class_">Wechat</span>();</span><br><span class="line"><span class="comment">//页面路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//生成js-sdk需要使用的签名：</span></span><br><span class="line">    <span class="comment">//随机字符串</span></span><br><span class="line">    <span class="keyword">const</span> noncestr = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//时间戳</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">//获取票据</span></span><br><span class="line">    <span class="keyword">const</span> &#123;ticket&#125; = <span class="keyword">await</span> wechatApi.<span class="title function_">fetchTicket</span>();</span><br><span class="line">    <span class="comment">//1.组合参与签名的4个参数:jsapi_ticket(临时票据),noncestr(随机字符串),timestamp(时间戳),url(当前服务器地址)</span></span><br><span class="line">    <span class="keyword">const</span> arr = [</span><br><span class="line">        <span class="string">`jsapi_ticket=<span class="subst">$&#123;ticket&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`noncestr=<span class="subst">$&#123;noncestr&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`timestamp=<span class="subst">$&#123;timestamp&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`url=<span class="subst">$&#123;url&#125;</span>/search`</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//2.将其进行字典连续,并以&#x27;&amp;&#x27;拼接在一起</span></span><br><span class="line">    <span class="keyword">const</span> str = arr.<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);<span class="comment">//xxx=xxx&amp;xxx=xxx&amp;xxx=xxx</span></span><br><span class="line">    <span class="comment">//3.进行sha1加密,最终生成想要的signature</span></span><br><span class="line">    <span class="keyword">const</span> signature = <span class="title function_">sha1</span>(str);</span><br><span class="line">    <span class="comment">//渲染页面,将渲染好的页面返回给用户</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;search&#x27;</span>, &#123;</span><br><span class="line">        signature,</span><br><span class="line">        noncestr,</span><br><span class="line">        timestamp</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接收处理所有参数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">auth</span>())</span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure></p><p>修改search.ejs<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;title&gt;search&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 id=&quot;search&quot;&gt;语音识别查电影&lt;/h1&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/zepto/1.2.0/zepto.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    /*</span><br><span class="line">    1.绑定域名</span><br><span class="line">        - 在接口测试号页面上填写js安全域名接口 不用写域名:&quot;http://&quot;</span><br><span class="line">    2.引入js文件</span><br><span class="line">        - http://res.wx.qq.com/open/js/jweixin-1.6.0.js</span><br><span class="line">    3.通过config接口注入权限验证配置</span><br><span class="line">     */</span><br><span class="line">    wx.config(&#123;</span><br><span class="line">        debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">        appId: &#x27;wxd9cdd2f13c019b6d&#x27;, // 必填，公众号的唯一标识</span><br><span class="line">        timestamp: &#x27;&lt;%= timestamp %&gt;&#x27;, // 必填，生成签名的时间戳</span><br><span class="line">        nonceStr: &#x27;&lt;%= noncestr %&gt;&#x27;, // 必填，生成签名的随机串</span><br><span class="line">        signature: &#x27;&lt;%= signature %&gt;&#x27;,// 必填，签名</span><br><span class="line">        jsApiList: [</span><br><span class="line">            &#x27;onMenuShareQQ&#x27;,</span><br><span class="line">            &#x27;onMenuShareQZone&#x27;,</span><br><span class="line">            &#x27;startRecord&#x27;,</span><br><span class="line">            &#x27;stopRecord&#x27;,</span><br><span class="line">            &#x27;translateVoice&#x27;</span><br><span class="line">        ] // 必填，需要使用的JS接口列表</span><br><span class="line">    &#125;);</span><br><span class="line">    //通过ready接口处理成功验证</span><br><span class="line">    wx.ready(function () &#123;</span><br><span class="line">        // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。</span><br><span class="line">        // 对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span><br><span class="line"></span><br><span class="line">        //验证接口是否有权限</span><br><span class="line">        wx.checkJsApi(&#123;</span><br><span class="line">            jsApiList: [&#x27;onMenuShareQQ&#x27;,</span><br><span class="line">                &#x27;onMenuShareQZone&#x27;,</span><br><span class="line">                &#x27;startRecord&#x27;,</span><br><span class="line">                &#x27;stopRecord&#x27;,</span><br><span class="line">                &#x27;translateVoice&#x27;], // 需要检测的JS接口列表，所有JS接口列表见附录2,</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">                // 以键值对的形式返回，可用的api值true，不可用为false</span><br><span class="line">                // 如：&#123;&quot;checkResult&quot;:&#123;&quot;chooseImage&quot;:true&#125;,&quot;errMsg&quot;:&quot;checkJsApi:ok&quot;&#125;</span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: function (err) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //设置标志位,是否在录音中</span><br><span class="line">        var isRecord = false;</span><br><span class="line">        //语音识别功能</span><br><span class="line">        $(&#x27;#search&#x27;).tap(function () &#123;</span><br><span class="line">            if (!isRecord) &#123;</span><br><span class="line">                //开始录音</span><br><span class="line">                wx.startRecord();</span><br><span class="line">                isRecord = false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //结束录音</span><br><span class="line">                wx.stopRecord(&#123;</span><br><span class="line">                    success: function (res) &#123;</span><br><span class="line">                        //结束录音后会自动上传录音到微信服务器中,微信服务器会返回一个id给开发者使用</span><br><span class="line">                        var localId = res.localId;</span><br><span class="line">                        //将录音转化为文字</span><br><span class="line">                        /*wx.translateVoice(&#123;</span><br><span class="line">                            localId: localId, // 需要识别的音频的本地Id，由录音相关接口获得</span><br><span class="line">                            isShowProgressTips: 1, // 默认为1，显示进度提示</span><br><span class="line">                            success: function (res) &#123;</span><br><span class="line">                                alert(res.translateResult); // 语音识别的结果</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);*/</span><br><span class="line">                        isRecord = false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    //通过error接口处理失败验证</span><br><span class="line">    wx.error(function (res) &#123;</span><br><span class="line">        // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>进入<a href="https://www.bootcdn.cn/">BootCDN官网</a>,搜索<code>zepto</code>,复制第一个script标签即可</p><p>分享接口:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.onMenuShareQQ(&#123;</span><br><span class="line">  title: &#x27;&#x27;, // 分享标题</span><br><span class="line">  desc: &#x27;&#x27;, // 分享描述</span><br><span class="line">  link: &#x27;&#x27;, // 分享链接</span><br><span class="line">  imgUrl: &#x27;&#x27;, // 分享图标</span><br><span class="line">  success: function () &#123;</span><br><span class="line">  // 用户确认分享后执行的回调函数</span><br><span class="line">  &#125;,</span><br><span class="line">  cancel: function () &#123;</span><br><span class="line">  // 用户取消分享后执行的回调函数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="优化项目"><a href="#优化项目" class="headerlink" title="优化项目"></a>优化项目</h3><p>写了这么久的项目,是不是觉得项目十分的杂乱,这时候我们就需要对项目就行优化</p><p>因为auth,reply,template三个模块的作用都是拿到数据并做出反应给用户,所以我们可以把他们整合到一起</p><p>然后menu,wechat我们是用来实现自定义菜单功能的,我们今后可以将所有接口都放到wechat里面</p><p>在项目下新建文件夹reply,用来处理用户响应,反应给用户的一些模块,即将auth,reply,template三个模块放进去,将auth改名为index</p><p>修改app.js中的引入auth代码,修改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入reply模块</span></span><br><span class="line"><span class="keyword">const</span> reply = <span class="built_in">require</span>(<span class="string">&#x27;./reply&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改<code>app.use(auth())</code>为<code>app.use(reply())</code></p><p>提取app.js中的路由模块</p><p>在项目下新建router文件夹,新建index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入sha1加密</span></span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">&#x27;sha1&#x27;</span>);</span><br><span class="line"><span class="comment">//引入config文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;url&#125; = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>);</span><br><span class="line"><span class="comment">//引入wechat模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Wechat</span> = <span class="built_in">require</span>(<span class="string">&quot;../wechat/wechat&quot;</span>);</span><br><span class="line"><span class="comment">//引入reply模块</span></span><br><span class="line"><span class="keyword">const</span> reply = <span class="built_in">require</span>(<span class="string">&quot;../reply&quot;</span>);</span><br><span class="line"><span class="comment">//获取Router</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = express.<span class="property">Router</span>;</span><br><span class="line"><span class="comment">//创建路由器对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">//创建实例对象</span></span><br><span class="line"><span class="keyword">const</span> wechatApi = <span class="keyword">new</span> <span class="title class_">Wechat</span>();</span><br><span class="line"><span class="comment">//页面路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//生成js-sdk需要使用的签名：</span></span><br><span class="line">    <span class="comment">//随机字符串</span></span><br><span class="line">    <span class="keyword">const</span> noncestr = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//时间戳</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">//获取票据</span></span><br><span class="line">    <span class="keyword">const</span> &#123;ticket&#125; = <span class="keyword">await</span> wechatApi.<span class="title function_">fetchTicket</span>();</span><br><span class="line">    <span class="comment">//1.组合参与签名的4个参数:jsapi_ticket(临时票据),noncestr(随机字符串),timestamp(时间戳),url(当前服务器地址)</span></span><br><span class="line">    <span class="keyword">const</span> arr = [</span><br><span class="line">        <span class="string">`jsapi_ticket=<span class="subst">$&#123;ticket&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`noncestr=<span class="subst">$&#123;noncestr&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`timestamp=<span class="subst">$&#123;timestamp&#125;</span>`</span>,</span><br><span class="line">        <span class="string">`url=<span class="subst">$&#123;url&#125;</span>/search`</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//2.将其进行字典连续,并以&#x27;&amp;&#x27;拼接在一起</span></span><br><span class="line">    <span class="keyword">const</span> str = arr.<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);<span class="comment">//xxx=xxx&amp;xxx=xxx&amp;xxx=xxx</span></span><br><span class="line">    <span class="comment">//3.进行sha1加密,最终生成想要的signature</span></span><br><span class="line">    <span class="keyword">const</span> signature = <span class="title function_">sha1</span>(str);</span><br><span class="line">    <span class="comment">//渲染页面,将渲染好的页面返回给用户</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;search&#x27;</span>, &#123;</span><br><span class="line">        signature,</span><br><span class="line">        noncestr,</span><br><span class="line">        timestamp</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//接收处理所有参数</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="title function_">reply</span>())</span><br><span class="line"><span class="comment">//将路由器对象暴露出去</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>修改app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//引入路由器模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);</span><br><span class="line"><span class="comment">//创建app应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//配置模板资源目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">//应用路由器</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="爬取浏览器数据"><a href="#爬取浏览器数据" class="headerlink" title="爬取浏览器数据"></a>爬取浏览器数据</h3><p>使用<code>puppeteer</code>库</p><p><a href="https://github.com/puppeteer/puppeteer">github地址</a></p><p><a href="https://github.com/puppeteer/puppeteer/blob/v13.1.3/docs/api.md">api文档</a></p><p>下载: <code>npm i puppeteer</code></p><p>puppeteer 在执行安装的过程中需要执行install.js，这里会下载Chromium，翻墙也下载失败，导致安装不成功，解决办法(使用淘宝镜像)：</p><blockquote><p>npm config set puppeteer_download_host=<a href="https://npm.taobao.org/mirrors">https://npm.taobao.org/mirrors</a><br>npm i puppeteer</p></blockquote><p>我们只需要爬取8条数据</p><p>在项目下新建文件夹server,在里面再新建一个文件夹crawler,在其中新建theaterCrawler.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取热门电影信息</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://movie.douban.com/cinema/nowplaying/chongqing/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//1.打开浏览器</span></span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">        <span class="comment">// args: [&#x27;--no-sandbox&#x27;],</span></span><br><span class="line">        <span class="attr">headless</span>: <span class="literal">true</span> <span class="comment">//以无头浏览器形式打开浏览器,没有界面显示,在后台运行的8</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//2.创建tab标签页</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">    <span class="comment">//3.跳转到指定网址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">        <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> <span class="comment">//等待网络空闲时再跳转加载页面</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//4.等待网址加载完成,开始爬取数据</span></span><br><span class="line">    <span class="comment">//开启延时器,延时2秒钟开始爬取数据</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">timeout</span>();</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//对加载好的页面进行dom操作</span></span><br><span class="line">        <span class="comment">//所有爬取的数据数组</span></span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="comment">//获取所有热门电影的li</span></span><br><span class="line">        <span class="keyword">const</span> $list = $(<span class="string">&#x27;#nowplaying&gt;.mod-bd&gt;.lists&gt;.list-item&#x27;</span>);</span><br><span class="line">        <span class="comment">//只取8条数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> liDom = $list[i];</span><br><span class="line">            <span class="comment">//电影标题</span></span><br><span class="line">            <span class="keyword">let</span> title = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">            <span class="comment">//电影评分</span></span><br><span class="line">            <span class="keyword">let</span> rating = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;score&#x27;</span>);</span><br><span class="line">            <span class="comment">//电影片长</span></span><br><span class="line">            <span class="keyword">let</span> runtime = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;duration&#x27;</span>);</span><br><span class="line">            <span class="comment">//导演</span></span><br><span class="line">            <span class="keyword">let</span> directors = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;director&#x27;</span>);</span><br><span class="line">            <span class="comment">//主演</span></span><br><span class="line">            <span class="keyword">let</span> casts = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;actors&#x27;</span>);</span><br><span class="line">            <span class="comment">//电影详情网址</span></span><br><span class="line">            <span class="keyword">let</span> href = $(liDom).<span class="title function_">find</span>(<span class="string">&#x27;.poster&gt;a&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">            <span class="comment">//电影海报图</span></span><br><span class="line">            <span class="keyword">let</span> image = $(liDom).<span class="title function_">find</span>(<span class="string">&#x27;.poster&gt;a&gt;img&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">            <span class="comment">//id</span></span><br><span class="line">            <span class="keyword">let</span> doubanId = $(liDom).<span class="title function_">data</span>(<span class="string">&#x27;subject&#x27;</span>);</span><br><span class="line">            result.<span class="title function_">push</span>(&#123;</span><br><span class="line">                title,</span><br><span class="line">                rating,</span><br><span class="line">                runtime,</span><br><span class="line">                directors,</span><br><span class="line">                casts,</span><br><span class="line">                href,</span><br><span class="line">                image,</span><br><span class="line">                doubanId</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将爬取的数据返回出去</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//console.log(result);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历爬取到的8条数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//获取每一条信息</span></span><br><span class="line">        <span class="keyword">let</span> item = result[i];</span><br><span class="line">        <span class="comment">//获取电影详情网址</span></span><br><span class="line">        <span class="keyword">let</span> url = result[i].<span class="property">href</span>;</span><br><span class="line">        <span class="comment">//跳转到电影详情页</span></span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">            <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> <span class="comment">//等待网络空闲时再跳转加载页面</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//爬取其他数据</span></span><br><span class="line">        <span class="keyword">let</span> itemResult = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> genre = [];</span><br><span class="line">            <span class="comment">//类型</span></span><br><span class="line">            <span class="keyword">const</span> $genre = $(<span class="string">&#x27;[property=&quot;v:genre&quot;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; $genre.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                genre.<span class="title function_">push</span>($genre[j].<span class="property">innerText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//简介</span></span><br><span class="line">            <span class="keyword">const</span> summary = $(<span class="string">&#x27;[property=&quot;v:summary&quot;]&#x27;</span>).<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="comment">//上映日期</span></span><br><span class="line">            <span class="keyword">const</span> releaseDate = $(<span class="string">&#x27;[property=&quot;v:initialReleaseDate&quot;]&#x27;</span>)[<span class="number">0</span>].<span class="property">innerText</span>;</span><br><span class="line">            <span class="comment">//给单个对象添加3个属性</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                genre,</span><br><span class="line">                summary,</span><br><span class="line">                releaseDate</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//在最后给当前对象添加3个属性</span></span><br><span class="line">        <span class="comment">//在evaluate函数中没办法读取到服务器中的变量</span></span><br><span class="line">        item.<span class="property">genre</span> = itemResult.<span class="property">genre</span>;</span><br><span class="line">        item.<span class="property">summary</span> = itemResult.<span class="property">summary</span>;</span><br><span class="line">        item.<span class="property">releaseDate</span> = itemResult.<span class="property">releaseDate</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">//5.关闭浏览器</span></span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在server文件夹下新建index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">theatersCrawler</span>();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>运行index.js得到如下数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">[                                                                          </span><br><span class="line">  &#123;                                                                        </span><br><span class="line">    title: &#x27;四海&#x27;,                                                         </span><br><span class="line">    rating: 5.6,                                                           </span><br><span class="line">    runtime: &#x27;128分钟&#x27;,                                                    </span><br><span class="line">    directors: &#x27;韩寒&#x27;,                                                     </span><br><span class="line">    casts: &#x27;刘昊然 / 刘浩存 / 沈腾&#x27;,                                       </span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35337517/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2867433563.webp&#x27;,</span><br><span class="line">    doubanId: 35337517,</span><br><span class="line">    genre: [ &#x27;喜剧&#x27;, &#x27;动作&#x27;, &#x27;爱情&#x27; ],</span><br><span class="line">    summary: &#x27;在码头做摩托车特技表演顺便拉客的年轻人吴仁耀（刘昊然饰），他多年不见的浪荡父亲吴仁腾（沈腾饰）；梦想大城市生活的餐馆服务员周欢颂和他浮夸真诚的哥哥周</span><br><span class="line">欢歌。一支从没有赢过一场比赛的“不败传说”车队频频出战，一群可笑又可爱的小人物命运交织。阿耀和欢颂都立志活成自己亲人的反面，想彼此取暖，彼此独立，却又总不在一个频道</span><br><span class="line">上。世事无常，他们不得不背井离乡，迎接一场未知旅途，阿耀的一身技能竟会用在一个自己都意想不到的场合，他的亲情友情和爱情最终又将会是如何……&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;奇迹·笨小孩&#x27;,</span><br><span class="line">    rating: 7.4,</span><br><span class="line">    runtime: &#x27;106分钟&#x27;,</span><br><span class="line">    directors: &#x27;文牧野&#x27;,</span><br><span class="line">    casts: &#x27;易烊千玺 / 田雨 / 陈哈琳&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35312437/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2842327103.webp&#x27;,</span><br><span class="line">    doubanId: 35312437,</span><br><span class="line">    genre: [ &#x27;剧情&#x27; ],</span><br><span class="line">    summary: &#x27;二十岁的景浩（易烊千玺饰）独自带着年幼的妹妹来到深圳生活，兄妹俩生活温馨却拮据。为了妹妹高昂的手术费，机缘巧合之下，景浩得到一个机会，本以为美好生活</span><br><span class="line">即将来临，却不料遭遇重创。在时间和金钱的双重压力下，毫无退路的景浩决定孤注一掷，而他陷入困境的平凡人生，又能否燃起希望的火花？&lt;br&gt;电影《奇迹》是中宣部国家电影局20</span><br><span class="line">21年重点电影项目，也是2021年重点建党百年献礼片，描述十八大以后新时代年轻人在深圳创业的影片。&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;这个杀手不太冷静&#x27;,</span><br><span class="line">    rating: 6.9,</span><br><span class="line">    runtime: &#x27;109分钟&#x27;,</span><br><span class="line">    directors: &#x27;邢文雄&#x27;,</span><br><span class="line">    casts: &#x27;马丽 / 魏翔 / 陈明昊&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35505100/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2814949620.webp&#x27;,</span><br><span class="line">    doubanId: 35505100,</span><br><span class="line">    genre: [ &#x27;喜剧&#x27; ],</span><br><span class="line">    summary: &#x27;毕生追求男主梦的魏成功（魏翔饰）终于得到了女明星米兰（马丽饰）的“赏识”，被邀请出演她的男一号“杀手卡尔”，他兴致勃勃诠释角色的同时，却没想到已经落入了</span><br><span class="line">一场危机四伏的阴谋，但他依然借自己“精湛”的演技和绝佳的运气化险为夷，而残酷的真相也离他越来越近……&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;长津湖之水门桥&#x27;,</span><br><span class="line">    rating: 7.2,</span><br><span class="line">    runtime: &#x27;149分钟&#x27;,</span><br><span class="line">    directors: &#x27;徐克&#x27;,</span><br><span class="line">    casts: &#x27;吴京 / 易烊千玺 / 朱亚文&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35613853/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2846021991.webp&#x27;,</span><br><span class="line">    doubanId: 35613853,</span><br><span class="line">    genre: [ &#x27;剧情&#x27;, &#x27;历史&#x27;, &#x27;战争&#x27; ],</span><br><span class="line">    summary: &#x27;电影以抗美援朝战争第二次战役中的长津湖战役为背景，讲述了在结束了新兴里和下碣隅里的战斗之后，七连战士们又接到了更艰巨的任务……&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;狙击手&#x27;,</span><br><span class="line">    rating: 7.7,</span><br><span class="line">    runtime: &#x27;96分钟&#x27;,</span><br><span class="line">    directors: &#x27;张艺谋 张末&#x27;,</span><br><span class="line">    casts: &#x27;陈永胜 / 章宇 / 张译&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35215390/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2738601191.webp&#x27;,</span><br><span class="line">    doubanId: 35215390,</span><br><span class="line">    genre: [ &#x27;剧情&#x27;, &#x27;历史&#x27;, &#x27;战争&#x27; ],</span><br><span class="line">    summary: &#x27;影片根据抗美援朝战争“冷枪冷炮”运动中神枪手群体事迹改编。1952年冬至1953年初，中国人民志愿军与联合国军在朝鲜战场形成僵持，双方发起了低强度的密集狙击战</span><br><span class="line">，史称&quot;冷枪冷炮运动&quot;。在连长（张译饰）带领下的狙击五班战士枪法过人，成为敌军的心头大患，班长刘文武（章宇饰）更成为重点狙击对象。为重创狙击五班，敌方调配精英狙击小</span><br><span class="line">队，配以最先进的武器装备，更迫使狙击五班战士大永（陈永胜饰）等人为救同伴进入其设好的险境之地。但正当敌军打响自己如意算盘之时，他们未料到，被他们当作诱饵的侦察兵亮</span><br><span class="line">亮（刘奕铁饰）身上其实隐藏着更大的秘密......&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;喜羊羊与灰太狼之筐出未来&#x27;,</span><br><span class="line">    rating: 0,</span><br><span class="line">    runtime: &#x27;94分钟&#x27;,</span><br><span class="line">    directors: &#x27;黄伟明&#x27;,</span><br><span class="line">    casts: &#x27;祖晴 / 张琳 / 邓玉婷&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35608160/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2797468943.webp&#x27;,</span><br><span class="line">    doubanId: 35608160,</span><br><span class="line">    genre: [ &#x27;喜剧&#x27;, &#x27;动画&#x27;, &#x27;运动&#x27; ],</span><br><span class="line">    summary: &#x27;喜羊羊、灰太狼与一众小羊组成的守护者队进入篮球顶级赛事决赛，但却意外地败北，团队分崩离析。&lt;br&gt;虽然各散东西，但对篮球的热爱和对冠军的渴望让大家再次组</span><br><span class="line">队，参加新一届大赛，然而这次的对手更强大，他们面临更大的挑战！&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;熊出没·重返地球&#x27;,</span><br><span class="line">    rating: 0,</span><br><span class="line">    runtime: &#x27;99分钟&#x27;,</span><br><span class="line">    directors: &#x27;林汇达&#x27;,</span><br><span class="line">    casts: &#x27;张秉君 / 张伟 / 谭笑&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35377026/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2856825681.webp&#x27;,</span><br><span class="line">    doubanId: 35377026,</span><br><span class="line">    genre: [ &#x27;喜剧&#x27;, &#x27;动画&#x27;, &#x27;儿童&#x27; ],</span><br><span class="line">    summary: &#x27;有点懒又有点馋的熊二虽然总是各种失误犯错，内心却一直梦想成为一位英雄，以此获得大家特别是哥哥熊大的认可。&lt;br&gt;一块外星原核的坠落打破了狗熊岭的平静，熊</span><br><span class="line">二意外的与外星原核合体，成为了拥有外星智慧能量的熊！随之而来的是“外星人”阿布的抢夺。阿布为了夺回原核，故意制造事端，让熊二众叛亲离。就在阿布将要成功的时候，一支神</span><br><span class="line">秘高科技军团的攻击彻底打乱了计划，导致熊强组合甚至整个地球于巨大的危难之中。&lt;br&gt;阿布隐藏的身份以及来到地球的真正目的到底是什么？神秘的高科技军团背后有何故事？自暴</span><br><span class="line">自弃的熊二能否振作起来实现他的英雄梦？他们能否挽救地球的危机？&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-02-01(中国大陆)&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: &#x27;李茂扮太子&#x27;,</span><br><span class="line">    rating: 4.3,</span><br><span class="line">    runtime: &#x27;100分钟&#x27;,</span><br><span class="line">    directors: &#x27;高可&#x27;,</span><br><span class="line">    casts: &#x27;马丽 / 常远 / 艾伦&#x27;,</span><br><span class="line">    href: &#x27;https://movie.douban.com/subject/35444998/?from=playing_poster&#x27;,</span><br><span class="line">    image: &#x27;https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2812626447.webp&#x27;,</span><br><span class="line">    doubanId: 35444998,</span><br><span class="line">    genre: [ &#x27;喜剧&#x27;, &#x27;古装&#x27; ],</span><br><span class="line">    summary: &#x27;富家女杨家珍（马丽饰）与小捕快李茂（常远饰）成婚，虽夫妻恩爱，但始终得不到家珍父母的认可。李茂意外发现自己竟与当朝太子相貌相同，一个想进宫获得晋升，</span><br><span class="line">一个想出宫获得自由，二人交换身份，却不知正一步步卷入尚书的阴谋里……&#x27;,</span><br><span class="line">    releaseDate: &#x27;2022-01-01(中国大陆)&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="保存数据到数据库"><a href="#保存数据到数据库" class="headerlink" title="保存数据到数据库"></a>保存数据到数据库</h3><p>在项目下新建db文件夹,在其中新建index.js文件,需要下载mongoose包:<code>npm install mongoose</code></p><p><a href="https://www.cnblogs.com/TM0831/p/10606624.html">安装mongoDB</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/movie&#x27;</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="comment">//绑定事件监听</span></span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功~~&#x27;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;数据库连接失败:&#x27;</span>+err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在项目下新建model文件夹,在其中新建Theaters.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//获取Schema</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;</span><br><span class="line"><span class="comment">//创建约束对象</span></span><br><span class="line"><span class="keyword">const</span> theatersSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">rating</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">runtime</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">directors</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">casts</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">doubanId</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">unique</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">genre</span>: [<span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">summary</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">releaseDate</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">posterKey</span>: <span class="title class_">String</span>,<span class="comment">//图片上传到七牛中返回的key值</span></span><br><span class="line">    <span class="attr">createTime</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建模型对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Theaters&#x27;</span>,theatersSchema);</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Theaters</span>;</span><br></pre></td></tr></table></figure><p>在server文件夹下新建save文件夹,并在其中新建saveTheaters.js文件用来保存实现保存操作的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Theaters</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../model/Theaters&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> data =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = data[i];</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Theaters</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: item.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">rating</span>: item.<span class="property">rating</span>,</span><br><span class="line">            <span class="attr">runtime</span>: item.<span class="property">runtime</span>,</span><br><span class="line">            <span class="attr">directors</span>: item.<span class="property">directors</span>,</span><br><span class="line">            <span class="attr">casts</span>: item.<span class="property">casts</span>,</span><br><span class="line">            <span class="attr">image</span>: item.<span class="property">image</span>,</span><br><span class="line">            <span class="attr">doubanId</span>: item.<span class="property">doubanId</span>,</span><br><span class="line">            <span class="attr">genre</span>: item.<span class="property">genre</span>,</span><br><span class="line">            <span class="attr">summary</span>: item.<span class="property">summary</span>,</span><br><span class="line">            <span class="attr">releaseDate</span>: item.<span class="property">releaseDate</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据保存成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在关闭浏览器后将数据返回出去:在theatersCrawler.js中关闭浏览器代码后添加<code>return result;</code></p><p>修改server文件夹下面的index文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTheaters = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTheaters&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">await</span> db;</span><br><span class="line">    <span class="comment">//爬取数据</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">theatersCrawler</span>();</span><br><span class="line">    <span class="comment">//将爬取的数据保存到数据库中</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">saveTheaters</span>(data);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>在数据库中执行:<code>db.theaters.find(&#123;&#125;)</code> 查看数据保存情况</p><h3 id="回复用户热门电影数据"><a href="#回复用户热门电影数据" class="headerlink" title="回复用户热门电影数据"></a>回复用户热门电影数据</h3><p>修改reply下的reply.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Theaters</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/Theaters&#x27;</span>);</span><br><span class="line"><span class="comment">//引入config</span></span><br><span class="line"><span class="keyword">const</span> &#123;url&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要将该函数改为async函数</span></span><br><span class="line"><span class="keyword">if</span> (message.<span class="property">Content</span> === <span class="string">&#x27;热门&#x27;</span>) &#123;<span class="comment">//全匹配</span></span><br><span class="line">            <span class="comment">//回复用户热门电影数据</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">Theaters</span>.<span class="title function_">find</span>(&#123;&#125;, &#123;<span class="attr">title</span>: <span class="number">1</span>, <span class="attr">summary</span>: <span class="number">1</span>, <span class="attr">image</span>: <span class="number">1</span>, <span class="attr">doubanId</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;);</span><br><span class="line">            <span class="comment">//将回复内容改为空数组</span></span><br><span class="line">            content = [];</span><br><span class="line">            options.<span class="property">msgType</span> = <span class="string">&#x27;news&#x27;</span>;</span><br><span class="line">            <span class="comment">//通过变量将数据添加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> item = data[i];</span><br><span class="line">                content.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: item.<span class="property">title</span>,</span><br><span class="line">                    <span class="attr">description</span>: item.<span class="property">summary</span>,</span><br><span class="line">                    <span class="attr">picUrl</span>: item.<span class="property">image</span>,</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;url&#125;</span>/detail/<span class="subst">$&#123;item.doubanId&#125;</span>`</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>将reply下的index.js文件中的<code>const options = reply(message);</code>改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将reply改为了async函数,返回值变为了promise对象</span></span><br><span class="line"><span class="comment">//必须用await关键字才能拿到最终的返回值</span></span><br><span class="line"><span class="keyword">const</span> options = <span class="keyword">await</span> <span class="title function_">reply</span>(message);</span><br></pre></td></tr></table></figure></p><h3 id="电影详情页面"><a href="#电影详情页面" class="headerlink" title="电影详情页面"></a>电影详情页面</h3><p>router的index.js中,在搜索页面路由下添加电影详情页面路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Theaters</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/Theaters&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//详情页面路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/detail/:id&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//获取占位符id的值</span></span><br><span class="line">    <span class="keyword">const</span> &#123;id&#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="comment">//判断id值是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">        <span class="comment">//去数据库中找到对应id值的所有数据</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">Theaters</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">doubanId</span>: id&#125;, &#123;<span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">__v</span>: <span class="number">0</span>, <span class="attr">createTime</span>: <span class="number">0</span>, <span class="attr">doubanId</span>: <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="comment">//渲染到页面上</span></span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;detail&#x27;</span>, &#123;data&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>电影详情页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;movie&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;a class=&quot;header_title&quot; href=&quot;/movie&quot;&gt;电影&lt;/a&gt;</span><br><span class="line">        &lt;a class=&quot;header_search&quot; href=&quot;/search&quot;&gt;搜索&lt;/a&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;title&quot;&gt;&lt;%= data.title %&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;section class=&quot;info&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;rating&quot;&gt;</span><br><span class="line">                    &lt;span&gt;评分：&lt;/span&gt;</span><br><span class="line">                    &lt;strong&gt;&lt;%= data.rating %&gt;&lt;/strong&gt;</span><br><span class="line">                    &lt;span class=&quot;ratingNum&quot;&gt;98375人评价&lt;/span&gt;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p class=&quot;meta&quot;&gt;</span><br><span class="line">                    &lt;%= data.runtime %&gt; /</span><br><span class="line">                    &lt;%= data.genre.forEach()(function(item)&#123; %&gt;</span><br><span class="line">                        &lt;%= item %&gt; /</span><br><span class="line">                    &lt;% &#125;) %&gt;</span><br><span class="line">                    &lt;%= data.directors %&gt;(导演) / &lt;%= data.casts %&gt; / &lt;%= data.releaseDate %&gt;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;javascript:&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;&lt;%= data.image %&gt;&quot; alt=&quot;&lt;%= data.title %&gt;&quot;&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">        &lt;section class=&quot;intro&quot;&gt;</span><br><span class="line">            &lt;h2&gt;&lt;%= data.title %&gt;的简介&lt;/h2&gt;</span><br><span class="line">            &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">                &lt;p&gt;&lt;%= data.summary %&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="文本搜索电影"><a href="#文本搜索电影" class="headerlink" title="文本搜索电影"></a>文本搜索电影</h3><p>在匹配的最后加一个else判断,用来搜索用户输入指定电影信息</p><p>reply.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入rp</span></span><br><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">&#x27;request-promise-native&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//搜索用户输入指定电影信息</span></span><br><span class="line">    <span class="comment">//定义请求地址</span></span><br><span class="line">    <span class="comment">//这种写法会导致message.Content变为一些%之类的码</span></span><br><span class="line">    <span class="comment">//const url = `https://api.douban.com/v2/movie/search?q=$&#123;message.Content&#125;&amp;count=8`;</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://api.douban.com/v2/movie/search&#x27;</span>;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">const</span> &#123;subjects&#125; = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>, <span class="attr">qs</span>: &#123;<span class="attr">q</span>: message.<span class="property">Content</span>, <span class="attr">count</span>: <span class="number">8</span>&#125;&#125;);</span><br><span class="line">    <span class="comment">//判断subjects是否有值</span></span><br><span class="line">    <span class="keyword">if</span> (subjects &amp;&amp; subjects.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">//有数据,返回一个图文消息给用户</span></span><br><span class="line">        <span class="comment">//将回复内容改为空数组</span></span><br><span class="line">        content = [];</span><br><span class="line">        options.<span class="property">msgType</span> = <span class="string">&#x27;news&#x27;</span>;</span><br><span class="line">        <span class="comment">//通过变量将数据添加进去</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; subjects.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = subjects[i];</span><br><span class="line">            content.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: item.<span class="property">title</span>,</span><br><span class="line">                <span class="attr">description</span>: <span class="string">`电影评分为:<span class="subst">$&#123;item.rating.average&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">picUrl</span>: item.<span class="property">image</span>.<span class="property">small</span>,</span><br><span class="line">                <span class="attr">url</span>: item.<span class="property">alt</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//无数据</span></span><br><span class="line">        content = <span class="string">&quot;暂时没有电影信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="上传图片到七牛"><a href="#上传图片到七牛" class="headerlink" title="上传图片到七牛"></a>上传图片到七牛</h3><p><a href="https://www.qiniu.com/?utm_source=%E7%99%BE%E5%BA%A6%E5%93%81%E4%B8%93&amp;utm_medium=CPM&amp;utm_term=logo&amp;utm_content=%E5%B7%A6%E4%BE%A7logo&amp;utm_campaign=%E7%99%BE%E5%BA%A6%E5%93%81%E4%B8%93">七牛官网</a></p><p>注册并登录</p><p>点击控制台-&gt;资源管理下的存储空间-&gt;新建存储空间(填写信息后确认创建)</p><p>我们上传成功之后,只需复制外链使用即可</p><p>文档:文档中心-&gt;SDK&amp;工具-&gt;官方SDK-&gt;Node.js 服务器</p><p>安装依赖: <code>npm i qiniu -D</code></p><p>在server文件夹下新建qiniu文件夹,并在其中新建upload.js、index.js文件</p><p>upload.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入qiniu</span></span><br><span class="line"><span class="keyword">const</span> qiniu = <span class="built_in">require</span>(<span class="string">&#x27;qiniu&#x27;</span>);</span><br><span class="line"><span class="comment">//个人中心-&gt;秘钥管理</span></span><br><span class="line"><span class="keyword">var</span> accessKey = <span class="string">&#x27;your access key&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> secretKey = <span class="string">&#x27;your secret key&#x27;</span></span><br><span class="line"><span class="comment">//定义鉴权对象</span></span><br><span class="line"><span class="keyword">var</span> mac = <span class="keyword">new</span> qiniu.<span class="property">auth</span>.<span class="property">digest</span>.<span class="title class_">Mac</span>(accessKey, secretKey);</span><br><span class="line"><span class="comment">//定义配置对象</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> qiniu.<span class="property">conf</span>.<span class="title class_">Config</span>();</span><br><span class="line"><span class="comment">//存储区域   z0 -- 华东  z1 -- 华北  z2 -- 华南</span></span><br><span class="line">config.<span class="property">zone</span> = qiniu.<span class="property">zone</span>.<span class="property">Zone_z2</span>;</span><br><span class="line"><span class="comment">//bucketManager对象上就有所有方法</span></span><br><span class="line"><span class="keyword">var</span> bucketManager = <span class="keyword">new</span> qiniu.<span class="property">rs</span>.<span class="title class_">BucketManager</span>(mac, config);</span><br><span class="line"><span class="keyword">const</span> bucket = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">resUrl, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    resUrl  网络资源地址</span></span><br><span class="line"><span class="comment">    bucket  存储空间名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        bucketManager.<span class="title function_">fetch</span>(resUrl, bucket, key, <span class="keyword">function</span> (<span class="params">err, respBody, respInfo</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                <span class="comment">//throw err;</span></span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;上传图片方法出了问题&#x27;</span> + err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (respInfo.<span class="property">statusCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件上传成功&#x27;</span>);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将数据库中的图片上传到七牛</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//模型对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../model/Theaters&#x27;</span>);</span><br><span class="line"><span class="comment">//上传图片到七牛方法</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">require</span>(<span class="string">&#x27;./upload&#x27;</span>);</span><br><span class="line"><span class="comment">//生成唯一的key值</span></span><br><span class="line"><span class="keyword">const</span> nanoid = <span class="built_in">require</span>(<span class="string">&#x27;nanoid&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取数据库中的图片链接</span></span><br><span class="line"><span class="comment">    2.上传到七牛</span></span><br><span class="line"><span class="comment">    3.保存key值到数据库中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//去数据库中所有没有上传图片的文档对象</span></span><br><span class="line">    <span class="comment">//const movies = await Theaters.find(&#123;posterKey: &#123;$in: [&#x27;&#x27;, null, &#123;$exists: false&#125;]&#125;&#125;)</span></span><br><span class="line">    <span class="keyword">const</span> movies = <span class="keyword">await</span> <span class="title class_">Theaters</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">        <span class="attr">$or</span>: [</span><br><span class="line">            &#123;<span class="attr">posterKey</span>: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">posterKey</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">posterKey</span>: &#123;<span class="attr">$exists</span>: <span class="literal">false</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历每一条数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; movies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//获取每一个文档对象</span></span><br><span class="line">        <span class="keyword">let</span> movie = movies[i];</span><br><span class="line">        <span class="comment">//上传到七牛中</span></span><br><span class="line">        <span class="keyword">let</span> url = movie.<span class="property">image</span>;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="string">`<span class="subst">$&#123;nanoid(<span class="number">10</span>)&#125;</span>.jpg`</span>;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">upload</span>(url, key);</span><br><span class="line">        <span class="comment">//保存key值到数据库中</span></span><br><span class="line">        movie.<span class="property">posterKey</span> = key;</span><br><span class="line">        <span class="keyword">await</span> movie.<span class="title function_">save</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改server文件夹下的index.js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTheaters = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTheaters&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uploadToQiniu = <span class="built_in">require</span>(<span class="string">&#x27;./qiniu&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">await</span> db;</span><br><span class="line">    <span class="comment">//爬取数据</span></span><br><span class="line">    <span class="comment">//const data = await theatersCrawler();</span></span><br><span class="line">    <span class="comment">//将爬取的数据保存到数据库中</span></span><br><span class="line">    <span class="comment">//await saveTheaters(data);</span></span><br><span class="line">    <span class="comment">//上传图片到七牛中</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">uploadToQiniu</span>();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>运行server文件夹下的index.js文件</p><p>nanoid库:生成唯一key值<br>下载: <code>npm i nanoid -D</code></p><p>修改reply.js回复热门下面的picUrl为:</p><p>picUrl: <code>http://r6v3vcdm2.hn-bkt.clouddn.com/$&#123;item.posterKey&#125;</code>,</p><h3 id="爬取预告片电影数据"><a href="#爬取预告片电影数据" class="headerlink" title="爬取预告片电影数据"></a>爬取预告片电影数据</h3><p>跟之前爬取热门电影一样,我们先在server文件夹下的crawler文件夹下新建trailersCrawler.js文件用来爬取预告片电影数据</p><p>trailersCrawler.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取热门电影信息</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://movie.douban.com/coming&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//1.打开浏览器</span></span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">        <span class="comment">// args: [&#x27;--no-sandbox&#x27;],</span></span><br><span class="line">        <span class="attr">headless</span>: <span class="literal">true</span> <span class="comment">//以无头浏览器形式打开浏览器,没有界面显示,在后台运行的8</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//2.创建tab标签页</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">    <span class="comment">//3.跳转到指定网址</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">        <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> <span class="comment">//等待网络空闲时再跳转加载页面</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//4.等待网址加载完成,开始爬取数据</span></span><br><span class="line">    <span class="comment">//开启延时器,延时2秒钟开始爬取数据</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">timeout</span>();</span><br><span class="line">    <span class="comment">//一、爬取所有预告片详情页面网址</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//对加载好的页面进行dom操作</span></span><br><span class="line">        <span class="comment">//所有爬取的数据数组</span></span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="comment">//获取所有即将上映电影</span></span><br><span class="line">        <span class="keyword">const</span> $trs = $(<span class="string">&#x27;.coming_list&gt;tbody&gt;tr&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $trs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> trDom = $trs[i];</span><br><span class="line">            <span class="comment">//获取想看的人数</span></span><br><span class="line">            <span class="keyword">let</span> num = <span class="built_in">parseInt</span>($(trDom).<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">last</span>().<span class="title function_">html</span>());</span><br><span class="line">            <span class="comment">//判断num大小</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                <span class="comment">//想看人数大于1000才叫好</span></span><br><span class="line">                <span class="comment">//电影详情页面</span></span><br><span class="line">                <span class="keyword">let</span> href = $(trDom).<span class="title function_">find</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">                result.<span class="title function_">push</span>(href);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将爬取的数据返回出去</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//console.log(result);</span></span><br><span class="line">    <span class="comment">//所有电影数据的数组</span></span><br><span class="line">    <span class="keyword">let</span> moviesData = [];</span><br><span class="line">    <span class="comment">//二、爬取主要的数据</span></span><br><span class="line">    <span class="comment">//遍历爬取到的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//获取电影详情网址</span></span><br><span class="line">        <span class="keyword">let</span> url = result[i];</span><br><span class="line">        <span class="comment">//跳转到电影详情页</span></span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">            <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> <span class="comment">//等待网络空闲时再跳转加载页面</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//爬取其他数据</span></span><br><span class="line">        <span class="keyword">let</span> itemResult = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//预告片电影网址</span></span><br><span class="line">            <span class="keyword">const</span> href = $(<span class="string">&#x27;.related-pic-video&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!href) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//标题</span></span><br><span class="line">            <span class="keyword">let</span> title = $(<span class="string">&#x27;[property=&quot;v:itemreviewed&quot;]&#x27;</span>).<span class="title function_">html</span>();</span><br><span class="line">            <span class="comment">//导演</span></span><br><span class="line">            <span class="keyword">let</span> directors = $(<span class="string">&#x27;[rel=&quot;v:directedBy&quot;]&#x27;</span>).<span class="title function_">html</span>();</span><br><span class="line">            <span class="comment">//海报图</span></span><br><span class="line">            <span class="keyword">let</span> image = $(<span class="string">&#x27;[rel=&quot;v:image&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">            <span class="comment">//豆瓣id</span></span><br><span class="line">            <span class="keyword">let</span> doubanId = $(<span class="string">&#x27;.lnk-sharing&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;share-id&#x27;</span>);</span><br><span class="line">            <span class="comment">//演员</span></span><br><span class="line">            <span class="keyword">let</span> casts = [];</span><br><span class="line">            <span class="keyword">let</span> $star = $(<span class="string">&#x27;[rel=&quot;v:starring&quot;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> length = $star.<span class="property">length</span> &gt; <span class="number">3</span> ? <span class="number">3</span> : $star.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">                casts.<span class="title function_">push</span>($star[j].<span class="property">innerText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//类型</span></span><br><span class="line">            <span class="keyword">let</span> genre = [];</span><br><span class="line">            <span class="keyword">const</span> $genre = $(<span class="string">&#x27;[property=&quot;v:genre&quot;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; $genre.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                genre.<span class="title function_">push</span>($genre[j].<span class="property">innerText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//简介</span></span><br><span class="line">            <span class="keyword">const</span> summary = $(<span class="string">&#x27;[property=&quot;v:summary&quot;]&#x27;</span>).<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="comment">//上映日期</span></span><br><span class="line">            <span class="keyword">const</span> releaseDate = $(<span class="string">&#x27;[property=&quot;v:initialReleaseDate&quot;]&#x27;</span>)[<span class="number">0</span>].<span class="property">innerText</span>;</span><br><span class="line">            <span class="comment">//片长</span></span><br><span class="line">            <span class="keyword">const</span> runTime = $(<span class="string">&#x27;[property=&quot;v:runtime&quot;]&#x27;</span>).<span class="title function_">html</span>();</span><br><span class="line">            <span class="comment">//封面图片</span></span><br><span class="line">            <span class="keyword">const</span> cover = $(<span class="string">&#x27;.related-pic-video&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;background-image&#x27;</span>);</span><br><span class="line">            <span class="comment">//给单个对象添加3个属性</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                title,</span><br><span class="line">                directors,</span><br><span class="line">                casts,</span><br><span class="line">                genre,</span><br><span class="line">                image,</span><br><span class="line">                summary,</span><br><span class="line">                releaseDate,</span><br><span class="line">                doubanId,</span><br><span class="line">                runTime,</span><br><span class="line">                href,</span><br><span class="line">                cover</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span>(itemResult)</span><br><span class="line">        &#123;</span><br><span class="line">            moviesData.<span class="title function_">push</span>(itemResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(moviesData);</span></span><br><span class="line">    <span class="comment">//三、爬取预告片电影链接</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; moviesData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = moviesData[i];</span><br><span class="line">        <span class="keyword">let</span> url = item.<span class="property">href</span>;</span><br><span class="line">        <span class="comment">//跳转到电影详情页</span></span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;</span><br><span class="line">            <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> <span class="comment">//等待网络空闲时再跳转加载页面</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//爬取其他数据</span></span><br><span class="line">        item.<span class="property">link</span> = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//电影链接</span></span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">&#x27;video&gt;source&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(moviesData);</span><br><span class="line">    <span class="comment">//5.关闭浏览器</span></span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">    <span class="keyword">return</span> moviesData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改server文件夹下的index.js文件并运行测试是否爬取到数据</p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> trailersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/trailersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTheaters = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTheaters&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uploadToQiniu = <span class="built_in">require</span>(<span class="string">&#x27;./qiniu&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="comment">//await db;</span></span><br><span class="line">    <span class="comment">//爬取数据</span></span><br><span class="line">    <span class="comment">//const data = await theatersCrawler();</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">trailersCrawler</span>();</span><br><span class="line">    <span class="comment">//将爬取的数据保存到数据库中</span></span><br><span class="line">    <span class="comment">//await saveTheaters(data);</span></span><br><span class="line">    <span class="comment">//上传图片到七牛中</span></span><br><span class="line">    <span class="comment">//await uploadToQiniu();</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>我们同样在server文件夹下的save文件夹下新建saveTrailers.js用来将爬取到的数据保存到数据库</p><p>saveTrailers.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Trailers</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Trailers</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../model/Trailers&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> data =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = data[i];</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Trailers</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: item.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">runtime</span>: item.<span class="property">runtime</span>,</span><br><span class="line">            <span class="attr">directors</span>: item.<span class="property">directors</span>,</span><br><span class="line">            <span class="attr">casts</span>: item.<span class="property">casts</span>,</span><br><span class="line">            <span class="attr">image</span>: item.<span class="property">image</span>,</span><br><span class="line">            <span class="attr">doubanId</span>: item.<span class="property">doubanId</span>,</span><br><span class="line">            <span class="attr">cover</span>: item.<span class="property">cover</span>,</span><br><span class="line">            <span class="attr">genre</span>: item.<span class="property">genre</span>,</span><br><span class="line">            <span class="attr">summary</span>: item.<span class="property">summary</span>,</span><br><span class="line">            <span class="attr">releaseDate</span>: item.<span class="property">releaseDate</span>,</span><br><span class="line">            <span class="attr">link</span>: item.<span class="property">link</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据保存成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Trailers.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//获取Schema</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;</span><br><span class="line"><span class="comment">//创建约束对象</span></span><br><span class="line"><span class="keyword">const</span> trailersSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">runtime</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">directors</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">casts</span>: [<span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">image</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">doubanId</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">unique</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">genre</span>: [<span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">cover</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">summary</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">releaseDate</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">link</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">posterKey</span>: <span class="title class_">String</span>,<span class="comment">//图片上传到七牛中返回的key值</span></span><br><span class="line">    <span class="attr">coverKey</span>: <span class="title class_">String</span>,<span class="comment">//视频封面图</span></span><br><span class="line">    <span class="attr">videoKey</span>: <span class="title class_">String</span>,<span class="comment">//预告片</span></span><br><span class="line">    <span class="attr">createTime</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建模型对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Trailers</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Trailers&#x27;</span>, trailersSchema);</span><br><span class="line"><span class="comment">//暴露出去</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Trailers</span>;</span><br></pre></td></tr></table></figure></p><p>修改server文件夹下的index.js文件并运行测试保存数据是否成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> trailersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/trailersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTheaters = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTheaters&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTrailers = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTrailers&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uploadToQiniu = <span class="built_in">require</span>(<span class="string">&#x27;./qiniu&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">await</span> db;</span><br><span class="line">    <span class="comment">//爬取数据</span></span><br><span class="line">    <span class="comment">//const data = await theatersCrawler();</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">trailersCrawler</span>();</span><br><span class="line">    <span class="comment">//将爬取的数据保存到数据库中</span></span><br><span class="line">    <span class="comment">//await saveTheaters(data);</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">saveTrailers</span>(data);</span><br><span class="line">    <span class="comment">//上传图片到七牛中</span></span><br><span class="line">    <span class="comment">//await uploadToQiniu();</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>打开数据库即可查看</p><h3 id="重新定义上传七牛的方法"><a href="#重新定义上传七牛的方法" class="headerlink" title="重新定义上传七牛的方法"></a>重新定义上传七牛的方法</h3><p>修改server文件夹下的qiniu文件夹下的index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将数据库中的图片上传到七牛</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//上传图片到七牛方法</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">require</span>(<span class="string">&#x27;./upload&#x27;</span>);</span><br><span class="line"><span class="comment">//生成唯一的key值</span></span><br><span class="line"><span class="keyword">const</span> &#123;nanoid&#125; = <span class="built_in">require</span>(<span class="string">&#x27;nanoid&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (key, <span class="title class_">Model</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取数据库中的图片链接</span></span><br><span class="line"><span class="comment">    2.上传到七牛</span></span><br><span class="line"><span class="comment">    3.保存key值到数据库中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//去数据库中所有没有上传图片的文档对象</span></span><br><span class="line">    <span class="comment">//const movies = await Model.find(&#123;posterKey: &#123;$in: [&#x27;&#x27;, null, &#123;$exists: false&#125;]&#125;&#125;)</span></span><br><span class="line">    <span class="keyword">const</span> movies = <span class="keyword">await</span> <span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">        <span class="attr">$or</span>: [</span><br><span class="line">            &#123;[key]: <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">            &#123;[key]: <span class="literal">null</span>&#125;,</span><br><span class="line">            &#123;[key]: &#123;<span class="attr">$exists</span>: <span class="literal">false</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历每一条数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; movies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//获取每一个文档对象</span></span><br><span class="line">        <span class="keyword">let</span> movie = movies[i];</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">let</span> url = movie.<span class="property">image</span>;</span><br><span class="line">        <span class="keyword">let</span> filename = <span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;coverKey&#x27;</span>) &#123;</span><br><span class="line">            url = movie.<span class="property">cover</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&#x27;videoKey&#x27;</span>) &#123;</span><br><span class="line">            url = movie.<span class="property">link</span>;</span><br><span class="line">            filename = <span class="string">&#x27;.mp4&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//文件名</span></span><br><span class="line">        filename = <span class="string">`<span class="subst">$&#123;nanoid(<span class="number">10</span>)&#125;</span><span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line">        <span class="comment">//上传到七牛中</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">upload</span>(url, filename);</span><br><span class="line">        <span class="comment">//保存key值到数据库中</span></span><br><span class="line">        movie[key] = filename;</span><br><span class="line">        <span class="keyword">await</span> movie.<span class="title function_">save</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改server文件夹下的index.js文件并运行测试上传七牛是否成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> theatersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/theatersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> trailersCrawler = <span class="built_in">require</span>(<span class="string">&#x27;./crawler/trailersCrawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTheaters = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTheaters&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> saveTrailers = <span class="built_in">require</span>(<span class="string">&#x27;./save/saveTrailers&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uploadToQiniu = <span class="built_in">require</span>(<span class="string">&#x27;./qiniu&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Theaters</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/Theaters&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Trailers</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/Trailers&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">await</span> db;</span><br><span class="line">    <span class="comment">//爬取数据</span></span><br><span class="line">    <span class="comment">//const data = await theatersCrawler();</span></span><br><span class="line">    <span class="comment">//const data = await trailersCrawler();</span></span><br><span class="line">    <span class="comment">//将爬取的数据保存到数据库中</span></span><br><span class="line">    <span class="comment">//await saveTheaters(data);</span></span><br><span class="line">    <span class="comment">//await saveTrailers(data);</span></span><br><span class="line">    <span class="comment">//上传图片到七牛中</span></span><br><span class="line">    <span class="comment">//await uploadToQiniu(&#x27;posterKey&#x27;, Theaters);</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">uploadToQiniu</span>(<span class="string">&#x27;coverKey&#x27;</span>, <span class="title class_">Trailers</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">uploadToQiniu</span>(<span class="string">&#x27;posterKey&#x27;</span>, <span class="title class_">Trailers</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">uploadToQiniu</span>(<span class="string">&#x27;videoKey&#x27;</span>, <span class="title class_">Trailers</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="搭建预告片静态页面"><a href="#搭建预告片静态页面" class="headerlink" title="搭建预告片静态页面"></a>搭建预告片静态页面</h3><p>可自行搭建movie.html</p><h3 id="搭建预告片ejs页面"><a href="#搭建预告片ejs页面" class="headerlink" title="搭建预告片ejs页面"></a>搭建预告片ejs页面</h3><p>在router文件夹的index.js中添加电影预告片路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Trailers</span> = <span class="built_in">require</span>(<span class="string">&#x27;../model/Trailers&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//预告片页面路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/movie&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//去数据库中找到所有预告片电影数据</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">Trailers</span>.<span class="title function_">find</span>(&#123;&#125;, &#123;<span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">__v</span>: <span class="number">0</span>,<span class="attr">cover</span>:<span class="number">0</span>,<span class="attr">link</span>:<span class="number">0</span>,<span class="attr">image</span>:<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="comment">//渲染到页面上</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;movie&#x27;</span>, &#123;data&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改movie.html为movie.ejs,同之前的search.ejs修改即可</p><h3 id="预告片视频功能"><a href="#预告片视频功能" class="headerlink" title="预告片视频功能"></a>预告片视频功能</h3><p>可以使用一个叫DPlayer的库,可以去<a href="https://github.com/DIYgod/DPlayer">github</a>查看一下<br><a href="http://dplayer.js.org/guide.html#quick-start">文档</a></p><p><a href="https://www.bootcdn.cn/dplayer/">bootcdn地址</a></p><h3 id="获取media-id"><a href="#获取media-id" class="headerlink" title="获取media-id"></a>获取media-id</h3><p>我们在项目下新建media文件夹来存放素材</p><p>在utils文件夹中的api.js新增接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">temporary</span>: &#123;</span><br><span class="line">    <span class="attr">upload</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>media/upload?`</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>media/get?`</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">permanent</span>: &#123;</span><br><span class="line">    <span class="attr">uploadNews</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>material/add_news?`</span>,</span><br><span class="line">    <span class="attr">uploadImg</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>media/uploadimg?`</span>,</span><br><span class="line">    <span class="attr">uploadOthers</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>material/add_material?`</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span>material/get_material?`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上传临时素材"><a href="#上传临时素材" class="headerlink" title="上传临时素材"></a>上传临时素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/New_temporary_materials.html">官方文档</a></p><p>我们在wechat.js添加方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;createReadStream&#125;= <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//path 模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125;=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传临时素材</span></span><br><span class="line"><span class="title function_">uploadTemporaryMaterial</span>(<span class="params">type, fileName</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件绝对路径</span></span><br><span class="line">    <span class="keyword">const</span> filePath = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../media&#x27;</span>, fileName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//定义请求地址</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.temporary.upload&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">const</span> formData = &#123;</span><br><span class="line">                <span class="attr">media</span>: <span class="title function_">createReadStream</span>(filePath)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//form表单方式发送请求</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>, formData&#125;);</span><br><span class="line">            <span class="comment">//将数据返回给用户</span></span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;uploadTemporaryMaterial方法出了问题&#x27;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取临时素材"><a href="#获取临时素材" class="headerlink" title="获取临时素材"></a>获取临时素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Get_temporary_materials.html">官方文档</a></p><p>wechat.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以流的方式接收</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="comment">//fs模块 增加可写流</span></span><br><span class="line"><span class="keyword">const</span> &#123;createReadStream,createWriteStream&#125;= <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取临时素材</span></span><br><span class="line"><span class="title function_">getTemporaryMaterial</span>(<span class="params">type, mediaId, fileName</span>) &#123;</span><br><span class="line">    <span class="comment">//获取文件绝对路径</span></span><br><span class="line">    <span class="keyword">const</span> filePath = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../media&#x27;</span>, fileName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//定义请求地址</span></span><br><span class="line">            <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;api.temporary.get&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>&amp;media_id=<span class="subst">$&#123;mediaId&#125;</span>`</span>;</span><br><span class="line">            <span class="comment">//判断是否为视频文件</span></span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">&#x27;video&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//视频文件只支持http协议</span></span><br><span class="line">                url = url.<span class="title function_">replace</span>(<span class="string">&#x27;https://&#x27;</span>, <span class="string">&#x27;http://&#x27;</span>);</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//其他类型</span></span><br><span class="line">                <span class="title function_">request</span>(url)</span><br><span class="line">                    .<span class="title function_">pipe</span>(<span class="title function_">createWriteStream</span>(filePath))</span><br><span class="line">                    .<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, resolve) <span class="comment">//当文件读取完毕时 可读流自动关闭 一旦关闭触发close事件 从而调用resolve方法通知外部文件读取完毕</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;getTemporaryMaterial方法出了问题&#x27;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="上传永久素材"><a href="#上传永久素材" class="headerlink" title="上传永久素材"></a>上传永久素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Adding_Permanent_Assets.html">官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path 模块 添加join方法</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve,join&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传永久素材</span></span><br><span class="line"><span class="title function_">uploadPermanentMaterial</span>(<span class="params">type, material, body</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//请求的配置对象</span></span><br><span class="line">            <span class="keyword">let</span> options = &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//定义请求地址</span></span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">&#x27;news&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//上传图文消息</span></span><br><span class="line">                options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadNews&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                options.<span class="property">body</span> = material;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;pic&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//上传图片</span></span><br><span class="line">                options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadImg&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                options.<span class="property">formData</span> = &#123;</span><br><span class="line">                    <span class="attr">media</span>: <span class="title function_">createReadStream</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../media&#x27;</span>, material))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//其他媒体素材</span></span><br><span class="line">                options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadOthers&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>&amp;type=<span class="subst">$&#123;type&#125;</span>`</span>;</span><br><span class="line">                options.<span class="property">formData</span> = &#123;</span><br><span class="line">                    <span class="attr">media</span>: <span class="title function_">createReadStream</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../media&#x27;</span>, material))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//视频素材</span></span><br><span class="line">                <span class="keyword">if</span> (type === <span class="string">&#x27;video&#x27;</span>) &#123;</span><br><span class="line">                    options.<span class="property">body</span> = body;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(options);</span><br><span class="line">            <span class="comment">//将返回值返回出去</span></span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;uploadPermanentMaterial方法出了问题&#x27;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取永久素材"><a href="#获取永久素材" class="headerlink" title="获取永久素材"></a>获取永久素材</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Asset_Management/Getting_Permanent_Assets.html">官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取永久素材</span></span><br><span class="line"><span class="title function_">getPermanentMaterial</span>(<span class="params">type, mediaId, fileName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//定义请求地址</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;api.permanent.get&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">const</span> options = &#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, url, <span class="attr">json</span>: <span class="literal">true</span>,<span class="attr">body</span>:&#123;<span class="attr">media_id</span>:mediaId&#125;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">&#x27;video&#x27;</span>||<span class="string">&#x27;news&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(options);</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">request</span>(options)</span><br><span class="line">                    .<span class="title function_">pipe</span>(<span class="title function_">createWriteStream</span>(<span class="title function_">join</span>(__filename,<span class="string">&#x27;../media&#x27;</span>,fileName)))</span><br><span class="line">                    .<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, resolve)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;getPermanentMaterial方法出了问题&#x27;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装上传素材函数"><a href="#封装上传素材函数" class="headerlink" title="封装上传素材函数"></a>封装上传素材函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上传素材</span></span><br><span class="line"><span class="title function_">uploadMaterial</span>(<span class="params">type, material, body, isPermanent = <span class="literal">true</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取access_token</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchAccessToken</span>();</span><br><span class="line">            <span class="comment">//请求的配置对象</span></span><br><span class="line">            <span class="keyword">let</span> options = &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">json</span>: <span class="literal">true</span>,</span><br><span class="line">                formData : &#123;</span><br><span class="line">                    <span class="attr">media</span>: <span class="title function_">createReadStream</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../media&#x27;</span>, material))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPermanent) &#123;</span><br><span class="line">                <span class="comment">//永久素材</span></span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                <span class="keyword">if</span> (type === <span class="string">&#x27;news&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//上传图文消息</span></span><br><span class="line">                    options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadNews&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                    options.<span class="property">body</span> = material;</span><br><span class="line">                    options.<span class="property">formData</span> = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;pic&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//上传图片</span></span><br><span class="line">                    options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadImg&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//其他媒体素材</span></span><br><span class="line">                    options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.permanent.uploadOthers&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>&amp;type=<span class="subst">$&#123;type&#125;</span>`</span>;</span><br><span class="line">                    <span class="comment">//视频素材</span></span><br><span class="line">                    <span class="keyword">if</span> (type === <span class="string">&#x27;video&#x27;</span>) &#123;</span><br><span class="line">                        options.<span class="property">body</span> = body;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//临时素材</span></span><br><span class="line">                <span class="comment">//定义请求地址</span></span><br><span class="line">                options.<span class="property">url</span> = <span class="string">`<span class="subst">$&#123;api.temporary.upload&#125;</span>access_token=<span class="subst">$&#123;data.access_token&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">rp</span>(options);</span><br><span class="line">            <span class="comment">//将返回值返回出去</span></span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;uploadPermanentMaterial方法出了问题&#x27;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/posts/2eec1551.html"/>
      <url>/posts/2eec1551.html</url>
      
        <content type="html"><![CDATA[<h1 id="认识Web"><a href="#认识Web" class="headerlink" title="认识Web"></a>认识Web</h1><h2 id="1-网页"><a href="#1-网页" class="headerlink" title="1 网页"></a>1 网页</h2><p>网页主要由文字、图像和超链接等元素构成。当然,除了这些元素,网页中还可以包含音频、视频以及Flash等。</p><p>那么网页是如何形成的呢？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/web.png" alt=""></p><h2 id="2-浏览器"><a href="#2-浏览器" class="headerlink" title="2 浏览器"></a>2 浏览器</h2><blockquote><p>浏览器是网页显示、运行的平台,常用的浏览器有IE、火狐(Firefox)、谷歌(Chrome)、Safari和Opera等。我们平时称为五大浏览器。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/b.png" alt=""></p><h5 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h5><div class="table-container"><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>可惜这几年已经没落了,打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td>Safari</td><td>webkit</td><td>现在很多人错误地把 webkit 叫做 chrome内核(即使 chrome内核已经是 blink 了)。苹果感觉像被别人抢了媳妇,都哭晕再厕所里面了。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎(即浏览器核心),内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>现在跟随chrome用blink内核。</td></tr></tbody></table></div><h2 id="3-Web标准-重点"><a href="#3-Web标准-重点" class="headerlink" title="3 Web标准(重点)"></a>3 Web标准(重点)</h2><p>目标</p><ul><li>记忆<ul><li>能说出网页 中 web 标准三层组成</li></ul></li><li>理解<ul><li>能结合人来表述web标准三层</li></ul></li></ul><p>Web标准不是某一个标准,而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p><p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后,至今已发布近百项相关万维网的标准,对万维网发展做出了杰出的贡献。</p><h3 id="3-1-Web-标准的好处"><a href="#3-1-Web-标准的好处" class="headerlink" title="3.1 Web 标准的好处"></a>3.1 Web 标准的好处</h3><p>遵循web标准可以让不同我们写的页面更标准更统一外,还有许多优点</p><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h3 id="3-2-Web-标准构成"><a href="#3-2-Web-标准构成" class="headerlink" title="3.2 Web 标准构成"></a>3.2 Web 标准构成</h3><p><strong>构成：</strong> 主要包括结构(Structure)、表现(Presentation)和行为(Behavior)三个方面。</p><div class="table-container"><table><thead><tr><th style="text-align:left">标准</th><th style="text-align:left">说明</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">结构</td><td style="text-align:left">结构用于对<strong>网页元素</strong>进行整理和分类,咱们主要学的是HTML。</td><td style="text-align:left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/htmll.jpg" alt=""></td></tr><tr><td style="text-align:left">表现</td><td style="text-align:left">表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>,主要指的是CSS</td><td style="text-align:left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/css.jpg" alt=""></td></tr><tr><td style="text-align:left">行为</td><td style="text-align:left">行为是指网页模型的定义及<strong>交互</strong>的编写,咱们主要学的是 Javascript</td><td style="text-align:left"><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/search.gif" alt=""></td></tr></tbody></table></div><p> 理想状态我们的源码： .HTML .css .js </p><h5 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h5><ul><li>web标准有三层结构,分别是结构(html)、表现(css)和行为(javascript)  </li><li>结构类似人的身体, 表现类似人的着装, 行为类似人的行为动作</li><li>理想状态下,他们三层都是独立的, 放到不同的文件里面</li></ul><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="1 HTML标签"></a>1 HTML标签</h2><h3 id="1-1-HTML语法规范"><a href="#1-1-HTML语法规范" class="headerlink" title="1.1 HTML语法规范"></a>1.1 HTML语法规范</h3><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言,而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li></ul><blockquote><p>网页是由网页元素组成的 , 这些元素是利用html标签描述出来,然后通过浏览器解析,就可以显示给用户了。</p></blockquote><p><strong>所谓超文本,有2层含义：</strong> </p><ol><li>因为它可以加入图片、声音、动画、多媒体等内容(<strong>超越文本限制</strong>)</li><li>不仅如此,它还可以从一个文件跳转到另一个文件,与世界各地主机的文件连接(<strong>超级链接文本</strong>)。</li></ol><p>HTML 骨架格式：(要遵循,要专业) 要求务必非常流畅的默写下来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h5><div class="table-container"><table><thead><tr><th>标签名</th><th style="text-align:center">定义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>&lt;html&gt;&lt;/html&gt;</code></td><td style="text-align:center">HTML标签</td><td style="text-align:left">页面中最大的标签,我们成为  根标签</td></tr><tr><td><code>&lt;head&gt;&lt;/head&gt;</code></td><td style="text-align:center">文档的头部</td><td style="text-align:left">注意在head标签中我们必须要设置的标签是title</td></tr><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td style="text-align:center">文档的标题</td><td style="text-align:left">让页面拥有一个属于自己的网页标题</td></tr><tr><td><code>&lt;body&gt;&lt;/body&gt;</code></td><td style="text-align:center">文档的主体</td><td style="text-align:left">元素包含文档的所有内容,页面内容 基本都是放到body里面的</td></tr></tbody></table></div><blockquote><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p></blockquote><h3 id="1-2-HTML元素标签分类"><a href="#1-2-HTML元素标签分类" class="headerlink" title="1.2 HTML元素标签分类"></a>1.2 HTML元素标签分类</h3><p><strong>标签：</strong></p><p>在HTML页面中,带有”&lt; &gt;”符号的元素被称为HTML标签,如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。</p><p><strong>分类：</strong></p><p>1.常规元素(双标签)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span>   比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>  我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>该语法中”&lt;标签名&gt;”表示该标签的作用开始,一般称为”开始标签(start tag)”,”&lt;/标签名&gt;” 表示该标签的作用结束,一般称为”结束标签(end tag)”。</li><li>和开始标签相比,结束标签只是在前面加了一个关闭符”/“。</li><li>我们以后接触的基本都是双标签</li></ul><p>2.空元素(单标签)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span>  比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>空元素 用单标签来表示, 简单点说,就是里面不需要包含内容, 只有一个开始标签不需要关闭。</li><li>这种单身狗标签非常少,一共没多少,我们多记忆就好</li></ul><h3 id="1-3-HTML标签关系"><a href="#1-3-HTML标签关系" class="headerlink" title="1.3 HTML标签关系"></a>1.3 HTML标签关系</h3><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：  </p><p>1.嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-代码开发工具"><a href="#1-4-代码开发工具" class="headerlink" title="1.4 代码开发工具"></a>1.4 代码开发工具</h3><ul><li>为了提高我们的开发效率</li><li>减少代码的出错我们不提倡用记事本开发</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/s.png" alt=""></p><ul><li>Dreamweaver</li><li>SublimeText</li><li>WebStorm</li><li>HBuilder</li><li>VScode</li></ul><p>推荐使用VScode</p><p>新建文件(Ctrl+N)后,保存(Ctrl+S)为.html为后缀名的文件(网页文件)</p><p>生成html骨架:输入一个<code>!</code>号,按下Tab键</p><p>利用插件在浏览器中预览页面:单击鼠标右键,在弹出的窗口中选择”Open In Default Browser”</p><h5 id="VScode插件推荐"><a href="#VScode插件推荐" class="headerlink" title="VScode插件推荐"></a>VScode插件推荐</h5><ul><li>open in browser</li><li>Chinese(simplified)</li><li>CSS Peek</li><li>Auto Rename Tag</li><li>JS-CSS-HTML Formatter</li></ul><p>点击拓展安装:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/扩展.png" alt=""></p><p>在里面搜索想要安装的插件,点击<code>install</code>,安装后记得重启VScode</p><h3 id="1-5-文档类型-lt-DOCTYPE-gt"><a href="#1-5-文档类型-lt-DOCTYPE-gt" class="headerlink" title="1.5 文档类型&lt;!DOCTYPE&gt;"></a>1.5 文档类型&lt;!DOCTYPE&gt;</h3><p><strong>用法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面的位置,处于 <code>&lt;html&gt;</code> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p><p>   <code>&lt;!DOCTYPE html&gt;</code>  就是告诉浏览器按照HTML5 规范解析页面.</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML文件必须加上 DOCTYPE 声明,并统一使用 HTML5 的文档声明</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-6-页面语言lang"><a href="#1-6-页面语言lang" class="headerlink" title="1.6 页面语言lang"></a>1.6 页面语言lang</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  指定html 语言种类</span><br></pre></td></tr></table></figure><p>最常见的2个：</p><ol><li><code>en</code>定义语言为英语</li><li><code>zh-CN</code>定义语言为中文</li></ol><blockquote><p><code>&lt;html lang=&quot;zh-CN&quot;&gt;</code>  指定该html标签 内容 所用的语言为中文<br>考虑浏览器和操作系统的兼容性,目前仍然使用 zh-CN 属性值</p></blockquote><p>简单来说,可能对于程序来说没有太大的作用,但是它可以告诉浏览器,搜索引擎,一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。<br>比如可以</p><ul><li>根据根据lang属性来设定不同语言的css样式,或者字体</li><li>告诉搜索引擎做精确的识别</li><li>让语法检查程序做语言识别</li><li>帮助翻译工具做识别</li><li>帮助网页阅读程序做识别<br>等等</li></ul><h3 id="1-7-字符集"><a href="#1-7-字符集" class="headerlink" title="1.7 字符集"></a>1.7 字符集</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符集(Character set)是多个字符的集合。</span><br><span class="line"></span><br><span class="line">计算机要准确的处理各种字符集文字,需要进行字符编码,以便计算机能够识别和存储各种文字。</span><br></pre></td></tr></table></figure><p>utf-8是目前最常用的字符集编码方式,常用的字符集编码方式还有gbk和gb2312。</p><ul><li>gb2312 简单中文  包括6763个汉字  GUO BIAO</li><li>BIG5   繁体中文 港澳台等用</li><li>GBK包含全部中文字符    是GB2312的扩展,加入对繁体字的支持,兼容GB2312</li><li>UTF-8则基本包含全世界所有国家需要用到的字符</li><li><strong>这句代码非常关键, 是必须要写的代码,否则可能引起乱码的情况。</strong></li></ul><blockquote><p>这句话是让 html 文件是以 UTF-8 编码保存的, 浏览器根据编码去解码对应的html内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般情况下统一使用 &quot;UTF-8&quot; 编码, 请尽量统一写成标准的 &quot;UTF-8&quot;,不要写成 &quot;utf-8&quot; 或 &quot;utf8&quot; 或 &quot;UTF8&quot;。</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-8-HTML常用标签"><a href="#1-8-HTML常用标签" class="headerlink" title="1.8 HTML常用标签"></a>1.8 HTML常用标签</h3><h4 id="1-8-1-排版标签"><a href="#1-8-1-排版标签" class="headerlink" title="1.8.1 排版标签"></a>1.8.1 排版标签</h4><p>排版标签主要和css搭配使用,显示网页结构的标签,是网页布局最常用的标签。</p><h5 id="1-标题标签h-熟记"><a href="#1-标题标签h-熟记" class="headerlink" title="1) 标题标签h (熟记)"></a>1) 标题标签h (熟记)</h5><p> 单词缩写：  head   头部. 标题       title  文档标题</p><p>为了使网页更具有语义化,我们经常会在页面中用到标题标签,HTML提供了6个等级的标题,即</p><p><strong>标题标签语义：</strong>  作为标题使用,并且依据重要性递减</p><p>其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p> <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/h.png" alt=""></p><p><strong>小结 :</strong></p><ul><li>加了标题的文字会变的加粗,字号也会依次变大</li><li>一行是只能放一个标题的</li></ul><h5 id="2-段落标签p-熟记"><a href="#2-段落标签p-熟记" class="headerlink" title="2) 段落标签p (熟记)"></a>2) 段落标签p (熟记)</h5><p>单词缩写：  paragraph  段落</p><p><strong>作用语义：</strong></p><p>可以把 HTML 文档分割为若干段落</p><p> 在网页中要把文字有条理地显示出来,离不开段落标签,就如同我们平常写文章一样,整个网页也可以分为若干个段落,而段落的标签就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签,默认情况下,文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h5 id="3-水平线标签hr-认识"><a href="#3-水平线标签hr-认识" class="headerlink" title="3) 水平线标签hr (认识)"></a>3) 水平线标签hr (认识)</h5><p>单词缩写：  horizontal  横线</p><p>在网页中常常看到一些水平线将段落与段落之间隔开,使得文档结构清晰,层次分明。这些水平线可以通过插入图片实现,也可以简单地通过标签来完成,<code>&lt;hr /&gt;</code>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p>在网页中显示默认样式的水平线。</p><h5 id="4-换行标签br-熟记"><a href="#4-换行标签br-熟记" class="headerlink" title="4)换行标签br (熟记)"></a>4)换行标签br (熟记)</h5><p>单词缩写：  break   打断 ,换行</p><p>在HTML中,一个段落中的文字会从左到右依次排列,直到浏览器窗口的右端,然后自动换行。如果希望某段文本强制换行显示,就需要使用换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-div-和-span标签-重点"><a href="#5-div-和-span标签-重点" class="headerlink" title="5) div 和 span标签(重点)"></a>5) div 和 span标签(重点)</h5><p>div span 是没有语义的 是我们网页布局主要的2个盒子 想必你听过 css+div</p><p>div 就是 division 的缩写 分割,分区的意思  其实有很多div 来组合网页。</p><p>span 跨度,跨距;范围    </p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他们两个都是盒子,用来装我们网页元素的, 只不过他们有区别,现在我们主要记住使用方法和特点就好了</p><ul><li>div标签  用来布局的,但是现在一行只能放一个div</li><li>span标签  用来布局的,一行上可以放好多个span</li></ul><h5 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h5><div class="table-container"><table><thead><tr><th>标签名</th><th style="text-align:left">定义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>&lt;hx&gt;&lt;/hx&gt;</code></td><td style="text-align:left">标题标签</td><td style="text-align:left">作为标题使用,并且依据重要性递减</td></tr><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td style="text-align:left">段落标签</td><td style="text-align:left">可以把 HTML 文档分割为若干段落</td></tr><tr><td><code>&lt;hr /&gt;</code></td><td style="text-align:left">水平线标签</td><td style="text-align:left">没啥可说的,就是一条线</td></tr><tr><td><code>&lt;br /&gt;</code></td><td style="text-align:left">换行标签</td><td style="text-align:left"></td></tr><tr><td><code>&lt;div&gt;&lt;/div&gt;</code></td><td style="text-align:left">div标签</td><td style="text-align:left">用来布局的,但是现在一行只能放一个div</td></tr><tr><td><code>&lt;span&gt;&lt;/span&gt;</code></td><td style="text-align:left">span标签</td><td style="text-align:left">用来布局的,一行上可以放好多个span</td></tr></tbody></table></div><h4 id="1-8-2-文本格式化标签-熟记"><a href="#1-8-2-文本格式化标签-熟记" class="headerlink" title="1.8.2 文本格式化标签(熟记)"></a>1.8.2 文本格式化标签(熟记)</h4><p>在网页中,有时需要为文字设置粗体、斜体或下划线效果,这时就需要用到HTML中的文本格式化标签,使文字以特殊的方式显示。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tab.png" alt=""></p><h4 id="1-8-3-标签属性"><a href="#1-8-3-标签属性" class="headerlink" title="1.8.3 标签属性"></a>1.8.3 标签属性</h4><p>使用HTML制作网页时,如果想让HTML标签提供更多的信息,可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">属性1</span>=<span class="string">&quot;属性值1&quot;</span> <span class="attr">属性2</span>=<span class="string">&quot;属性值2&quot;</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">手机</span> <span class="attr">颜色</span>=<span class="string">&quot;红色&quot;</span> <span class="attr">大小</span>=<span class="string">&quot;5寸&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">手机</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-8-4-图像标签img-重点"><a href="#1-8-4-图像标签img-重点" class="headerlink" title="1.8.4 图像标签img (重点)"></a>1.8.4 图像标签img (重点)</h4><p>单词缩写： image  图像</p><p>要想在网页中显示图像就需要使用图像标签,接下来将详细介绍图像标签<code>&lt;img /&gt;</code>以及和他相关的属性。</p><p>语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中src属性用于指定图像文件的路径和文件名,他是img标签的必需属性。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/img.png" alt=""></p><p>border 后面我们会用css来做</p><p><strong>注意:</strong></p><ol><li>标签可以拥有多个属性,必须写在开始标签中,位于标签名后面。</li><li>属性之间不分先后顺序,标签名与属性、属性与属性之间均以空格分开。</li><li>采取  键值对 的格式   key=”value”  的格式  </li></ol><p>比如:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">正常的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;cz.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   带有边框的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;cz.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有提示文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;cz.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是个小蒲公英&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有替换文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;cz.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片不存在&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重点掌握点：</strong></p><ul><li>[ ] 请说出 图像标签那个属性是必须要写的？</li><li>[ ] 请说出 图像标签中 alt 和  title 属性区别？ </li></ul><h4 id="1-8-5-链接标签-重点"><a href="#1-8-5-链接标签-重点" class="headerlink" title="1.8.5 链接标签(重点)"></a>1.8.5 链接标签(重点)</h4><p>单词缩写：  anchor 的缩写</p><p>在HTML中创建超链接非常简单,只需用标签把文字包括起来就好。</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>href</td><td style="text-align:left">用于指定链接目标的url地址,(必须属性)当为标签应用href属性时,它就具有了超链接的功能</td></tr><tr><td>target</td><td style="text-align:left">用于指定链接页面的打开方式,其取值有_self和_blank两种,其中_self为默认值,__blank为在新窗口中打开方式。</td></tr></tbody></table></div><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// www.baidu.com</li><li>内部链接 直接链接内部页面名称即可 比如 <code>&lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a &gt;</code></li><li>如果当时没有确定链接目标时,通常将链接标签的href属性值定义为”#”(即href=”#”),表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接,在网页中各种网页元素,如图像、表格、音频、视频等都可以添加超链接。</li></ol><p><strong>重点掌握点：</strong></p><ul><li>[ ] 请说出 链接标签那个属性是必须要写的？  </li><li>[ ] 请说出 如何新窗口打开这个一个链接网页的？ </li></ul><h4 id="1-8-6-注释标签"><a href="#1-8-6-注释标签" class="headerlink" title="1.8.6 注释标签"></a>1.8.6 注释标签</h4><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字,就需要使用注释标签。</p><p>简单解释：</p><p>注释内容不会显示在浏览器窗口中,但是作为HTML文档内容的一部分,也会被下载到用户的计算机上,查看源代码时就可以看到。</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>     快捷键是：    ctrl + /       或者 ctrl +shift + / </span><br></pre></td></tr></table></figure><p>注释重要性：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zs.png" alt=""></p><blockquote><p>注释是给人看的,目的是为了更好的解释这部分代码是干啥的, 程序是不执行这个代码的</p></blockquote><p>一般用于简单的描述,如某些状态描述、属性描述等</p><p>注释内容前后各一个空格字符,注释位于要注释代码的上面,单独占一行</p><p><em>推荐：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Comment Text --&gt;</span><br><span class="line">&lt;div&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;...&lt;/div&gt;&lt;!-- Comment Text --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&lt;!-- Comment Text --&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="1-9-路径-重点、难点"><a href="#1-9-路径-重点、难点" class="headerlink" title="1.9 路径(重点、难点)"></a>1.9 路径(重点、难点)</h3><p>实际工作中,我们的文件不能随便乱放,否则用起来很难快速的找到他们,因此我们需要一个文件夹来管理他们。</p><p><strong>目录文件夹：</strong></p><p>就是普通文件夹,里面只不过存放了我们做页面所需要的 相关素材,比如 html文件, 图片 等等。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/g.png" alt=""></p><p><strong>根目录</strong>  </p><p>打开目录文件夹的第一层  就是 根目录 </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gg.png" alt=""></p><p>页面中的图片会非常多, 通常我们再新建一个文件夹专门用于存放图像文件(images),这时再插入图像,就需要采用”路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径</p><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>以引用文件之网页所在位置为参考基础,而建立出的目录路径。因此,当保存于不同目录的网页引用同一个文件时,所使用的路径将不相同,故称之为相对路径。</p><div class="table-container"><table><thead><tr><th>路径分类</th><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>同一级路径</td><td style="text-align:center"></td><td style="text-align:left">只需输入图像文件的名称即可,如&lt;img src=”baidu.gif” /&gt;。<img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/04路径同目录.jpg" alt=""></td></tr><tr><td>下一级路径</td><td style="text-align:center">“/“</td><td style="text-align:left">图像文件位于HTML文件同级文件夹下(例如文件夹名称为：images)                         如&lt;img src=”images/baidu.gif” /&gt;。  <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05路径不同.jpg" alt=""></td></tr><tr><td>上一级路径</td><td style="text-align:center">“../“</td><td style="text-align:left">在文件名之前加入”../“ ,如果是上两级,则需要使用 “../ ../“,以此类推,                    如&lt;img src=”../baidu.gif” /&gt;。 <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/06路径不同.jpg" alt=""></td></tr></tbody></table></div><blockquote><p>相对路径,是从代码所在的这个文件出发, 去寻找我们的目标文件的,而 我们所说的 上一级 下一级 同一级  简单说,就是 图片 位于 HTML 页面的位置</p></blockquote><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对,意指当所有网页引用同一个文件时,所使用的路径都是一样的。</p><p>“D:\web\img\logo.gif”,或完整的网络地址,例如”<a href="http://www.baidu.cn/images/logo.gif&quot;。">http://www.baidu.cn/images/logo.gif&quot;。</a></p><p><strong>注意：</strong></p><p>绝对路径用的较少,我们理解下就可以了。 但是要注意它的写法 特别是符号 \ 并不是相对路径的  /</p><h3 id="1-10-扩展阅读"><a href="#1-10-扩展阅读" class="headerlink" title="1.10 扩展阅读"></a>1.10 扩展阅读</h3><h4 id="1-10-1-锚点定位-难点"><a href="#1-10-1-锚点定位-难点" class="headerlink" title="1.10.1 锚点定位 (难点)"></a>1.10.1 锚点定位 (难点)</h4><p>通过创建锚点链接,用户能够快速定位到目标内容。</p><p>创建锚点链接分为两步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id名&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本(被点击的) (拉关系)  我也有一个姓毕的姥爷..</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure><h4 id="1-10-2-base-标签"><a href="#1-10-2-base-标签" class="headerlink" title="1.10.2 base 标签"></a>1.10.2 base 标签</h4><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>base 可以设置整体链接的打开状态   </li><li>base 写到  <code>&lt;head&gt;  &lt;/head&gt;</code>  之间</li><li>把所有的连接 都默认添加 <code>target=&quot;_blank&quot;</code></li></ol><h4 id="1-10-3-预格式化文本pre标签"><a href="#1-10-3-预格式化文本pre标签" class="headerlink" title="1.10.3 预格式化文本pre标签"></a>1.10.3 预格式化文本pre标签</h4><blockquote><p><code>&lt;pre&gt;</code> 标签可定义预格式化的文本。<br>被包围在 <code>&lt;pre&gt;</code> 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  此例演示如何使用 pre 标签</span><br><span class="line"></span><br><span class="line">  对空行和 空格</span><br><span class="line"></span><br><span class="line">  进行控制</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>所谓的预格式化文本就是 ,按照我们预先写好的文字格式来显示页面, 保留空格和换行等。 </p></blockquote><p>有了这个标签,里面的文字,会按照我们书写的模式显示,不需要段落和换行标签了。但是,比较少用,因为不好整体控制。</p><h4 id="1-10-4-特殊字符-理解"><a href="#1-10-4-特殊字符-理解" class="headerlink" title="1.10.4 特殊字符 (理解)"></a>1.10.4 特殊字符 (理解)</h4><p> 一些特殊的符号,我们再html 里面很难或者 不方便直接 使用, 我们此时可以使用下面的替代代码。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zifu.png" alt=""></p><p><strong>虽然有很多,但是我们平时用的比较较少, 大家重点记住 空格 大于号 小于号   就可以了,剩下的回来查阅。</strong></p><p><strong>总结：</strong></p><ol><li>是以<strong>运算符</strong><code>&amp;</code>开头,以<strong>分号运算符</strong><code>;</code>结尾。</li><li>他们不是标签,而是符号。</li><li><p>HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符,浏览器会将它们作为标签解析,若要正确显示,在 HTML 源代码中使用字符实体</p><p><em>推荐：</em></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more &amp;gt;&amp;gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p> <em>不推荐：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more &gt;&gt; &lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="1-10-5-什么是XHTML"><a href="#1-10-5-什么是XHTML" class="headerlink" title="1.10.5 什么是XHTML"></a>1.10.5 什么是XHTML</h4><p>XHTML 是更严格更纯净的 HTML 代码。</p><ul><li>XHTML 指<strong>可扩展超文本标签语言</strong>(EXtensible HyperText Markup Language)。</li><li>XHTML 的目标是取代 HTML。</li><li>XHTML 与 HTML 4.01 几乎是相同的。</li><li>XHTML 是更严格更纯净的 HTML 版本。</li><li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li><li>XHTML 是一个 W3C 标准。</li></ul><h4 id="1-10-6-HTML和-XHTML之间有什么区别"><a href="#1-10-6-HTML和-XHTML之间有什么区别" class="headerlink" title="1.10.6 HTML和 XHTML之间有什么区别?"></a>1.10.6 HTML和 XHTML之间有什么区别?</h4><ul><li>XHTML 指的是可扩展超文本标记语言</li><li>XHTML 与 HTML 4.01 几乎是相同的</li><li>XHTML 是更严格更纯净的 HTML 版本</li><li>XHTML 是以 XML 应用的方式定义的 HTML</li><li>XHTML 是 2001 年 1 月发布的 W3C 推荐标准</li><li>XHTML 得到所有主流浏览器的支持</li><li>XHTML 元素是以 XML 格式编写的 HTML 元素。XHTML是严格版本的HTML,例如它要求标签必须小写,标签必须被正确关闭,标签顺序必须正确排列,对于属性都必须使用双引号等。</li></ul><h1 id="表格-table"><a href="#表格-table" class="headerlink" title="表格(table)"></a>表格(table)</h1><h2 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1 创建表格"></a>1 创建表格</h2><p>在HTML网页中,要想创建表格,就需要使用表格相关的标签。</p><p><strong>创建表格的基本语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要深刻体会表格、行、单元格他们的构成。</p><p>在上面的语法中包含基本的三对HTML标签,分别为 table、tr、td,他们是创建表格的基本标签,缺一不可,下面对他们进行具体地解释</p><ol><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行,必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格,必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中。</li><li>字母 td 指表格数据(table data),即数据单元格的内容,现在我们明白,表格最合适的地方就是用来存储数据的。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/07table基本结构.jpg" alt=""></p><p><strong>总结：</strong></p><ul><li>表格的主要目的是用来显示特殊数据的</li><li><p>一个完整的表格有表格标签(table),行标签(tr),单元格标签(td)组成,没有列的标签</p></li><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code>中只能嵌套<code>&lt;td&gt;&lt;/td&gt;</code> 类的单元格</p></li><li><code>&lt;td&gt;&lt;/td&gt;</code>标签,他就像一个容器,可以容纳所有的元素</li></ul><h2 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2 表格属性"></a>2 表格属性</h2><p>表格有部分属性我们不常用,这里重点记住 cellspacing 、 cellpadding。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tt.png" alt=""></p><p>我们经常有个说法,是三参为0,平时开发的我们这三个参数 border cellpadding cellspacing为 0</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/07table表格属性.jpg" alt=""></p><p><strong>案例1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/表格效果01.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>   <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>55<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>52<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>58<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>黎明<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>63<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3 表头单元格标签th"></a>3 表头单元格标签th</h2><ul><li>作用：<ul><li>一般表头单元格位于表格的第一行或第一列,并且文本加粗居中</li></ul></li><li>语法：<ul><li>只需用表头标签<code>&lt;th&gt;&lt;/th&gt;</code>替代相应的单元格标签<code>&lt;td&gt;&lt;/td&gt;</code>即可。 </li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/th.png" alt=""></p><p><strong>案例2：</strong></p><p>效果图</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/tht.png" alt=""></p><p>代码：</p><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>小王<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>110<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>120<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>th 也是一个单元格 只不过和普通的 td单元格不一样,它会让自己里面的文字居中且加粗</p></blockquote><h2 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4 表格标题caption"></a>4 表格标题caption</h2><p><strong>定义和用法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>caption 元素定义<strong>表格标题</strong>,通常这个标题会被居中且显示于表格之上。</li><li>caption 标签必须紧随 table 标签之后。</li><li>这个标签只存在 表格里面才有意义。</li></ol><p><strong>案例3：</strong></p><p>根据要求完成以下案例：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/pa.png" alt=""></p><h2 id="5-合并单元格-难点"><a href="#5-合并单元格-难点" class="headerlink" title="5 合并单元格(难点)"></a>5 合并单元格(难点)</h2><p>合并单元格是我们比较常用的一个操作,但是不会合并的很复杂。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/he.jpg" alt=""></p><h3 id="5-1-合并单元格2种方式"><a href="#5-1-合并单元格2种方式" class="headerlink" title="5.1 合并单元格2种方式"></a>5.1 合并单元格2种方式</h3><ul><li>跨行合并：rowspan=”合并单元格的个数”      </li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/08table合并单元格.jpg" alt=""></p><h3 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h3><blockquote><p><strong>合并的顺序我们按照先上后下先左后右的顺序</strong></p></blockquote><h3 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 先确定是跨行还是跨列合并</span><br><span class="line">2. 根据先上后下先左后右的原则找到目标单元格然后写上合并方式还有要合并的单元格数量  比如 ： &lt;td colspan=&quot;3&quot;&gt;   &lt;/td&gt;</span><br><span class="line">3. 删除多余的单元格 单元格      </span><br></pre></td></tr></table></figure><h2 id="6-总结表格"><a href="#6-总结表格" class="headerlink" title="6 总结表格"></a>6 总结表格</h2><div class="table-container"><table><thead><tr><th>标签名</th><th style="text-align:left">定义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>&lt;table&gt;&lt;/table&gt;</code></td><td style="text-align:left">表格标签</td><td style="text-align:left">就是一个四方的盒子</td></tr><tr><td><code>&lt;tr&gt;&lt;/tr&gt;</code></td><td style="text-align:left">表格行标签</td><td style="text-align:left">行标签要再table标签内部才有意义</td></tr><tr><td><code>&lt;td&gt;&lt;/td&gt;</code></td><td style="text-align:left">单元格标签</td><td style="text-align:left">单元格标签是个容器级元素,可以放任何东西</td></tr><tr><td><code>&lt;th&gt;&lt;/th&gt;</code></td><td style="text-align:left">表头单元格标签</td><td style="text-align:left">它还是一个单元格,但是里面的文字会居中且加粗</td></tr><tr><td><code>&lt;caption&gt;&lt;/caption&gt;</code></td><td style="text-align:left">表格标题标签</td><td style="text-align:left">表格的标题,跟着表格一起走,和表格居中对齐</td></tr><tr><td>clospan 和 rowspan</td><td style="text-align:left">合并属性</td><td style="text-align:left">用来合并单元格的</td></tr></tbody></table></div><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素,列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观,那是CSS 的作用。</li><li>表格的学习要求：  能手写表格结构,并且能简单合并单元格。</li></ol><h5 id="表格划分结构-了解"><a href="#表格划分结构-了解" class="headerlink" title="表格划分结构(了解)"></a>表格划分结构(了解)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于比较复杂的表格,表格的结构也就相对的复杂了,所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注, 这样更好的分清表格结构</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/thead.png" alt=""></p><p><strong>注意：</strong></p><ol><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。用来放标题之类的东西。<code>&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签！</code></li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体。放数据本体 。</li><li><code>&lt;tfoot&gt;&lt;/tfoot&gt;</code>放表格的脚注之类。</li><li>以上标签都是放到table标签中。</li></ol><h1 id="列表和表单"><a href="#列表和表单" class="headerlink" title="列表和表单"></a>列表和表单</h1><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h2><h3 id="1-1-无序列表-ul-重点"><a href="#1-1-无序列表-ul-重点" class="headerlink" title="1.1 无序列表 ul (重点)"></a>1.1 无序列表 ul (重点)</h3><p>无序列表的各个列表项之间没有顺序级别之分,是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;,直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器,可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性,放下那个样式,一会让CSS来！</span><br></pre></td></tr></table></figure><h3 id="1-2-有序列表-ol-了解"><a href="#1-2-有序列表-ol-了解" class="headerlink" title="1.2  有序列表 ol (了解)"></a>1.2  有序列表 ol (了解)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gold.png" alt=""></p><p>有序列表即为有排列顺序的列表,其各个列表项按照一定的顺序排列定义,有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p><h3 id="1-3-自定义列表-理解"><a href="#1-3-自定义列表-理解" class="headerlink" title="1.3 自定义列表(理解)"></a>1.3 自定义列表(理解)</h3><p>定义列表常用于对术语或名词进行解释和描述,定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/09自定义列表.jpg" alt=""></p><h3 id="1-4-列表总结"><a href="#1-4-列表总结" class="headerlink" title="1.4 列表总结"></a>1.4 列表总结</h3><div class="table-container"><table><thead><tr><th>标签名</th><th style="text-align:center">定义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>&lt;ul&gt;&lt;/ul&gt;</code></td><td style="text-align:center"><strong>无序标签</strong></td><td style="text-align:left">里面只能包含li    没有顺序,我们以后布局中最常用的列表</td></tr><tr><td><code>&lt;ol&gt;&lt;/ol&gt;</code></td><td style="text-align:center">有序标签</td><td style="text-align:left">里面只能包含li    有顺序, 使用情况较少</td></tr><tr><td><code>&lt;dl&gt;&lt;/dl&gt;</code></td><td style="text-align:center">自定义列表</td><td style="text-align:left">里面有2个兄弟, dt 和 dd</td></tr></tbody></table></div><p>我们现在还没有学布局,现在只要保证2个点：</p><ol><li>学会什么时候用无序列表, 学会什么时候用自定义列表</li><li>无序列表和自定义列表代码怎么写？</li><li>具体的我们刚才看的布局,等我们学了css 在来全面布局。</li></ol><h2 id="2-表单标签-掌握"><a href="#2-表单标签-掌握" class="headerlink" title="2 表单标签(掌握)"></a>2 表单标签(掌握)</h2><p>目标：</p><ul><li>能写出最常用的注册类表单</li><li>能说出input表单常见属性</li></ul><p><strong>作用：</strong></p><p>表单目的是为了收集用户信息。</p><p>在我们网页中, 我们也需要跟用户进行交互,收集用户资料,此时也需要表单。</p><blockquote><p>在HTML中,一个完整的表单通常由表单控件(也称为表单元素)、提示信息和表单域3个部分构成。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bd.png" alt=""></p><p><strong>表单控件：</strong></p><p>包含了具体的表单功能项,如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p><strong>提示信息：</strong></p><p>一个表单中通常还需要包含一些说明性的文字,提示用户进行填写和操作。</p><p><strong>表单域：</strong>  </p><p>他相当于一个容器,用来容纳所有的表单控件和提示信息,可以通过他定义处理表单数据所用程序的url地址,以及数据提交到服务器的方法。如果不定义表单域,表单中的数据就无法传送到后台服务器。</p><p>表单域是一个包含表单元素的区域</p><h3 id="2-1-input-控件-重点"><a href="#2-1-input-控件-重点" class="headerlink" title="2.1 input 控件(重点)"></a>2.1 input 控件(重点)</h3><ul><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>input 输入的意思 </li><li><code>&lt;input&gt;</code>标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li><p>除了type属性还有别的属性</p></li><li><p>常用属性：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/input.png" alt=""></p><h4 id="1-type-属性"><a href="#1-type-属性" class="headerlink" title="1 type 属性"></a>1 type 属性</h4><ul><li>这个属性通过改变值,可以决定了你属于那种input表单。</li><li>比如 type = ‘text’  就表示 文本框 可以做 用户名, 昵称等。</li><li>比如 type = ‘password’  就是表示密码框   用户输入的内容 是不可见的。</li><li>比如 type=”radio” 表示单选按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> </span><br><span class="line">密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">性  别: 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span> 女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-value属性-值"><a href="#2-value属性-值" class="headerlink" title="2 value属性 值"></a>2 value属性 值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字,就可以通过这个value 来设置。</li></ul><h4 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3 name属性"></a>3 name属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span>  </span><br></pre></td></tr></table></figure><p>name表单的名字, 这样,后台可以通过这个name属性找到这个表单。  页面中的表单很多,name主要作用就是用于区别不同的表单。</p><ul><li><p>name属性后面的值,是我们自己定义的。</p></li><li><p>radio  如果是一组,我们必须给他们命名相同的名字 name   这样就可以多个选其中的一个啦</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><ul><li>name属性,我们现在用的较少, 但是,当我们学ajax 和后台的时候,是必须的。</li></ul><h4 id="4-checked属性"><a href="#4-checked属性" class="headerlink" title="4 checked属性"></a>4 checked属性</h4><ul><li>表示默认选中状态。  较常见于 单选按钮和复选按钮。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">性    别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女 </span><br></pre></td></tr></table></figure><p>上面这个,表示就默认选中了 男 这个单选按钮</p><h4 id="5-input-属性小结"><a href="#5-input-属性小结" class="headerlink" title="5 input 属性小结"></a>5 input 属性小结</h4><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">说明</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td style="text-align:left">表单类型</td><td>用来指定不同的控件类型</td></tr><tr><td>value</td><td style="text-align:left">表单值</td><td>表单里面默认显示的文本</td></tr><tr><td>name</td><td style="text-align:left">表单名字</td><td>页面中的表单很多,name主要作用就是用于区别不同的表单。</td></tr><tr><td>checked</td><td style="text-align:left">默认选中</td><td>表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table></div><h3 id="2-2-label标签-理解"><a href="#2-2-label标签-理解" class="headerlink" title="2.2 label标签(理解)"></a>2.2 label标签(理解)</h3><p><strong>目标：</strong></p><p>label标签主要目的是为了提高用户体验。 为用户提高最优秀的服务。</p><p><strong>概念：</strong></p><p>label 标签为 input 元素定义标注(标签)。</p><p><strong>作用：</strong> </p><p> 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><p><strong>如何绑定元素呢？</strong></p><ol><li>第一种用法就是用label直接包括input表单。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span>   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   适合单个表单选择</p><ol><li>第二种用法 for 属性规定 label 与哪个表单元素绑定。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们鼠标点击 label标签里面的文字时, 光标会定位到指定的表单里面</p></blockquote><h3 id="2-3-textarea控件-文本域"><a href="#2-3-textarea控件-文本域" class="headerlink" title="2.3 textarea控件(文本域)"></a>2.3 textarea控件(文本域)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/textarea.png" alt=""></p><ul><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> &gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>作用：</p><p>通过textarea控件可以轻松地创建多行文本输入框.</p><p>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</p></li></ul><h5 id="文本框和文本域区别"><a href="#文本框和文本域区别" class="headerlink" title="文本框和文本域区别"></a>文本框和文本域区别</h5><div class="table-container"><table><thead><tr><th style="text-align:left">表单</th><th style="text-align:center">名称</th><th style="text-align:center">区别</th><th style="text-align:right">默认值显示</th><th style="text-align:right">用于场景</th></tr></thead><tbody><tr><td style="text-align:left">input type=”text”</td><td style="text-align:center">文本框</td><td style="text-align:center">只能显示一行文本</td><td style="text-align:right">单标签,通过value显示默认值</td><td style="text-align:right">用户名、昵称、密码等</td></tr><tr><td style="text-align:left">textarea</td><td style="text-align:center">文本域</td><td style="text-align:center">可以显示多行文本</td><td style="text-align:right">双标签,默认值写到标签中间</td><td style="text-align:right">留言板</td></tr></tbody></table></div><h3 id="2-4-select下拉列表"><a href="#2-4-select下拉列表" class="headerlink" title="2.4 select下拉列表"></a>2.4 select下拉列表</h3><p><strong>目的：</strong></p><p>如果有多个选项让用户选择,为了节约空间,我们可以使用select控件定义下拉列表.</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sele.png" alt=""></p><p><strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：</li></ul><ol><li><code>&lt;select&gt;</code>  中至少包含一对 option </li><li>在option 中定义selected =” selected “时,当前项即为默认选中项。</li><li>但是我们实际开发会用的比较少</li></ol><h2 id="3-form表单域"><a href="#3-form表单域" class="headerlink" title="3 form表单域"></a>3 form表单域</h2><ul><li><p>收集的用户信息怎么传递给服务器？</p><p>通过form表单域</p></li><li><p>目的：</p><p>在HTML中,form标签被用于定义表单域,以实现用户信息的收集和传递,form中的所有内容都会被提交给服务器。</p></li></ul><p><strong>语法:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td style="text-align:left">url地址</td><td>用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td>method</td><td style="text-align:left">get/post</td><td>用于设置表单数据的提交方式,其取值为get或post。</td></tr><tr><td>name</td><td style="text-align:left">名称</td><td>用于指定表单的名称,以区分同一个页面中的多个表单。</td></tr></tbody></table></div><p><strong>注意:</strong>  </p><p>每个表单都应该有自己表单域。我们现在做页面,不写看不到效果,但是 如果后面学 ajax 后台交互的时候,必须需要 form表单域。</p><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><p><em>推荐：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>不推荐：</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span>  /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> /&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-综合案例-注册页面"><a href="#4-综合案例-注册页面" class="headerlink" title="4 综合案例(注册页面)"></a>4 综合案例(注册页面)</h2><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bdd.png" alt=""></p><h2 id="5-查文档"><a href="#5-查文档" class="headerlink" title="5 查文档"></a>5 查文档</h2><p>经常查阅文档是一个非常好的学习习惯。</p><p>百度 : <a href="http://www.baidu.com">http://www.baidu.com</a></p><p>W3C :  <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/guifan.png" alt=""></p><p><a href="https://github.com/liaojie1314/web">代码</a>,仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin</title>
      <link href="/posts/73362798.html"/>
      <url>/posts/73362798.html</url>
      
        <content type="html"><![CDATA[<h3 id="Kotlin语言声明变量与内置数据类型"><a href="#Kotlin语言声明变量与内置数据类型" class="headerlink" title="Kotlin语言声明变量与内置数据类型"></a>Kotlin语言声明变量与内置数据类型</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Kotlin 语言声明变量与内置数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;Derry&quot;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可读可改    变量名     类型      值</span></span><br><span class="line"><span class="comment">        var        name  :  String = &quot;Derry&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    name = <span class="string">&quot;Lance&quot;</span></span><br><span class="line">    println(name)</span><br><span class="line">    <span class="comment">//内置数据类型</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String  字符串</span></span><br><span class="line"><span class="comment">        Char    单字符</span></span><br><span class="line"><span class="comment">        Boolean true/false</span></span><br><span class="line"><span class="comment">        Int     整型</span></span><br><span class="line"><span class="comment">        Double  小数</span></span><br><span class="line"><span class="comment">        List    集合</span></span><br><span class="line"><span class="comment">        Set     无重复的元素集合</span></span><br><span class="line"><span class="comment">        Map     键值对集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的只读变量"><a href="#Kotlin语言的只读变量" class="headerlink" title="Kotlin语言的只读变量"></a>Kotlin语言的只读变量</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//只读变量</span></span><br><span class="line">    <span class="comment">//变量永远不会被修改,建议修改为 val == 不可修改的(只读)</span></span><br><span class="line">    <span class="keyword">val</span> info :String =<span class="string">&quot;MyInfo&quot;</span></span><br><span class="line">    println(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的类型判断"><a href="#Kotlin语言的类型判断" class="headerlink" title="Kotlin语言的类型判断"></a>Kotlin语言的类型判断</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//类型判断</span></span><br><span class="line">    <span class="comment">//提示:Explicitly given type is redundant here</span></span><br><span class="line">    <span class="comment">//给定的类型在这里是多于的</span></span><br><span class="line">    <span class="keyword">val</span> info :String = <span class="string">&quot;Derry is Success&quot;</span></span><br><span class="line">    println(info)</span><br><span class="line">    <span class="keyword">val</span> age = <span class="number">98</span></span><br><span class="line">    println(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的编译时常量"><a href="#Kotlin语言的编译时常量" class="headerlink" title="Kotlin语言的编译时常量"></a>Kotlin语言的编译时常量</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> PI=<span class="number">3.14</span> <span class="comment">//定义编译时常量</span></span><br><span class="line"><span class="comment">//编译时常量只能在函数之外定义,因为如果在函数之内定义,就必须在运行时才能调用函数赋值,何来编译时常量一说</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//编译时常量 只能是常用的基本数据类型 (String,Double,Int,Float,Long,Short,Byte,Char,Boolean)</span></span><br><span class="line">    <span class="comment">//修饰符const不适用于局部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看kotlin反编译字节码"><a href="#查看kotlin反编译字节码" class="headerlink" title="查看kotlin反编译字节码"></a>查看kotlin反编译字节码</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> PI1 = <span class="number">3.1415</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> PI2 = <span class="number">3.1415</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> age = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看kotlin反编译字节码</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">&quot;Derry&quot;</span></span><br><span class="line">    <span class="keyword">val</span> sex = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="keyword">val</span> number = <span class="number">108</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tools-&gt;Kotlin-&gt;Show Kotlin Bytecode</p><h3 id="kotlin引用类型学习"><a href="#kotlin引用类型学习" class="headerlink" title="kotlin引用类型学习"></a>kotlin引用类型学习</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin引用类型学习</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">99</span><span class="comment">//引用类型</span></span><br><span class="line">    <span class="keyword">val</span> pi: <span class="built_in">Float</span> = <span class="number">3.1415f</span></span><br><span class="line">    <span class="keyword">val</span> pi2: <span class="built_in">Double</span> = <span class="number">3.1415</span></span><br><span class="line">    <span class="keyword">val</span> isOk: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="range表达式"><a href="#range表达式" class="headerlink" title="range表达式"></a>range表达式</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin range表达式</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number = <span class="number">148</span></span><br><span class="line">    <span class="comment">//range 范围 从哪里 到哪里</span></span><br><span class="line">    <span class="keyword">if</span> (number <span class="keyword">in</span> <span class="number">10.</span><span class="number">.59</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number <span class="keyword">in</span> <span class="number">0.</span><span class="number">.9</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;建议remake&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number <span class="keyword">in</span> <span class="number">60.</span><span class="number">.100</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number !<span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;不正确&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin when表达式</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> week = <span class="number">5</span></span><br><span class="line">    <span class="keyword">val</span> info = <span class="keyword">when</span> (week) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; <span class="string">&quot;星期一&quot;</span></span><br><span class="line">        <span class="number">2</span> -&gt; <span class="string">&quot;星期二&quot;</span></span><br><span class="line">        <span class="number">3</span> -&gt; <span class="string">&quot;星期三&quot;</span></span><br><span class="line">        <span class="number">4</span> -&gt; <span class="string">&quot;星期四&quot;</span></span><br><span class="line">        <span class="number">5</span> -&gt; <span class="string">&quot;星期五&quot;</span></span><br><span class="line">        <span class="number">6</span> -&gt; <span class="string">&quot;星期六&quot;</span></span><br><span class="line">        <span class="number">7</span> -&gt; <span class="string">&quot;星期天&quot;</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">&quot;错误天数&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String模版"><a href="#String模版" class="headerlink" title="String模版"></a>String模版</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin String模版</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> garden = <span class="string">&quot;黄石公园&quot;</span></span><br><span class="line">    <span class="keyword">val</span> time = <span class="number">6</span></span><br><span class="line">    println(<span class="string">&quot;今天天气很晴朗,去<span class="subst">$&#123;garden&#125;</span>玩,玩了<span class="variable">$time</span> 小时&quot;</span>)</span><br><span class="line">    <span class="comment">//kt的if是表达式,所以更灵活</span></span><br><span class="line">    <span class="keyword">val</span> isLogin = <span class="literal">true</span></span><br><span class="line">    println(<span class="string">&quot;server response result: <span class="subst">$&#123;if (isLogin) <span class="string">&quot;恭喜你登录成功&quot;</span> else <span class="string">&quot;登录失败&quot;</span>&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin语言函数头学习"><a href="#kotlin语言函数头学习" class="headerlink" title="kotlin语言函数头学习"></a>kotlin语言函数头学习</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin语言函数头学习</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    method01(<span class="number">99</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数默认为public</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">method01</span><span class="params">(age:<span class="type">Int</span>,name:<span class="type">String</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    println(<span class="string">&quot;你的姓名是<span class="variable">$name</span>,你的年龄是<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin函数参数的默认参数"><a href="#kotlin函数参数的默认参数" class="headerlink" title="kotlin函数参数的默认参数"></a>kotlin函数参数的默认参数</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    method01(<span class="string">&quot;张三&quot;</span>, <span class="number">99</span>)</span><br><span class="line">    method02(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">    method03()</span><br><span class="line">    method03(<span class="string">&quot;赵六&quot;</span>,<span class="number">89</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数默认为public</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">method01</span><span class="params">(name: <span class="type">String</span>, age: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;你的姓名是<span class="variable">$name</span>,你的年龄是<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">method02</span><span class="params">(name: <span class="type">String</span>, age: <span class="type">Int</span> = <span class="number">18</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;你的姓名是<span class="variable">$name</span>,你的年龄是<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">method03</span><span class="params">(name: <span class="type">String</span>=<span class="string">&quot;王五&quot;</span>, age: <span class="type">Int</span> = <span class="number">18</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;你的姓名是<span class="variable">$name</span>,你的年龄是<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin语言的具名函数参数"><a href="#kotlin语言的具名函数参数" class="headerlink" title="kotlin语言的具名函数参数"></a>kotlin语言的具名函数参数</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kotlin语言具名函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    loginAction(age = <span class="number">99</span>,userPassword = <span class="string">&quot;123&quot;</span>,userName = <span class="string">&quot;张三&quot;</span>,phoneNumber = <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loginAction</span><span class="params">(userName:<span class="type">String</span>,userPassword:<span class="type">String</span>,phoneNumber:<span class="type">String</span>,age:<span class="type">Int</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    println(<span class="string">&quot;userName:<span class="variable">$userName</span>,userPassword:<span class="variable">$userPassword</span>,phoneNumber:<span class="variable">$phoneNumber</span>,age:<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin语言Unit函数特点"><a href="#kotlin语言Unit函数特点" class="headerlink" title="kotlin语言Unit函数特点"></a>kotlin语言Unit函数特点</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//:Unit 默认有 </span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三个是等效的</p><h3 id="kotlin语言的Nothing类型特点"><a href="#kotlin语言的Nothing类型特点" class="headerlink" title="kotlin语言的Nothing类型特点"></a>kotlin语言的Nothing类型特点</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    show(<span class="number">99</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (number) &#123;</span><br><span class="line">        -<span class="number">1</span> -&gt; TODO(<span class="string">&quot;没有该分数&quot;</span>)</span><br><span class="line">        <span class="keyword">in</span> <span class="number">0.</span><span class="number">.59</span> -&gt; println(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">        <span class="keyword">in</span> <span class="number">60.</span><span class="number">.70</span> -&gt; println(<span class="string">&quot;一般&quot;</span>)</span><br><span class="line">        <span class="keyword">in</span> <span class="number">71.</span><span class="number">.80</span> -&gt; println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">        <span class="keyword">in</span> <span class="number">81.</span><span class="number">.100</span> -&gt; println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AImpl</span>:<span class="type">A</span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//下面这句话不是注释提示,会终止程序的</span></span><br><span class="line">        TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin语言的反引号中函数名特点"><a href="#kotlin语言的反引号中函数名特点" class="headerlink" title="kotlin语言的反引号中函数名特点"></a>kotlin语言的反引号中函数名特点</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//第一种情况:</span></span><br><span class="line">    `登录功能 <span class="number">2022</span>年<span class="number">1</span>月<span class="number">22</span>号`(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">    <span class="comment">//第二种情况 in is</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> `登录功能 2022年1月22号`<span class="params">(name:<span class="type">String</span>,pwd:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;测试:姓名:&quot;</span>+name+<span class="string">&quot; 密码:&quot;</span>+pwd)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> `7626837269`<span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//加密: 7626837269</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> len = <span class="string">&quot;Jack&quot;</span>.count()</span><br><span class="line">    println(len)</span><br><span class="line">    <span class="keyword">val</span> count = <span class="string">&quot;Jack&quot;</span>.count() &#123;</span><br><span class="line">        it == <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型和隐式返回"><a href="#函数类型和隐式返回" class="headerlink" title="函数类型和隐式返回"></a>函数类型和隐式返回</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//1.函数输入输出的声明</span></span><br><span class="line">    <span class="keyword">val</span> methodAction: () -&gt; String</span><br><span class="line">    <span class="comment">//2.实现函数</span></span><br><span class="line">    methodAction = &#123;</span><br><span class="line">        <span class="keyword">val</span> inputValue = <span class="number">999999</span></span><br><span class="line">        <span class="string">&quot;<span class="variable">$inputValue</span> Jack&quot;</span></span><br><span class="line">        <span class="comment">//匿名函数不用写return,最后一行就是返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.调用函数</span></span><br><span class="line">    println(methodAction())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fun methodAction():String&#123;</span></span><br><span class="line"><span class="comment">    return &quot;Jack&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//1.函数声明和实现</span></span><br><span class="line">    <span class="keyword">val</span> methAction: (<span class="built_in">Int</span>, <span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; String = &#123; number1, number2, number3 -&gt;</span><br><span class="line">        <span class="keyword">val</span> inputValue = <span class="number">999999</span></span><br><span class="line">        <span class="string">&quot;<span class="variable">$inputValue</span> Jack 参数1:<span class="variable">$number1</span>,参数2<span class="variable">$number2</span>,参数3:<span class="variable">$number3</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.调用函数</span></span><br><span class="line">    println(methAction(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fun methAction(number1:Int,number2: Int,number3: Int):String&#123;</span></span><br><span class="line"><span class="comment">    val inputValue = 999999</span></span><br><span class="line"><span class="comment">    return &quot;$inputValue Jack 参数1:$number1,参数2$number2,参数3:$number3&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="it关键字特点"><a href="#it关键字特点" class="headerlink" title="it关键字特点"></a>it关键字特点</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> methodAction :(<span class="built_in">Int</span>,<span class="built_in">Int</span>,<span class="built_in">Int</span>)-&gt;String =&#123; n1,n2,n3-&gt;</span><br><span class="line">        <span class="keyword">val</span> number =<span class="number">673</span>;</span><br><span class="line">        println(<span class="string">&quot;<span class="variable">$number</span> n1:<span class="variable">$n1</span>,n2:<span class="variable">$n2</span>,n3:<span class="variable">$n3</span>&quot;</span>)</span><br><span class="line">        <span class="string">&quot;<span class="variable">$number</span> n1:<span class="variable">$n1</span>,n2:<span class="variable">$n2</span>,n3:<span class="variable">$n3</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//methodAction.invoke(1,2,3)</span></span><br><span class="line">    methodAction(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> methodAction2:(String)-&gt;String=&#123;<span class="string">&quot;<span class="variable">$it</span> xxx&quot;</span>&#125;</span><br><span class="line">    println(methodAction2(<span class="string">&quot;AAAA&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> methodAction3:(<span class="built_in">Double</span>)-&gt;String =&#123;<span class="string">&quot;<span class="variable">$it</span> xxx&quot;</span>&#125;</span><br><span class="line">    println(methodAction3(<span class="number">678.67</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数的类型推断"><a href="#匿名函数的类型推断" class="headerlink" title="匿名函数的类型推断"></a>匿名函数的类型推断</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//匿名函数 类型推断为String</span></span><br><span class="line">    <span class="comment">//方法名:必须指定 参数类型和返回类型</span></span><br><span class="line">    <span class="comment">//方法名 = 类型推断返回类型</span></span><br><span class="line">    <span class="keyword">val</span> method1=&#123;v1:<span class="built_in">Double</span>,v2:<span class="built_in">Float</span>,v3:<span class="built_in">Int</span>-&gt;</span><br><span class="line">        <span class="string">&quot;v1:<span class="variable">$v1</span>,v2:<span class="variable">$v2</span>,v3:<span class="variable">$v3</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(method1(<span class="number">5687.78</span>, <span class="number">798.3f</span>, <span class="number">909</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda学习"><a href="#lambda学习" class="headerlink" title="lambda学习"></a>lambda学习</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//匿名函数 == lambda表达式</span></span><br><span class="line">    <span class="keyword">val</span> addResultMethod = &#123; number1: <span class="built_in">Int</span>, number2: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        <span class="string">&quot;俩数相加的结果是:<span class="subst">$&#123;number1 + number2&#125;</span>&quot;</span></span><br><span class="line">    &#125;<span class="comment">//addResultMethod  (Int,Int)-&gt;String</span></span><br><span class="line">    println(addResultMethod(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">val</span> weekResultMethod=&#123;number:<span class="built_in">Int</span>-&gt;</span><br><span class="line">        <span class="keyword">when</span>(number)&#123;</span><br><span class="line">            <span class="number">1</span>-&gt;<span class="string">&quot;星期一&quot;</span></span><br><span class="line">            <span class="number">2</span>-&gt;<span class="string">&quot;星期二&quot;</span></span><br><span class="line">            <span class="number">3</span>-&gt;<span class="string">&quot;星期三&quot;</span></span><br><span class="line">            <span class="number">4</span>-&gt;<span class="string">&quot;星期四&quot;</span></span><br><span class="line">            <span class="number">5</span>-&gt;<span class="string">&quot;星期五&quot;</span></span><br><span class="line">            <span class="number">6</span>-&gt;<span class="string">&quot;星期六&quot;</span></span><br><span class="line">            <span class="number">7</span>-&gt;<span class="string">&quot;星期天&quot;</span></span><br><span class="line">            <span class="keyword">else</span> -&gt;-<span class="number">1</span></span><br><span class="line">        &#125;<span class="comment">//weekResultMethod  函数: (Int)-&gt;Any</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(weekResultMethod(<span class="number">2</span>))</span><br><span class="line">    <span class="comment">//匿名函数属于lambda</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在函数中定义参数是函数的函数"><a href="#在函数中定义参数是函数的函数" class="headerlink" title="在函数中定义参数是函数的函数"></a>在函数中定义参数是函数的函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    loginAPI(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345&quot;</span>) &#123; msg: String, code: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库sql</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_NAME_SAVE_DB = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_PWD_SAVE_DB = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录API</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loginAPI</span><span class="params">(username: <span class="type">String</span>, userpwd: <span class="type">String</span>, responseResult: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span> || userpwd == <span class="literal">null</span>) &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名或密码为空&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验</span></span><br><span class="line">    <span class="keyword">if</span> (username.length &gt; <span class="number">3</span> &amp;&amp; userpwd.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (webServiceLoginAPI(username, userpwd)) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            responseResult(<span class="string">&quot;login success&quot;</span>, <span class="number">200</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            responseResult(<span class="string">&quot;login error&quot;</span>, <span class="number">404</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名和密码不合格&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">webServiceLoginAPI</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">//kotlin中if为表达式</span></span><br><span class="line">    <span class="keyword">return</span> name == USER_NAME_SAVE_DB &amp;&amp; pwd == USER_PWD_SAVE_DB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//第一种方式</span></span><br><span class="line">    loginAPI2(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345&quot;</span>, &#123; msg: String, code: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//第二种方式</span></span><br><span class="line">    loginAPI2(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345&quot;</span>, responseResult = &#123; msg: String, code: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//第三种方式(推荐)</span></span><br><span class="line">    loginAPI2(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345&quot;</span>) &#123; msg: String, code: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库sql</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_NAME_SAVE_DB2 = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_PWD_SAVE_DB2 = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录API</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loginAPI2</span><span class="params">(username: <span class="type">String</span>, userpwd: <span class="type">String</span>, responseResult: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span> || userpwd == <span class="literal">null</span>) &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名或密码为空&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验</span></span><br><span class="line">    <span class="keyword">if</span> (username.length &gt; <span class="number">3</span> &amp;&amp; userpwd.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (webServiceLoginAPI(username, userpwd)) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            responseResult(<span class="string">&quot;login success&quot;</span>, <span class="number">200</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            responseResult(<span class="string">&quot;login error&quot;</span>, <span class="number">404</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名和密码不合格&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">webServiceLoginAPI</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">//kotlin中if为表达式</span></span><br><span class="line">    <span class="keyword">return</span> name == USER_NAME_SAVE_DB2 &amp;&amp; pwd == USER_PWD_SAVE_DB2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin语言的函数内联"><a href="#kotlin语言的函数内联" class="headerlink" title="kotlin语言的函数内联"></a>kotlin语言的函数内联</h3><p>函数中使用lambda就应该使用内联 inline关键字,若函数没用使用lambda,就不需要声明成内联</p><p>如果此函数不使用内联,在调用端会生成多个对象来完成lambda的调用(性能损耗)</p><p>使用内联相当于C++ 中 #define 宏定义 宏替换 会把代码替换到调用处,调用处没有任何函数开辟,对象开辟的损耗</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> derry.s1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    loginAPI3(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;12345&quot;</span>) &#123; msg: String, code: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库sql</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_NAME_SAVE_DB3 = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_PWD_SAVE_DB3 = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录API</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">loginAPI3</span><span class="params">(username: <span class="type">String</span>, userpwd: <span class="type">String</span>, responseResult: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span> || userpwd == <span class="literal">null</span>) &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名或密码为空&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验</span></span><br><span class="line">    <span class="keyword">if</span> (username.length &gt; <span class="number">3</span> &amp;&amp; userpwd.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (webServiceLoginAPI3(username, userpwd)) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            responseResult(<span class="string">&quot;login success&quot;</span>, <span class="number">200</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            responseResult(<span class="string">&quot;login error&quot;</span>, <span class="number">404</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TODO(<span class="string">&quot;用户名和密码不合格&quot;</span>)<span class="comment">//出现问题,终止程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">webServiceLoginAPI3</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="comment">//kotlin中if为表达式</span></span><br><span class="line">    <span class="keyword">return</span> name == USER_NAME_SAVE_DB3 &amp;&amp; pwd == USER_PWD_SAVE_DB3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//函数调用</span></span><br><span class="line">    <span class="comment">//lambda属于函数类型的对象,需要将methodResponseResult普通函数变成函数类型的对象   函数引用(::)</span></span><br><span class="line"><span class="comment">//    login(&quot;admin&quot;, &quot;12345&quot;,::methodResponseResult)</span></span><br><span class="line">    <span class="keyword">val</span> obj = ::methodResponseResult</span><br><span class="line">    <span class="keyword">val</span> obj1 = obj</span><br><span class="line">    <span class="keyword">val</span> obj2 =obj1</span><br><span class="line">    login(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;12345&quot;</span>,obj2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodResponseResult</span><span class="params">(msg: <span class="type">String</span>, code: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;最终登录情况:msg:<span class="variable">$msg</span>,code:<span class="variable">$code</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库sql</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_NAME_SAVE_DB4 = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> USER_PWD_SAVE_DB4 = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录API</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>, responseResult: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (USER_NAME_SAVE_DB4 == name &amp;&amp; USER_PWD_SAVE_DB4 == pwd) &#123;</span><br><span class="line">        <span class="comment">//登录成功</span></span><br><span class="line">        responseResult(<span class="string">&quot;login success&quot;</span>, <span class="number">200</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//登录失败</span></span><br><span class="line">        responseResult(<span class="string">&quot;login error&quot;</span>, <span class="number">404</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型作为返回类型"><a href="#函数类型作为返回类型" class="headerlink" title="函数类型作为返回类型"></a>函数类型作为返回类型</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> r = show(<span class="string">&quot;kotlin&quot;</span>)</span><br><span class="line">    <span class="comment">//r 是 show 函数的返回值</span></span><br><span class="line">    <span class="keyword">val</span> showMethod_niming = showMethod(<span class="string">&quot;show&quot;</span>)<span class="comment">//返回匿名函数</span></span><br><span class="line">    println(showMethod_niming(<span class="string">&quot;程序员&quot;</span>,<span class="number">38</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">(info:<span class="type">String</span>)</span></span>:<span class="built_in">Boolean</span>&#123;</span><br><span class="line">    println(<span class="string">&quot;我是show函数 info:<span class="variable">$info</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">show2</span><span class="params">(info:<span class="type">String</span>)</span></span>:String&#123;</span><br><span class="line">    println(<span class="string">&quot;我是show函数 info:<span class="variable">$info</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;XXX&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//showMethod函数 返回一个匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showMethod</span><span class="params">(info:<span class="type">String</span>)</span></span>:(String,<span class="built_in">Int</span>)-&gt;String&#123;</span><br><span class="line">    println(<span class="string">&quot;我是show函数 info:<span class="variable">$info</span>&quot;</span>)</span><br><span class="line">    <span class="comment">//return 一个函数 匿名函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;name:String,age:<span class="built_in">Int</span> -&gt;</span><br><span class="line">        <span class="string">&quot;匿名函数 name:<span class="variable">$name</span>, age:<span class="variable">$age</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数与具名函数"><a href="#匿名函数与具名函数" class="headerlink" title="匿名函数与具名函数"></a>匿名函数与具名函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//匿名函数</span></span><br><span class="line">    showPersonInfo(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">90</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&quot;学习kotlin语言&quot;</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;显示结果:<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//具名函数</span></span><br><span class="line">    showPersonInfo(<span class="string">&quot;liSi&quot;</span>, <span class="number">67</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&quot;学习Java语言&quot;</span>, ::showResultImpl)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showResultImpl</span><span class="params">(result: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;显示结果:<span class="variable">$result</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">showPersonInfo</span><span class="params">(name: <span class="type">String</span>, age: <span class="type">Int</span>, sex: <span class="type">Char</span>, study: <span class="type">String</span>, showResult: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">&quot;name:<span class="variable">$name</span>,age:<span class="variable">$age</span>,sex:<span class="variable">$sex</span>,study:<span class="variable">$study</span>&quot;</span></span><br><span class="line">    showResult(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的可空性特点"><a href="#Kotlin语言的可空性特点" class="headerlink" title="Kotlin语言的可空性特点"></a>Kotlin语言的可空性特点</h3><p>不会出现空指针异常</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//第一种情况:默认是不可空类型,不能随意给null</span></span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="comment">//name = null 不能给空</span></span><br><span class="line">    println(name)</span><br><span class="line">    <span class="comment">//第二种情况:声明时指定为可空类型</span></span><br><span class="line">    <span class="keyword">var</span> name2: String?</span><br><span class="line">    name2 = <span class="literal">null</span></span><br><span class="line">    println(name2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的安全调用操作符"><a href="#Kotlin语言的安全调用操作符" class="headerlink" title="Kotlin语言的安全调用操作符"></a>Kotlin语言的安全调用操作符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String?=<span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    name =<span class="literal">null</span></span><br><span class="line">    <span class="comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span></span><br><span class="line">    <span class="keyword">val</span> r = name?.capitalize() <span class="comment">//name 如果是null,?后面代码不执行,不会引发空指针异常</span></span><br><span class="line">    println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Kotlin语言中使用带let的安全调用"><a href="#在Kotlin语言中使用带let的安全调用" class="headerlink" title="在Kotlin语言中使用带let的安全调用"></a>在Kotlin语言中使用带let的安全调用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name :String ?=<span class="literal">null</span></span><br><span class="line">    name = <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="comment">//name是可空类型,如果是null,?后面的代码不执行,不会发生空指针异常</span></span><br><span class="line">    <span class="keyword">var</span> r = name?.let&#123;</span><br><span class="line">        <span class="comment">//it == name 本身</span></span><br><span class="line">        <span class="comment">//如果能够执行到这里,it一定不为null</span></span><br><span class="line">        <span class="keyword">if</span>(it.isBlank())&#123;<span class="comment">//如果name是空值 &quot;&quot; 没有内容</span></span><br><span class="line">            <span class="string">&quot;Default&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="string">&quot;[<span class="variable">$it</span>]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言中的非空断言操作符特点"><a href="#Kotlin语言中的非空断言操作符特点" class="headerlink" title="Kotlin语言中的非空断言操作符特点"></a>Kotlin语言中的非空断言操作符特点</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String?=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span></span><br><span class="line">    name = <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="comment">//补救措施 ?</span></span><br><span class="line">    <span class="keyword">val</span> r = name!!.capitalize();<span class="comment">//!!不管name是不是null都执行,和java一样</span></span><br><span class="line">    println(r)</span><br><span class="line">    <span class="comment">//结论:如果100%保证name有值,那么才能使用断言!!,否则有空指针异常的风险</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言中对比使用if判断null值情况"><a href="#Kotlin语言中对比使用if判断null值情况" class="headerlink" title="Kotlin语言中对比使用if判断null值情况"></a>Kotlin语言中对比使用if判断null值情况</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">    name = <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="comment">//name.capitalize() //name 是可空类型 可能是null,想要使用name必须给出补救措施  capitalize() 首字母大写</span></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;<span class="comment">//if也算是一种补救措施</span></span><br><span class="line">        <span class="keyword">val</span> r = name.capitalize();</span><br><span class="line">        println(r)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;name is null&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言空合并操作符"><a href="#Kotlin语言空合并操作符" class="headerlink" title="Kotlin语言空合并操作符"></a>Kotlin语言空合并操作符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> info: String? = <span class="string">&quot;李小龙&quot;</span></span><br><span class="line">    <span class="comment">//info = null</span></span><br><span class="line">    <span class="comment">//空合并操作符 xxx?:&quot;xxx&quot;  如果xxx为null,执行?:后面的</span></span><br><span class="line">    println(info ?: <span class="string">&quot;info is null&quot;</span>)</span><br><span class="line">    <span class="comment">//let函数+空合并操作符</span></span><br><span class="line">    println(info?.let &#123; <span class="string">&quot;[<span class="variable">$it</span>]&quot;</span> &#125; ?: <span class="string">&quot;info is null&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言中异常处理和自定义异常特点"><a href="#Kotlin语言中异常处理和自定义异常特点" class="headerlink" title="Kotlin语言中异常处理和自定义异常特点"></a>Kotlin语言中异常处理和自定义异常特点</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.IllegalArgumentException</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> info: String? = <span class="literal">null</span></span><br><span class="line">        checkException(info)</span><br><span class="line">        println(info!!.length)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        println(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">checkException</span><span class="params">(info: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">    info ?: <span class="keyword">throw</span> CustomException()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomException</span> : <span class="type">IllegalArgumentException</span>(<span class="string">&quot;你的代码出现了问题&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言先决条件函数"><a href="#Kotlin语言先决条件函数" class="headerlink" title="Kotlin语言先决条件函数"></a>Kotlin语言先决条件函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> value1:String ?= <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> value2:<span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//checkNotNull(value1) //java.lang.IllegalStateException: Required value was null.</span></span><br><span class="line">    <span class="comment">//requireNotNull(value1)//java.lang.IllegalArgumentException: Required value was null.</span></span><br><span class="line">    <span class="comment">//require(value2)//java.lang.IllegalArgumentException: Failed requirement.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> INFO = <span class="string">&quot;Good good study,day day up!&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> indexOf = INFO.indexOf(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    println(INFO.substring(<span class="number">0</span>, indexOf))</span><br><span class="line">    println(INFO.substring(<span class="number">0</span> until indexOf))<span class="comment">//0 until indexOf(kotlin使用此方式) 等价于 0, indexOf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> jsonText = <span class="string">&quot;zhangSan,liSi,wangWu&quot;</span></span><br><span class="line">    <span class="comment">//list 自动类型推断成 list == List&lt;String&gt;</span></span><br><span class="line">    <span class="keyword">val</span> list = jsonText.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="comment">//不解构 直接输出</span></span><br><span class="line">    println(<span class="string">&quot;分割后list集合里面的元素有<span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    <span class="comment">//C++有解构 kt也有解构</span></span><br><span class="line">    <span class="keyword">val</span> (v1, v2, v3) = list</span><br><span class="line">    println(<span class="string">&quot;解构3个只读变量的值为:v1:<span class="variable">$v1</span>,v2:<span class="variable">$v2</span>,v3:<span class="variable">$v3</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的replace完成加密解密操作"><a href="#Kotlin语言的replace完成加密解密操作" class="headerlink" title="Kotlin语言的replace完成加密解密操作"></a>Kotlin语言的replace完成加密解密操作</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> sourcePwd = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">    println(<span class="string">&quot;原始密码:<span class="variable">$sourcePwd</span>&quot;</span>)</span><br><span class="line">    <span class="comment">//加密:就是把字符替换成数字 打乱 就属于加密了</span></span><br><span class="line">    <span class="keyword">val</span> newPwd = sourcePwd.replace(Regex(<span class="string">&quot;[AKMNO]&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//it.value //完全没有做任何事情</span></span><br><span class="line">        <span class="keyword">when</span>(it.value)&#123;<span class="comment">// A B C D ...</span></span><br><span class="line">            <span class="string">&quot;A&quot;</span>-&gt;<span class="string">&quot;9&quot;</span></span><br><span class="line">            <span class="string">&quot;K&quot;</span>-&gt;<span class="string">&quot;3&quot;</span></span><br><span class="line">            <span class="string">&quot;M&quot;</span>-&gt;<span class="string">&quot;5&quot;</span></span><br><span class="line">            <span class="string">&quot;N&quot;</span>-&gt;<span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="string">&quot;O&quot;</span>-&gt;<span class="string">&quot;4&quot;</span></span><br><span class="line">            <span class="keyword">else</span> -&gt;it.value<span class="comment">//返回字符本身</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;加密后:<span class="variable">$newPwd</span>&quot;</span>)</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">val</span> sourcePwdNew = newPwd.replace(Regex(<span class="string">&quot;[93514]&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">when</span>(it.value)&#123;<span class="comment">// A B C D ...</span></span><br><span class="line">            <span class="string">&quot;9&quot;</span>-&gt;<span class="string">&quot;A&quot;</span></span><br><span class="line">            <span class="string">&quot;3&quot;</span>-&gt;<span class="string">&quot;K&quot;</span></span><br><span class="line">            <span class="string">&quot;5&quot;</span>-&gt;<span class="string">&quot;M&quot;</span></span><br><span class="line">            <span class="string">&quot;1&quot;</span>-&gt;<span class="string">&quot;N&quot;</span></span><br><span class="line">            <span class="string">&quot;4&quot;</span>-&gt;<span class="string">&quot;O&quot;</span></span><br><span class="line">            <span class="keyword">else</span> -&gt;it.value<span class="comment">//返回字符本身</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;解密后:<span class="variable">$sourcePwdNew</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与-比较操作"><a href="#与-比较操作" class="headerlink" title="==与===比较操作"></a>==与===比较操作</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//== 值 内容的比较 相当于java中的equals</span></span><br><span class="line">    <span class="comment">//=== 引用的比较</span></span><br><span class="line">    <span class="keyword">val</span> name1 = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    <span class="keyword">val</span> name2 = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    <span class="keyword">val</span> name3 = <span class="string">&quot;jack&quot;</span>.capitalize()<span class="comment">// Jack</span></span><br><span class="line">    <span class="comment">//name1.equals(name2) 等价于 name1==name2 都是 值 内容的比较</span></span><br><span class="line">    println(name1.equals(name2))<span class="comment">//java写法</span></span><br><span class="line">    println(name1 == name2)<span class="comment">//kt写法</span></span><br><span class="line">    println(name1 === name2)<span class="comment">//true</span></span><br><span class="line">    println(name1 == name3)</span><br><span class="line">    println(name1 === name3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的字符串遍历操作"><a href="#Kotlin语言的字符串遍历操作" class="headerlink" title="Kotlin语言的字符串遍历操作"></a>Kotlin语言的字符串遍历操作</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">    str.forEach &#123;</span><br><span class="line">        <span class="comment">//it == str 的每一个字符 A B C D ...</span></span><br><span class="line">        print(<span class="string">&quot;<span class="variable">$it</span> &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    str.forEach &#123; c -&gt;<span class="comment">//覆盖默认的it参数名,相当于修改参数名为c</span></span><br><span class="line">        print(<span class="string">&quot;<span class="variable">$c</span> &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言中数字类型的安全转换函数"><a href="#Kotlin语言中数字类型的安全转换函数" class="headerlink" title="Kotlin语言中数字类型的安全转换函数"></a>Kotlin语言中数字类型的安全转换函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Int</span> = <span class="string">&quot;666&quot;</span>.toInt()</span><br><span class="line">    println(number)</span><br><span class="line">    <span class="keyword">val</span> number2: <span class="built_in">Int</span>? = <span class="string">&quot;666.6&quot;</span>.toIntOrNull()</span><br><span class="line">    println(number2)</span><br><span class="line">    <span class="keyword">val</span> number3: <span class="built_in">Int</span>? = <span class="string">&quot;666&quot;</span>.toIntOrNull()</span><br><span class="line">    println(number3)</span><br><span class="line">    <span class="keyword">val</span> number4: <span class="built_in">Int</span>? = <span class="string">&quot;666.6&quot;</span>.toIntOrNull()</span><br><span class="line">    println(number4 ?: <span class="string">&quot;无法转换,输出为null&quot;</span>)</span><br><span class="line">    <span class="comment">//字符串转换为整型时建议使用 toIntOrNull 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言中Double转Int与类型格式化"><a href="#Kotlin语言中Double转Int与类型格式化" class="headerlink" title="Kotlin语言中Double转Int与类型格式化"></a>Kotlin语言中Double转Int与类型格式化</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.roundToInt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="number">65.124543625</span>.toInt()) <span class="comment">//65</span></span><br><span class="line">    println(<span class="number">65.972674328</span>.toInt()) <span class="comment">//65</span></span><br><span class="line">    println(<span class="number">65.124654243</span>.roundToInt()) <span class="comment">//65</span></span><br><span class="line">    println(<span class="number">65.678937455</span>.roundToInt()) <span class="comment">//66</span></span><br><span class="line">    <span class="comment">//toInt 直接去除小数部分</span></span><br><span class="line">    <span class="comment">//roundToInt 四舍五入</span></span><br><span class="line">    <span class="comment">//r 类型为 字符串 保留3位</span></span><br><span class="line">    <span class="keyword">val</span> r = <span class="string">&quot;%.3f&quot;</span>.format(<span class="number">65.678937455</span>)</span><br><span class="line">    println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的apply内置函数"><a href="#Kotlin语言的apply内置函数" class="headerlink" title="Kotlin语言的apply内置函数"></a>Kotlin语言的apply内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> info = <span class="string">&quot;Welcome To My Class&quot;</span></span><br><span class="line">    <span class="comment">//普通的方式</span></span><br><span class="line">    println(<span class="string">&quot;info字符串的长度为:<span class="subst">$&#123;info.length&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;info最后一个字符为:<span class="subst">$&#123;info[info.length<span class="number">-1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;info全部转化小写为:<span class="subst">$&#123;info.toLowerCase()&#125;</span>&quot;</span>)</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//apply 内置函数</span></span><br><span class="line">    <span class="comment">//info.apply返回值为info本身</span></span><br><span class="line">    <span class="keyword">val</span> infoNew = info.apply &#123;</span><br><span class="line">        println(<span class="string">&quot;apply匿名函数内:<span class="subst">$&#123;this&#125;</span>&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;info字符串的长度为:<span class="subst">$&#123;length&#125;</span>&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;info最后一个字符为:<span class="subst">$&#123;info[length<span class="number">-1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;info全部转化小写为:<span class="subst">$&#123;toLowerCase()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;apply返回值:<span class="subst">$&#123;infoNew&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//apply函数真正写法:</span></span><br><span class="line">    info.apply &#123;</span><br><span class="line">        println(<span class="string">&quot;info字符串的长度为:<span class="subst">$&#123;length&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;.apply &#123;</span><br><span class="line">        println(<span class="string">&quot;info最后一个字符为:<span class="subst">$&#123;info[length<span class="number">-1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;.apply &#123;</span><br><span class="line">        println(<span class="string">&quot;info全部转化小写为:<span class="subst">$&#123;toLowerCase()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通写法</span></span><br><span class="line">    <span class="keyword">val</span> file = File(<span class="string">&quot;E:\\test.txt&quot;</span>)</span><br><span class="line">    file.setExecutable(<span class="literal">true</span>)</span><br><span class="line">    file.setReadable(<span class="literal">true</span>)</span><br><span class="line">    println(file.readLines())</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//apply写法</span></span><br><span class="line">    file.apply &#123;</span><br><span class="line">        setExecutable(<span class="literal">true</span>)</span><br><span class="line">    &#125;.apply &#123;</span><br><span class="line">        setReadable(<span class="literal">true</span>)</span><br><span class="line">    &#125;.apply &#123;</span><br><span class="line">        println(readLines())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apply: .apply<br>1.apply函数返回类型由调用对象本身决定<br>2.apply函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的let内置函数"><a href="#Kotlin语言的let内置函数" class="headerlink" title="Kotlin语言的let内置函数"></a>Kotlin语言的let内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//普通方式 对集合第一个元素相加</span></span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">val</span> value1 = list.first()</span><br><span class="line">    <span class="keyword">val</span> result1 = value1 + value1</span><br><span class="line">    println(result1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let方式 对集合第一个元素相加</span></span><br><span class="line">    <span class="keyword">val</span> result2 = listOf(<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>).let &#123;</span><br><span class="line">        <span class="comment">//it == list 集合</span></span><br><span class="line">        it.first() + it.first()<span class="comment">//匿名函数最后一行作为返回值 apply永远返回调用对象本身</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result2)</span><br><span class="line">    println(getMethod1(<span class="literal">null</span>))</span><br><span class="line">    println(getMethod2(<span class="string">&quot;zhangSan&quot;</span>))</span><br><span class="line">    println(getMethod3(<span class="literal">null</span>))</span><br><span class="line">    println(getMethod4(<span class="string">&quot;zhangSan&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数判断null 并返回</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getMethod1</span><span class="params">(value: <span class="type">String</span>?)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="string">&quot;你传递的内容为null&quot;</span> <span class="keyword">else</span> <span class="string">&quot;欢迎<span class="subst">$&#123;value&#125;</span>登录&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getMethod2</span><span class="params">(value: <span class="type">String</span>?)</span></span> = <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="string">&quot;你传递的内容为null&quot;</span> <span class="keyword">else</span> <span class="string">&quot;欢迎<span class="subst">$&#123;value&#125;</span>登录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let 方法+ 空合并操作符判断null 并返回</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getMethod3</span><span class="params">(value: <span class="type">String</span>?)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> value?.let &#123;</span><br><span class="line">        <span class="string">&quot;欢迎<span class="subst">$&#123;value&#125;</span>登录&quot;</span></span><br><span class="line">    &#125; ?: <span class="string">&quot;你传递的内容为null&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getMethod4</span><span class="params">(value: <span class="type">String</span>?)</span></span> = value?.let &#123;</span><br><span class="line">    <span class="string">&quot;欢迎<span class="subst">$&#123;value&#125;</span>登录&quot;</span></span><br><span class="line">&#125; ?: <span class="string">&quot;你传递的内容为null&quot;</span></span><br></pre></td></tr></table></figure><p>let: .let<br>1.let函数返回类型是根据匿名函数最后一行变化而变化<br>2.let函数的匿名函数里面持有的是it == 调用对象本身</p><h3 id="Kotlin语言的run内置函数"><a href="#Kotlin语言的run内置函数" class="headerlink" title="Kotlin语言的run内置函数"></a>Kotlin语言的run内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//run函数特点 字符串延时</span></span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">&quot;My name is zhangSan&quot;</span></span><br><span class="line">    <span class="keyword">val</span> r1: <span class="built_in">Float</span> = str.run &#123;</span><br><span class="line">        <span class="comment">//this == str</span></span><br><span class="line">        <span class="number">5435.5f</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(r1)</span><br><span class="line">    <span class="comment">//具名函数配合run函数</span></span><br><span class="line">    <span class="comment">//具名函数判断长度 isLong</span></span><br><span class="line">    str.run &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//具名函数</span></span><br><span class="line">    str</span><br><span class="line">        .run(::isLong)</span><br><span class="line">        .run(::showText)</span><br><span class="line">        .run(::mapText)</span><br><span class="line">        .run(::println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let写法</span></span><br><span class="line">    str</span><br><span class="line">        .let(::isLong)</span><br><span class="line">        .let(::showText)</span><br><span class="line">        .let(::mapText)</span><br><span class="line">        .let(::println)</span><br><span class="line">    <span class="comment">//匿名函数</span></span><br><span class="line">    str.run &#123;</span><br><span class="line">        length &gt; <span class="number">5</span></span><br><span class="line">    &#125;.run &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>) <span class="string">&quot;字符串长度大于5&quot;</span> <span class="keyword">else</span> <span class="string">&quot;字符串长度不大于5&quot;</span></span><br><span class="line">    &#125;.run &#123;</span><br><span class="line">        <span class="string">&quot;[<span class="variable">$this</span>]&quot;</span></span><br><span class="line">    &#125;.run &#123;</span><br><span class="line">        println(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isLong</span><span class="params">(str: <span class="type">String</span>)</span></span> = str.length &gt; <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showText</span><span class="params">(isLong: <span class="type">Boolean</span>)</span></span> = <span class="keyword">if</span> (isLong) <span class="string">&quot;字符串长度大于5&quot;</span> <span class="keyword">else</span> <span class="string">&quot;字符串长度不大于5&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mapText</span><span class="params">(getShow: <span class="type">String</span>)</span></span> = <span class="string">&quot;[<span class="variable">$getShow</span>]&quot;</span></span><br></pre></td></tr></table></figure><p>run: .run<br>1.run函数返回类型是根据匿名函数最后一行变化而变化<br>2.run函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的with内置函数"><a href="#Kotlin语言的with内置函数" class="headerlink" title="Kotlin语言的with内置函数"></a>Kotlin语言的with内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="comment">//具名操作</span></span><br><span class="line">    <span class="keyword">val</span> len = with(str, ::getStrLen)</span><br><span class="line">    <span class="keyword">val</span> info = with(len, ::getLenInfo)</span><br><span class="line">    <span class="keyword">val</span> map = with(info, ::getInfoMap)</span><br><span class="line">    with(map, ::showM)</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//匿名操作</span></span><br><span class="line">    with(with(with(with(str) &#123;</span><br><span class="line">        length</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">        <span class="string">&quot;字符串长度为:<span class="variable">$this</span>&quot;</span></span><br><span class="line">    &#125;) &#123;</span><br><span class="line">        <span class="string">&quot;[<span class="variable">$this</span>]&quot;</span></span><br><span class="line">    &#125;) &#123;</span><br><span class="line">        println(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStrLen</span><span class="params">(str: <span class="type">String</span>)</span></span> = str.length</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getLenInfo</span><span class="params">(len: <span class="type">Int</span>)</span></span> = <span class="string">&quot;字符串长度为:<span class="variable">$len</span>&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getInfoMap</span><span class="params">(info: <span class="type">String</span>)</span></span> = <span class="string">&quot;[<span class="variable">$info</span>]&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showM</span><span class="params">(content: <span class="type">String</span>)</span></span> = println(content)</span><br></pre></td></tr></table></figure><p>with: with()<br>1.with函数返回类型是根据匿名函数最后一行变化而变化<br>2.with函数的匿名函数里面持有的是this == 调用对象本身</p><h3 id="Kotlin语言的also内置函数"><a href="#Kotlin语言的also内置函数" class="headerlink" title="Kotlin语言的also内置函数"></a>Kotlin语言的also内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> str=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">    <span class="comment">//可以链式调用</span></span><br><span class="line">    str.also &#123;</span><br><span class="line">        println(<span class="string">&quot;str:<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;.also &#123;</span><br><span class="line">        println(<span class="string">&quot;str装化为小写:<span class="subst">$&#123;it.toLowerCase()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;.also &#123;</span><br><span class="line">        println(<span class="string">&quot;长度为:<span class="subst">$&#123;it.length&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> file = File(<span class="string">&quot;E:\\test.txt&quot;</span>)</span><br><span class="line">    file.also &#123;</span><br><span class="line">        it.setExecutable(<span class="literal">true</span>)</span><br><span class="line">    &#125;.also &#123;</span><br><span class="line">        it.setReadable(<span class="literal">true</span>)</span><br><span class="line">    &#125;.also &#123;</span><br><span class="line">        println(it.readLines())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>also: .also<br>1.also函数返回类型由调用对象本身决定<br>2.also函数的匿名函数里面持有的是it == 调用对象本身</p><h3 id="Kotlin语言的takeIf内置函数"><a href="#Kotlin语言的takeIf内置函数" class="headerlink" title="Kotlin语言的takeIf内置函数"></a>Kotlin语言的takeIf内置函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(checkPermission(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;12345&quot;</span>))</span><br><span class="line">    <span class="comment">//真正用途</span></span><br><span class="line">    println(checkPermission2(<span class="string">&quot;zhangSanSan&quot;</span>, <span class="string">&quot;12345&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name.takeIf&#123; true/false &#125;</span></span><br><span class="line"><span class="comment">//true: 返回name</span></span><br><span class="line"><span class="comment">//false: 返回null</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPermission</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: String? &#123;</span><br><span class="line">    <span class="keyword">return</span> name.takeIf &#123; permissionSystem(name, pwd) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//takeIf + 空合并操作符</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkPermission2</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> name.takeIf &#123; permissionSystem(name, pwd) &#125; ?: <span class="string">&quot;error&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">permissionSystem</span><span class="params">(name: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name == <span class="string">&quot;zhangSan&quot;</span> &amp;&amp; pwd == <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name.takeIf{ true/false }</p><ul><li>true: 返回name</li><li>false: 返回null</li></ul><p>大多情况下都是 <code>takeIf + 空合并操作符</code> 一起使用</p><h3 id="Kotlin语言的takeUnless内置函数"><a href="#Kotlin语言的takeUnless内置函数" class="headerlink" title="Kotlin语言的takeUnless内置函数"></a>Kotlin语言的takeUnless内置函数</h3><p>与takeIf功能是相反的</p><p>name.takeUnless{ true/false }</p><ul><li>true: 返回null</li><li>false: 返回name</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> infoValue: String? = <span class="literal">null</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getInfoValue</span><span class="params">()</span></span> = infoValue</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInfoValue</span><span class="params">(infoValue: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.infoValue = infoValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> manager = Manager()</span><br><span class="line">    manager.setInfoValue(<span class="string">&quot;zhangSan&quot;</span>)</span><br><span class="line">    <span class="comment">//小结:takeUnless + it.isNullOrBlank()一起使用可以验证字符串有没有初始化</span></span><br><span class="line">    <span class="keyword">val</span> r = manager.getInfoValue().takeUnless &#123; it.isNullOrBlank() &#125; ?: <span class="string">&quot;未经过任何初始化&quot;</span></span><br><span class="line">    println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List创建与元素获取"><a href="#List创建与元素获取" class="headerlink" title="List创建与元素获取"></a>List创建与元素获取</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;wangWu&quot;</span>, <span class="string">&quot;zhaoLiu&quot;</span>)</span><br><span class="line">    <span class="comment">//普通取值 索引 运算符重载</span></span><br><span class="line">    println(list[<span class="number">0</span>])</span><br><span class="line">    println(list[<span class="number">1</span>])</span><br><span class="line">    println(list[<span class="number">2</span>])</span><br><span class="line">    println(list[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止崩溃取值方式  getOrElse getOrNull</span></span><br><span class="line">    println(list.getOrElse(<span class="number">3</span>) &#123; <span class="string">&quot;越界&quot;</span> &#125;)</span><br><span class="line">    println(list.getOrElse(<span class="number">5</span>) &#123; <span class="string">&quot;越界&quot;</span> &#125;)</span><br><span class="line">    println()</span><br><span class="line">    println(list.getOrNull(<span class="number">3</span>))</span><br><span class="line">    println(list.getOrNull(<span class="number">5</span>))</span><br><span class="line">    <span class="comment">//一般 getOrNull+空合并操作符</span></span><br><span class="line">    println(list.getOrNull(<span class="number">5</span>) ?: <span class="string">&quot;越界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变List集合"><a href="#可变List集合" class="headerlink" title="可变List集合"></a>可变List集合</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = mutableListOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;wangWu&quot;</span>)</span><br><span class="line">    list.add(<span class="string">&quot;zhaoLiu&quot;</span>)</span><br><span class="line">    list.remove(<span class="string">&quot;wangWu&quot;</span>)</span><br><span class="line">    println(list)</span><br><span class="line">    <span class="comment">//可变集合 to 不可变集合</span></span><br><span class="line">    <span class="keyword">val</span> list1:List&lt;String&gt; = list.toList()</span><br><span class="line">    println(list1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不可变集合 to 可变集合</span></span><br><span class="line">    <span class="keyword">val</span> list2 = listOf(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>)</span><br><span class="line">    <span class="keyword">val</span> list3: MutableList&lt;<span class="built_in">Int</span>&gt; = list2.toMutableList()</span><br><span class="line">    list3.add(<span class="number">890</span>)</span><br><span class="line">    list3.remove(<span class="number">123</span>)</span><br><span class="line">    println(list3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的mutator函数"><a href="#Kotlin语言的mutator函数" class="headerlink" title="Kotlin语言的mutator函数"></a>Kotlin语言的mutator函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list: MutableList&lt;String&gt; = mutableListOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;wangWu&quot;</span>)</span><br><span class="line">    list += <span class="string">&quot;张三&quot;</span><span class="comment">//mutator的特性 += -= 就是运算符的重载</span></span><br><span class="line">    list += <span class="string">&quot;李四&quot;</span></span><br><span class="line">    list -= <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    println(list)</span><br><span class="line">    <span class="comment">//removeIf</span></span><br><span class="line">    <span class="comment">//list.removeIf&#123;true&#125;//true:自动遍历整个集合,进行一个一个元素的输出</span></span><br><span class="line">    list.removeIf &#123; it.contains(<span class="string">&quot;li&quot;</span>) &#125;<span class="comment">//过滤所有的元素 只要包含有li的元素就是true、</span></span><br><span class="line">    println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List集合编历"><a href="#List集合编历" class="headerlink" title="List集合编历"></a>List集合编历</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> list) &#123;</span><br><span class="line">        print(<span class="string">&quot;元素:<span class="variable">$i</span> &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    list.forEach &#123;</span><br><span class="line">        <span class="comment">//it = 每一个元素</span></span><br><span class="line">        print(<span class="string">&quot;元素:<span class="variable">$it</span> &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    list.forEachIndexed &#123; index, item -&gt;</span><br><span class="line">        print(<span class="string">&quot;下标:<span class="variable">$index</span>,元素:<span class="variable">$item</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的解构语法过滤元素"><a href="#Kotlin语言的解构语法过滤元素" class="headerlink" title="Kotlin语言的解构语法过滤元素"></a>Kotlin语言的解构语法过滤元素</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list: List&lt;String&gt; = listOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;wangWu&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> (value1, value2, value3) = list</span><br><span class="line">    print(value1)</span><br><span class="line">    print(value2)</span><br><span class="line">    print(value3)</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//使用_内部可以不接收赋值,可以节约一点性能</span></span><br><span class="line">    <span class="keyword">val</span> (_, n1, n2) = list<span class="comment">//_用来过滤解构赋值,不接收赋值</span></span><br><span class="line">    println(n1)</span><br><span class="line">    println(n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set创建与元素获取"><a href="#Set创建与元素获取" class="headerlink" title="Set创建与元素获取"></a>Set创建与元素获取</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">set</span>: Set&lt;String&gt; = setOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;zhaoLiu&quot;</span>, <span class="string">&quot;zhangSan&quot;</span>)<span class="comment">//set集合不会输出重复元素</span></span><br><span class="line">    println(<span class="keyword">set</span>)</span><br><span class="line">    <span class="comment">//set[0] set集合无[]使用方法</span></span><br><span class="line">    println(<span class="keyword">set</span>.elementAt(<span class="number">0</span>))</span><br><span class="line">    println(<span class="keyword">set</span>.elementAt(<span class="number">1</span>))</span><br><span class="line">    println(<span class="keyword">set</span>.elementAt(<span class="number">2</span>))</span><br><span class="line">    <span class="comment">//println(set.elementAt(3)) 崩溃 重复元素不算</span></span><br><span class="line">    println()</span><br><span class="line">    println(<span class="keyword">set</span>.elementAtOrElse(<span class="number">0</span>) &#123; <span class="string">&quot;越界&quot;</span> &#125;)</span><br><span class="line">    println(<span class="keyword">set</span>.elementAtOrElse(<span class="number">3</span>) &#123; <span class="string">&quot;越界&quot;</span> &#125;)</span><br><span class="line">    println()</span><br><span class="line">    println(<span class="keyword">set</span>.elementAtOrNull(<span class="number">0</span>))</span><br><span class="line">    println(<span class="keyword">set</span>.elementAtOrNull(<span class="number">3</span>))</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//elementAtOrNull+空合并操作符</span></span><br><span class="line">    println(<span class="keyword">set</span>.elementAtOrNull(<span class="number">3</span>) ?: <span class="string">&quot;越界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变Set集合"><a href="#可变Set集合" class="headerlink" title="可变Set集合"></a>可变Set集合</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">set</span>: MutableSet&lt;String&gt; = mutableSetOf(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&quot;liSi&quot;</span>, <span class="string">&quot;zhaoLiu&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span> += <span class="string">&quot;张三&quot;</span></span><br><span class="line">    <span class="keyword">set</span> -= <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    <span class="keyword">set</span>.add(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>.remove(<span class="string">&quot;liSi&quot;</span>)</span><br><span class="line">    println(<span class="keyword">set</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的集合转换与快捷函数"><a href="#Kotlin语言的集合转换与快捷函数" class="headerlink" title="Kotlin语言的集合转换与快捷函数"></a>Kotlin语言的集合转换与快捷函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> list :MutableList&lt;String&gt; = mutableListOf(<span class="string">&quot;zhangSan&quot;</span>,<span class="string">&quot;liSi&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;zhangSan&quot;</span>)</span><br><span class="line">    println(list)</span><br><span class="line">    <span class="comment">//List 转 Set 集合 去重</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">set</span>=list.toSet()</span><br><span class="line">    println(<span class="keyword">set</span>)</span><br><span class="line">    <span class="comment">//List 转 Set  再转 List 集合 去重</span></span><br><span class="line">    <span class="keyword">val</span> list2 = list.toSet().toList()</span><br><span class="line">    println(list2)</span><br><span class="line">    <span class="comment">//快捷函数去重 distinct</span></span><br><span class="line">    println(list.distinct())</span><br><span class="line">    <span class="comment">//等价写法</span></span><br><span class="line">    println(list.toMutableSet().toList())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin中的数组类型"><a href="#Kotlin中的数组类型" class="headerlink" title="Kotlin中的数组类型"></a>Kotlin中的数组类型</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> intArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    println(intArray[<span class="number">0</span>])</span><br><span class="line">    println(intArray[<span class="number">1</span>])</span><br><span class="line">    println(intArray[<span class="number">2</span>])</span><br><span class="line">    println(intArray[<span class="number">3</span>])</span><br><span class="line">    println(intArray[<span class="number">4</span>])</span><br><span class="line"><span class="comment">//    println(intArray[5]) 越界</span></span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//elementAtOrElse  elementAtOrNull</span></span><br><span class="line">    println(intArray.elementAtOrElse(<span class="number">0</span>) &#123; -<span class="number">1</span> &#125;)</span><br><span class="line">    println(intArray.elementAtOrElse(<span class="number">5</span>) &#123; -<span class="number">1</span> &#125;)</span><br><span class="line">    println()</span><br><span class="line">    println(intArray.elementAtOrNull(<span class="number">0</span>))</span><br><span class="line">    println(intArray.elementAtOrNull(<span class="number">5</span>))</span><br><span class="line">    <span class="comment">//elementAtOrNull+ 空合并操作符</span></span><br><span class="line">    println(intArray.elementAtOrNull(<span class="number">5</span>) ?: <span class="string">&quot;越界&quot;</span>)</span><br><span class="line">    <span class="comment">//List集合转数组</span></span><br><span class="line">    println()</span><br><span class="line">    <span class="keyword">val</span> charArray = listOf(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>).toCharArray()</span><br><span class="line">    println(charArray)</span><br><span class="line">    <span class="comment">//arrayOf Array&lt;File&gt;</span></span><br><span class="line">    <span class="keyword">val</span> objArray = arrayOf(File(<span class="string">&quot;AAA&quot;</span>), File(<span class="string">&quot;BBB&quot;</span>), File(<span class="string">&quot;CCC&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map创建"><a href="#map创建" class="headerlink" title="map创建"></a>map创建</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map1 = mapOf(<span class="string">&quot;zhangSan&quot;</span> to (<span class="number">687.90</span>), <span class="string">&quot;liSi&quot;</span> to <span class="number">7868.90</span>)</span><br><span class="line">    <span class="keyword">val</span> map2 = mapOf(Pair(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">5676.78</span>), Pair(<span class="string">&quot;liSi&quot;</span>, <span class="number">6768.66</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取map值"><a href="#读取map值" class="headerlink" title="读取map值"></a>读取map值</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map1 = mapOf(<span class="string">&quot;zhangSan&quot;</span> to <span class="number">123</span>, <span class="string">&quot;liSi&quot;</span> to <span class="number">566</span>)</span><br><span class="line">    <span class="comment">//1.重载[]运算符</span></span><br><span class="line">    println(map1[<span class="string">&quot;zhangSan&quot;</span>])</span><br><span class="line">    println(map1[<span class="string">&quot;xxx&quot;</span>])<span class="comment">//找不到返回null</span></span><br><span class="line">    <span class="comment">//2.getOrDefault 推荐</span></span><br><span class="line">    println(map1.getOrDefault(<span class="string">&quot;zhangSan&quot;</span>, -<span class="number">1</span>))</span><br><span class="line">    println(map1.getOrDefault(<span class="string">&quot;xxx&quot;</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//3.getOrElse 推荐</span></span><br><span class="line">    println(map1.getOrElse(<span class="string">&quot;zhangSan&quot;</span>) &#123; -<span class="number">1</span> &#125;)</span><br><span class="line">    println(map1.getOrElse(<span class="string">&quot;xxx&quot;</span>) &#123; -<span class="number">1</span> &#125;)</span><br><span class="line">    <span class="comment">//4.get 与 [] 等价</span></span><br><span class="line">    println(map1.<span class="keyword">get</span>(<span class="string">&quot;zhangSan&quot;</span>))</span><br><span class="line">    println(map1.<span class="keyword">get</span>(<span class="string">&quot;xxx&quot;</span>))</span><br><span class="line">    <span class="comment">//5.getValue 建议不要使用</span></span><br><span class="line">    println(map1.getValue(<span class="string">&quot;zhangSan&quot;</span>))</span><br><span class="line">    <span class="comment">//println(map1.getValue(&quot;xxx&quot;))//崩溃</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map1 = mapOf(<span class="string">&quot;zhangSan&quot;</span> to <span class="number">123</span>, <span class="string">&quot;liSi&quot;</span> to <span class="number">566</span>, Pair(<span class="string">&quot;Jack&quot;</span>, <span class="number">678</span>))</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    map1.forEach &#123;</span><br><span class="line">        println(<span class="string">&quot;k:<span class="subst">$&#123;it.key&#125;</span>, v:<span class="subst">$&#123;it.value&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    map1.forEach &#123; key, value -&gt;<span class="comment">//覆盖it</span></span><br><span class="line">        println(<span class="string">&quot;k:<span class="variable">$key</span>, v:<span class="variable">$value</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    map1.forEach &#123; (k, v) -&gt;</span><br><span class="line">        println(<span class="string">&quot;k:<span class="variable">$k</span>, v:<span class="variable">$v</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> map1) &#123;</span><br><span class="line">        println(<span class="string">&quot;k:<span class="subst">$&#123;item.key&#125;</span>, v:<span class="subst">$&#123;item.value&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变Map集合"><a href="#可变Map集合" class="headerlink" title="可变Map集合"></a>可变Map集合</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//1.可变集合操作+= [] put</span></span><br><span class="line">    <span class="keyword">val</span> map = mutableMapOf(<span class="string">&quot;zhangSan&quot;</span> to <span class="number">123</span>, <span class="string">&quot;liSi&quot;</span> to <span class="number">566</span>, Pair(<span class="string">&quot;Jack&quot;</span>, <span class="number">678</span>))</span><br><span class="line">    map += <span class="string">&quot;AAA&quot;</span> to (<span class="number">123</span>)</span><br><span class="line">    map += <span class="string">&quot;BBB&quot;</span> to <span class="number">123</span></span><br><span class="line">    map -= <span class="string">&quot;zhangSan&quot;</span></span><br><span class="line">    map[<span class="string">&quot;CCC&quot;</span>] = <span class="number">345</span></span><br><span class="line">    map.put(<span class="string">&quot;DDD&quot;</span>, <span class="number">678</span>)<span class="comment">//put 和 []等价</span></span><br><span class="line">    <span class="comment">//2.getOrPut 如果没有key值,就添加 有就不添加</span></span><br><span class="line">    <span class="keyword">val</span> r1 = map.getOrPut(<span class="string">&quot;FFF&quot;</span>)&#123;<span class="number">4654</span>&#125;<span class="comment">//返回添加的value</span></span><br><span class="line">    <span class="keyword">val</span> r2 = map.getOrPut(<span class="string">&quot;AAA&quot;</span>)&#123;<span class="number">4654</span>&#125;<span class="comment">//返回原来key值对应的value</span></span><br><span class="line">    println(r1)</span><br><span class="line">    println(r2)</span><br><span class="line">    println(map)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的定义类与field关键字"><a href="#Kotlin语言的定义类与field关键字" class="headerlink" title="Kotlin语言的定义类与field关键字"></a>Kotlin语言的定义类与field关键字</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="string">&quot;ABCD&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*默认存在</span></span><br><span class="line"><span class="comment">    get() = field</span></span><br><span class="line"><span class="comment">    set(value) &#123;</span></span><br><span class="line"><span class="comment">        field = value</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> info = <span class="string">&quot;Tom and Jerry&quot;</span></span><br><span class="line">        <span class="keyword">get</span>() = field.capitalize()</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            field = <span class="string">&quot;**[<span class="variable">$value</span>]**&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Person().name = <span class="string">&quot;Jerry&quot;</span></span><br><span class="line">    println(Person().name)</span><br><span class="line">    println(Person().info)</span><br><span class="line">    Person().info = <span class="string">&quot;liSi&quot;</span></span><br><span class="line">    println(Person().info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的计算属性和防范竞态条件"><a href="#Kotlin语言的计算属性和防范竞态条件" class="headerlink" title="Kotlin语言的计算属性和防范竞态条件"></a>Kotlin语言的计算属性和防范竞态条件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number = <span class="number">0</span><span class="comment">//val 只有getXXX 没有setXXX</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算属性</span></span><br><span class="line">    <span class="keyword">val</span> number2: <span class="built_in">Int</span></span><br><span class="line">        <span class="comment">//从1 到 1000取出一个值返回给get函数</span></span><br><span class="line">        <span class="keyword">get</span>() = (<span class="number">1.</span><span class="number">.1000</span>).shuffled().first()</span><br><span class="line">    <span class="keyword">var</span> info: String? = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//防范竞态条件 当调用成员(可能为null或者&quot;&quot;),必须采用</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getShowInfo</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> info?.let &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.isBlank()) &#123;</span><br><span class="line">                <span class="string">&quot;空值&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">&quot;info:<span class="variable">$it</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; ?: <span class="string">&quot;null&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(Person().number)</span><br><span class="line">    println(Person().number2)</span><br><span class="line">    println(Person().getShowInfo())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的主构造函数"><a href="#Kotlin语言的主构造函数" class="headerlink" title="Kotlin语言的主构造函数"></a>Kotlin语言的主构造函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(_name: String, _sex: <span class="built_in">Char</span>, _age: <span class="built_in">Int</span>, _info: String) &#123;</span><br><span class="line">    <span class="comment">//主构造函数:规范 _xxx 临时输入类型 不能直接使用 需要接收成变量才能使用</span></span><br><span class="line">    <span class="keyword">var</span> name = _name</span><br><span class="line">        <span class="keyword">get</span>() = field<span class="comment">//get不允许私有化</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">val</span> sex = _sex</span><br><span class="line">    <span class="keyword">val</span> age = _age</span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">if</span> (field &lt; <span class="number">0</span>) -<span class="number">1</span> <span class="keyword">else</span> field</span><br><span class="line">    <span class="keyword">val</span> info = _info</span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">&quot;[<span class="variable">$field</span>]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name)</span><br><span class="line">        println(sex)</span><br><span class="line">        println(age)</span><br><span class="line">        println(info)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Person(_name = <span class="string">&quot;zhangSan&quot;</span>, _sex = <span class="string">&#x27;男&#x27;</span>, _age = <span class="number">78</span>, _info = <span class="string">&quot;study&quot;</span>)</span><br><span class="line">    <span class="comment">//println(p.name)</span></span><br><span class="line">    p.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的主构造函数里定义属性"><a href="#Kotlin语言的主构造函数里定义属性" class="headerlink" title="Kotlin语言的主构造函数里定义属性"></a>Kotlin语言的主构造函数里定义属性</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">var</span> name: String, <span class="keyword">val</span> sex: <span class="built_in">Char</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span>, <span class="keyword">val</span> info: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name)</span><br><span class="line">        println(sex)</span><br><span class="line">        println(age)</span><br><span class="line">        println(info)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Person(name = <span class="string">&quot;zhangSan&quot;</span>, sex = <span class="string">&#x27;男&#x27;</span>, age = <span class="number">78</span>, info = <span class="string">&quot;study&quot;</span>)</span><br><span class="line">    <span class="comment">//println(p.name)</span></span><br><span class="line">    p.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin次构造函数"><a href="#Kotlin次构造函数" class="headerlink" title="Kotlin次构造函数"></a>Kotlin次构造函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(name:String)<span class="comment">//主构造</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//次构造函数 必须要调用主构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name:String,sex:<span class="built_in">Char</span>):<span class="keyword">this</span>(name)&#123;</span><br><span class="line">        println(<span class="string">&quot;name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//次构造函数 必须要调用主构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name:String,sex:<span class="built_in">Char</span>,info:String):<span class="keyword">this</span>(name)&#123;</span><br><span class="line">        println(<span class="string">&quot;name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>,info:<span class="variable">$info</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> p = Example(<span class="string">&quot;zhangSan&quot;</span>)</span><br><span class="line">    Example(<span class="string">&quot;liSi&quot;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">    Example(<span class="string">&quot;Rose&quot;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&quot;like Jack&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的构造函数中的默认参数"><a href="#Kotlin语言的构造函数中的默认参数" class="headerlink" title="Kotlin语言的构造函数中的默认参数"></a>Kotlin语言的构造函数中的默认参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(name:String=<span class="string">&quot;zhangSan&quot;</span>)<span class="comment">//主构造</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//次构造函数 必须要调用主构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name:String=<span class="string">&quot;zhangLi&quot;</span>,sex:<span class="built_in">Char</span>=<span class="string">&#x27;男&#x27;</span>):<span class="keyword">this</span>(name)&#123;</span><br><span class="line">        println(<span class="string">&quot;name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//次构造函数 必须要调用主构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name:String=<span class="string">&quot;zhangSui&quot;</span>,sex:<span class="built_in">Char</span>,info:String=<span class="string">&quot;like marry&quot;</span>):<span class="keyword">this</span>(name)&#123;</span><br><span class="line">        println(<span class="string">&quot;name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>,info:<span class="variable">$info</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Example()<span class="comment">//优先调用主构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的初始化块"><a href="#Kotlin语言的初始化块" class="headerlink" title="Kotlin语言的初始化块"></a>Kotlin语言的初始化块</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(username:String,userage:<span class="built_in">Int</span>,usersex:<span class="built_in">Char</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化块 init代码块</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;主构造函数 <span class="variable">$username</span> <span class="variable">$userage</span> <span class="variable">$usersex</span>&quot;</span>)</span><br><span class="line">        <span class="comment">//第一个参数false就会调用第二个参数lambda</span></span><br><span class="line">        <span class="comment">//判断name是不是空值 isNotBlank</span></span><br><span class="line">        require(username.isNotBlank())&#123;</span><br><span class="line">            <span class="string">&quot;username is null&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        require(userage&gt;<span class="number">0</span>)&#123;<span class="string">&quot;userage does not true&quot;</span>&#125;</span><br><span class="line">        require(usersex==<span class="string">&#x27;男&#x27;</span>||usersex==<span class="string">&#x27;女&#x27;</span>)&#123;<span class="string">&quot;sex error&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(username: String):<span class="keyword">this</span>(username,<span class="number">87</span>,<span class="string">&#x27;男&#x27;</span>)&#123;</span><br><span class="line">        println(<span class="string">&quot;次构造函数 <span class="variable">$username</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test(<span class="string">&quot;zhangSan&quot;</span>, userage = <span class="number">88</span>, usersex = <span class="string">&#x27;男&#x27;</span>)<span class="comment">//调用主构造</span></span><br><span class="line">    println()</span><br><span class="line">    Test(<span class="string">&quot;liSi&quot;</span>)<span class="comment">//调用次构造</span></span><br><span class="line">    println()</span><br><span class="line">    <span class="comment">//username is null</span></span><br><span class="line">    <span class="comment">//Test(&quot;&quot;)</span></span><br><span class="line">    <span class="comment">//println()</span></span><br><span class="line">    <span class="comment">//userage does not true</span></span><br><span class="line">    <span class="comment">//Test(&quot;Jack&quot;, userage = -1, usersex = &#x27;女&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的构造初始化顺序"><a href="#Kotlin语言的构造初始化顺序" class="headerlink" title="Kotlin语言的构造初始化顺序"></a>Kotlin语言的构造初始化顺序</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(_name: String, <span class="keyword">val</span> sex: <span class="built_in">Char</span>)<span class="comment">//主构造</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">val</span> mName = _name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> nameValue = _name</span><br><span class="line">        println(<span class="string">&quot;init代码块 name:<span class="variable">$nameValue</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, sex: <span class="built_in">Char</span>, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name, sex) &#123;</span><br><span class="line">        println(<span class="string">&quot;次构造 name:<span class="variable">$name</span>,sex:<span class="variable">$sex</span>,age:<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    A(<span class="string">&quot;zhangSan&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">89</span>)<span class="comment">//调用次构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的延迟初始化lateinit"><a href="#Kotlin语言的延迟初始化lateinit" class="headerlink" title="Kotlin语言的延迟初始化lateinit"></a>Kotlin语言的延迟初始化lateinit</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//lateinit 使用时手动加载的懒加载</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> responseInfo:String</span><br><span class="line">    <span class="comment">//模拟服务器请求</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span>&#123;<span class="comment">//延时初始化 属于懒加载 当使用时才加载</span></span><br><span class="line">        responseInfo = <span class="string">&quot;加载成功&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showResponseResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//println(&quot;responseInfo:$responseInfo&quot;)</span></span><br><span class="line">        <span class="keyword">if</span>(::responseInfo.isInitialized)&#123;</span><br><span class="line">            println(<span class="string">&quot;responseInfo:<span class="variable">$responseInfo</span>&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            println(<span class="string">&quot;没有初始化加载&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> r = A()</span><br><span class="line">    <span class="comment">//使用时才加载</span></span><br><span class="line">    <span class="comment">//r.load()</span></span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    r.showResponseResult()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kotlin语言的惰性初始化by-lazy"><a href="#Kotlin语言的惰性初始化by-lazy" class="headerlink" title="Kotlin语言的惰性初始化by lazy"></a>Kotlin语言的惰性初始化by lazy</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//惰性初始化 by lazy 使用时自动加载的懒加载方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KtBase</span> &#123;</span><br><span class="line">    <span class="comment">//普通方式</span></span><br><span class="line">    <span class="comment">//val databaseData1:String=readSQLServerDatabaseAction()</span></span><br><span class="line">    <span class="comment">//by lazy 懒加载</span></span><br><span class="line">    <span class="keyword">val</span> databaseData2 <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        readSQLServerDatabaseAction()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readSQLServerDatabaseAction</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        println(<span class="string">&quot;loading...&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;loading...&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;loading...&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;loading...&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;loading...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;database load success.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> p = KtBase()</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>)</span><br><span class="line">    println(<span class="string">&quot;结果:<span class="subst">$&#123;p.databaseData2&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmd命令大全</title>
      <link href="/posts/bfba130d.html"/>
      <url>/posts/bfba130d.html</url>
      
        <content type="html"><![CDATA[<p>WIN+R输入CMD进入命令行界面</p><p>1.shutdown -s -t 60 一分钟后关机<br>2.Shutdown -a 取消关机计划<br>3.Shutdown -l 注销计算机<br>4.Tasklist 列出正在运行的进程<br>5.Command MMc 启动计算机管理<br>6.chkdsk 检查磁盘,默认为C盘<br>7.taskmgr 启动任务管理器<br>8.tsshutdn 60秒后关机<br>9.rononce -p 15秒后关机</p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><p>1.ipconfig<br>功能:查询本机ip信息<br>格式:ipconfig/XX</p><p>例:<br>(1)ipconfig/release:释放本机现有ip<br>(2)ipconfig/renew:向DHCP服务器重新申请一个ip<br>(3)ipconfig/all:显示完整版的ip</p><p>2.nslookup<br>功能:查询网站ip地址<br>格式:nslookup 网站域名</p><p>3.Ping<br>功能:测试网络连通性<br>格式:ping 域名/ip地址(参数)</p><p>4.netstat<br>功能:查询网络状态</p><p>例:<br>netstat -a :查看开启了哪些端口,常用netstat -an<br>netstat -n :查看端口的网络连通情况,常用netstat -an<br>netstat -v :查看正在进行的工作<br>netstat -p 协议名 :查看某协议使用情况<br>  例:<br>    netstat -p tcq/ip 查看tcq/ip使用情况<br>netstat -s:查看正在使用的所有协议的使用情况</p><p>5.tracert<br>功能:跟踪路由信息<br>查出数据从本地机器传输到目标机器经过的所有途径<br>格式:tracert -参数 ip(或计算机名) 跟踪路由 (数据包)<br>参数:”-w数字”用于设置超时间隔<br>例:<br>  tracert www.baidu.com</p><p>6.net<br>功能:网络命令中最重要的<br>net start: 查看开启了哪些服务<br>net start 服务名:开启服务<br>net stop 服务名:停止某服务<br>net config:显示系统网络设置<br>net logoff:断开连接的共享<br>net pause 服务名:暂停某服务<br>net send ip: “文本信息” 向对方发信息<br>net ver:局域网内正在使用的网络连接类型和信息<br>net share:查看本地开启的共享<br>net user 用户名 密码: 将用户登录后将密码改为12345<br>net password 密码: 更改系统登录密码</p><p>7.telnet<br>功能:功能强大的远程登录命令<br>格式:telnet 远程机器地址<br>open ip:连接到ip(属telnet登录后的命令)</p><p>8.ftp<br>功能:任何人都可以登录上去<br>如果你扫描到一台开放的ftp服务主机,你想干啥干啥。</p>]]></content>
      
      
      <categories>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/posts/c24675b4.html"/>
      <url>/posts/c24675b4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL基础"><a href="#1-MySQL基础" class="headerlink" title="1 MySQL基础"></a>1 MySQL基础</h2><p>数据库的好处:</p><ul><li>实现数据持久化</li><li>使用完整的管理系统同一管理,易于查询</li></ul><p>数据库概念:</p><ul><li>DB<ul><li>数据库(database):存储数据的”仓库”。它保存了一系列有组织的数据</li></ul></li><li>DBMS<ul><li>数据库管理系统。数据库是通过DBMS创建和操作的容器</li></ul></li><li>SQL<ul><li>结构化查询语言:专门用来与数据库通信的语言。</li></ul></li></ul><p>MySQL优点:</p><ul><li>成本低:开放源代码,一般可以免费试用</li><li>性能高:执行很快</li><li>简单:很容易安装和使用</li></ul><p>DBMS分为俩类:</p><ul><li>基于共享文件系统的DBMS(Access)</li><li>基于客户机——服务器的DBMS(MySQL、Oracle、SqlServer)</li></ul><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载:"></a>1.1 下载:</h3><p>Windows平台下载:<a href="https://www.mysql.com/downloads/">https://www.mysql.com/downloads/</a></p><p>点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/mysqlcommunty.png" alt=""></p><p>选择<code>MySQL Community Server</code>:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQLCommunityServer.png" alt=""></p><p>或可访问网页:<a href="https://dev.mysql.com/downloads/mysql">https://dev.mysql.com/downloads/mysql</a> 直接下载MySQL<br>此时选择MySQL的版本及主机<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQL的版本及主机.png" alt=""></p><p>点击这里,开始下载<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/直接下载.png" alt=""></p><p>msi格式下载:<br>解压版的压缩包,可能会存在一些问题,此时可采用msi的安装方式<br>安装版本的网址: <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a> 点击GO to Download Page<br>选择对应系统及版本进行安装</p><p>双击运行:<br>选择自定义安装(默认也行)<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/custom.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/products.png" alt=""></p><p>next之后点击Execute安装,安装完成后点击next直到配置服务器类型与端口号(可自行进行修改)</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/配置服务器类型与端口号.png" alt=""></p><p>点击next直到设置 Mysql root用户密码(密码建议设置简单一些,修改密码比较困难)</p><p>点击next,此步是设置Mysql服务器名称以及设置是否开启自启动</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/是否开启自启动.png" alt=""></p><p>点击next,然后点击Execute</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/applyconfiguration.png" alt=""></p><p>点击Finish</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/d8c4a68c5a5d429581130d40ae7efe6c.png" alt=""></p><p>点击next</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/d03a0787eb7249acb6b0d674a1980c0d.png" alt=""></p><p>点击Finish</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/finish.png" alt=""></p><p>配置密码,密码需和上面设置的密码一致,点击next</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/配置密码.png" alt=""></p><p>最后点击Execute,Finish即可</p><h3 id="1-2-配置MySQL数据库"><a href="#1-2-配置MySQL数据库" class="headerlink" title="1.2 配置MySQL数据库"></a>1.2 配置MySQL数据库</h3><p>不管是哪种下载方式,如果用户没配置直接使用MySQL,会出现错误,所以首先需要先配置环境变量。</p><ul><li>我的电脑-&gt;右键-&gt;属性</li><li>高级系统设置-&gt;环境变量</li><li>选择系统环境中的PATH</li><li>在其里面添加:你的mysql bin文件夹的路径 ,Mysql bin文件夹默认安装路径:C:\Program Files\MySQL\MySQL Server 8.0\bin,依据自己MySQL安装路径来添加</li></ul><p>安装完成后进入MySQL的安装目录,默认安装路径为:C:\Program Files\MySQL\MySQL Server 8.0进入MySQL Sever,其目录下的文件如下</p><p>bin目录下保存了MySQL常用的命令工具以及管理工具、data目录是MySQL默认用来保存数据文件以及日志文件的地方(我的因刚安装还没有data文件夹)、docs目录下是MySQL的帮助文档、include目录和lib目录是MySQL所依赖的头文件以及库文件、share目录下保存目录文件以及日志文件。</p><p>进入bin目录,按住shift键然后点击鼠标右键可以选择在该目录下打开命令窗口,或者win+R打开运行窗口,输入cmd进入命令行窗口。输入<code>mysql -u root</code>-p后回车,然后会提示输入密码,输入密码后就会进入MySQL的操作管理界面。</p><h3 id="1-3-MySQL卸载"><a href="#1-3-MySQL卸载" class="headerlink" title="1.3 MySQL卸载:"></a>1.3 MySQL卸载:</h3><ul><li>首先在控制面板中找到MySQL相关并卸载</li><li>删除MySQL文件夹</li><li>在C盘目录下的隐藏文件中找到ProgramData,同样删除MySQL文件夹</li><li>清理注册表,WIN+R,输入regedit(一般不需要,除非安装时报错)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Applications/MySQL </span><br><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Applications/MySQL </span><br><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Applications/MySQL</span><br><span class="line">HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services一般服务会以相同的名字(名字通常是MySQL)</span><br></pre></td></tr></table></figure></li></ul><p>也可以使用MySQL自带的卸载功能</p><h3 id="1-4-MySQL服务启动与停止"><a href="#1-4-MySQL服务启动与停止" class="headerlink" title="1.4 MySQL服务启动与停止"></a>1.4 MySQL服务启动与停止</h3><p>方法1:此电脑右键-&gt;管理-&gt;双击服务和引用程序-&gt;双击服务-&gt;找到你的服务名<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/MySQL启动.png" alt=""><br>可以设置为手动</p><p>方法2:WIN+R,输入cmd进入dos窗口(以管理员身份)<br>停止服务:net stop mysql80(服务名)<br>启动服务:net start mysql80(服务名)</p><h3 id="1-5-MySQL服务端的登录与退出"><a href="#1-5-MySQL服务端的登录与退出" class="headerlink" title="1.5 MySQL服务端的登录与退出"></a>1.5 MySQL服务端的登录与退出</h3><p>1(只适用root).通过MySQL自带的客户端MySQL Command Line Client,输入密码登录即可;退出 1)输入exit; 2)Ctrl+C<br>2(推荐).同样进入dos窗口(管理员身份),输入<code>mysql -h localhost -P 3306 -u root -p</code>,然后输入密码或者<code>mysql -h localhost -P 3306 -u root -p密码</code>(-p与密码不能有空格);退出 1)输入exit; 2)Ctrl+C</p><h3 id="1-6-MySQL常见命令"><a href="#1-6-MySQL常见命令" class="headerlink" title="1.6 MySQL常见命令"></a>1.6 MySQL常见命令</h3><ul><li>show databases;//查看当前所有的库</li><li>use 库名;//打开指定的库</li><li>show tables;//查看当前库的所有表</li><li>show tables from 库名;//查看其他库的所有表</li><li>create table 表名(<br>列名 列类型,<br>列名 列类型,<br>…<br>);//创建表</li><li>select database();//当前所在库</li><li>desc 表名;//查看表的结构</li><li>select * from 表名;//查看表中数据</li><li>select version();//查看服务器版本号;没有登录MySQL服务端时:mysql —version或mysql —V</li></ul><h3 id="1-7-MySQL语法规范"><a href="#1-7-MySQL语法规范" class="headerlink" title="1.7 MySQL语法规范"></a>1.7 MySQL语法规范</h3><p>1.不区分大小写,建议关键字大写,表名、列名小写。<br>2.每条命令最好用分号结尾。<br>3.每条命令根据需求可以进行缩进、换行。<br>4.注释:</p><ul><li>单行注释-<code>#注释文字</code>或<code>-- 注释文字</code>(注意—与文字之间有一个空格)</li><li>多行注释-<code>/* 注释文字 */</code></li></ul><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2 DQL语言"></a>2 DQL语言</h2><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><p>先运行以下代码得到myemployees数据库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">SQLyog Ultimate v10.00 Beta1</span><br><span class="line">MySQL - 5.5.15 : Database - myemployees</span><br><span class="line">*********************************************************************</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*!40101 SET NAMES utf8 */;</span><br><span class="line"></span><br><span class="line">/*!40101 SET SQL_MODE=&#x27;&#x27;*/;</span><br><span class="line"></span><br><span class="line">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span><br><span class="line">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class="line">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */;</span><br><span class="line">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class="line">CREATE DATABASE /*!32312 IF NOT EXISTS*/`myemployees` /*!40100 DEFAULT CHARACTER SET gb2312 */;</span><br><span class="line"></span><br><span class="line">USE `myemployees`;</span><br><span class="line"></span><br><span class="line">/*Table structure for table `departments` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `departments`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `departments` (</span><br><span class="line">  `department_id` int(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `department_name` varchar(3) DEFAULT NULL,</span><br><span class="line">  `manager_id` int(6) DEFAULT NULL,</span><br><span class="line">  `location_id` int(4) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`department_id`),</span><br><span class="line">  KEY `loc_id_fk` (`location_id`),</span><br><span class="line">  CONSTRAINT `loc_id_fk` FOREIGN KEY (`location_id`) REFERENCES `locations` (`location_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=271 DEFAULT CHARSET=gb2312;</span><br><span class="line"></span><br><span class="line">/*Data for the table `departments` */</span><br><span class="line"></span><br><span class="line">insert  into `departments`(`department_id`,`department_name`,`manager_id`,`location_id`) values (10,&#x27;Adm&#x27;,200,1700),(20,&#x27;Mar&#x27;,201,1800),(30,&#x27;Pur&#x27;,114,1700),(40,&#x27;Hum&#x27;,203,2400),(50,&#x27;Shi&#x27;,121,1500),(60,&#x27;IT&#x27;,103,1400),(70,&#x27;Pub&#x27;,204,2700),(80,&#x27;Sal&#x27;,145,2500),(90,&#x27;Exe&#x27;,100,1700),(100,&#x27;Fin&#x27;,108,1700),(110,&#x27;Acc&#x27;,205,1700),(120,&#x27;Tre&#x27;,NULL,1700),(130,&#x27;Cor&#x27;,NULL,1700),(140,&#x27;Con&#x27;,NULL,1700),(150,&#x27;Sha&#x27;,NULL,1700),(160,&#x27;Ben&#x27;,NULL,1700),(170,&#x27;Man&#x27;,NULL,1700),(180,&#x27;Con&#x27;,NULL,1700),(190,&#x27;Con&#x27;,NULL,1700),(200,&#x27;Ope&#x27;,NULL,1700),(210,&#x27;IT &#x27;,NULL,1700),(220,&#x27;NOC&#x27;,NULL,1700),(230,&#x27;IT &#x27;,NULL,1700),(240,&#x27;Gov&#x27;,NULL,1700),(250,&#x27;Ret&#x27;,NULL,1700),(260,&#x27;Rec&#x27;,NULL,1700),(270,&#x27;Pay&#x27;,NULL,1700);</span><br><span class="line"></span><br><span class="line">/*Table structure for table `employees` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `employees`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">  `employee_id` int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `first_name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `last_name` varchar(25) DEFAULT NULL,</span><br><span class="line">  `email` varchar(25) DEFAULT NULL,</span><br><span class="line">  `phone_number` varchar(20) DEFAULT NULL,</span><br><span class="line">  `job_id` varchar(10) DEFAULT NULL,</span><br><span class="line">  `salary` double(10,2) DEFAULT NULL,</span><br><span class="line">  `commission_pct` double(4,2) DEFAULT NULL,</span><br><span class="line">  `manager_id` int(6) DEFAULT NULL,</span><br><span class="line">  `department_id` int(4) DEFAULT NULL,</span><br><span class="line">  `hiredate` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`employee_id`),</span><br><span class="line">  KEY `dept_id_fk` (`department_id`),</span><br><span class="line">  KEY `job_id_fk` (`job_id`),</span><br><span class="line">  CONSTRAINT `dept_id_fk` FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`),</span><br><span class="line">  CONSTRAINT `job_id_fk` FOREIGN KEY (`job_id`) REFERENCES `jobs` (`job_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=207 DEFAULT CHARSET=gb2312;</span><br><span class="line"></span><br><span class="line">/*Data for the table `employees` */</span><br><span class="line"></span><br><span class="line">insert  into `employees`(`employee_id`,`first_name`,`last_name`,`email`,`phone_number`,`job_id`,`salary`,`commission_pct`,`manager_id`,`department_id`,`hiredate`) values (100,&#x27;Steven&#x27;,&#x27;K_ing&#x27;,&#x27;SKING&#x27;,&#x27;515.123.4567&#x27;,&#x27;AD_PRES&#x27;,24000.00,NULL,NULL,90,&#x27;1992-04-03 00:00:00&#x27;),(101,&#x27;Neena&#x27;,&#x27;Kochhar&#x27;,&#x27;NKOCHHAR&#x27;,&#x27;515.123.4568&#x27;,&#x27;AD_VP&#x27;,17000.00,NULL,100,90,&#x27;1992-04-03 00:00:00&#x27;),(102,&#x27;Lex&#x27;,&#x27;De Haan&#x27;,&#x27;LDEHAAN&#x27;,&#x27;515.123.4569&#x27;,&#x27;AD_VP&#x27;,17000.00,NULL,100,90,&#x27;1992-04-03 00:00:00&#x27;),(103,&#x27;Alexander&#x27;,&#x27;Hunold&#x27;,&#x27;AHUNOLD&#x27;,&#x27;590.423.4567&#x27;,&#x27;IT_PROG&#x27;,9000.00,NULL,102,60,&#x27;1992-04-03 00:00:00&#x27;),(104,&#x27;Bruce&#x27;,&#x27;Ernst&#x27;,&#x27;BERNST&#x27;,&#x27;590.423.4568&#x27;,&#x27;IT_PROG&#x27;,6000.00,NULL,103,60,&#x27;1992-04-03 00:00:00&#x27;),(105,&#x27;David&#x27;,&#x27;Austin&#x27;,&#x27;DAUSTIN&#x27;,&#x27;590.423.4569&#x27;,&#x27;IT_PROG&#x27;,4800.00,NULL,103,60,&#x27;1998-03-03 00:00:00&#x27;),(106,&#x27;Valli&#x27;,&#x27;Pataballa&#x27;,&#x27;VPATABAL&#x27;,&#x27;590.423.4560&#x27;,&#x27;IT_PROG&#x27;,4800.00,NULL,103,60,&#x27;1998-03-03 00:00:00&#x27;),(107,&#x27;Diana&#x27;,&#x27;Lorentz&#x27;,&#x27;DLORENTZ&#x27;,&#x27;590.423.5567&#x27;,&#x27;IT_PROG&#x27;,4200.00,NULL,103,60,&#x27;1998-03-03 00:00:00&#x27;),(108,&#x27;Nancy&#x27;,&#x27;Greenberg&#x27;,&#x27;NGREENBE&#x27;,&#x27;515.124.4569&#x27;,&#x27;FI_MGR&#x27;,12000.00,NULL,101,100,&#x27;1998-03-03 00:00:00&#x27;),(109,&#x27;Daniel&#x27;,&#x27;Faviet&#x27;,&#x27;DFAVIET&#x27;,&#x27;515.124.4169&#x27;,&#x27;FI_ACCOUNT&#x27;,9000.00,NULL,108,100,&#x27;1998-03-03 00:00:00&#x27;),(110,&#x27;John&#x27;,&#x27;Chen&#x27;,&#x27;JCHEN&#x27;,&#x27;515.124.4269&#x27;,&#x27;FI_ACCOUNT&#x27;,8200.00,NULL,108,100,&#x27;2000-09-09 00:00:00&#x27;),(111,&#x27;Ismael&#x27;,&#x27;Sciarra&#x27;,&#x27;ISCIARRA&#x27;,&#x27;515.124.4369&#x27;,&#x27;FI_ACCOUNT&#x27;,7700.00,NULL,108,100,&#x27;2000-09-09 00:00:00&#x27;),(112,&#x27;Jose Manuel&#x27;,&#x27;Urman&#x27;,&#x27;JMURMAN&#x27;,&#x27;515.124.4469&#x27;,&#x27;FI_ACCOUNT&#x27;,7800.00,NULL,108,100,&#x27;2000-09-09 00:00:00&#x27;),(113,&#x27;Luis&#x27;,&#x27;Popp&#x27;,&#x27;LPOPP&#x27;,&#x27;515.124.4567&#x27;,&#x27;FI_ACCOUNT&#x27;,6900.00,NULL,108,100,&#x27;2000-09-09 00:00:00&#x27;),(114,&#x27;Den&#x27;,&#x27;Raphaely&#x27;,&#x27;DRAPHEAL&#x27;,&#x27;515.127.4561&#x27;,&#x27;PU_MAN&#x27;,11000.00,NULL,100,30,&#x27;2000-09-09 00:00:00&#x27;),(115,&#x27;Alexander&#x27;,&#x27;Khoo&#x27;,&#x27;AKHOO&#x27;,&#x27;515.127.4562&#x27;,&#x27;PU_CLERK&#x27;,3100.00,NULL,114,30,&#x27;2000-09-09 00:00:00&#x27;),(116,&#x27;Shelli&#x27;,&#x27;Baida&#x27;,&#x27;SBAIDA&#x27;,&#x27;515.127.4563&#x27;,&#x27;PU_CLERK&#x27;,2900.00,NULL,114,30,&#x27;2000-09-09 00:00:00&#x27;),(117,&#x27;Sigal&#x27;,&#x27;Tobias&#x27;,&#x27;STOBIAS&#x27;,&#x27;515.127.4564&#x27;,&#x27;PU_CLERK&#x27;,2800.00,NULL,114,30,&#x27;2000-09-09 00:00:00&#x27;),(118,&#x27;Guy&#x27;,&#x27;Himuro&#x27;,&#x27;GHIMURO&#x27;,&#x27;515.127.4565&#x27;,&#x27;PU_CLERK&#x27;,2600.00,NULL,114,30,&#x27;2000-09-09 00:00:00&#x27;),(119,&#x27;Karen&#x27;,&#x27;Colmenares&#x27;,&#x27;KCOLMENA&#x27;,&#x27;515.127.4566&#x27;,&#x27;PU_CLERK&#x27;,2500.00,NULL,114,30,&#x27;2000-09-09 00:00:00&#x27;),(120,&#x27;Matthew&#x27;,&#x27;Weiss&#x27;,&#x27;MWEISS&#x27;,&#x27;650.123.1234&#x27;,&#x27;ST_MAN&#x27;,8000.00,NULL,100,50,&#x27;2004-02-06 00:00:00&#x27;),(121,&#x27;Adam&#x27;,&#x27;Fripp&#x27;,&#x27;AFRIPP&#x27;,&#x27;650.123.2234&#x27;,&#x27;ST_MAN&#x27;,8200.00,NULL,100,50,&#x27;2004-02-06 00:00:00&#x27;),(122,&#x27;Payam&#x27;,&#x27;Kaufling&#x27;,&#x27;PKAUFLIN&#x27;,&#x27;650.123.3234&#x27;,&#x27;ST_MAN&#x27;,7900.00,NULL,100,50,&#x27;2004-02-06 00:00:00&#x27;),(123,&#x27;Shanta&#x27;,&#x27;Vollman&#x27;,&#x27;SVOLLMAN&#x27;,&#x27;650.123.4234&#x27;,&#x27;ST_MAN&#x27;,6500.00,NULL,100,50,&#x27;2004-02-06 00:00:00&#x27;),(124,&#x27;Kevin&#x27;,&#x27;Mourgos&#x27;,&#x27;KMOURGOS&#x27;,&#x27;650.123.5234&#x27;,&#x27;ST_MAN&#x27;,5800.00,NULL,100,50,&#x27;2004-02-06 00:00:00&#x27;),(125,&#x27;Julia&#x27;,&#x27;Nayer&#x27;,&#x27;JNAYER&#x27;,&#x27;650.124.1214&#x27;,&#x27;ST_CLERK&#x27;,3200.00,NULL,120,50,&#x27;2004-02-06 00:00:00&#x27;),(126,&#x27;Irene&#x27;,&#x27;Mikkilineni&#x27;,&#x27;IMIKKILI&#x27;,&#x27;650.124.1224&#x27;,&#x27;ST_CLERK&#x27;,2700.00,NULL,120,50,&#x27;2004-02-06 00:00:00&#x27;),(127,&#x27;James&#x27;,&#x27;Landry&#x27;,&#x27;JLANDRY&#x27;,&#x27;650.124.1334&#x27;,&#x27;ST_CLERK&#x27;,2400.00,NULL,120,50,&#x27;2004-02-06 00:00:00&#x27;),(128,&#x27;Steven&#x27;,&#x27;Markle&#x27;,&#x27;SMARKLE&#x27;,&#x27;650.124.1434&#x27;,&#x27;ST_CLERK&#x27;,2200.00,NULL,120,50,&#x27;2004-02-06 00:00:00&#x27;),(129,&#x27;Laura&#x27;,&#x27;Bissot&#x27;,&#x27;LBISSOT&#x27;,&#x27;650.124.5234&#x27;,&#x27;ST_CLERK&#x27;,3300.00,NULL,121,50,&#x27;2004-02-06 00:00:00&#x27;),(130,&#x27;Mozhe&#x27;,&#x27;Atkinson&#x27;,&#x27;MATKINSO&#x27;,&#x27;650.124.6234&#x27;,&#x27;ST_CLERK&#x27;,2800.00,NULL,121,50,&#x27;2004-02-06 00:00:00&#x27;),(131,&#x27;James&#x27;,&#x27;Marlow&#x27;,&#x27;JAMRLOW&#x27;,&#x27;650.124.7234&#x27;,&#x27;ST_CLERK&#x27;,2500.00,NULL,121,50,&#x27;2004-02-06 00:00:00&#x27;),(132,&#x27;TJ&#x27;,&#x27;Olson&#x27;,&#x27;TJOLSON&#x27;,&#x27;650.124.8234&#x27;,&#x27;ST_CLERK&#x27;,2100.00,NULL,121,50,&#x27;2004-02-06 00:00:00&#x27;),(133,&#x27;Jason&#x27;,&#x27;Mallin&#x27;,&#x27;JMALLIN&#x27;,&#x27;650.127.1934&#x27;,&#x27;ST_CLERK&#x27;,3300.00,NULL,122,50,&#x27;2004-02-06 00:00:00&#x27;),(134,&#x27;Michael&#x27;,&#x27;Rogers&#x27;,&#x27;MROGERS&#x27;,&#x27;650.127.1834&#x27;,&#x27;ST_CLERK&#x27;,2900.00,NULL,122,50,&#x27;2002-12-23 00:00:00&#x27;),(135,&#x27;Ki&#x27;,&#x27;Gee&#x27;,&#x27;KGEE&#x27;,&#x27;650.127.1734&#x27;,&#x27;ST_CLERK&#x27;,2400.00,NULL,122,50,&#x27;2002-12-23 00:00:00&#x27;),(136,&#x27;Hazel&#x27;,&#x27;Philtanker&#x27;,&#x27;HPHILTAN&#x27;,&#x27;650.127.1634&#x27;,&#x27;ST_CLERK&#x27;,2200.00,NULL,122,50,&#x27;2002-12-23 00:00:00&#x27;),(137,&#x27;Renske&#x27;,&#x27;Ladwig&#x27;,&#x27;RLADWIG&#x27;,&#x27;650.121.1234&#x27;,&#x27;ST_CLERK&#x27;,3600.00,NULL,123,50,&#x27;2002-12-23 00:00:00&#x27;),(138,&#x27;Stephen&#x27;,&#x27;Stiles&#x27;,&#x27;SSTILES&#x27;,&#x27;650.121.2034&#x27;,&#x27;ST_CLERK&#x27;,3200.00,NULL,123,50,&#x27;2002-12-23 00:00:00&#x27;),(139,&#x27;John&#x27;,&#x27;Seo&#x27;,&#x27;JSEO&#x27;,&#x27;650.121.2019&#x27;,&#x27;ST_CLERK&#x27;,2700.00,NULL,123,50,&#x27;2002-12-23 00:00:00&#x27;),(140,&#x27;Joshua&#x27;,&#x27;Patel&#x27;,&#x27;JPATEL&#x27;,&#x27;650.121.1834&#x27;,&#x27;ST_CLERK&#x27;,2500.00,NULL,123,50,&#x27;2002-12-23 00:00:00&#x27;),(141,&#x27;Trenna&#x27;,&#x27;Rajs&#x27;,&#x27;TRAJS&#x27;,&#x27;650.121.8009&#x27;,&#x27;ST_CLERK&#x27;,3500.00,NULL,124,50,&#x27;2002-12-23 00:00:00&#x27;),(142,&#x27;Curtis&#x27;,&#x27;Davies&#x27;,&#x27;CDAVIES&#x27;,&#x27;650.121.2994&#x27;,&#x27;ST_CLERK&#x27;,3100.00,NULL,124,50,&#x27;2002-12-23 00:00:00&#x27;),(143,&#x27;Randall&#x27;,&#x27;Matos&#x27;,&#x27;RMATOS&#x27;,&#x27;650.121.2874&#x27;,&#x27;ST_CLERK&#x27;,2600.00,NULL,124,50,&#x27;2002-12-23 00:00:00&#x27;),(144,&#x27;Peter&#x27;,&#x27;Vargas&#x27;,&#x27;PVARGAS&#x27;,&#x27;650.121.2004&#x27;,&#x27;ST_CLERK&#x27;,2500.00,NULL,124,50,&#x27;2002-12-23 00:00:00&#x27;),(145,&#x27;John&#x27;,&#x27;Russell&#x27;,&#x27;JRUSSEL&#x27;,&#x27;011.44.1344.429268&#x27;,&#x27;SA_MAN&#x27;,14000.00,0.40,100,80,&#x27;2002-12-23 00:00:00&#x27;),(146,&#x27;Karen&#x27;,&#x27;Partners&#x27;,&#x27;KPARTNER&#x27;,&#x27;011.44.1344.467268&#x27;,&#x27;SA_MAN&#x27;,13500.00,0.30,100,80,&#x27;2002-12-23 00:00:00&#x27;),(147,&#x27;Alberto&#x27;,&#x27;Errazuriz&#x27;,&#x27;AERRAZUR&#x27;,&#x27;011.44.1344.429278&#x27;,&#x27;SA_MAN&#x27;,12000.00,0.30,100,80,&#x27;2002-12-23 00:00:00&#x27;),(148,&#x27;Gerald&#x27;,&#x27;Cambrault&#x27;,&#x27;GCAMBRAU&#x27;,&#x27;011.44.1344.619268&#x27;,&#x27;SA_MAN&#x27;,11000.00,0.30,100,80,&#x27;2002-12-23 00:00:00&#x27;),(149,&#x27;Eleni&#x27;,&#x27;Zlotkey&#x27;,&#x27;EZLOTKEY&#x27;,&#x27;011.44.1344.429018&#x27;,&#x27;SA_MAN&#x27;,10500.00,0.20,100,80,&#x27;2002-12-23 00:00:00&#x27;),(150,&#x27;Peter&#x27;,&#x27;Tucker&#x27;,&#x27;PTUCKER&#x27;,&#x27;011.44.1344.129268&#x27;,&#x27;SA_REP&#x27;,10000.00,0.30,145,80,&#x27;2014-03-05 00:00:00&#x27;),(151,&#x27;David&#x27;,&#x27;Bernstein&#x27;,&#x27;DBERNSTE&#x27;,&#x27;011.44.1344.345268&#x27;,&#x27;SA_REP&#x27;,9500.00,0.25,145,80,&#x27;2014-03-05 00:00:00&#x27;),(152,&#x27;Peter&#x27;,&#x27;Hall&#x27;,&#x27;PHALL&#x27;,&#x27;011.44.1344.478968&#x27;,&#x27;SA_REP&#x27;,9000.00,0.25,145,80,&#x27;2014-03-05 00:00:00&#x27;),(153,&#x27;Christopher&#x27;,&#x27;Olsen&#x27;,&#x27;COLSEN&#x27;,&#x27;011.44.1344.498718&#x27;,&#x27;SA_REP&#x27;,8000.00,0.20,145,80,&#x27;2014-03-05 00:00:00&#x27;),(154,&#x27;Nanette&#x27;,&#x27;Cambrault&#x27;,&#x27;NCAMBRAU&#x27;,&#x27;011.44.1344.987668&#x27;,&#x27;SA_REP&#x27;,7500.00,0.20,145,80,&#x27;2014-03-05 00:00:00&#x27;),(155,&#x27;Oliver&#x27;,&#x27;Tuvault&#x27;,&#x27;OTUVAULT&#x27;,&#x27;011.44.1344.486508&#x27;,&#x27;SA_REP&#x27;,7000.00,0.15,145,80,&#x27;2014-03-05 00:00:00&#x27;),(156,&#x27;Janette&#x27;,&#x27;K_ing&#x27;,&#x27;JKING&#x27;,&#x27;011.44.1345.429268&#x27;,&#x27;SA_REP&#x27;,10000.00,0.35,146,80,&#x27;2014-03-05 00:00:00&#x27;),(157,&#x27;Patrick&#x27;,&#x27;Sully&#x27;,&#x27;PSULLY&#x27;,&#x27;011.44.1345.929268&#x27;,&#x27;SA_REP&#x27;,9500.00,0.35,146,80,&#x27;2014-03-05 00:00:00&#x27;),(158,&#x27;Allan&#x27;,&#x27;McEwen&#x27;,&#x27;AMCEWEN&#x27;,&#x27;011.44.1345.829268&#x27;,&#x27;SA_REP&#x27;,9000.00,0.35,146,80,&#x27;2014-03-05 00:00:00&#x27;),(159,&#x27;Lindsey&#x27;,&#x27;Smith&#x27;,&#x27;LSMITH&#x27;,&#x27;011.44.1345.729268&#x27;,&#x27;SA_REP&#x27;,8000.00,0.30,146,80,&#x27;2014-03-05 00:00:00&#x27;),(160,&#x27;Louise&#x27;,&#x27;Doran&#x27;,&#x27;LDORAN&#x27;,&#x27;011.44.1345.629268&#x27;,&#x27;SA_REP&#x27;,7500.00,0.30,146,80,&#x27;2014-03-05 00:00:00&#x27;),(161,&#x27;Sarath&#x27;,&#x27;Sewall&#x27;,&#x27;SSEWALL&#x27;,&#x27;011.44.1345.529268&#x27;,&#x27;SA_REP&#x27;,7000.00,0.25,146,80,&#x27;2014-03-05 00:00:00&#x27;),(162,&#x27;Clara&#x27;,&#x27;Vishney&#x27;,&#x27;CVISHNEY&#x27;,&#x27;011.44.1346.129268&#x27;,&#x27;SA_REP&#x27;,10500.00,0.25,147,80,&#x27;2014-03-05 00:00:00&#x27;),(163,&#x27;Danielle&#x27;,&#x27;Greene&#x27;,&#x27;DGREENE&#x27;,&#x27;011.44.1346.229268&#x27;,&#x27;SA_REP&#x27;,9500.00,0.15,147,80,&#x27;2014-03-05 00:00:00&#x27;),(164,&#x27;Mattea&#x27;,&#x27;Marvins&#x27;,&#x27;MMARVINS&#x27;,&#x27;011.44.1346.329268&#x27;,&#x27;SA_REP&#x27;,7200.00,0.10,147,80,&#x27;2014-03-05 00:00:00&#x27;),(165,&#x27;David&#x27;,&#x27;Lee&#x27;,&#x27;DLEE&#x27;,&#x27;011.44.1346.529268&#x27;,&#x27;SA_REP&#x27;,6800.00,0.10,147,80,&#x27;2014-03-05 00:00:00&#x27;),(166,&#x27;Sundar&#x27;,&#x27;Ande&#x27;,&#x27;SANDE&#x27;,&#x27;011.44.1346.629268&#x27;,&#x27;SA_REP&#x27;,6400.00,0.10,147,80,&#x27;2014-03-05 00:00:00&#x27;),(167,&#x27;Amit&#x27;,&#x27;Banda&#x27;,&#x27;ABANDA&#x27;,&#x27;011.44.1346.729268&#x27;,&#x27;SA_REP&#x27;,6200.00,0.10,147,80,&#x27;2014-03-05 00:00:00&#x27;),(168,&#x27;Lisa&#x27;,&#x27;Ozer&#x27;,&#x27;LOZER&#x27;,&#x27;011.44.1343.929268&#x27;,&#x27;SA_REP&#x27;,11500.00,0.25,148,80,&#x27;2014-03-05 00:00:00&#x27;),(169,&#x27;Harrison&#x27;,&#x27;Bloom&#x27;,&#x27;HBLOOM&#x27;,&#x27;011.44.1343.829268&#x27;,&#x27;SA_REP&#x27;,10000.00,0.20,148,80,&#x27;2014-03-05 00:00:00&#x27;),(170,&#x27;Tayler&#x27;,&#x27;Fox&#x27;,&#x27;TFOX&#x27;,&#x27;011.44.1343.729268&#x27;,&#x27;SA_REP&#x27;,9600.00,0.20,148,80,&#x27;2014-03-05 00:00:00&#x27;),(171,&#x27;William&#x27;,&#x27;Smith&#x27;,&#x27;WSMITH&#x27;,&#x27;011.44.1343.629268&#x27;,&#x27;SA_REP&#x27;,7400.00,0.15,148,80,&#x27;2014-03-05 00:00:00&#x27;),(172,&#x27;Elizabeth&#x27;,&#x27;Bates&#x27;,&#x27;EBATES&#x27;,&#x27;011.44.1343.529268&#x27;,&#x27;SA_REP&#x27;,7300.00,0.15,148,80,&#x27;2014-03-05 00:00:00&#x27;),(173,&#x27;Sundita&#x27;,&#x27;Kumar&#x27;,&#x27;SKUMAR&#x27;,&#x27;011.44.1343.329268&#x27;,&#x27;SA_REP&#x27;,6100.00,0.10,148,80,&#x27;2014-03-05 00:00:00&#x27;),(174,&#x27;Ellen&#x27;,&#x27;Abel&#x27;,&#x27;EABEL&#x27;,&#x27;011.44.1644.429267&#x27;,&#x27;SA_REP&#x27;,11000.00,0.30,149,80,&#x27;2014-03-05 00:00:00&#x27;),(175,&#x27;Alyssa&#x27;,&#x27;Hutton&#x27;,&#x27;AHUTTON&#x27;,&#x27;011.44.1644.429266&#x27;,&#x27;SA_REP&#x27;,8800.00,0.25,149,80,&#x27;2014-03-05 00:00:00&#x27;),(176,&#x27;Jonathon&#x27;,&#x27;Taylor&#x27;,&#x27;JTAYLOR&#x27;,&#x27;011.44.1644.429265&#x27;,&#x27;SA_REP&#x27;,8600.00,0.20,149,80,&#x27;2014-03-05 00:00:00&#x27;),(177,&#x27;Jack&#x27;,&#x27;Livingston&#x27;,&#x27;JLIVINGS&#x27;,&#x27;011.44.1644.429264&#x27;,&#x27;SA_REP&#x27;,8400.00,0.20,149,80,&#x27;2014-03-05 00:00:00&#x27;),(178,&#x27;Kimberely&#x27;,&#x27;Grant&#x27;,&#x27;KGRANT&#x27;,&#x27;011.44.1644.429263&#x27;,&#x27;SA_REP&#x27;,7000.00,0.15,149,NULL,&#x27;2014-03-05 00:00:00&#x27;),(179,&#x27;Charles&#x27;,&#x27;Johnson&#x27;,&#x27;CJOHNSON&#x27;,&#x27;011.44.1644.429262&#x27;,&#x27;SA_REP&#x27;,6200.00,0.10,149,80,&#x27;2014-03-05 00:00:00&#x27;),(180,&#x27;Winston&#x27;,&#x27;Taylor&#x27;,&#x27;WTAYLOR&#x27;,&#x27;650.507.9876&#x27;,&#x27;SH_CLERK&#x27;,3200.00,NULL,120,50,&#x27;2014-03-05 00:00:00&#x27;),(181,&#x27;Jean&#x27;,&#x27;Fleaur&#x27;,&#x27;JFLEAUR&#x27;,&#x27;650.507.9877&#x27;,&#x27;SH_CLERK&#x27;,3100.00,NULL,120,50,&#x27;2014-03-05 00:00:00&#x27;),(182,&#x27;Martha&#x27;,&#x27;Sullivan&#x27;,&#x27;MSULLIVA&#x27;,&#x27;650.507.9878&#x27;,&#x27;SH_CLERK&#x27;,2500.00,NULL,120,50,&#x27;2014-03-05 00:00:00&#x27;),(183,&#x27;Girard&#x27;,&#x27;Geoni&#x27;,&#x27;GGEONI&#x27;,&#x27;650.507.9879&#x27;,&#x27;SH_CLERK&#x27;,2800.00,NULL,120,50,&#x27;2014-03-05 00:00:00&#x27;),(184,&#x27;Nandita&#x27;,&#x27;Sarchand&#x27;,&#x27;NSARCHAN&#x27;,&#x27;650.509.1876&#x27;,&#x27;SH_CLERK&#x27;,4200.00,NULL,121,50,&#x27;2014-03-05 00:00:00&#x27;),(185,&#x27;Alexis&#x27;,&#x27;Bull&#x27;,&#x27;ABULL&#x27;,&#x27;650.509.2876&#x27;,&#x27;SH_CLERK&#x27;,4100.00,NULL,121,50,&#x27;2014-03-05 00:00:00&#x27;),(186,&#x27;Julia&#x27;,&#x27;Dellinger&#x27;,&#x27;JDELLING&#x27;,&#x27;650.509.3876&#x27;,&#x27;SH_CLERK&#x27;,3400.00,NULL,121,50,&#x27;2014-03-05 00:00:00&#x27;),(187,&#x27;Anthony&#x27;,&#x27;Cabrio&#x27;,&#x27;ACABRIO&#x27;,&#x27;650.509.4876&#x27;,&#x27;SH_CLERK&#x27;,3000.00,NULL,121,50,&#x27;2014-03-05 00:00:00&#x27;),(188,&#x27;Kelly&#x27;,&#x27;Chung&#x27;,&#x27;KCHUNG&#x27;,&#x27;650.505.1876&#x27;,&#x27;SH_CLERK&#x27;,3800.00,NULL,122,50,&#x27;2014-03-05 00:00:00&#x27;),(189,&#x27;Jennifer&#x27;,&#x27;Dilly&#x27;,&#x27;JDILLY&#x27;,&#x27;650.505.2876&#x27;,&#x27;SH_CLERK&#x27;,3600.00,NULL,122,50,&#x27;2014-03-05 00:00:00&#x27;),(190,&#x27;Timothy&#x27;,&#x27;Gates&#x27;,&#x27;TGATES&#x27;,&#x27;650.505.3876&#x27;,&#x27;SH_CLERK&#x27;,2900.00,NULL,122,50,&#x27;2014-03-05 00:00:00&#x27;),(191,&#x27;Randall&#x27;,&#x27;Perkins&#x27;,&#x27;RPERKINS&#x27;,&#x27;650.505.4876&#x27;,&#x27;SH_CLERK&#x27;,2500.00,NULL,122,50,&#x27;2014-03-05 00:00:00&#x27;),(192,&#x27;Sarah&#x27;,&#x27;Bell&#x27;,&#x27;SBELL&#x27;,&#x27;650.501.1876&#x27;,&#x27;SH_CLERK&#x27;,4000.00,NULL,123,50,&#x27;2014-03-05 00:00:00&#x27;),(193,&#x27;Britney&#x27;,&#x27;Everett&#x27;,&#x27;BEVERETT&#x27;,&#x27;650.501.2876&#x27;,&#x27;SH_CLERK&#x27;,3900.00,NULL,123,50,&#x27;2014-03-05 00:00:00&#x27;),(194,&#x27;Samuel&#x27;,&#x27;McCain&#x27;,&#x27;SMCCAIN&#x27;,&#x27;650.501.3876&#x27;,&#x27;SH_CLERK&#x27;,3200.00,NULL,123,50,&#x27;2014-03-05 00:00:00&#x27;),(195,&#x27;Vance&#x27;,&#x27;Jones&#x27;,&#x27;VJONES&#x27;,&#x27;650.501.4876&#x27;,&#x27;SH_CLERK&#x27;,2800.00,NULL,123,50,&#x27;2014-03-05 00:00:00&#x27;),(196,&#x27;Alana&#x27;,&#x27;Walsh&#x27;,&#x27;AWALSH&#x27;,&#x27;650.507.9811&#x27;,&#x27;SH_CLERK&#x27;,3100.00,NULL,124,50,&#x27;2014-03-05 00:00:00&#x27;),(197,&#x27;Kevin&#x27;,&#x27;Feeney&#x27;,&#x27;KFEENEY&#x27;,&#x27;650.507.9822&#x27;,&#x27;SH_CLERK&#x27;,3000.00,NULL,124,50,&#x27;2014-03-05 00:00:00&#x27;),(198,&#x27;Donald&#x27;,&#x27;OConnell&#x27;,&#x27;DOCONNEL&#x27;,&#x27;650.507.9833&#x27;,&#x27;SH_CLERK&#x27;,2600.00,NULL,124,50,&#x27;2014-03-05 00:00:00&#x27;),(199,&#x27;Douglas&#x27;,&#x27;Grant&#x27;,&#x27;DGRANT&#x27;,&#x27;650.507.9844&#x27;,&#x27;SH_CLERK&#x27;,2600.00,NULL,124,50,&#x27;2014-03-05 00:00:00&#x27;),(200,&#x27;Jennifer&#x27;,&#x27;Whalen&#x27;,&#x27;JWHALEN&#x27;,&#x27;515.123.4444&#x27;,&#x27;AD_ASST&#x27;,4400.00,NULL,101,10,&#x27;2016-03-03 00:00:00&#x27;),(201,&#x27;Michael&#x27;,&#x27;Hartstein&#x27;,&#x27;MHARTSTE&#x27;,&#x27;515.123.5555&#x27;,&#x27;MK_MAN&#x27;,13000.00,NULL,100,20,&#x27;2016-03-03 00:00:00&#x27;),(202,&#x27;Pat&#x27;,&#x27;Fay&#x27;,&#x27;PFAY&#x27;,&#x27;603.123.6666&#x27;,&#x27;MK_REP&#x27;,6000.00,NULL,201,20,&#x27;2016-03-03 00:00:00&#x27;),(203,&#x27;Susan&#x27;,&#x27;Mavris&#x27;,&#x27;SMAVRIS&#x27;,&#x27;515.123.7777&#x27;,&#x27;HR_REP&#x27;,6500.00,NULL,101,40,&#x27;2016-03-03 00:00:00&#x27;),(204,&#x27;Hermann&#x27;,&#x27;Baer&#x27;,&#x27;HBAER&#x27;,&#x27;515.123.8888&#x27;,&#x27;PR_REP&#x27;,10000.00,NULL,101,70,&#x27;2016-03-03 00:00:00&#x27;),(205,&#x27;Shelley&#x27;,&#x27;Higgins&#x27;,&#x27;SHIGGINS&#x27;,&#x27;515.123.8080&#x27;,&#x27;AC_MGR&#x27;,12000.00,NULL,101,110,&#x27;2016-03-03 00:00:00&#x27;),(206,&#x27;William&#x27;,&#x27;Gietz&#x27;,&#x27;WGIETZ&#x27;,&#x27;515.123.8181&#x27;,&#x27;AC_ACCOUNT&#x27;,8300.00,NULL,205,110,&#x27;2016-03-03 00:00:00&#x27;);</span><br><span class="line"></span><br><span class="line">/*Table structure for table `jobs` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `jobs`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `jobs` (</span><br><span class="line">  `job_id` varchar(10) NOT NULL,</span><br><span class="line">  `job_title` varchar(35) DEFAULT NULL,</span><br><span class="line">  `min_salary` int(6) DEFAULT NULL,</span><br><span class="line">  `max_salary` int(6) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`job_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gb2312;</span><br><span class="line"></span><br><span class="line">/*Data for the table `jobs` */</span><br><span class="line"></span><br><span class="line">insert  into `jobs`(`job_id`,`job_title`,`min_salary`,`max_salary`) values (&#x27;AC_ACCOUNT&#x27;,&#x27;Public Accountant&#x27;,4200,9000),(&#x27;AC_MGR&#x27;,&#x27;Accounting Manager&#x27;,8200,16000),(&#x27;AD_ASST&#x27;,&#x27;Administration Assistant&#x27;,3000,6000),(&#x27;AD_PRES&#x27;,&#x27;President&#x27;,20000,40000),(&#x27;AD_VP&#x27;,&#x27;Administration Vice President&#x27;,15000,30000),(&#x27;FI_ACCOUNT&#x27;,&#x27;Accountant&#x27;,4200,9000),(&#x27;FI_MGR&#x27;,&#x27;Finance Manager&#x27;,8200,16000),(&#x27;HR_REP&#x27;,&#x27;Human Resources Representative&#x27;,4000,9000),(&#x27;IT_PROG&#x27;,&#x27;Programmer&#x27;,4000,10000),(&#x27;MK_MAN&#x27;,&#x27;Marketing Manager&#x27;,9000,15000),(&#x27;MK_REP&#x27;,&#x27;Marketing Representative&#x27;,4000,9000),(&#x27;PR_REP&#x27;,&#x27;Public Relations Representative&#x27;,4500,10500),(&#x27;PU_CLERK&#x27;,&#x27;Purchasing Clerk&#x27;,2500,5500),(&#x27;PU_MAN&#x27;,&#x27;Purchasing Manager&#x27;,8000,15000),(&#x27;SA_MAN&#x27;,&#x27;Sales Manager&#x27;,10000,20000),(&#x27;SA_REP&#x27;,&#x27;Sales Representative&#x27;,6000,12000),(&#x27;SH_CLERK&#x27;,&#x27;Shipping Clerk&#x27;,2500,5500),(&#x27;ST_CLERK&#x27;,&#x27;Stock Clerk&#x27;,2000,5000),(&#x27;ST_MAN&#x27;,&#x27;Stock Manager&#x27;,5500,8500);</span><br><span class="line"></span><br><span class="line">/*Table structure for table `locations` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `locations`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `locations` (</span><br><span class="line">  `location_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `street_address` varchar(40) DEFAULT NULL,</span><br><span class="line">  `postal_code` varchar(12) DEFAULT NULL,</span><br><span class="line">  `city` varchar(30) DEFAULT NULL,</span><br><span class="line">  `state_province` varchar(25) DEFAULT NULL,</span><br><span class="line">  `country_id` varchar(2) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`location_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3201 DEFAULT CHARSET=gb2312;</span><br><span class="line"></span><br><span class="line">/*Data for the table `locations` */</span><br><span class="line"></span><br><span class="line">insert  into `locations`(`location_id`,`street_address`,`postal_code`,`city`,`state_province`,`country_id`) values (1000,&#x27;1297 Via Cola di Rie&#x27;,&#x27;00989&#x27;,&#x27;Roma&#x27;,NULL,&#x27;IT&#x27;),(1100,&#x27;93091 Calle della Testa&#x27;,&#x27;10934&#x27;,&#x27;Venice&#x27;,NULL,&#x27;IT&#x27;),(1200,&#x27;2017 Shinjuku-ku&#x27;,&#x27;1689&#x27;,&#x27;Tokyo&#x27;,&#x27;Tokyo Prefecture&#x27;,&#x27;JP&#x27;),(1300,&#x27;9450 Kamiya-cho&#x27;,&#x27;6823&#x27;,&#x27;Hiroshima&#x27;,NULL,&#x27;JP&#x27;),(1400,&#x27;2014 Jabberwocky Rd&#x27;,&#x27;26192&#x27;,&#x27;Southlake&#x27;,&#x27;Texas&#x27;,&#x27;US&#x27;),(1500,&#x27;2011 Interiors Blvd&#x27;,&#x27;99236&#x27;,&#x27;South San Francisco&#x27;,&#x27;California&#x27;,&#x27;US&#x27;),(1600,&#x27;2007 Zagora St&#x27;,&#x27;50090&#x27;,&#x27;South Brunswick&#x27;,&#x27;New Jersey&#x27;,&#x27;US&#x27;),(1700,&#x27;2004 Charade Rd&#x27;,&#x27;98199&#x27;,&#x27;Seattle&#x27;,&#x27;Washington&#x27;,&#x27;US&#x27;),(1800,&#x27;147 Spadina Ave&#x27;,&#x27;M5V 2L7&#x27;,&#x27;Toronto&#x27;,&#x27;Ontario&#x27;,&#x27;CA&#x27;),(1900,&#x27;6092 Boxwood St&#x27;,&#x27;YSW 9T2&#x27;,&#x27;Whitehorse&#x27;,&#x27;Yukon&#x27;,&#x27;CA&#x27;),(2000,&#x27;40-5-12 Laogianggen&#x27;,&#x27;190518&#x27;,&#x27;Beijing&#x27;,NULL,&#x27;CN&#x27;),(2100,&#x27;1298 Vileparle (E)&#x27;,&#x27;490231&#x27;,&#x27;Bombay&#x27;,&#x27;Maharashtra&#x27;,&#x27;IN&#x27;),(2200,&#x27;12-98 Victoria Street&#x27;,&#x27;2901&#x27;,&#x27;Sydney&#x27;,&#x27;New South Wales&#x27;,&#x27;AU&#x27;),(2300,&#x27;198 Clementi North&#x27;,&#x27;540198&#x27;,&#x27;Singapore&#x27;,NULL,&#x27;SG&#x27;),(2400,&#x27;8204 Arthur St&#x27;,NULL,&#x27;London&#x27;,NULL,&#x27;UK&#x27;),(2500,&#x27;Magdalen Centre, The Oxford Science Park&#x27;,&#x27;OX9 9ZB&#x27;,&#x27;Oxford&#x27;,&#x27;Oxford&#x27;,&#x27;UK&#x27;),(2600,&#x27;9702 Chester Road&#x27;,&#x27;09629850293&#x27;,&#x27;Stretford&#x27;,&#x27;Manchester&#x27;,&#x27;UK&#x27;),(2700,&#x27;Schwanthalerstr. 7031&#x27;,&#x27;80925&#x27;,&#x27;Munich&#x27;,&#x27;Bavaria&#x27;,&#x27;DE&#x27;),(2800,&#x27;Rua Frei Caneca 1360 &#x27;,&#x27;01307-002&#x27;,&#x27;Sao Paulo&#x27;,&#x27;Sao Paulo&#x27;,&#x27;BR&#x27;),(2900,&#x27;20 Rue des Corps-Saints&#x27;,&#x27;1730&#x27;,&#x27;Geneva&#x27;,&#x27;Geneve&#x27;,&#x27;CH&#x27;),(3000,&#x27;Murtenstrasse 921&#x27;,&#x27;3095&#x27;,&#x27;Bern&#x27;,&#x27;BE&#x27;,&#x27;CH&#x27;),(3100,&#x27;Pieter Breughelstraat 837&#x27;,&#x27;3029SK&#x27;,&#x27;Utrecht&#x27;,&#x27;Utrecht&#x27;,&#x27;NL&#x27;),(3200,&#x27;Mariano Escobedo 9991&#x27;,&#x27;11932&#x27;,&#x27;Mexico City&#x27;,&#x27;Distrito Federal,&#x27;,&#x27;MX&#x27;);</span><br><span class="line"></span><br><span class="line">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class="line">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class="line">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class="line">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>基础查询:</p><p>一、语法<br><code>select 查询列表from 表名;</code></p><p>二、特点<br>1、查询列表可以是字段、常量、表达式、函数,也可以是多个<br>2、查询结果是一个虚拟表</p><p>三、示例<br>1、查询单个字段<br><code>select 字段名 from 表名;</code><br>2、查询多个字段<br><code>select 字段名,字段名 from 表名;</code><br>3、查询所有字段<br><code>select * from 表名</code><br>4、查询常量<br><code>select 常量值;</code><br>注意:字符型和日期型的常量值必须用单引号引起来,数值型不需要<br>5、查询函数<br><code>select 函数名(实参列表);</code><br>6、查询表达式<br><code>select 100/1234;</code><br>7、起别名<br>①as<br>②空格<br>8、去重<br><code>select distinct 字段名 from 表名;</code><br>9、+<br>作用:做加法运算<br><code>select 数值+数值;</code> 直接运算<br><code>select 字符+数值;</code>先试图将字符转换成数值,如果转换成功,则继续运算;否则转换成0,再做运算<br><code>select null+值;</code>结果都为null</p><p>10、补充:concat函数<br>功能:拼接字符<br><code>select concat(字符1,字符2,字符3,...);</code></p><p>11、补充:ifnull函数<br>功能:判断某字段或表达式是否为null,如果为null 返回指定的值,否则返回原本的值<br><code>select ifnull(commission_pct,0) from employees;</code></p><p>12、补充:isnull函数<br>功能:判断某字段或表达式是否为null,如果是,则返回1,否则返回0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#基础查询</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">select 查询列表 from 表名;</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、查询列表可以是表中的字段、常量值、表达式、函数</span><br><span class="line">2、查询的结果是一个虚拟的表格</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#1.查询表中的单个字段</span><br><span class="line"></span><br><span class="line">SELECT last_name FROM employees;</span><br><span class="line"></span><br><span class="line">#2.查询表中的多个字段</span><br><span class="line">SELECT last_name,salary,email FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询表中的所有字段</span><br><span class="line"></span><br><span class="line">#方式一:</span><br><span class="line">SELECT </span><br><span class="line">    `employee_id`,</span><br><span class="line">    `first_name`,</span><br><span class="line">    `last_name`,</span><br><span class="line">    `phone_number`,</span><br><span class="line">    `last_name`,</span><br><span class="line">    `job_id`,</span><br><span class="line">    `phone_number`,</span><br><span class="line">    `job_id`,</span><br><span class="line">    `salary`,</span><br><span class="line">    `commission_pct`,</span><br><span class="line">    `manager_id`,</span><br><span class="line">    `department_id`,</span><br><span class="line">    `hiredate` </span><br><span class="line">FROM</span><br><span class="line">    employees ;</span><br><span class="line">#方式二:  </span><br><span class="line"> SELECT * FROM employees;</span><br><span class="line"> </span><br><span class="line"> #4.查询常量值</span><br><span class="line"> SELECT 100;</span><br><span class="line"> SELECT &#x27;john&#x27;;</span><br><span class="line"> </span><br><span class="line"> #5.查询表达式</span><br><span class="line"> SELECT 100%98;</span><br><span class="line"> </span><br><span class="line"> #6.查询函数</span><br><span class="line"> </span><br><span class="line"> SELECT VERSION();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> #7.起别名</span><br><span class="line"> /*</span><br><span class="line"> ①便于理解</span><br><span class="line"> ②如果要查询的字段有重名的情况,使用别名可以区分开来</span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line"> #方式一:使用as</span><br><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二:使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例:查询salary,显示结果为 out put</span><br><span class="line">SELECT salary AS &quot;out put&quot; FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#8.去重</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例:查询员工表中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#9.+号的作用</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">java中的+号:</span><br><span class="line">①运算符,两个操作数都为数值型</span><br><span class="line">②连接符,只要有一个操作数为字符串</span><br><span class="line"></span><br><span class="line">mysql中的+号:</span><br><span class="line">仅仅只有一个功能:运算符</span><br><span class="line"></span><br><span class="line">select 100+90; 两个操作数都为数值型,则做加法运算</span><br><span class="line">select &#x27;123&#x27;+90;只要其中一方为字符型,试图将字符型数值转换成数值型</span><br><span class="line">      如果转换成功,则继续做加法运算</span><br><span class="line">select &#x27;john&#x27;+90; 如果转换失败,则将字符型数值转换成0</span><br><span class="line"></span><br><span class="line">select null+10; 只要其中一方为null,则结果肯定为null</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例:查询员工名和姓连接成一个字段,并显示为 姓名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) AS 结果;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  CONCAT(last_name,first_name) AS 姓名</span><br><span class="line">FROM</span><br><span class="line">  employees;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#1. 下面的语句是否可以执行成功  </span><br><span class="line">SELECT last_name , job_id , salary AS sal</span><br><span class="line">FROM employees; </span><br><span class="line"></span><br><span class="line"># 对</span><br><span class="line"></span><br><span class="line">#2.下面的语句是否可以执行成功  </span><br><span class="line">SELECT  *  FROM employees; </span><br><span class="line"></span><br><span class="line"># 对</span><br><span class="line"></span><br><span class="line">#4.显示表departments的结构,并查询其中的全部数据</span><br><span class="line"></span><br><span class="line">DESC departments;</span><br><span class="line">SELECT * FROM `departments`;</span><br><span class="line"></span><br><span class="line">#5.显示出表employees中的全部job_id(不能重复)</span><br><span class="line">SELECT DISTINCT job_id FROM employees;</span><br><span class="line"></span><br><span class="line">#6.显示出表employees的全部列,各个列之间用逗号连接,列头显示成OUT_PUT</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  IFNULL(commission_pct,0) AS 奖金率,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM </span><br><span class="line">  employees;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#-------------------------------------------</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  CONCAT(`first_name`,&#x27;,&#x27;,`last_name`,&#x27;,&#x27;,`job_id`,&#x27;,&#x27;,IFNULL(commission_pct,0)) AS out_put</span><br><span class="line">FROM</span><br><span class="line">  employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><p>条件查询:<br>一、语法<br>select 查询列表<br>from 表名<br>where 筛选条件</p><p>二、筛选条件的分类<br>1、简单条件运算符<br><code>&gt; &lt; = &lt;&gt; != &gt;= &lt;=  &lt;=&gt;安全等于</code><br>2、逻辑运算符<br><code>&amp;&amp; and</code><br><code>|| or</code><br><code>!  not</code><br>3、模糊查询<br>like:一般搭配通配符使用,可以判断字符型或数值型<br>通配符:<code>%任意多个字符,_任意单个字符</code></p><p><code>between and</code><br><code>in</code><br><code>is null /is not null</code>:用于判断null值</p><p>is null PK &lt;=&gt;<br>||普通类型的数值 | null值 | 可读性 |<br>|—-|—-|—-|—-|<br>|is null  | ×  |   √ |  √ |<br>|&lt;=&gt;  | √   |  √  | × |</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">分类:</span><br><span class="line">一、条件表达式</span><br><span class="line">  示例:salary&gt;10000</span><br><span class="line">  条件运算符:</span><br><span class="line">  &gt; &lt; &gt;= &lt;= = != &lt;&gt;</span><br><span class="line"></span><br><span class="line">二、逻辑表达式</span><br><span class="line">示例:salary&gt;10000 &amp;&amp; salary&lt;20000</span><br><span class="line"></span><br><span class="line">逻辑运算符:</span><br><span class="line"></span><br><span class="line">  and(&amp;&amp;):两个条件如果同时成立,结果为true,否则为false</span><br><span class="line">  or(||):两个条件只要有一个成立,结果为true,否则为false</span><br><span class="line">  not(!):如果条件成立,则not后为false,否则为true</span><br><span class="line"></span><br><span class="line">三、模糊查询</span><br><span class="line">示例:last_name like &#x27;a%&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">#条件查询</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">  select </span><br><span class="line">    查询列表</span><br><span class="line">  from</span><br><span class="line">    表名</span><br><span class="line">  where</span><br><span class="line">    筛选条件;</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">  一、按条件表达式筛选</span><br><span class="line">  </span><br><span class="line">  简单条件运算符:&gt; &lt; = (!=) &lt;&gt;(不等于) &gt;= &lt;=</span><br><span class="line">  </span><br><span class="line">  二、按逻辑表达式筛选</span><br><span class="line">  逻辑运算符:</span><br><span class="line">  作用:用于连接条件表达式</span><br><span class="line">    &amp;&amp; || !</span><br><span class="line">    and or not(建议)</span><br><span class="line">    </span><br><span class="line">  &amp;&amp;和and:两个条件都为true,结果为true,反之为false</span><br><span class="line">  ||或or: 只要有一个条件为true,结果为true,反之为false</span><br><span class="line">  !或not: 如果连接的条件本身为false,结果为true,反之为false</span><br><span class="line">  </span><br><span class="line">  三、模糊查询</span><br><span class="line">    like</span><br><span class="line">    between and</span><br><span class="line">    in</span><br><span class="line">    is null</span><br><span class="line">  </span><br><span class="line">*/</span><br><span class="line">#一、按条件表达式筛选</span><br><span class="line"></span><br><span class="line">#案例1:查询工资&gt;12000的员工信息</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  salary&gt;12000;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#案例2:查询部门编号不等于90号的员工名和部门编号</span><br><span class="line">SELECT </span><br><span class="line">  last_name,</span><br><span class="line">  department_id</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  department_id&lt;&gt;90;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、按逻辑表达式筛选</span><br><span class="line"></span><br><span class="line">#案例1:查询工资z在10000到20000之间的员工名、工资以及奖金</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  salary&gt;=10000 </span><br><span class="line">AND </span><br><span class="line">  salary&lt;=20000;</span><br><span class="line"></span><br><span class="line">#案例2:查询部门编号不是在90到110之间,或者工资高于15000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  NOT(department_id&gt;=90 AND  department_id&lt;=110) OR salary&gt;15000;</span><br><span class="line">#三、模糊查询</span><br><span class="line">/*</span><br><span class="line">like</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null|is not null</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">#1.like</span><br><span class="line">/*</span><br><span class="line">特点:</span><br><span class="line">①一般和通配符搭配使用</span><br><span class="line">  通配符:</span><br><span class="line">  % 任意多个字符,包含0个字符</span><br><span class="line">  _ 任意单个字符</span><br><span class="line">*、</span><br><span class="line"></span><br><span class="line">#案例1:查询员工名中包含字符a的员工信息</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">  *</span><br><span class="line">from</span><br><span class="line">  employees</span><br><span class="line">where</span><br><span class="line">  last_name like &#x27;%a%&#x27;;#abc</span><br><span class="line">#案例2:查询员工名中第三个字符为e,第五个字符为a的员工名和工资</span><br><span class="line">select</span><br><span class="line">  last_name,</span><br><span class="line">  salary</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  last_name LIKE &#x27;__n_l%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例3:查询员工名中第二个字符为_的员工名</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  last_name</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  last_name LIKE &#x27;_$_%&#x27; ESCAPE &#x27;$&#x27;;</span><br><span class="line">#2.between and</span><br><span class="line">/*</span><br><span class="line">①使用between and 可以提高语句的简洁度</span><br><span class="line">②包含临界值</span><br><span class="line">③两个临界值不要调换顺序</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例1:查询员工编号在100到120之间的员工信息</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  employee_id &gt;= 120 AND employee_id&lt;=100;</span><br><span class="line">#----------------------</span><br><span class="line">SELECT</span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  employee_id BETWEEN 120 AND 100;</span><br><span class="line"></span><br><span class="line">#3.in</span><br><span class="line">/*</span><br><span class="line">含义:判断某字段的值是否属于in列表中的某一项</span><br><span class="line">特点:</span><br><span class="line">  ①使用in提高语句简洁度</span><br><span class="line">  ②in列表的值类型必须一致或兼容</span><br><span class="line">  ③in列表中不支持通配符</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">#案例:查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  job_id</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  job_id = &#x27;IT_PROT&#x27; OR job_id = &#x27;AD_VP&#x27; OR JOB_ID =&#x27;AD_PRES&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  job_id</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  job_id IN( &#x27;IT_PROT&#x27; ,&#x27;AD_VP&#x27;,&#x27;AD_PRES&#x27;);</span><br><span class="line"></span><br><span class="line">#4、is null</span><br><span class="line">/*</span><br><span class="line">=或&lt;&gt;不能用于判断null值</span><br><span class="line">is null或is not null 可以判断null值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  commission_pct IS NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例1:查询有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  commission_pct IS NOT NULL;</span><br><span class="line"></span><br><span class="line">#----------以下为×</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line"></span><br><span class="line">WHERE </span><br><span class="line">  salary = 12000;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#安全等于  &lt;=&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line">WHERE</span><br><span class="line">  commission_pct &lt;=&gt;NULL;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">#案例2:查询工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">  last_name,</span><br><span class="line">  salary</span><br><span class="line">FROM</span><br><span class="line">  employees</span><br><span class="line"></span><br><span class="line">WHERE </span><br><span class="line">  salary &lt;=&gt; 12000;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#is null pk &lt;=&gt;</span><br><span class="line"></span><br><span class="line">#IS NULL:仅仅可以判断NULL值,可读性较高,建议使用</span><br><span class="line">#&lt;=&gt;    :既可以判断NULL值,又可以判断普通的数值,可读性较低</span><br></pre></td></tr></table></figure><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><p>排序查询:</p><p>一、语法<br><code>select 查询列表</code><br><code>from 表</code><br><code>where 筛选条件</code><br><code>order by 排序列表 [asc&#125;desc]</code></p><p>二、特点<br>1、asc :升序,如果不写默认升序<br>  desc:降序</p><p>2、排序列表 支持 单个字段、多个字段、函数、表达式、别名</p><p>3、order by的位置一般放在查询语句的最后(除limit语句之外)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#排序查询</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">select 查询列表</span><br><span class="line">from 表名</span><br><span class="line">[where  筛选条件]</span><br><span class="line">order by 排序的字段或表达式;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、asc代表的是升序,可以省略</span><br><span class="line">desc代表的是降序</span><br><span class="line"></span><br><span class="line">2、order by子句可以支持 单个字段、别名、表达式、函数、多个字段</span><br><span class="line"></span><br><span class="line">3、order by子句在查询语句的最后面,除了limit子句</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1、按单个字段排序</span><br><span class="line">SELECT * FROM employees ORDER BY salary DESC;</span><br><span class="line"></span><br><span class="line">#2、添加筛选条件再排序</span><br><span class="line"></span><br><span class="line">#案例:查询部门编号&gt;=90的员工信息,并按员工编号降序</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&gt;=90</span><br><span class="line">ORDER BY employee_id DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3、按表达式排序</span><br><span class="line">#案例:查询员工信息 按年薪降序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4、按别名排序</span><br><span class="line">#案例:查询员工信息 按年薪升序</span><br><span class="line"></span><br><span class="line">SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 ASC;</span><br><span class="line"></span><br><span class="line">#5、按函数排序</span><br><span class="line">#案例:查询员工名,并且按名字的长度降序</span><br><span class="line"></span><br><span class="line">SELECT LENGTH(last_name),last_name </span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"></span><br><span class="line">#6、按多个字段排序</span><br><span class="line"></span><br><span class="line">#案例:查询员工信息,要求先按工资降序,再按employee_id升序</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary DESC,employee_id ASC;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#1.查询员工的姓名和部门号和年薪,按年薪降序 按姓名升序</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_id,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 DESC,last_name ASC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.选择工资不在8000到17000的员工的姓名和工资,按工资降序</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line"></span><br><span class="line">WHERE salary NOT BETWEEN 8000 AND 17000</span><br><span class="line">ORDER BY salary DESC;</span><br><span class="line"></span><br><span class="line">#3.查询邮箱中包含e的员工信息,并先按邮箱的字节数降序,再按部门号升序</span><br><span class="line"></span><br><span class="line">SELECT *,LENGTH(email)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#x27;%e%&#x27;</span><br><span class="line">ORDER BY LENGTH(email) DESC,department_id ASC;</span><br></pre></td></tr></table></figure><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><p>一、概述<br>功能:类似于java中的方法<br>好处:提高重用性和隐藏实现细节<br>调用:<code>select 函数名(实参列表);</code><br>二、单行函数<br>1.字符函数<br>concat:连接<br>substr:截取子串<br>upper:变大写<br>lower:变小写<br>replace:替换<br>length:获取字节长度<br>trim:去前后空格<br>lpad:左填充<br>rpad:右填充<br>instr:获取子串第一次出现的索引</p><p>2.数学函数<br><code>ceil</code>:向上取整<br><code>round</code>:四舍五入<br><code>mod</code>:取模<br><code>floor</code>:向下取整<br><code>truncate</code>:截断<br><code>rand</code>:获取随机数,返回0-1之间的小数</p><p>3.日期函数<br>now:返回当前日期+时间<br>year:返回年<br>month:返回月<br>day:返回日<br>date_format:将日期转换成字符<br>curdate:返回当前日期<br>str_to_date:将字符转换成日期</p><div class="table-container"><table><thead><tr><th>格式符</th><th>功能</th></tr></thead><tbody><tr><td>%Y</td><td>四位的年份</td></tr><tr><td>%y</td><td>2位的年份</td></tr><tr><td>%m</td><td>月份(01,02,…,11,12)</td></tr><tr><td>%c</td><td>月份(1,2,…,11,12)</td></tr><tr><td>%d</td><td>日(01,02,…)</td></tr><tr><td>%H</td><td>小时(24小时制)</td></tr><tr><td>%h</td><td>小时(12小时制)</td></tr><tr><td>%i</td><td>分钟(00,01,…,59)</td></tr><tr><td>%s</td><td>秒(00,01,…,59)</td></tr></tbody></table></div><p>curtime:返回当前时间<br>hour:小时<br>minute:分钟<br>second:秒<br>datediff:返回两个日期相差的天数<br>monthname:以英文形式返回月</p><p>4.其他函数<br>version 当前数据库服务器的版本<br>database 当前打开的数据库<br>user当前用户<br>password(‘字符’):返回该字符的密码形式<br>md5(‘字符’):返回该字符的md5加密形式</p><p>5.流程控制函数<br><code>①if(条件表达式,表达式1,表达式2):如果条件表达式成立,返回表达式1,否则返回表达式2</code><br><code>②case情况1</code><br><code>case 变量或表达式或字段</code><br><code>when 常量1 then 值1</code><br><code>when 常量2 then 值2</code><br><code>...</code><br><code>else 值n</code><br><code>end</code><br><code>③case情况2</code><br><code>case</code><br><code>when 条件1 then 值1</code><br><code>when 条件2 then 值2</code><br><code>...</code><br><code>else 值n</code><br><code>end</code></p><p>三、分组函数<br>1、分类<br>max 最大值<br>min 最小值<br>sum 和<br>avg 平均值<br>count 计算个数</p><p>2、特点<br>①语法<br>select max(字段) from 表名;<br>②支持的类型<br>sum和avg一般用于处理数值型<br>max、min、count可以处理任何数据类型<br>③以上分组函数都忽略null<br>④都可以搭配distinct使用,实现去重的统计<br>select sum(distinct 字段) from 表;<br>⑤count函数<br><code>count(字段)</code>:统计该字段非空值的个数<br><code>count(*)</code>:统计结果集的行数</p><p>案例:查询每个部门的员工个数<br>1 xx    10<br>2 dd    20<br>3 mm    20<br>4 aa    40<br>5 hh    40</p><p>count(1):统计结果集的行数</p><p>效率上:<br><code>MyISAM存储引擎,count(*)最高</code><br><code>InnoDB存储引擎,count(*)和count(1)效率&gt;count(字段)</code></p><p>⑥ 和分组函数一同查询的字段,要求是group by后出现的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line">#常见函数</span><br><span class="line">/*</span><br><span class="line">概念:类似于java的方法,将一组逻辑语句封装在方法体中,对外暴露方法名</span><br><span class="line">好处:1、隐藏了实现细节  2、提高代码的重用性</span><br><span class="line">调用:select 函数名(实参列表) [from 表];</span><br><span class="line">特点:</span><br><span class="line">  ①叫什么(函数名)</span><br><span class="line">  ②干什么(函数功能)</span><br><span class="line">分类:</span><br><span class="line">  1、单行函数</span><br><span class="line">  如 concat、length、ifnull等</span><br><span class="line">  2、分组函数</span><br><span class="line">  </span><br><span class="line">  功能:做统计使用,又称为统计函数、聚合函数、组函数</span><br><span class="line">  </span><br><span class="line">常见函数:</span><br><span class="line">  一、单行函数</span><br><span class="line">  字符函数:</span><br><span class="line">  length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)</span><br><span class="line">  concat</span><br><span class="line">  substr</span><br><span class="line">  instr</span><br><span class="line">  trim</span><br><span class="line">  upper</span><br><span class="line">  lower</span><br><span class="line">  lpad</span><br><span class="line">  rpad</span><br><span class="line">  replace</span><br><span class="line">  </span><br><span class="line">  数学函数:</span><br><span class="line">  round</span><br><span class="line">  ceil</span><br><span class="line">  floor</span><br><span class="line">  truncate</span><br><span class="line">  mod</span><br><span class="line">  </span><br><span class="line">  日期函数:</span><br><span class="line">  now</span><br><span class="line">  curdate</span><br><span class="line">  curtime</span><br><span class="line">  year</span><br><span class="line">  month</span><br><span class="line">  monthname</span><br><span class="line">  day</span><br><span class="line">  hour</span><br><span class="line">  minute</span><br><span class="line">  second</span><br><span class="line">  str_to_date</span><br><span class="line">  date_format</span><br><span class="line">  其他函数:</span><br><span class="line">  version</span><br><span class="line">  database</span><br><span class="line">  user</span><br><span class="line">  控制函数</span><br><span class="line">  if</span><br><span class="line">  case</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一、字符函数</span><br><span class="line"></span><br><span class="line">#1.length 获取参数值的字节个数</span><br><span class="line">SELECT LENGTH(&#x27;john&#x27;);</span><br><span class="line">SELECT LENGTH(&#x27;张三丰hahaha&#x27;);</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;%char%&#x27;;</span><br><span class="line"></span><br><span class="line">#2.concat 拼接字符串</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(last_name,&#x27;_&#x27;,first_name) 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#3.upper、lower</span><br><span class="line">SELECT UPPER(&#x27;john&#x27;);</span><br><span class="line">SELECT LOWER(&#x27;joHn&#x27;);</span><br><span class="line">#示例:将姓变大写,名变小写,然后拼接</span><br><span class="line">SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#4.substr、substring</span><br><span class="line">#注意:索引从1开始</span><br><span class="line">#截取从指定索引处后面所有字符</span><br><span class="line">SELECT SUBSTR(&#x27;李莫愁爱上了陆展元&#x27;,7)  out_put;</span><br><span class="line"></span><br><span class="line">#截取从指定索引处指定字符长度的字符 第一个参数为开始位置,第二个参数为截取字符长度</span><br><span class="line">SELECT SUBSTR(&#x27;李莫愁爱上了陆展元&#x27;,1,3) out_put;</span><br><span class="line"></span><br><span class="line">#案例:姓名中首字符大写,其他字符小写然后用_拼接,显示出来</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),&#x27;_&#x27;,LOWER(SUBSTR(last_name,2)))  out_put</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#5.instr 返回子串第一次出现的索引,如果找不到返回0</span><br><span class="line"></span><br><span class="line">SELECT INSTR(&#x27;杨不殷六侠悔爱上了殷六侠&#x27;,&#x27;殷八侠&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#6.trim 去除前后空格</span><br><span class="line"></span><br><span class="line">SELECT LENGTH(TRIM(&#x27;    张翠山    &#x27;)) AS out_put;</span><br><span class="line"></span><br><span class="line">SELECT TRIM(&#x27;aa&#x27; FROM &#x27;aaaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;)  AS out_put;</span><br><span class="line"></span><br><span class="line">#7.lpad 用指定的字符实现左填充指定长度</span><br><span class="line"></span><br><span class="line">SELECT LPAD(&#x27;殷素素&#x27;,12,&#x27;*&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#8.rpad 用指定的字符实现右填充指定长度</span><br><span class="line"></span><br><span class="line">SELECT RPAD(&#x27;殷素素&#x27;,12,&#x27;ab&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#9.replace 替换</span><br><span class="line"></span><br><span class="line">SELECT REPLACE(&#x27;周芷若周芷若周芷若周芷若张无忌爱上了周芷若&#x27;,&#x27;周芷若&#x27;,&#x27;赵敏&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#二、数学函数</span><br><span class="line"></span><br><span class="line">#round 四舍五入</span><br><span class="line">SELECT ROUND(-1.55);#-2</span><br><span class="line">SELECT ROUND(1.567,2);#俩位小数 1.57</span><br><span class="line"></span><br><span class="line">#ceil 向上取整,返回&gt;=该参数的最小整数</span><br><span class="line"></span><br><span class="line">SELECT CEIL(-1.02);#-1</span><br><span class="line"></span><br><span class="line">#floor 向下取整,返回&lt;=该参数的最大整数</span><br><span class="line">SELECT FLOOR(-9.99);#-10</span><br><span class="line"></span><br><span class="line">#truncate 截断</span><br><span class="line"></span><br><span class="line">SELECT TRUNCATE(1.69999,1);#1.6</span><br><span class="line"></span><br><span class="line">#mod取余</span><br><span class="line">/*</span><br><span class="line">mod(a,b) :  a-a/b*b</span><br><span class="line"></span><br><span class="line">mod(-10,-3):-10- (-10)/(-3)*(-3)=-1</span><br><span class="line">*/</span><br><span class="line">SELECT MOD(10,-3);#1</span><br><span class="line">SELECT 10%3;#1</span><br><span class="line"></span><br><span class="line">#三、日期函数</span><br><span class="line"></span><br><span class="line">#now 返回当前系统日期+时间</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#curdate 返回当前系统日期,不包含时间</span><br><span class="line">SELECT CURDATE();</span><br><span class="line"></span><br><span class="line">#curtime 返回当前时间,不包含日期</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">#可以获取指定的部分,年、月、日、小时、分钟、秒</span><br><span class="line">SELECT YEAR(NOW()) 年;</span><br><span class="line">SELECT YEAR(&#x27;1998-1-1&#x27;) 年;</span><br><span class="line"></span><br><span class="line">SELECT  YEAR(hiredate) 年 FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MONTH(NOW()) 月;</span><br><span class="line">SELECT MONTHNAME(NOW());</span><br><span class="line"></span><br><span class="line">#str_to_date 将字符通过指定的格式转换成日期</span><br><span class="line"></span><br><span class="line">SELECT STR_TO_DATE(&#x27;1998-3-2&#x27;,&#x27;%Y-%c-%d&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#查询入职日期为1992--4-3的员工信息</span><br><span class="line">SELECT * FROM employees WHERE hiredate = &#x27;1992-4-3&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees WHERE hiredate = STR_TO_DATE(&#x27;4-3 1992&#x27;,&#x27;%c-%d %Y&#x27;);</span><br><span class="line"></span><br><span class="line">#date_format 将日期转换成字符</span><br><span class="line"></span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%y年%m月%d日&#x27;) AS out_put;</span><br><span class="line"></span><br><span class="line">#查询有奖金的员工名和入职日期(xx月/xx日 xx年)</span><br><span class="line">SELECT last_name,DATE_FORMAT(hiredate,&#x27;%m月/%d日 %y年&#x27;) 入职日期</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL;</span><br><span class="line"></span><br><span class="line">#四、其他函数</span><br><span class="line"></span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line"></span><br><span class="line">#五、流程控制函数</span><br><span class="line">#1.if函数: if else 的效果</span><br><span class="line"></span><br><span class="line">SELECT IF(10&lt;5,&#x27;对&#x27;,&#x27;错&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT last_name,commission_pct,IF(commission_pct IS NULL,&#x27;没奖金,呵呵&#x27;,&#x27;有奖金,嘻嘻&#x27;) 备注</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.case函数的使用一: switch case 的效果</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">java中</span><br><span class="line">switch(变量或表达式)&#123;</span><br><span class="line">  case 常量1:语句1;break;</span><br><span class="line">  ...</span><br><span class="line">  default:语句n;break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql中</span><br><span class="line"></span><br><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1;</span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n;</span><br><span class="line">end</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*案例:查询员工的工资,要求</span><br><span class="line"></span><br><span class="line">部门号=30,显示的工资为1.1倍</span><br><span class="line">部门号=40,显示的工资为1.2倍</span><br><span class="line">部门号=50,显示的工资为1.3倍</span><br><span class="line">其他部门,显示的工资为原工资</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT salary 原始工资,department_id,</span><br><span class="line">CASE department_id</span><br><span class="line">WHEN 30 THEN salary*1.1</span><br><span class="line">WHEN 40 THEN salary*1.2</span><br><span class="line">WHEN 50 THEN salary*1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END AS 新工资</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.case 函数的使用二:类似于 多重if</span><br><span class="line">/*</span><br><span class="line">java中:</span><br><span class="line">if(条件1)&#123;</span><br><span class="line">  语句1;</span><br><span class="line">&#125;else if(条件2)&#123;</span><br><span class="line">  语句2;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">  语句n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql中:</span><br><span class="line"></span><br><span class="line">case </span><br><span class="line">when 条件1 then 要显示的值1或语句1</span><br><span class="line">when 条件2 then 要显示的值2或语句2</span><br><span class="line">。。。</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line">end</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">案例:查询员工的工资的情况</span><br><span class="line">如果工资&gt;20000,显示A级别</span><br><span class="line">如果工资&gt;15000,显示B级别</span><br><span class="line">如果工资&gt;10000,显示C级别</span><br><span class="line">否则,显示D级别</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT salary,</span><br><span class="line">CASE </span><br><span class="line">WHEN salary&gt;20000 THEN &#x27;A&#x27;</span><br><span class="line">WHEN salary&gt;15000 THEN &#x27;B&#x27;</span><br><span class="line">WHEN salary&gt;10000 THEN &#x27;C&#x27;</span><br><span class="line">ELSE &#x27;D&#x27;</span><br><span class="line">END AS 工资级别</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>案例:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#1. 显示系统时间(注:日期+时间)</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#2. 查询员工号,姓名,工资,以及工资提高百分之20%后的结果(new salary)</span><br><span class="line"></span><br><span class="line">SELECT employee_id,last_name,salary,salary*1.2 &quot;new salary&quot;</span><br><span class="line">FROM employees;</span><br><span class="line">#3. 将员工的姓名按首字母排序,并写出姓名的长度(length)</span><br><span class="line"></span><br><span class="line">SELECT LENGTH(last_name) 长度,SUBSTR(last_name,1,1) 首字符,last_name</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 首字符;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4. 做一个查询,产生下面的结果</span><br><span class="line">/*</span><br><span class="line">&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span><br><span class="line">Dream Salary</span><br><span class="line">King earns 24000 monthly but wants 72000</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(last_name,&#x27; earns &#x27;,salary,&#x27; monthly but wants &#x27;,salary*3) AS &quot;Dream Salary&quot;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary=24000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5. 使用case-when,按照下面的条件:</span><br><span class="line">/*</span><br><span class="line">job                  grade</span><br><span class="line">AD_PRES            A</span><br><span class="line">ST_MAN             B</span><br><span class="line">IT_PROG             C</span><br><span class="line">SA_REP              D</span><br><span class="line">ST_CLERK           E</span><br><span class="line">产生下面的结果</span><br><span class="line">Last_name Job_id  Grade</span><br><span class="line">king  AD_PRES A</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id AS  job,</span><br><span class="line">CASE job_id</span><br><span class="line">WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27; </span><br><span class="line">WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27; </span><br><span class="line">WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27; </span><br><span class="line">WHEN &#x27;SA_PRE&#x27; THEN &#x27;D&#x27;</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;</span><br><span class="line">END AS Grade</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id = &#x27;AD_PRES&#x27;;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><p>一、语法<br><code>select 分组函数,分组后的字段</code><br><code>from 表</code><br><code>[where 筛选条件]</code><br><code>group by 分组的字段</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序列表]</code></p><p>二、特点</p><div class="table-container"><table><thead><tr><th></th><th>使用关键字</th><th>筛选的表</th><th>位置</th></tr></thead><tbody><tr><td>分组前筛选</td><td>where</td><td>原始表</td><td>group by的前面</td></tr><tr><td>分组后筛选</td><td>having</td><td>分组后的结果</td><td>group by 的后面</td></tr></tbody></table></div><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#分组函数</span><br><span class="line">/*</span><br><span class="line">功能:用作统计使用,又称为聚合函数或统计函数或组函数</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、sum、avg一般用于处理数值型</span><br><span class="line">   max、min、count可以处理任何类型</span><br><span class="line">2、以上分组函数都忽略null值</span><br><span class="line"></span><br><span class="line">3、可以和distinct搭配实现去重的运算</span><br><span class="line"></span><br><span class="line">4、count函数的单独介绍</span><br><span class="line">一般使用count(*)用作统计行数</span><br><span class="line"></span><br><span class="line">5、和分组函数一同查询的字段要求是group by后的字段</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#1、简单 的使用</span><br><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT MIN(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,AVG(salary) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2、参数支持哪些类型</span><br><span class="line">#SUM、AVG不支持字符型、日期型,一般指适用于数字型</span><br><span class="line">SELECT SUM(last_name) ,AVG(last_name) FROM employees;</span><br><span class="line">SELECT SUM(hiredate) ,AVG(hiredate) FROM employees;</span><br><span class="line">#MAX、MIN支持字符型、日期型</span><br><span class="line">SELECT MAX(last_name),MIN(last_name) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MAX(hiredate),MIN(hiredate) FROM employees;</span><br><span class="line">#COUNT也都支持字符型、日期型</span><br><span class="line">SELECT COUNT(commission_pct) FROM employees;</span><br><span class="line">SELECT COUNT(last_name) FROM employees;</span><br><span class="line"></span><br><span class="line">#3、是否忽略null</span><br><span class="line">#SUM、AVG忽略null</span><br><span class="line"></span><br><span class="line">SELECT SUM(commission_pct) ,AVG(commission_pct),SUM(commission_pct)/35,SUM(commission_pct)/107 FROM employees;</span><br><span class="line">#MAX、MIN也忽略null</span><br><span class="line">SELECT MAX(commission_pct) ,MIN(commission_pct) FROM employees;</span><br><span class="line">#COUNT也忽略null</span><br><span class="line">SELECT COUNT(commission_pct) FROM employees;</span><br><span class="line">SELECT commission_pct FROM employees;</span><br><span class="line"></span><br><span class="line">#4、和distinct(去重)搭配</span><br><span class="line"></span><br><span class="line">SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">#5、count函数的详细介绍</span><br><span class="line"></span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(1) FROM employees;</span><br><span class="line">/*</span><br><span class="line">效率:</span><br><span class="line">MYISAM存储引擎下  ,COUNT(*)的效率高</span><br><span class="line">INNODB存储引擎下,COUNT(*)和COUNT(1)的效率差不多,比COUNT(字段)要高一些</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#6、和分组函数一同查询的字段有限制</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary),employee_id  FROM employees;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#1.查询公司员工工资的最大值,最小值,平均值,总和</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary) 最大值,MIN(salary) 最小值,AVG(salary) 平均值,SUM(salary) 和</span><br><span class="line">FROM employees;</span><br><span class="line">#2.查询员工表中的最大入职时间和最小入职时间的相差天数 (DIFFRENCE)</span><br><span class="line"></span><br><span class="line">SELECT MAX(hiredate) 最大,MIN(hiredate) 最小,DATEDIFF(MAX(hiredate),MIN(hiredate)) DIFFRENCE</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) DIFFRENCE</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT DATEDIFF(&#x27;1995-2-7&#x27;,&#x27;1995-2-6&#x27;);</span><br><span class="line"></span><br><span class="line">#3.查询部门编号为90的员工个数</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) FROM employees WHERE department_id = 90;</span><br></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">#分组查询</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">select 查询列表</span><br><span class="line">from 表</span><br><span class="line">[where 筛选条件]</span><br><span class="line">group by 分组的字段</span><br><span class="line">[order by 排序的字段];</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、和分组函数一同查询的字段必须是group by后出现的字段</span><br><span class="line">2、筛选分为两类:分组前筛选和分组后筛选</span><br><span class="line">          针对的表            位置          连接的关键字</span><br><span class="line">分组前筛选 原始表              group by前   where</span><br><span class="line">分组后筛选 group by后的结果集  group by后    having</span><br><span class="line"></span><br><span class="line">问题1:分组函数做筛选能不能放在where后面</span><br><span class="line">答:不能</span><br><span class="line"></span><br><span class="line">问题2:where——group by——having</span><br><span class="line"></span><br><span class="line">一般来讲,能用分组前筛选的,尽量使用分组前筛选,提高效率</span><br><span class="line"></span><br><span class="line">3、分组可以按单个字段也可以按多个字段</span><br><span class="line">4、可以搭配着排序使用(排序是放在整个分组查询的最后)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#引入:查询每个部门的员工个数</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) FROM employees WHERE department_id=90;</span><br><span class="line">#1.简单的分组</span><br><span class="line"></span><br><span class="line">#案例1:查询每个工种的员工平均工资</span><br><span class="line">SELECT AVG(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#案例2:查询每个位置的部门个数</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*),location_id</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY location_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2、可以实现分组前的筛选</span><br><span class="line"></span><br><span class="line">#案例1:查询邮箱中包含a字符的 每个部门的最高工资</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#x27;%a%&#x27;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例2:查询有奖金的每个领导手下员工的最高工资</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line">#3、分组后筛选</span><br><span class="line"></span><br><span class="line">#案例:查询哪个部门的员工个数&gt;5</span><br><span class="line"></span><br><span class="line">#①查询每个部门的员工个数</span><br><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#② 筛选刚才①结果</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING COUNT(*)&gt;5;</span><br><span class="line"></span><br><span class="line">#案例2:每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span><br><span class="line"></span><br><span class="line">SELECT job_id,MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">#案例3:领导编号&gt;102的每个领导手下的最低工资大于5000的领导编号和最低工资</span><br><span class="line"></span><br><span class="line">SELECT manager_id,MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br><span class="line"></span><br><span class="line">#4.添加排序</span><br><span class="line"></span><br><span class="line">#案例:每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序</span><br><span class="line"></span><br><span class="line">SELECT job_id,MAX(salary) m</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING m&gt;6000</span><br><span class="line">ORDER BY m ;</span><br><span class="line"></span><br><span class="line">#按表达式或函数分组</span><br><span class="line">#案例:按员工姓名的长度分组,查询每一组的员工个数,筛选员工个数&gt;5的有哪些</span><br><span class="line">SELECT COUNT(*),length(last_name) last_name</span><br><span class="line">FROM employees</span><br><span class="line">group by length(last_name)</span><br><span class="line">having count(*)&gt;5;</span><br><span class="line"></span><br><span class="line">#5.按多个字段分组</span><br><span class="line"></span><br><span class="line">#案例:查询每个工种每个部门的最低工资,并按最低工资降序</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary),job_id,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id,job_id</span><br><span class="line">ORDER BY MIN(salary) DESC;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#1.查询各job_id的员工工资的最大值,最小值,平均值,总和,并按job_id升序</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY job_id;</span><br><span class="line"></span><br><span class="line">#2.查询员工最高工资和最低工资的差距(DIFFERENCE)</span><br><span class="line">SELECT MAX(salary)-MIN(salary) DIFFRENCE</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询各个管理者手下员工的最低工资,其中最低工资不能低于6000,没有管理者的员工不计算在内</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IS NOT NULL</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;=6000;</span><br><span class="line"></span><br><span class="line">#4.查询所有部门的编号,员工数量和工资平均值,并按平均工资降序</span><br><span class="line">SELECT department_id,COUNT(*),AVG(salary) a</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY a DESC;</span><br><span class="line"></span><br><span class="line">#5.选择具有各个job_id的员工人数</span><br><span class="line">SELECT COUNT(*) 个数,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h3 id="2-6-连接查询"><a href="#2-6-连接查询" class="headerlink" title="2.6 连接查询"></a>2.6 连接查询</h3><p>一、含义<br>当查询中涉及到了多个表的字段,需要使用多表连接<br>select 字段1,字段2<br>from 表1,表2,…;</p><p>笛卡尔乘积:当查询多个表时,没有添加有效的连接条件,导致多个表所有行实现完全连接<br>如何解决:添加有效的连接条件</p><p>二、分类</p><p>按年代分类:<br>  sql92:<br>    等值<br>    非等值<br>    自连接</p><p>  也支持一部分外连接(用于oracle、sqlserver,mysql不支持)<br>  sql99<code>[推荐使用]</code><br>    内连接<br>      等值<br>      非等值<br>      自连接<br>    外连接<br>      左外<br>      右外<br>      全外(mysql不支持)<br>    交叉连接   </p><p>三、SQL92语法<br>1、等值连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名,表2 别名</code><br><code>where 表1.key=表2.key</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code><br>特点:<br>  1.一般为表起别名<br>  2.多表的顺序可以调换<br>  3.n表连接至少需要n-1个连接条件<br>  4.等值连接的结果是多表的交集部分</p><p>2、非等值连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名,表2 别名</code><br><code>where 非等值的连接条件</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code><br>3、自连接</p><p>语法:<br><code>select 查询列表</code><br><code>from 表 别名1,表 别名2</code><br><code>where 等值的连接条件</code><br><code>[and 筛选条件]</code><br><code>[group by 分组字段]</code><br><code>[having 分组后的筛选]</code><br><code>[order by 排序字段]</code></p><p>四、SQL99语法<br>1、内连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名</code><br><code>[inner] join 表2 别名 on 连接条件</code><br><code>where 筛选条件</code><br><code>group by 分组列表</code><br><code>having 分组后的筛选</code><br><code>order by 排序列表</code><br><code>limit 子句;</code></p><p>特点:<br>①表的顺序可以调换<br>②内连接的结果=多表的交集<br>③n表连接至少需要n-1个连接条件</p><p>分类:<br>等值连接<br>非等值连接<br>自连接</p><p>2、外连接<br>语法:<br><code>select 查询列表</code><br><code>from 表1 别名</code><br><code>left|right|full[outer] join 表2 别名 on 连接条件</code><br><code>where 筛选条件</code><br><code>group by 分组列表</code><br><code>having 分组后的筛选</code><br><code>order by 排序列表</code><br><code>limit 子句;</code><br>特点:<br>①查询的结果=主表中所有的行,如果从表和它匹配的将显示匹配行,如果从表没有匹配的则显示null<br>②left join 左边的就是主表,right join 右边的就是主表<br>  full join 两边都是主表<br>③一般用于查询除了交集部分的剩余的不匹配的行</p><p>3、交叉连接</p><p>语法:<br>select 查询列表<br>from 表1 别名<br>cross join 表2 别名;</p><p>特点:<br>类似于笛卡尔乘积</p><p>添加girls数据库:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/*!40101 SET NAMES utf8 */;</span><br><span class="line"></span><br><span class="line">/*!40101 SET SQL_MODE=&#x27;&#x27;*/;</span><br><span class="line"></span><br><span class="line">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span><br><span class="line">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class="line">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */;</span><br><span class="line">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class="line">CREATE DATABASE /*!32312 IF NOT EXISTS*/`girls` /*!40100 DEFAULT CHARACTER SET utf8 */;</span><br><span class="line"></span><br><span class="line">USE `girls`;</span><br><span class="line"></span><br><span class="line">/*Table structure for table `admin` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `admin`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `admin` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(10) NOT NULL,</span><br><span class="line">  `password` varchar(10) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `admin` */</span><br><span class="line"></span><br><span class="line">insert  into `admin`(`id`,`username`,`password`) values (1,&#x27;john&#x27;,&#x27;8888&#x27;),(2,&#x27;lyt&#x27;,&#x27;6666&#x27;);</span><br><span class="line"></span><br><span class="line">/*Table structure for table `beauty` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `beauty`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `beauty` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(50) NOT NULL,</span><br><span class="line">  `sex` char(1) DEFAULT &#x27;女&#x27;,</span><br><span class="line">  `borndate` datetime DEFAULT &#x27;1987-01-01 00:00:00&#x27;,</span><br><span class="line">  `phone` varchar(11) NOT NULL,</span><br><span class="line">  `photo` blob,</span><br><span class="line">  `boyfriend_id` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `beauty` */</span><br><span class="line"></span><br><span class="line">insert  into `beauty`(`id`,`name`,`sex`,`borndate`,`phone`,`photo`,`boyfriend_id`) values (1,&#x27;柳岩&#x27;,&#x27;女&#x27;,&#x27;1988-02-03 00:00:00&#x27;,&#x27;18209876577&#x27;,NULL,8),(2,&#x27;苍老师&#x27;,&#x27;女&#x27;,&#x27;1987-12-30 00:00:00&#x27;,&#x27;18219876577&#x27;,NULL,9),(3,&#x27;Angelababy&#x27;,&#x27;女&#x27;,&#x27;1989-02-03 00:00:00&#x27;,&#x27;18209876567&#x27;,NULL,3),(4,&#x27;热巴&#x27;,&#x27;女&#x27;,&#x27;1993-02-03 00:00:00&#x27;,&#x27;18209876579&#x27;,NULL,2),(5,&#x27;周冬雨&#x27;,&#x27;女&#x27;,&#x27;1992-02-03 00:00:00&#x27;,&#x27;18209179577&#x27;,NULL,9),(6,&#x27;周芷若&#x27;,&#x27;女&#x27;,&#x27;1988-02-03 00:00:00&#x27;,&#x27;18209876577&#x27;,NULL,1),(7,&#x27;岳灵珊&#x27;,&#x27;女&#x27;,&#x27;1987-12-30 00:00:00&#x27;,&#x27;18219876577&#x27;,NULL,9),(8,&#x27;小昭&#x27;,&#x27;女&#x27;,&#x27;1989-02-03 00:00:00&#x27;,&#x27;18209876567&#x27;,NULL,1),(9,&#x27;双儿&#x27;,&#x27;女&#x27;,&#x27;1993-02-03 00:00:00&#x27;,&#x27;18209876579&#x27;,NULL,9),(10,&#x27;王语嫣&#x27;,&#x27;女&#x27;,&#x27;1992-02-03 00:00:00&#x27;,&#x27;18209179577&#x27;,NULL,4),(11,&#x27;夏雪&#x27;,&#x27;女&#x27;,&#x27;1993-02-03 00:00:00&#x27;,&#x27;18209876579&#x27;,NULL,9),(12,&#x27;赵敏&#x27;,&#x27;女&#x27;,&#x27;1992-02-03 00:00:00&#x27;,&#x27;18209179577&#x27;,NULL,1);</span><br><span class="line"></span><br><span class="line">/*Table structure for table `boys` */</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `boys`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `boys` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `boyName` varchar(20) DEFAULT NULL,</span><br><span class="line">  `userCP` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `boys` */</span><br><span class="line"></span><br><span class="line">insert  into `boys`(`id`,`boyName`,`userCP`) values (1,&#x27;张无忌&#x27;,100),(2,&#x27;鹿晗&#x27;,800),(3,&#x27;黄晓明&#x27;,50),(4,&#x27;段誉&#x27;,300);</span><br><span class="line"></span><br><span class="line">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class="line">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class="line">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span><br><span class="line">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">#连接查询</span><br><span class="line">/*</span><br><span class="line">含义:又称多表查询,当查询的字段来自于多个表时,就会用到连接查询</span><br><span class="line"></span><br><span class="line">笛卡尔乘积现象:表1 有m行,表2有n行,结果=m*n行</span><br><span class="line"></span><br><span class="line">发生原因:没有有效的连接条件</span><br><span class="line">如何避免:添加有效的连接条件</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line"></span><br><span class="line">  按年代分类:</span><br><span class="line">  sql92标准:仅仅支持内连接</span><br><span class="line">  sql99标准[推荐]:支持内连接+外连接(左外和右外)+交叉连接</span><br><span class="line">  </span><br><span class="line">  按功能分类:</span><br><span class="line">    内连接:</span><br><span class="line">      等值连接</span><br><span class="line">      非等值连接</span><br><span class="line">      自连接</span><br><span class="line">    外连接:</span><br><span class="line">      左外连接</span><br><span class="line">      右外连接</span><br><span class="line">      全外连接</span><br><span class="line">    </span><br><span class="line">    交叉连接</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line"></span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT NAME,boyName FROM boys,beauty</span><br><span class="line">WHERE beauty.boyfriend_id= boys.id;</span><br><span class="line"></span><br><span class="line">#一、sql92标准</span><br><span class="line">#1、等值连接</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">① 多表等值连接的结果为多表的交集部分</span><br><span class="line">②n表连接,至少需要n-1个连接条件</span><br><span class="line">③ 多表的顺序没有要求</span><br><span class="line">④一般需要为表起别名</span><br><span class="line">⑤可以搭配前面介绍的所有子句使用,比如排序、分组、筛选</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例1:查询女神名和对应的男神名</span><br><span class="line">SELECT NAME,boyName </span><br><span class="line">FROM boys,beauty</span><br><span class="line">WHERE beauty.boyfriend_id= boys.id;</span><br><span class="line"></span><br><span class="line">#案例2:查询员工名和对应的部门名</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.`department_id`=departments.`department_id`;</span><br><span class="line"></span><br><span class="line">#2、为表起别名</span><br><span class="line">/*</span><br><span class="line">①提高语句的简洁度</span><br><span class="line">②区分多个重名的字段</span><br><span class="line"></span><br><span class="line">注意:如果为表起了别名,则查询的字段就不能使用原来的表名去限定</span><br><span class="line">*/</span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line"></span><br><span class="line">SELECT e.last_name,e.job_id,j.job_title</span><br><span class="line">FROM employees  e,jobs j</span><br><span class="line">WHERE e.`job_id`=j.`job_id`;</span><br><span class="line"></span><br><span class="line">#3、两个表的顺序是否可以调换(可以)</span><br><span class="line"></span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line"></span><br><span class="line">SELECT e.last_name,e.job_id,j.job_title</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE e.`job_id`=j.`job_id`;</span><br><span class="line"></span><br><span class="line">#4、可以加筛选</span><br><span class="line"></span><br><span class="line">#案例:查询有奖金的员工名、部门名</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,commission_pct</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.`department_id`=d.`department_id`</span><br><span class="line">AND e.`commission_pct` IS NOT NULL;</span><br><span class="line"></span><br><span class="line">#案例2:查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line"></span><br><span class="line">SELECT department_name,city</span><br><span class="line">FROM departments d,locations l</span><br><span class="line">WHERE d.`location_id` = l.`location_id`</span><br><span class="line">AND city LIKE &#x27;_o%&#x27;;</span><br><span class="line"></span><br><span class="line">#5、可以加分组</span><br><span class="line"></span><br><span class="line">#案例1:查询每个城市的部门个数</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) 个数,city</span><br><span class="line">FROM departments d,locations l</span><br><span class="line">WHERE d.`location_id`=l.`location_id`</span><br><span class="line">GROUP BY city;</span><br><span class="line"></span><br><span class="line">#案例2:查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line">SELECT department_name,d.`manager_id`,MIN(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.`department_id`=e.`department_id`</span><br><span class="line">AND commission_pct IS NOT NULL</span><br><span class="line">GROUP BY department_name,d.`manager_id`;</span><br><span class="line"></span><br><span class="line">#6、可以加排序</span><br><span class="line"></span><br><span class="line">#案例:查询每个工种的工种名和员工的个数,并且按员工个数降序</span><br><span class="line"></span><br><span class="line">SELECT job_title,COUNT(*)</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.`job_id`=j.`job_id`</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br><span class="line"></span><br><span class="line">#7、可以实现三表连接</span><br><span class="line"></span><br><span class="line">#案例:查询员工名、部门名和所在的城市</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE e.`department_id`=d.`department_id`</span><br><span class="line">AND d.`location_id`=l.`location_id`</span><br><span class="line">AND city LIKE &#x27;s%&#x27;</span><br><span class="line">ORDER BY department_name DESC;</span><br><span class="line"></span><br><span class="line">#2、非等值连接</span><br><span class="line"></span><br><span class="line">#案例1:查询员工的工资和工资级别</span><br><span class="line"></span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e,job_grades g</span><br><span class="line">WHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`</span><br><span class="line">AND g.`grade_level`=&#x27;A&#x27;;</span><br><span class="line"></span><br><span class="line">select salary,employee_id from employees;</span><br><span class="line">select * from job_grades;</span><br><span class="line">/* 创建等级表job_grades</span><br><span class="line">CREATE TABLE job_grades</span><br><span class="line">(grade_level VARCHAR(3),</span><br><span class="line"> lowest_sal  int,</span><br><span class="line"> highest_sal int);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#x27;A&#x27;, 1000, 2999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES (&#x27;B&#x27;, 3000, 5999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#x27;C&#x27;, 6000, 9999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#x27;D&#x27;, 10000, 14999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#x27;E&#x27;, 15000, 24999);</span><br><span class="line"></span><br><span class="line">INSERT INTO job_grades</span><br><span class="line">VALUES(&#x27;F&#x27;, 25000, 40000);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#3、自连接</span><br><span class="line"></span><br><span class="line">#案例:查询 员工名和上级的名称</span><br><span class="line"></span><br><span class="line">SELECT e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.`manager_id`=m.`employee_id`;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#1.显示所有员工的姓名,部门号和部门名称。</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">SELECT last_name,d.department_id,department_name</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.`department_id` = d.`department_id`;</span><br><span class="line"></span><br><span class="line">#2.查询90号部门员工的job_id和90号部门的location_id</span><br><span class="line"></span><br><span class="line">SELECT job_id,location_id</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.`department_id`=d.`department_id`</span><br><span class="line">AND e.`department_id`=90;</span><br><span class="line"></span><br><span class="line">#3. 选择所有有奖金的员工的last_name , department_name , location_id , city</span><br><span class="line"></span><br><span class="line">SELECT last_name , department_name , l.location_id , city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE e.department_id = d.department_id</span><br><span class="line">AND d.location_id=l.location_id</span><br><span class="line">AND e.commission_pct IS NOT NULL;</span><br><span class="line"></span><br><span class="line">#4.选择city在Toronto工作的员工的last_name , job_id , department_id , department_name </span><br><span class="line"></span><br><span class="line">SELECT last_name , job_id , d.department_id , department_name </span><br><span class="line">FROM employees e,departments d ,locations l</span><br><span class="line">WHERE e.department_id = d.department_id</span><br><span class="line">AND d.location_id=l.location_id</span><br><span class="line">AND city = &#x27;Toronto&#x27;;</span><br><span class="line"></span><br><span class="line">#5.查询每个工种、每个部门的部门名、工种名和最低工资</span><br><span class="line"></span><br><span class="line">SELECT department_name,job_title,MIN(salary) 最低工资</span><br><span class="line">FROM employees e,departments d,jobs j</span><br><span class="line">WHERE e.`department_id`=d.`department_id`</span><br><span class="line">AND e.`job_id`=j.`job_id`</span><br><span class="line">GROUP BY department_name,job_title;</span><br><span class="line"></span><br><span class="line">#6.查询每个国家下的部门个数大于2的国家编号</span><br><span class="line"></span><br><span class="line">SELECT country_id,COUNT(*) 部门个数</span><br><span class="line">FROM departments d,locations l</span><br><span class="line">WHERE d.`location_id`=l.`location_id`</span><br><span class="line">GROUP BY country_id</span><br><span class="line">HAVING 部门个数&gt;2;</span><br><span class="line"></span><br><span class="line">#7、选择指定员工的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式</span><br><span class="line">/*</span><br><span class="line">employees Emp#  manager Mgr#</span><br><span class="line">kochhar   101 king  100</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT e.last_name employees,e.employee_id &quot;Emp#&quot;,m.last_name manager,m.employee_id &quot;Mgr#&quot;</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.manager_id = m.employee_id</span><br><span class="line">AND e.last_name=&#x27;kochhar&#x27;;</span><br></pre></td></tr></table></figure><p>sql99语法的连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">#sql99语法</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">  select 查询列表</span><br><span class="line">  from 表1 别名 [连接类型]</span><br><span class="line">  join 表2 别名 </span><br><span class="line">  on 连接条件</span><br><span class="line">  [where 筛选条件]</span><br><span class="line">  [group by 分组]</span><br><span class="line">  [having 筛选条件]</span><br><span class="line">  [order by 排序列表]</span><br><span class="line">  </span><br><span class="line">分类:</span><br><span class="line">内连接(★):inner</span><br><span class="line">外连接</span><br><span class="line">  左外(★):left [outer]</span><br><span class="line">  右外(★):right [outer]</span><br><span class="line">  全外:full[outer]</span><br><span class="line">交叉连接:cross </span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一)内连接</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">inner join 表2 别名</span><br><span class="line">on 连接条件;</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">等值</span><br><span class="line">非等值</span><br><span class="line">自连接</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">①添加排序、分组、筛选</span><br><span class="line">②inner可以省略</span><br><span class="line">③ 筛选条件放在where后面,连接条件放在on后面,提高分离性,便于阅读</span><br><span class="line">④inner join连接和sql92语法中的等值连接效果是一样的,都是查询多表的交集</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1、等值连接</span><br><span class="line">#案例1.查询员工名、部门名</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM departments d</span><br><span class="line"> JOIN  employees e</span><br><span class="line">ON e.`department_id` = d.`department_id`;</span><br><span class="line"></span><br><span class="line">#案例2.查询名字中包含e的员工名和工种名(添加筛选)</span><br><span class="line">SELECT last_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN jobs j</span><br><span class="line">ON e.`job_id`=  j.`job_id`</span><br><span class="line">WHERE e.`last_name` LIKE &#x27;%e%&#x27;;</span><br><span class="line"></span><br><span class="line">#3. 查询部门个数&gt;3的城市名和部门个数,(添加分组+筛选)</span><br><span class="line"></span><br><span class="line">#①查询每个城市的部门个数</span><br><span class="line">#②在①结果上筛选满足条件的</span><br><span class="line">SELECT city,COUNT(*) 部门个数</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN locations l</span><br><span class="line">ON d.`location_id`=l.`location_id`</span><br><span class="line">GROUP BY city</span><br><span class="line">HAVING COUNT(*)&gt;3;</span><br><span class="line"></span><br><span class="line">#案例4.查询哪个部门的员工个数&gt;3的部门名和员工个数,并按个数降序(添加排序)</span><br><span class="line"></span><br><span class="line">#①查询每个部门的员工个数</span><br><span class="line">SELECT COUNT(*),department_name</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">GROUP BY department_name;</span><br><span class="line"></span><br><span class="line">#② 在①结果上筛选员工个数&gt;3的记录,并排序</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) 个数,department_name</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">ON e.`department_id`=d.`department_id`</span><br><span class="line">GROUP BY department_name</span><br><span class="line">HAVING COUNT(*)&gt;3</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br><span class="line"></span><br><span class="line">#5.查询员工名、部门名、工种名,并按部门名降序(添加三表连接)</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d ON e.`department_id`=d.`department_id`</span><br><span class="line">INNER JOIN jobs j ON e.`job_id` = j.`job_id`</span><br><span class="line">ORDER BY department_name DESC;</span><br><span class="line"></span><br><span class="line">#二)非等值连接</span><br><span class="line"></span><br><span class="line">#查询员工的工资级别</span><br><span class="line"></span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN job_grades g</span><br><span class="line">ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;</span><br><span class="line"> </span><br><span class="line">#查询工资级别的个数&gt;20的个数,并且按工资级别降序</span><br><span class="line">SELECT COUNT(*),grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN job_grades g</span><br><span class="line">ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`</span><br><span class="line">GROUP BY grade_level</span><br><span class="line">HAVING COUNT(*)&gt;20</span><br><span class="line">ORDER BY grade_level DESC;</span><br><span class="line"> </span><br><span class="line">#三)自连接</span><br><span class="line"></span><br><span class="line">#查询员工的名字、上级的名字</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">ON e.`manager_id`= m.`employee_id`;</span><br><span class="line"> </span><br><span class="line">#查询姓名中包含字符k的员工的名字、上级的名字</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m</span><br><span class="line">ON e.`manager_id`= m.`employee_id`</span><br><span class="line">WHERE e.`last_name` LIKE &#x27;%k%&#x27;;</span><br><span class="line"> </span><br><span class="line">#二、外连接</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">应用场景:用于查询一个表中有,另一个表没有的记录</span><br><span class="line"> </span><br><span class="line">特点:</span><br><span class="line"> 1、外连接的查询结果为主表中的所有记录</span><br><span class="line">  如果从表中有和它匹配的,则显示匹配的值</span><br><span class="line">  如果从表中没有和它匹配的,则显示null</span><br><span class="line">  外连接查询结果=内连接结果+主表中有而从表没有的记录</span><br><span class="line"> 2、左外连接,left join左边的是主表</span><br><span class="line">   右外连接,right join右边的是主表</span><br><span class="line"> 3、左外和右外交换两个表的顺序,可以实现同样的效果 </span><br><span class="line"> 4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的</span><br><span class="line">*/</span><br><span class="line">#引入:查询男朋友 不在男神表的的女神名 查询信息主要来自于哪个表哪个就是主表(查的那个结果)</span><br><span class="line"> </span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"> </span><br><span class="line">#右外连接</span><br><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT OUTER JOIN beauty b</span><br><span class="line">ON b.`boyfriend_id` = bo.`id`</span><br><span class="line">WHERE bo.`id` IS NULL;</span><br><span class="line"> </span><br><span class="line">#案例1:查询哪个部门没有员工</span><br><span class="line">#左外</span><br><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM departments d</span><br><span class="line">LEFT OUTER JOIN employees e</span><br><span class="line">ON d.`department_id` = e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br><span class="line"></span><br><span class="line"> #右外</span><br><span class="line"> </span><br><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM employees e</span><br><span class="line">RIGHT OUTER JOIN departments d</span><br><span class="line">ON d.`department_id` = e.`department_id`</span><br><span class="line">WHERE e.`employee_id` IS NULL;</span><br><span class="line"> </span><br><span class="line">#全外 不支持</span><br><span class="line">/* </span><br><span class="line">USE girls;</span><br><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">FULL OUTER JOIN boys bo</span><br><span class="line">ON b.`boyfriend_id` = bo.id;</span><br><span class="line"> */</span><br><span class="line">#交叉连接</span><br><span class="line"></span><br><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">CROSS JOIN boys bo;</span><br><span class="line"> </span><br><span class="line">#sql92和 sql99pk</span><br><span class="line">/*</span><br><span class="line">功能:sql99支持的较多</span><br><span class="line">可读性:sql99实现连接条件和筛选条件的分离,可读性较高</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><p>一、含义<br>嵌套在其他语句内部的select语句称为子查询或内查询,<br>外面的语句可以是insert、update、delete、select等,一般select作为外面语句较多<br>外面如果为select语句,则此语句称为外查询或主查询</p><p>二、分类<br>1、按出现位置<br>select后面:<br>    仅仅支持标量子查询<br>from后面:<br>    表子查询<br>where或having后面:<br>    标量子查询<br>    列子查询<br>    行子查询<br>exists后面:<br>    标量子查询<br>    列子查询<br>    行子查询<br>    表子查询</p><p>2、按结果集的行列<br>标量子查询(单行子查询):结果集为一行一列<br>列子查询(多行子查询):结果集为多行一列<br>行子查询:结果集为多行多列<br>表子查询:结果集为多行多列</p><p>三、示例<br>where或having后面<br>1、标量子查询<br>案例:查询最低工资的员工姓名和工资<br>①最低工资<br>select min(salary) from employees</p><p>②查询员工的姓名和工资,要求工资=①<br>select last_name,salary<br>from employees<br>where salary=(<br>  select min(salary) from employees<br>);</p><p>2、列子查询<br>案例:查询所有是领导的员工姓名<br>①查询所有员工的 manager_id<br>select manager_id<br>from employees</p><p>②查询姓名,employee_id属于①列表的一个<br>select last_name<br>from employees<br>where employee_id in(<br>  select manager_id<br>  from employees<br>);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">#子查询</span><br><span class="line">/*</span><br><span class="line">含义:</span><br><span class="line">出现在其他语句中的select语句,称为子查询或内查询</span><br><span class="line">外部的查询语句,称为主查询或外查询</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">按子查询出现的位置:</span><br><span class="line">  select后面:</span><br><span class="line">    仅仅支持标量子查询</span><br><span class="line">  </span><br><span class="line">  from后面:</span><br><span class="line">    支持表子查询</span><br><span class="line">  where或having后面:★</span><br><span class="line">    标量子查询(单行) √</span><br><span class="line">    列子查询  (多行) √</span><br><span class="line">    </span><br><span class="line">    行子查询</span><br><span class="line">    </span><br><span class="line">  exists后面(相关子查询)</span><br><span class="line">    表子查询</span><br><span class="line">按结果集的行列数不同:</span><br><span class="line">  标量子查询(结果集只有一行一列)</span><br><span class="line">  列子查询(结果集只有一列多行)</span><br><span class="line">  行子查询(结果集有一行多列)</span><br><span class="line">  表子查询(结果集一般为多行多列)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、where或having后面</span><br><span class="line">/*</span><br><span class="line">1、标量子查询(单行子查询)</span><br><span class="line">2、列子查询(多行子查询)</span><br><span class="line"></span><br><span class="line">3、行子查询(多列多行)</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">①子查询放在小括号内</span><br><span class="line">②子查询一般放在条件的右侧</span><br><span class="line">③标量子查询,一般搭配着单行操作符使用</span><br><span class="line">&gt; &lt; &gt;= &lt;= = &lt;&gt;</span><br><span class="line"></span><br><span class="line">列子查询,一般搭配着多行操作符使用</span><br><span class="line">in、any/some、all</span><br><span class="line"></span><br><span class="line">④子查询的执行优先于主查询执行,主查询的条件用到了子查询的结果</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">#1.标量子查询★</span><br><span class="line"></span><br><span class="line">#案例1:谁的工资比 Abel 高?</span><br><span class="line"></span><br><span class="line">#①查询Abel的工资</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name = &#x27;Abel&#x27;;</span><br><span class="line"></span><br><span class="line">#②查询员工的信息,满足 salary&gt;①结果</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">  SELECT salary</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE last_name = &#x27;Abel&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2:返回job_id与141号员工相同,salary比143号员工多的员工 姓名,job_id 和工资</span><br><span class="line"></span><br><span class="line">#①查询141号员工的job_id</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id = 141;</span><br><span class="line"></span><br><span class="line">#②查询143号员工的salary</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id = 143;</span><br><span class="line"></span><br><span class="line">#③查询员工的姓名,job_id 和工资,要求job_id=①并且salary&gt;②</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id = (</span><br><span class="line">  SELECT job_id</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE employee_id = 141</span><br><span class="line">) AND salary&gt;(</span><br><span class="line">  SELECT salary</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE employee_id = 143</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例3:返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line"></span><br><span class="line">#①查询公司的 最低工资</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询last_name,job_id和salary,要求salary=①</span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary=(</span><br><span class="line">  SELECT MIN(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例4:查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line"></span><br><span class="line">#①查询50号部门的最低工资</span><br><span class="line">SELECT  MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id = 50;</span><br><span class="line"></span><br><span class="line">#②查询每个部门的最低工资</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#③ 在②基础上筛选,满足min(salary)&gt;①</span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">  SELECT  MIN(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE department_id = 50</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#非法使用标量子查询</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">  SELECT  salary</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE department_id = 250</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.列子查询(多行子查询)★</span><br><span class="line">#案例1:返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class="line"></span><br><span class="line">#①查询location_id是1400或1700的部门编号</span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700);</span><br><span class="line"></span><br><span class="line">#②查询员工姓名,要求部门号是①列表中的某一个</span><br><span class="line"></span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id  &lt;&gt;ALL(</span><br><span class="line">  SELECT DISTINCT department_id</span><br><span class="line">  FROM departments</span><br><span class="line">  WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2:返回其它工种中比job_id为&#x27;IT_PROG&#x27;工种任一工资低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line">#①查询job_id为&#x27;IT_PROG&#x27;部门任一工资</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id = &#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">#②查询员工号、姓名、job_id 以及salary,salary&lt;(①)的任意一个</span><br><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ANY(</span><br><span class="line">  SELECT DISTINCT salary</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line">  SELECT MAX(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">#案例3:返回其它部门中比job_id为&#x27;IT_PROG&#x27;部门所有工资都低的员工   的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ALL(</span><br><span class="line">  SELECT DISTINCT salary</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"></span><br><span class="line">SELECT last_name,employee_id,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line">  SELECT MIN( salary)</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE job_id = &#x27;IT_PROG&#x27;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">#3、行子查询(结果集一行多列或多行多列)</span><br><span class="line"></span><br><span class="line">#案例:查询员工编号最小并且工资最高的员工信息</span><br><span class="line"></span><br><span class="line">SELECT * </span><br><span class="line">FROM employees</span><br><span class="line">WHERE (employee_id,salary)=(</span><br><span class="line">  SELECT MIN(employee_id),MAX(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#①查询最小的员工编号</span><br><span class="line">SELECT MIN(employee_id)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询最高工资</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#③查询员工信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id=(</span><br><span class="line">  SELECT MIN(employee_id)</span><br><span class="line">  FROM employees</span><br><span class="line">)AND salary=(</span><br><span class="line">  SELECT MAX(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#二、select后面</span><br><span class="line">/*</span><br><span class="line">仅仅支持标量子查询</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例:查询每个部门的员工个数</span><br><span class="line"></span><br><span class="line">SELECT d.*,(</span><br><span class="line">  SELECT COUNT(*)</span><br><span class="line">  FROM employees e</span><br><span class="line">  WHERE e.department_id = d.`department_id`</span><br><span class="line"> ) 个数</span><br><span class="line"> FROM departments d;</span><br><span class="line"> </span><br><span class="line">#案例2:查询员工号=102的部门名</span><br><span class="line"> </span><br><span class="line">SELECT (</span><br><span class="line">  SELECT department_name</span><br><span class="line">  FROM departments d</span><br><span class="line">  INNER JOIN employees e</span><br><span class="line">  ON d.department_id=e.department_id</span><br><span class="line">  WHERE e.employee_id=102</span><br><span class="line">) 部门名;</span><br><span class="line"></span><br><span class="line">#三、from后面</span><br><span class="line">/*</span><br><span class="line">将子查询结果充当一张表,要求必须起别名</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例:查询每个部门的平均工资的工资等级</span><br><span class="line">#①查询每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">SELECT * FROM job_grades;</span><br><span class="line"></span><br><span class="line">#②连接①的结果集和job_grades表,筛选条件平均工资 between lowest_sal and highest_sal</span><br><span class="line"></span><br><span class="line">SELECT  ag_dep.*,g.`grade_level`</span><br><span class="line">FROM (</span><br><span class="line">  SELECT AVG(salary) ag,department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">) ag_dep</span><br><span class="line">INNER JOIN job_grades g</span><br><span class="line">ON ag_dep.ag BETWEEN lowest_sal AND highest_sal;</span><br><span class="line"></span><br><span class="line">#四、exists后面(相关子查询)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">exists(完整的查询语句)</span><br><span class="line">结果:</span><br><span class="line">1或0</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT EXISTS(SELECT employee_id FROM employees WHERE salary=300000);</span><br><span class="line"></span><br><span class="line">#案例1:查询有员工的部门名</span><br><span class="line"></span><br><span class="line">#in</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.`department_id` IN(</span><br><span class="line">  SELECT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#exists</span><br><span class="line"></span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM employees e</span><br><span class="line">  WHERE d.`department_id`=e.`department_id`</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2:查询没有女朋友的男神信息</span><br><span class="line"></span><br><span class="line">#in</span><br><span class="line"></span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE bo.id NOT IN(</span><br><span class="line">  SELECT boyfriend_id</span><br><span class="line">  FROM beauty</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#exists</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line">  SELECT boyfriend_id</span><br><span class="line">  FROM beauty b</span><br><span class="line">  WHERE bo.`id`=b.`boyfriend_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line">#1. 查询和Zlotkey相同部门的员工姓名和工资</span><br><span class="line"></span><br><span class="line">#①查询Zlotkey的部门</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name = &#x27;Zlotkey&#x27;;</span><br><span class="line"></span><br><span class="line">#②查询部门号=①的姓名和工资</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id = (</span><br><span class="line">  SELECT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE last_name = &#x27;Zlotkey&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.查询工资比公司平均工资高的员工的员工号,姓名和工资。</span><br><span class="line"></span><br><span class="line">#①查询平均工资</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询工资&gt;①的员工号,姓名和工资。</span><br><span class="line"></span><br><span class="line">SELECT last_name,employee_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">  SELECT AVG(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#3.查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资</span><br><span class="line">#①查询各部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#②连接①结果集和employees表,进行筛选</span><br><span class="line">SELECT employee_id,last_name,salary,e.department_id</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN (</span><br><span class="line">  SELECT AVG(salary) ag,department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">) ag_dep</span><br><span class="line">ON e.department_id = ag_dep.department_id</span><br><span class="line">WHERE salary&gt;ag_dep.ag ;</span><br><span class="line"></span><br><span class="line">#4. 查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名</span><br><span class="line">#①查询姓名中包含字母u的员工的部门</span><br><span class="line"></span><br><span class="line">SELECT  DISTINCT department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name LIKE &#x27;%u%&#x27;;</span><br><span class="line"></span><br><span class="line">#②查询部门号=①中的任意一个的员工号和姓名</span><br><span class="line">SELECT last_name,employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">  SELECT  DISTINCT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE last_name LIKE &#x27;%u%&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#5. 查询在部门的location_id为1700的部门工作的员工的员工号</span><br><span class="line"></span><br><span class="line">#①查询location_id为1700的部门</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM departments </span><br><span class="line">WHERE location_id  = 1700;</span><br><span class="line"></span><br><span class="line">#②查询部门号=①中的任意一个的员工号</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id =ANY(</span><br><span class="line">  SELECT DISTINCT department_id</span><br><span class="line">  FROM departments </span><br><span class="line">  WHERE location_id  = 1700</span><br><span class="line">);</span><br><span class="line">#6.查询管理者是King的员工姓名和工资</span><br><span class="line"></span><br><span class="line">#①查询姓名为king的员工编号</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name  = &#x27;K_ing&#x27;;</span><br><span class="line"></span><br><span class="line">#②查询哪个员工的manager_id = ①</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IN(</span><br><span class="line">  SELECT employee_id</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE last_name  = &#x27;K_ing&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#7.查询工资最高的员工的姓名,要求first_name和last_name显示为一列,列名为 姓.名</span><br><span class="line"></span><br><span class="line">#①查询最高工资</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询工资=①的姓.名</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(first_name,last_name) &quot;姓.名&quot;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary=(</span><br><span class="line">  SELECT MAX(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#子查询经典案例</span><br><span class="line"></span><br><span class="line"># 1. 查询工资最低的员工信息: last_name, salary</span><br><span class="line"></span><br><span class="line">#①查询最低的工资</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询last_name,salary,要求salary=①</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary=(</span><br><span class="line">  SELECT MIN(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2. 查询平均工资最低的部门信息</span><br><span class="line"></span><br><span class="line">#方式一:</span><br><span class="line">#①各部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#②查询①结果上的最低平均工资</span><br><span class="line">SELECT MIN(ag)</span><br><span class="line">FROM (</span><br><span class="line">  SELECT AVG(salary) ag,department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">) ag_dep;</span><br><span class="line"></span><br><span class="line">#③查询哪个部门的平均工资=②</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)=(</span><br><span class="line">  SELECT MIN(ag)</span><br><span class="line">  FROM (</span><br><span class="line">    SELECT AVG(salary) ag,department_id</span><br><span class="line">    FROM employees</span><br><span class="line">    GROUP BY department_id</span><br><span class="line">  ) ag_dep</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#④查询部门信息</span><br><span class="line"></span><br><span class="line">SELECT d.*</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.`department_id`=(</span><br><span class="line">  SELECT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  HAVING AVG(salary)=(</span><br><span class="line">    SELECT MIN(ag)</span><br><span class="line">    FROM (</span><br><span class="line">      SELECT AVG(salary) ag,department_id</span><br><span class="line">      FROM employees</span><br><span class="line">      GROUP BY department_id</span><br><span class="line">    ) ag_dep</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#方式二:</span><br><span class="line">#①各部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#②求出最低平均工资的部门编号</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) </span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">#③查询部门信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id=(</span><br><span class="line">  SELECT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  ORDER BY AVG(salary) </span><br><span class="line">  LIMIT 1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 3. 查询平均工资最低的部门信息和该部门的平均工资</span><br><span class="line">#①各部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#②求出最低平均工资的部门编号</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) </span><br><span class="line">LIMIT 1;</span><br><span class="line">#③查询部门信息</span><br><span class="line">SELECT d.*,ag</span><br><span class="line">FROM departments d</span><br><span class="line">JOIN (</span><br><span class="line">  SELECT AVG(salary) ag,department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  ORDER BY AVG(salary) </span><br><span class="line">  LIMIT 1</span><br><span class="line"></span><br><span class="line">) ag_dep</span><br><span class="line">ON d.`department_id`=ag_dep.department_id;</span><br><span class="line"></span><br><span class="line"># 4. 查询平均工资最高的 job 信息</span><br><span class="line">#①查询最高的job的平均工资</span><br><span class="line">SELECT AVG(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY AVG(salary) DESC</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">#②查询job信息</span><br><span class="line">SELECT * </span><br><span class="line">FROM jobs</span><br><span class="line">WHERE job_id=(</span><br><span class="line">  SELECT job_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY job_id</span><br><span class="line">  ORDER BY AVG(salary) DESC</span><br><span class="line">  LIMIT 1</span><br><span class="line">);</span><br><span class="line"># 5. 查询平均工资高于公司平均工资的部门有哪些?</span><br><span class="line"></span><br><span class="line">#①查询平均工资</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#③筛选②结果集,满足平均工资&gt;①</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)&gt;(</span><br><span class="line">  SELECT AVG(salary)</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 6. 查询出公司中所有 manager 的详细信息.</span><br><span class="line">#①查询所有manager的员工编号</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#②查询详细信息,满足employee_id=①</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id =ANY(</span><br><span class="line">  SELECT DISTINCT manager_id</span><br><span class="line">  FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 7. 各个部门中 最高工资中最低的那个部门的 最低工资是多少</span><br><span class="line"></span><br><span class="line">#①查询各部门的最高工资中最低的部门编号</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY MAX(salary)</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#②查询①结果的那个部门的最低工资</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary) ,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id=(</span><br><span class="line">  SELECT department_id</span><br><span class="line">  FROM employees</span><br><span class="line">  GROUP BY department_id</span><br><span class="line">  ORDER BY MAX(salary)</span><br><span class="line">  LIMIT 1</span><br><span class="line">);</span><br><span class="line"># 8. 查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary</span><br><span class="line">#①查询平均工资最高的部门编号</span><br><span class="line">SELECT </span><br><span class="line">    department_id </span><br><span class="line">FROM</span><br><span class="line">    employees </span><br><span class="line">GROUP BY department_id </span><br><span class="line">ORDER BY AVG(salary) DESC </span><br><span class="line">LIMIT 1 ;</span><br><span class="line"></span><br><span class="line">#②将employees和departments连接查询,筛选条件是①</span><br><span class="line">    SELECT </span><br><span class="line">        last_name, d.department_id, email, salary </span><br><span class="line">    FROM</span><br><span class="line">        employees e </span><br><span class="line">        INNER JOIN departments d </span><br><span class="line">            ON d.manager_id = e.employee_id </span><br><span class="line">    WHERE d.department_id = </span><br><span class="line">        (SELECT </span><br><span class="line">            department_id </span><br><span class="line">        FROM</span><br><span class="line">            employees </span><br><span class="line">        GROUP BY department_id </span><br><span class="line">        ORDER BY AVG(salary) DESC </span><br><span class="line">        LIMIT 1) ;</span><br></pre></td></tr></table></figure><h3 id="2-8-分页查询"><a href="#2-8-分页查询" class="headerlink" title="2.8 分页查询"></a>2.8 分页查询</h3><p>一、应用场景<br>当要查询的条目数太多,一页显示不全<br>二、语法<br><code>select 查询列表</code><br><code>from 表</code><br><code>limit [offset,]size;</code><br>注意:<br>offset代表的是起始的条目索引,默认从0开始<br>size代表的是显示的条目数</p><p>公式:<br>假如要显示的页数为page,每一页条目数为size<br>select 查询列表<br>from 表<br><code>limit (page-1)*size,size;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#分页查询 ★</span><br><span class="line">/*</span><br><span class="line">应用场景:当要显示的数据,一页显示不全,需要分页提交sql请求</span><br><span class="line">语法:</span><br><span class="line">  select 查询列表</span><br><span class="line">  from 表</span><br><span class="line">  [join type join 表2</span><br><span class="line">  on 连接条件</span><br><span class="line">  where 筛选条件</span><br><span class="line">  group by 分组字段</span><br><span class="line">  having 分组后的筛选</span><br><span class="line">  order by 排序的字段]</span><br><span class="line">  limit [offset,]size;</span><br><span class="line">  </span><br><span class="line">  offset要显示条目的起始索引(起始索引从0开始)</span><br><span class="line">  size 要显示的条目个数</span><br><span class="line">特点:</span><br><span class="line">  ①limit语句放在查询语句的最后</span><br><span class="line">  ②公式</span><br><span class="line">  要显示的页数 page,每页的条目数size</span><br><span class="line">  </span><br><span class="line">  select 查询列表</span><br><span class="line">  from 表</span><br><span class="line">  limit (page-1)*size,size;</span><br><span class="line">  </span><br><span class="line">  size=10</span><br><span class="line">  page  </span><br><span class="line">  1 0</span><br><span class="line">  2   10</span><br><span class="line">  3 20</span><br><span class="line">*/</span><br><span class="line">#案例1:查询前五条员工信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM  employees LIMIT 0,5;</span><br><span class="line">SELECT * FROM  employees LIMIT 5;</span><br><span class="line"></span><br><span class="line">#案例2:查询第11条——第25条</span><br><span class="line">SELECT * FROM  employees LIMIT 10,15;</span><br><span class="line"></span><br><span class="line">#案例3:有奖金的员工信息,并且工资较高的前10名显示出来</span><br><span class="line">SELECT </span><br><span class="line">    * </span><br><span class="line">FROM</span><br><span class="line">    employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">ORDER BY salary DESC </span><br><span class="line">LIMIT 10 ;</span><br></pre></td></tr></table></figure><h3 id="2-9-联合查询"><a href="#2-9-联合查询" class="headerlink" title="2.9 联合查询"></a>2.9 联合查询</h3><p>一、含义<br>union:合并、联合,将多次查询结果合并成一个结果<br>二、语法<br>查询语句1<br><code>union [all]</code><br>查询语句2<br><code>union [all]</code><br><code>...</code></p><p>三、意义<br>1、将一条比较复杂的查询语句拆分成多条语句<br>2、适用于查询多个表的时候,查询的列基本是一致</p><p>四、特点<br>1、要求多条查询语句的查询列数必须一致<br>2、要求多条查询语句的查询的各列类型、顺序最好一致<br>3、union 去重,union all包含重复项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#联合查询</span><br><span class="line">/*</span><br><span class="line">union 联合 合并:将多条查询语句的结果合并成一个结果</span><br><span class="line">语法:</span><br><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">...</span><br><span class="line">应用场景:</span><br><span class="line">要查询的结果来自于多个表,且多个表没有直接的连接关系,但查询的信息一致时</span><br><span class="line"></span><br><span class="line">特点:★</span><br><span class="line">1、要求多条查询语句的查询列数是一致的！</span><br><span class="line">2、要求多条查询语句的查询的每一列的类型和顺序最好一致</span><br><span class="line">3、union关键字默认去重,如果使用union all 可以包含重复项</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#引入的案例:查询部门编号&gt;90或邮箱包含a的员工信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees WHERE email LIKE &#x27;%a%&#x27; OR department_id&gt;90;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees  WHERE email LIKE &#x27;%a%&#x27;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM employees  WHERE department_id&gt;90;</span><br><span class="line"></span><br><span class="line">#案例:查询中国用户中男性的信息以及外国用户中年男性的用户信息</span><br><span class="line"></span><br><span class="line">SELECT id,cname FROM t_ca WHERE csex=&#x27;男&#x27;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT t_id,tname FROM t_ua WHERE tGender=&#x27;male&#x27;;</span><br></pre></td></tr></table></figure><h3 id="2-10-查询总结"><a href="#2-10-查询总结" class="headerlink" title="2.10 查询总结"></a>2.10 查询总结</h3><p>语法:</p><blockquote><p>select 查询列表    7<br>from 表1 别名       1<br>连接类型 join 表2   2<br>on 连接条件         3<br>where 筛选          4<br>group by 分组列表   5<br>having 筛选         6<br>order by排序列表    8<br>limit 起始条目索引,条目数;  9</p></blockquote><h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3 DML语言"></a>3 DML语言</h2><h3 id="3-1-插入"><a href="#3-1-插入" class="headerlink" title="3.1 插入"></a>3.1 插入</h3><p>一、方式一<br>语法:<br><code>insert into 表名(字段名,...) values(值,...);</code><br>特点:<br>1、要求值的类型和字段的类型要一致或兼容<br>2、字段的个数和顺序不一定与原始表中的字段个数和顺序一致<br>但必须保证值和字段一一对应<br>3、假如表中有可以为null的字段,注意可以通过以下两种方式插入null值<br>①字段和值都省略<br>②字段写上,值使用null<br>4、字段和值的个数必须一致<br>5、字段名可以省略,默认所有列</p><p>二、方式二<br>语法:<br>insert into 表名 set 字段=值,字段=值,…;</p><p>两种方式 的区别:<br>1.方式一支持一次插入多行,语法如下:<br><code>insert into 表名[(字段名,..)] values(值,..),(值,...),...;</code><br>2.方式一支持子查询,语法如下:<br><code>insert into 表名</code><br>查询语句;</p><h3 id="3-2-修改"><a href="#3-2-修改" class="headerlink" title="3.2 修改"></a>3.2 修改</h3><p>一、修改单表的记录 ★<br>语法:<code>update 表名 set 字段=值,字段=值 [where 筛选条件];</code></p><p>二、修改多表的记录(补充)<br>语法:<br><code>update 表1 别名</code><br><code>left|right|inner join 表2 别名</code><br><code>on 连接条件</code><br><code>set 字段=值,字段=值</code><br><code>[where 筛选条件];</code></p><h3 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h3><p>方式一:使用delete<br>一、删除单表的记录★<br>语法:<code>delete from 表名 [where 筛选条件][limit 条目数]</code><br>二、级联删除(补充)<br>语法:<br><code>delete 别名1,别名2 from 表1 别名</code><br><code>inner|left|right join 表2 别名</code><br><code>on 连接条件</code><br><code>[where 筛选条件]</code></p><p>方式二:使用truncate<br>语法:truncate table 表名</p><p>两种方式的区别(面试题)★</p><p>1.truncate删除后,如果再插入,标识列从1开始<br>  delete删除后,如果再插入,标识列从断点开始<br>2.delete可以添加筛选条件<br>  truncate不可以添加筛选条件<br>3.truncate效率较高<br>4.truncate没有返回值<br>delete可以返回受影响的行数<br>5.truncate不可以回滚<br>delete可以回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">#DML语言</span><br><span class="line">/*</span><br><span class="line">数据操作语言:</span><br><span class="line">插入:insert</span><br><span class="line">修改:update</span><br><span class="line">删除:delete</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、插入语句</span><br><span class="line">#方式一:经典的插入</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">insert into 表名(列名,...) values(值1,...);</span><br><span class="line">*/</span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">#1.插入的值的类型要与列的类型一致或兼容</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUES(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);</span><br><span class="line"></span><br><span class="line">#2.不可以为null的列必须插入值。可以为null的列如何插入值？</span><br><span class="line">#方式一:</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUES(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);</span><br><span class="line"></span><br><span class="line">#方式二:</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty(id,NAME,sex,phone)</span><br><span class="line">VALUES(15,&#x27;娜扎&#x27;,&#x27;女&#x27;,&#x27;1388888888&#x27;);</span><br><span class="line"></span><br><span class="line">#3.列的顺序可以调换</span><br><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUES(&#x27;蒋欣&#x27;,&#x27;女&#x27;,16,&#x27;110&#x27;);</span><br><span class="line"></span><br><span class="line">#4.列数和值的个数必须一致</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUES(&#x27;关晓彤&#x27;,&#x27;女&#x27;,17,&#x27;110&#x27;);</span><br><span class="line"></span><br><span class="line">#5.可以省略列名,默认所有列,而且列的顺序和表中列的顺序一致</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(18,&#x27;张飞&#x27;,&#x27;男&#x27;,NULL,&#x27;119&#x27;,NULL,NULL);</span><br><span class="line"></span><br><span class="line">#方式二:</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">insert into 表名</span><br><span class="line">set 列名=值,列名=值,...</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty</span><br><span class="line">SET id=19,NAME=&#x27;刘涛&#x27;,phone=&#x27;999&#x27;;</span><br><span class="line"></span><br><span class="line">#两种方式pk ★</span><br><span class="line">#1、方式一支持插入多行,方式二不支持</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(23,&#x27;唐艺昕1&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2)</span><br><span class="line">,(24,&#x27;唐艺昕2&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2)</span><br><span class="line">,(25,&#x27;唐艺昕3&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);</span><br><span class="line"></span><br><span class="line">#2、方式一支持子查询,方式二不支持</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT 26,&#x27;宋茜&#x27;,&#x27;11809866&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT id,boyname,&#x27;1234567&#x27;</span><br><span class="line">FROM boys WHERE id&lt;3;</span><br><span class="line"></span><br><span class="line">#二、修改语句</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1.修改单表的记录★</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">update 表名</span><br><span class="line">set 列=新值,列=新值,...</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">2.修改多表的记录[补充]</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">sql92语法:</span><br><span class="line">update 表1 别名,表2 别名</span><br><span class="line">set 列=值,...</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法:</span><br><span class="line">update 表1 别名</span><br><span class="line">inner|left|right join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">set 列=值,...</span><br><span class="line">where 筛选条件;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1.修改单表的记录</span><br><span class="line">#案例1:修改beauty表中姓唐的女神的电话为13899888899</span><br><span class="line"></span><br><span class="line">UPDATE beauty SET phone = &#x27;13899888899&#x27;</span><br><span class="line">WHERE NAME LIKE &#x27;唐%&#x27;;</span><br><span class="line"></span><br><span class="line">#案例2:修改boys表中id好为2的名称为张飞,魅力值 10</span><br><span class="line">UPDATE boys SET boyname=&#x27;张飞&#x27;,usercp=10</span><br><span class="line">WHERE id=2;</span><br><span class="line"></span><br><span class="line">#2.修改多表的记录</span><br><span class="line"></span><br><span class="line">#案例 1:修改张无忌的女朋友的手机号为114</span><br><span class="line"></span><br><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty b ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">SET b.`phone`=&#x27;119&#x27;,bo.`userCP`=1000</span><br><span class="line">WHERE bo.`boyName`=&#x27;张无忌&#x27;;</span><br><span class="line"></span><br><span class="line">#案例2:修改没有男朋友的女神的男朋友编号都为2号</span><br><span class="line"></span><br><span class="line">UPDATE boys bo</span><br><span class="line">RIGHT JOIN beauty b ON bo.`id`=b.`boyfriend_id`</span><br><span class="line">SET b.`boyfriend_id`=2</span><br><span class="line">WHERE bo.`id` IS NULL;</span><br><span class="line"></span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line">#三、删除语句</span><br><span class="line">/*</span><br><span class="line">方式一:delete</span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">1、单表的删除[★]</span><br><span class="line">delete from 表名 where 筛选条件</span><br><span class="line"></span><br><span class="line">2、多表的删除[补充]</span><br><span class="line"></span><br><span class="line">sql92语法:</span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名,表2 别名</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法:</span><br><span class="line"></span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名</span><br><span class="line">inner|left|right join 表2 别名 on 连接条件</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">方式二:truncate</span><br><span class="line">语法:truncate table 表名;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#方式一:delete</span><br><span class="line">#1.单表的删除</span><br><span class="line">#案例:删除手机号以9结尾的女神信息</span><br><span class="line"></span><br><span class="line">DELETE FROM beauty WHERE phone LIKE &#x27;%9&#x27;;</span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line"></span><br><span class="line">#2.多表的删除</span><br><span class="line"></span><br><span class="line">#案例:删除张无忌的女朋友的信息</span><br><span class="line"></span><br><span class="line">DELETE b</span><br><span class="line">FROM beauty b</span><br><span class="line">INNER JOIN boys bo ON b.`boyfriend_id` = bo.`id`</span><br><span class="line">WHERE bo.`boyName`=&#x27;张无忌&#x27;;</span><br><span class="line"></span><br><span class="line">#案例:删除黄晓明的信息以及他女朋友的信息</span><br><span class="line">DELETE b,bo</span><br><span class="line">FROM beauty b</span><br><span class="line">INNER JOIN boys bo ON b.`boyfriend_id`=bo.`id`</span><br><span class="line">WHERE bo.`boyName`=&#x27;黄晓明&#x27;;</span><br><span class="line"></span><br><span class="line">#方式二:truncate语句</span><br><span class="line"></span><br><span class="line">#案例:将魅力值&gt;100的男神信息删除</span><br><span class="line">TRUNCATE TABLE boys ;</span><br><span class="line"></span><br><span class="line">#delete pk truncate[面试题★]</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1.delete 可以加where 条件,truncate不能加</span><br><span class="line">2.truncate删除,效率高一丢丢</span><br><span class="line">3.假如要删除的表中有自增长列,</span><br><span class="line">如果用delete删除后,再插入数据,自增长列的值从断点开始,</span><br><span class="line">而truncate删除后,再插入数据,自增长列的值从1开始。</span><br><span class="line">4.truncate删除没有返回值,delete删除有返回值</span><br><span class="line">5.truncate删除不能回滚,delete删除可以回滚.</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line">DELETE FROM boys;</span><br><span class="line">TRUNCATE TABLE boys;</span><br><span class="line">INSERT INTO boys (boyname,usercp)</span><br><span class="line">VALUES(&#x27;张飞&#x27;,100),(&#x27;刘备&#x27;,100),(&#x27;关云长&#x27;,100);</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#1. 运行以下脚本创建表my_employees</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line">CREATE TABLE my_employees(</span><br><span class="line">  Id INT(10),</span><br><span class="line">  First_name VARCHAR(10),</span><br><span class="line">  Last_name VARCHAR(10),</span><br><span class="line">  Userid VARCHAR(10),</span><br><span class="line">  Salary DOUBLE(10,2)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">  id INT,</span><br><span class="line">  userid VARCHAR(10),</span><br><span class="line">  department_id INT</span><br><span class="line">);</span><br><span class="line">#2. 显示表my_employees的结构</span><br><span class="line">DESC my_employees;</span><br><span class="line"></span><br><span class="line">#3. 向my_employees表中插入下列数据</span><br><span class="line">/*</span><br><span class="line">ID  FIRST_NAME  LAST_NAME USERID  SALARY</span><br><span class="line">1 patel   Ralph   Rpatel  895</span><br><span class="line">2 Dancs   Betty   Bdancs  860</span><br><span class="line">3 Biri    Ben   Bbiri 1100</span><br><span class="line">4 Newman    Chad    Cnewman 750</span><br><span class="line">5 Ropeburn  Audrey    Aropebur  1550</span><br><span class="line">*/</span><br><span class="line">#方式一:</span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">VALUES(1,&#x27;patel&#x27;,&#x27;Ralph&#x27;,&#x27;Rpatel&#x27;,895),</span><br><span class="line">(2,&#x27;Dancs&#x27;,&#x27;Betty&#x27;,&#x27;Bdancs&#x27;,860),</span><br><span class="line">(3,&#x27;Biri&#x27;,&#x27;Ben&#x27;,&#x27;Bbiri&#x27;,1100),</span><br><span class="line">(4,&#x27;Newman&#x27;,&#x27;Chad&#x27;,&#x27;Cnewman&#x27;,750),</span><br><span class="line">(5,&#x27;Ropeburn&#x27;,&#x27;Audrey&#x27;,&#x27;Aropebur&#x27;,1550);</span><br><span class="line">DELETE FROM my_employees;</span><br><span class="line">#方式二:</span><br><span class="line"></span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">SELECT 1,&#x27;patel&#x27;,&#x27;Ralph&#x27;,&#x27;Rpatel&#x27;,895 UNION</span><br><span class="line">SELECT 2,&#x27;Dancs&#x27;,&#x27;Betty&#x27;,&#x27;Bdancs&#x27;,860 UNION</span><br><span class="line">SELECT 3,&#x27;Biri&#x27;,&#x27;Ben&#x27;,&#x27;Bbiri&#x27;,1100 UNION</span><br><span class="line">SELECT 4,&#x27;Newman&#x27;,&#x27;Chad&#x27;,&#x27;Cnewman&#x27;,750 UNION</span><br><span class="line">SELECT 5,&#x27;Ropeburn&#x27;,&#x27;Audrey&#x27;,&#x27;Aropebur&#x27;,1550;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">#4.  向users表中插入数据</span><br><span class="line">/*</span><br><span class="line">1 Rpatel  10</span><br><span class="line">2 Bdancs  10</span><br><span class="line">3 Bbiri 20</span><br><span class="line">4 Cnewman 30</span><br><span class="line">5 Aropebur  40</span><br><span class="line">*/</span><br><span class="line">INSERT INTO users</span><br><span class="line">VALUES(1,&#x27;Rpatel&#x27;,10),</span><br><span class="line">(2,&#x27;Bdancs&#x27;,10),</span><br><span class="line">(3,&#x27;Bbiri&#x27;,20);</span><br><span class="line"></span><br><span class="line">#5.将3号员工的last_name修改为&quot;drelxer&quot;</span><br><span class="line">UPDATE my_employees SET last_name=&#x27;drelxer&#x27; WHERE id = 3;</span><br><span class="line"></span><br><span class="line">#6.将所有工资少于900的员工的工资修改为1000</span><br><span class="line">UPDATE my_employees SET salary=1000 WHERE salary&lt;900;</span><br><span class="line"></span><br><span class="line">#7.将userid 为Bbiri的user表和my_employees表的记录全部删除</span><br><span class="line"></span><br><span class="line">DELETE u,e</span><br><span class="line">FROM users u</span><br><span class="line">JOIN my_employees e ON u.`userid`=e.`Userid`</span><br><span class="line">WHERE u.`userid`=&#x27;Bbiri&#x27;;</span><br><span class="line"></span><br><span class="line">#8.删除所有数据</span><br><span class="line"></span><br><span class="line">DELETE FROM my_employees;</span><br><span class="line">DELETE FROM users;</span><br><span class="line">#9.检查所作的修正</span><br><span class="line"></span><br><span class="line">SELECT * FROM my_employees;</span><br><span class="line">SELECT * FROM users;</span><br><span class="line"></span><br><span class="line">#10.清空表my_employees</span><br><span class="line">TRUNCATE TABLE my_employees;</span><br></pre></td></tr></table></figure><h2 id="4-DDL语言"><a href="#4-DDL语言" class="headerlink" title="4 DDL语言"></a>4 DDL语言</h2><h3 id="4-1-库的管理"><a href="#4-1-库的管理" class="headerlink" title="4.1 库的管理"></a>4.1 库的管理</h3><p>一、创建库<br><code>create database [if not exists] 库名[ character set 字符集名];</code><br>二、修改库<br><code>alter database 库名 character set 字符集名;</code><br>三、删除库<br><code>drop database [if exists] 库名;</code></p><h3 id="4-2-表的管理"><a href="#4-2-表的管理" class="headerlink" title="4.2 表的管理"></a>4.2 表的管理</h3><p>一、创建表 ★<br><code>create table [if not exists] 表名(</code><br><code>字段名 字段类型 [约束],</code><br><code>字段名 字段类型 [约束],</code><br><code>...</code><br><code>字段名 字段类型 [约束]</code><br><code>)</code><br>二、修改表</p><p>1.添加列<br><code>alter table 表名 add column 列名 类型 [first|after 字段名];</code><br>2.修改列的类型或约束<br><code>alter table 表名 modify column 列名 新类型 [新约束];</code><br>3.修改列名<br><code>alter table 表名 change column 旧列名 新列名 类型;</code><br>4 .删除列<br><code>alter table 表名 drop column 列名;</code><br>5.修改表名<br><code>alter table 表名 rename [to] 新表名;</code></p><p>三、删除表<br><code>drop table[if exists] 表名;</code></p><p>四、复制表<br>1、复制表的结构<br><code>create table 表名 like 旧表;</code><br>2、复制表的结构+数据<br>create table 表名<br><code>select 查询列表 from 旧表[where 筛选];</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#DDL</span><br><span class="line">/*</span><br><span class="line">数据定义语言</span><br><span class="line">库和表的管理</span><br><span class="line">一、库的管理</span><br><span class="line">创建、修改、删除</span><br><span class="line">二、表的管理</span><br><span class="line">创建、修改、删除</span><br><span class="line"></span><br><span class="line">创建: create</span><br><span class="line">修改: alter</span><br><span class="line">删除: drop</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、库的管理</span><br><span class="line">#1、库的创建</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">create database  [if not exists]库名;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例:创建库Books</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS books ;</span><br><span class="line"></span><br><span class="line">#2、库的修改</span><br><span class="line">#RENAME DATABASE books TO 新库名;</span><br><span class="line"></span><br><span class="line">#更改库的字符集</span><br><span class="line"></span><br><span class="line">ALTER DATABASE books CHARACTER SET gbk;</span><br><span class="line"></span><br><span class="line">#3、库的删除</span><br><span class="line"></span><br><span class="line">DROP DATABASE IF EXISTS books;</span><br><span class="line"></span><br><span class="line">#二、表的管理</span><br><span class="line">#1.表的创建 ★</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line">create table 表名(</span><br><span class="line">  列名 列的类型[(长度) 约束],</span><br><span class="line">  列名 列的类型[(长度) 约束],</span><br><span class="line">  列名 列的类型[(长度) 约束],</span><br><span class="line">  ...</span><br><span class="line">  列名 列的类型[(长度) 约束]</span><br><span class="line">)</span><br><span class="line">*/</span><br><span class="line">#案例:创建表Book</span><br><span class="line"></span><br><span class="line">CREATE TABLE book(</span><br><span class="line">  id INT,#编号</span><br><span class="line">  bName VARCHAR(20),#图书名</span><br><span class="line">  price DOUBLE,#价格</span><br><span class="line">  authorId  INT,#作者编号</span><br><span class="line">  publishDate DATETIME#出版日期</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC book;</span><br><span class="line"></span><br><span class="line">#案例:创建表author</span><br><span class="line">CREATE TABLE IF NOT EXISTS author(</span><br><span class="line">  id INT,</span><br><span class="line">  au_name VARCHAR(20),</span><br><span class="line">  nation VARCHAR(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC author;</span><br><span class="line"></span><br><span class="line">#2.表的修改</span><br><span class="line">/*</span><br><span class="line">语法</span><br><span class="line">alter table 表名 add|drop|modify|change column 列名 [列类型 约束];</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#①修改列名</span><br><span class="line"></span><br><span class="line">ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;</span><br><span class="line"></span><br><span class="line">#②修改列的类型或约束</span><br><span class="line">ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;</span><br><span class="line"></span><br><span class="line">#③添加新列</span><br><span class="line">ALTER TABLE author ADD COLUMN annual DOUBLE; </span><br><span class="line"></span><br><span class="line">#④删除列</span><br><span class="line"></span><br><span class="line">ALTER TABLE book_author DROP COLUMN  annual;</span><br><span class="line">#⑤修改表名</span><br><span class="line"></span><br><span class="line">ALTER TABLE author RENAME TO book_author;</span><br><span class="line"></span><br><span class="line">DESC book;</span><br><span class="line"></span><br><span class="line">#3.表的删除</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS book_author;</span><br><span class="line"></span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">#通用的写法:</span><br><span class="line">/*</span><br><span class="line">DROP DATABASE IF EXISTS 旧库名;</span><br><span class="line">CREATE DATABASE 新库名;</span><br><span class="line">DROP TABLE IF EXISTS 旧表名;</span><br><span class="line">CREATE TABLE  表名();</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#4.表的复制</span><br><span class="line"></span><br><span class="line">INSERT INTO author VALUES</span><br><span class="line">(1,&#x27;村上春树&#x27;,&#x27;日本&#x27;),</span><br><span class="line">(2,&#x27;莫言&#x27;,&#x27;中国&#x27;),</span><br><span class="line">(3,&#x27;冯唐&#x27;,&#x27;中国&#x27;),</span><br><span class="line">(4,&#x27;金庸&#x27;,&#x27;中国&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM Author;</span><br><span class="line">SELECT * FROM copy2;</span><br><span class="line">#1.仅仅复制表的结构</span><br><span class="line"></span><br><span class="line">CREATE TABLE copy LIKE author;</span><br><span class="line"></span><br><span class="line">#2.复制表的结构+数据</span><br><span class="line">CREATE TABLE copy2 </span><br><span class="line">SELECT * FROM author;</span><br><span class="line"></span><br><span class="line">#只复制部分数据</span><br><span class="line">CREATE TABLE copy3</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author </span><br><span class="line">WHERE nation=&#x27;中国&#x27;;</span><br><span class="line"></span><br><span class="line">#仅仅复制某些字段</span><br><span class="line"></span><br><span class="line">CREATE TABLE copy4 </span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author</span><br><span class="line">WHERE 0;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#1. 创建表dept1</span><br><span class="line">/*</span><br><span class="line">NAME  NULL? TYPE</span><br><span class="line">id    INT(7)</span><br><span class="line">NAME    VARCHAR(25)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line">CREATE TABLE dept1(</span><br><span class="line">  id INT(7),</span><br><span class="line">  NAME VARCHAR(25)</span><br><span class="line">);</span><br><span class="line">#2. 将表departments中的数据插入新表dept2中</span><br><span class="line"></span><br><span class="line">CREATE TABLE dept2</span><br><span class="line">SELECT department_id,department_name</span><br><span class="line">FROM myemployees.departments;</span><br><span class="line"></span><br><span class="line">#3. 创建表emp5</span><br><span class="line">/*</span><br><span class="line">NAME  NULL? TYPE</span><br><span class="line">id    INT(7)</span><br><span class="line">First_name  VARCHAR (25)</span><br><span class="line">Last_name VARCHAR(25)</span><br><span class="line">Dept_id   INT(7)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">CREATE TABLE emp5(</span><br><span class="line">id INT(7),</span><br><span class="line">first_name VARCHAR(25),</span><br><span class="line">last_name VARCHAR(25),</span><br><span class="line">dept_id INT(7)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#4. 将列Last_name的长度增加到50</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp5 MODIFY COLUMN last_name VARCHAR(50);</span><br><span class="line">#5. 根据表employees创建employees2</span><br><span class="line"></span><br><span class="line">CREATE TABLE employees2 LIKE myemployees.employees;</span><br><span class="line"></span><br><span class="line">#6. 删除表emp5</span><br><span class="line">DROP TABLE IF EXISTS emp5;</span><br><span class="line"></span><br><span class="line">#7. 将表employees2重命名为emp5</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees2 RENAME TO emp5;</span><br><span class="line"></span><br><span class="line">#8.在表dept和emp5中添加新列test_column,并检查所作的操作</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp5 ADD COLUMN test_column INT;</span><br><span class="line"></span><br><span class="line">#9.直接删除表emp5中的列 dept_id</span><br><span class="line">DESC emp5;</span><br><span class="line">ALTER TABLE emp5 DROP COLUMN test_column;</span><br></pre></td></tr></table></figure><h3 id="4-3-数据类型"><a href="#4-3-数据类型" class="headerlink" title="4.3 数据类型"></a>4.3 数据类型</h3><p>一、数值型<br>1、整型<br>tinyint、smallint、mediumint、int/integer、bigint<br>1         2        3          4            8</p><p>特点:<br>①都可以设置无符号和有符号,默认有符号,通过unsigned设置无符号<br>②如果超出了范围,会报out or range异常,插入临界值<br>③长度可以不指定,默认会有一个长度<br>长度代表显示的最大宽度,如果不够则左边用0填充,但需要搭配zerofill,并且默认变为无符号整型</p><p>2、浮点型<br>定点数:decimal(M,D)<br>浮点数:</p><ul><li>float(M,D)   4</li><li>double(M,D)  8</li></ul><p>特点:<br>①M代表整数部位+小数部位的个数,D代表小数部位<br>②如果超出范围,则报out or range异常,并且插入临界值<br>③M和D都可以省略,但对于定点数,M默认为10,D默认为0<br>④如果精度要求较高,则优先考虑使用定点数</p><p>二、字符型<br>char、varchar、binary、varbinary、enum、set、text、blob</p><p>char:固定长度的字符,写法为char(M),最大长度不能超过M,其中M可以省略,默认为1<br>varchar:可变长度的字符,写法为varchar(M),最大长度不能超过M,其中M不可以省略</p><p>三、日期型<br>year年<br>date日期<br>time时间<br>datetime 日期+时间          8<br>timestamp 日期+时间         4   比较容易受时区、语法模式、版本的影响,更能反映当前时区的真实时间</p><p>代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">#常见的数据类型</span><br><span class="line">/*</span><br><span class="line">数值型:</span><br><span class="line">  整型</span><br><span class="line">  小数:</span><br><span class="line">    定点数</span><br><span class="line">    浮点数</span><br><span class="line">字符型:</span><br><span class="line">  较短的文本:char、varchar</span><br><span class="line">  较长的文本:text、blob(较长的二进制数据)</span><br><span class="line">日期型:</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、整型</span><br><span class="line">/*</span><br><span class="line">分类:</span><br><span class="line">tinyint、smallint、mediumint、int/integer、bigint</span><br><span class="line">1      2       3        4          8</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">① 如果不设置无符号还是有符号,默认是有符号,如果想设置无符号,需要添加unsigned关键字</span><br><span class="line">② 如果插入的数值超出了整型的范围,会报out of range异常,并且插入临界值</span><br><span class="line">③ 如果不设置长度,会有默认的长度</span><br><span class="line">长度代表了显示的最大宽度,如果不够会用0在左边填充,但必须搭配zerofill使用！</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1.如何设置无符号和有符号</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS tab_int;</span><br><span class="line">CREATE TABLE tab_int(</span><br><span class="line">  t1 INT(7) ZEROFILL,</span><br><span class="line">  t2 INT(7) ZEROFILL </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC tab_int;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int VALUES(-123456);</span><br><span class="line">INSERT INTO tab_int VALUES(-123456,-123456);</span><br><span class="line">INSERT INTO tab_int VALUES(2147483648,4294967296);</span><br><span class="line">INSERT INTO tab_int VALUES(123,123);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_int;</span><br><span class="line"></span><br><span class="line">#二、小数</span><br><span class="line">/*</span><br><span class="line">分类:</span><br><span class="line">1.浮点型</span><br><span class="line">float(M,D)</span><br><span class="line">double(M,D)</span><br><span class="line">2.定点型</span><br><span class="line">dec(M,D)</span><br><span class="line">decimal(M,D)</span><br><span class="line">特点:</span><br><span class="line">①</span><br><span class="line">M:整数部位+小数部位</span><br><span class="line">D:小数部位</span><br><span class="line">如果超过范围,则插入临界值</span><br><span class="line">②</span><br><span class="line">M和D都可以省略</span><br><span class="line">如果是decimal,则M默认为10,D默认为0</span><br><span class="line">如果是float和double,则会根据插入的数值的精度来决定精度</span><br><span class="line">③定点型的精确度较高,如果要求插入数值的精度较高如货币运算等则考虑使用</span><br><span class="line">*/</span><br><span class="line">#测试M和D</span><br><span class="line"></span><br><span class="line">DROP TABLE tab_float;</span><br><span class="line">CREATE TABLE tab_float(</span><br><span class="line">  f1 FLOAT,</span><br><span class="line">  f2 DOUBLE,</span><br><span class="line">  f3 DECIMAL</span><br><span class="line">);</span><br><span class="line">SELECT * FROM tab_float;</span><br><span class="line">DESC tab_float;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_float VALUES(123.4523,123.4523,123.4523);</span><br><span class="line">INSERT INTO tab_float VALUES(123.456,123.456,123.456);</span><br><span class="line">INSERT INTO tab_float VALUES(123.4,123.4,123.4);</span><br><span class="line">INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);</span><br><span class="line"></span><br><span class="line">#原则:</span><br><span class="line">/*</span><br><span class="line">所选择的类型越简单越好,能保存数值的类型越小越好</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#三、字符型</span><br><span class="line">/*</span><br><span class="line">较短的文本:</span><br><span class="line">char</span><br><span class="line">varchar</span><br><span class="line">其他:</span><br><span class="line">binary和varbinary用于保存较短的二进制</span><br><span class="line">enum用于保存枚举</span><br><span class="line">set用于保存集合</span><br><span class="line"></span><br><span class="line">较长的文本:</span><br><span class="line">text</span><br><span class="line">blob(较大的二进制)</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line"></span><br><span class="line">      写法    M的意思                      特点        空间的耗费 效率</span><br><span class="line">char  char(M)   最大的字符数,可以省略,默认为1    固定长度的字符   比较耗费  高</span><br><span class="line">varchar varchar(M)  最大的字符数,不可以省略        可变长度的字符   比较节省  低</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_char(</span><br><span class="line">  c1 ENUM(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_char VALUES(&#x27;a&#x27;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#x27;b&#x27;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#x27;c&#x27;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#x27;m&#x27;);#超出范围</span><br><span class="line">INSERT INTO tab_char VALUES(&#x27;A&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_set;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_set(</span><br><span class="line">  s1 SET(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)</span><br><span class="line">);</span><br><span class="line">INSERT INTO tab_set VALUES(&#x27;a&#x27;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#x27;A,B&#x27;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#x27;a,c,d&#x27;);</span><br><span class="line"></span><br><span class="line">#四、日期型</span><br><span class="line">/*</span><br><span class="line">分类:</span><br><span class="line">date只保存日期</span><br><span class="line">time 只保存时间</span><br><span class="line">year只保存年</span><br><span class="line">datetime保存日期+时间</span><br><span class="line">timestamp保存日期+时间</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line"></span><br><span class="line">      字节    范围        时区等的影响</span><br><span class="line">datetime  8     1000——9999      不受</span><br><span class="line">timestamp 4     1970-2038     受</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_date(</span><br><span class="line">  t1 DATETIME,</span><br><span class="line">  t2 TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_date VALUES(NOW(),NOW());</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_date;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;time_zone&#x27;;</span><br><span class="line"></span><br><span class="line">SET time_zone=&#x27;+9:00&#x27;;</span><br></pre></td></tr></table></figure><h3 id="4-4-常见的约束"><a href="#4-4-常见的约束" class="headerlink" title="4.4 常见的约束"></a>4.4 常见的约束</h3><p>一、常见的约束<br>NOT NULL:非空,该字段的值必填<br>UNIQUE:唯一,该字段的值不可重复<br>DEFAULT:默认,该字段的值不用手动插入有默认值<br>CHECK:检查,mysql不支持<br>PRIMARY KEY:主键,该字段的值不可重复并且非空  unique+not null<br>FOREIGN KEY:外键,该字段的值引用了另外的表的字段</p><p>主键和唯一<br>1、区别:<br>①、一个表至多有一个主键,但可以有多个唯一<br>②、主键不允许为空,唯一可以为空<br>2、相同点<br>都具有唯一性<br>都支持组合键,但不推荐<br>外键:<br>1、用于限制两个表的关系,从表的字段值引用了主表的某字段值<br>2、外键列和主表的被引用列要求类型一致,意义一样,名称无要求<br>3、主表的被引用列要求是一个key(一般就是主键)<br>4、插入数据,先插入主表<br>删除数据,先删除从表<br>可以通过以下两种方式来删除主表的记录</p><h1 id="方式一-级联删除"><a href="#方式一-级联删除" class="headerlink" title="方式一:级联删除"></a>方式一:级联删除</h1><p><code>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE;</code></p><h1 id="方式二-级联置空"><a href="#方式二-级联置空" class="headerlink" title="方式二:级联置空"></a>方式二:级联置空</h1><p><code>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL;</code></p><p>二、创建表时添加约束<br><code>create table 表名(</code><br><code>字段名 字段类型 not null,#非空</code><br><code>字段名 字段类型 primary key,#主键</code><br><code>字段名 字段类型 unique,#唯一</code><br><code>字段名 字段类型 default 值,#默认</code><br><code>constraint 约束名 foreign key(字段名) references 主表(被引用列)</code><br><code>)</code><br>注意:</p><div class="table-container"><table><thead><tr><th></th><th>支持类型</th><th>可以起约束名</th></tr></thead><tbody><tr><td>列级约束</td><td>除了外键</td><td>不可以</td></tr><tr><td>表级约束</td><td>除了非空和默认</td><td>可以,但对主键无效</td></tr></tbody></table></div><p>列级约束可以在一个字段上追加多个,中间用空格隔开,没有顺序要求</p><p>三、修改表时添加或删除约束<br>1、非空<br>添加非空<br><code>alter table 表名 modify column 字段名 字段类型 not null;</code><br>删除非空<br><code>alter table 表名 modify column 字段名 字段类型 ;</code></p><p>2、默认<br>添加默认<br><code>alter table 表名 modify column 字段名 字段类型 default 值;</code><br>删除默认<br><code>alter table 表名 modify column 字段名 字段类型 ;</code><br>3、主键<br>添加主键<br><code>alter table 表名 add[ constraint 约束名] primary key(字段名);</code><br>删除主键<br><code>alter table 表名 drop primary key;</code></p><p>4、唯一<br>添加唯一<br><code>alter table 表名 add[ constraint 约束名] unique(字段名);</code><br>删除唯一<br><code>alter table 表名 drop index 索引名;</code><br>5、外键<br>添加外键<br><code>alter table 表名 add[ constraint 约束名] foreign key(字段名) references 主表(被引用列);</code><br>删除外键<br><code>alter table 表名 drop foreign key 约束名;</code></p><p>四、自增长列<br>特点:<br>1、不用手动插入值,可以自动提供序列值,默认从1开始,步长为1<br>auto_increment_increment<br>如果要更改起始值:手动插入值<br>如果要更改步长:更改系统变量<br>set auto_increment_increment=值;<br>2、一个表至多有一个自增长列<br>3、自增长列只能支持数值型<br>4、自增长列必须为一个key</p><p>一、创建表时设置自增长列<br><code>create table 表(</code><br><code>字段名 字段类型 约束 auto_increment</code><br><code>)</code><br>二、修改表时设置自增长列<br><code>alter table 表 modify column 字段名 字段类型 约束 auto_increment</code><br>三、删除自增长列<br><code>alter table 表 modify column 字段名 字段类型 约束</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">#常见约束</span><br><span class="line">/*</span><br><span class="line">含义:一种限制,用于限制表中的数据,为了保证表中的数据的准确和可靠性</span><br><span class="line"></span><br><span class="line">分类:六大约束</span><br><span class="line">  NOT NULL:非空,用于保证该字段的值不能为空</span><br><span class="line">  比如姓名、学号等</span><br><span class="line">  DEFAULT:默认,用于保证该字段有默认值</span><br><span class="line">  比如性别</span><br><span class="line">  PRIMARY KEY:主键,用于保证该字段的值具有唯一性,并且非空</span><br><span class="line">  比如学号、员工编号等</span><br><span class="line">  UNIQUE:唯一,用于保证该字段的值具有唯一性,可以为空</span><br><span class="line">  比如座位号</span><br><span class="line">  CHECK:检查约束[mysql中不支持]</span><br><span class="line">  比如年龄、性别</span><br><span class="line">  FOREIGN KEY:外键,用于限制两个表的关系,用于保证该字段的值必须来自于主表的关联列的值</span><br><span class="line">    在从表添加外键约束,用于引用主表中某列的值</span><br><span class="line">  比如学生表的专业编号,员工表的部门编号,员工表的工种编号</span><br><span class="line">  </span><br><span class="line">添加约束的时机:</span><br><span class="line">  1.创建表时</span><br><span class="line">  2.修改表时</span><br><span class="line">  </span><br><span class="line">约束的添加分类:</span><br><span class="line">  列级约束:</span><br><span class="line">    六大约束语法上都支持,但外键约束没有效果</span><br><span class="line">    </span><br><span class="line">  表级约束:</span><br><span class="line">    除了非空、默认,其他的都支持</span><br><span class="line">    </span><br><span class="line">主键和唯一的大对比:</span><br><span class="line"></span><br><span class="line">    保证唯一性  是否允许为空    一个表中可以有多少个    是否允许组合</span><br><span class="line">  主键 √      ×       至多有1个             √,但不推荐</span><br><span class="line">  唯一 √      √       可以有多个           √,但不推荐</span><br><span class="line">外键:</span><br><span class="line">  1、要求在从表设置外键关系</span><br><span class="line">  2、从表的外键列的类型和主表的关联列的类型要求一致或兼容,名称无要求</span><br><span class="line">  3、主表的关联列必须是一个key(一般是主键或唯一)</span><br><span class="line">  4、插入数据时,先插入主表,再插入从表</span><br><span class="line">  删除数据时,先删除从表,再删除主表</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">  字段名 字段类型 列级约束,</span><br><span class="line">  字段名 字段类型,</span><br><span class="line">  表级约束</span><br><span class="line">)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">CREATE DATABASE students;</span><br><span class="line">#一、创建表时添加约束</span><br><span class="line"></span><br><span class="line">#1.添加列级约束</span><br><span class="line">/*</span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">直接在字段名和类型后面追加 约束类型即可。</span><br><span class="line"></span><br><span class="line">只支持:默认、非空、主键、唯一</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">USE students;</span><br><span class="line">DROP TABLE stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">  id INT PRIMARY KEY,#主键</span><br><span class="line">  stuName VARCHAR(20) NOT NULL UNIQUE,#非空</span><br><span class="line">  gender CHAR(1) CHECK(gender=&#x27;男&#x27; OR gender =&#x27;女&#x27;),#检查</span><br><span class="line">  seat INT UNIQUE,#唯一</span><br><span class="line">  age INT DEFAULT  18,#默认约束</span><br><span class="line">  majorId INT REFERENCES major(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE major(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  majorName VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查看stuinfo中的所有索引,包括主键、外键、唯一</span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br><span class="line"></span><br><span class="line">#2.添加表级约束</span><br><span class="line">/*</span><br><span class="line">语法:在各个字段的最下面</span><br><span class="line"> [constraint 约束名] 约束类型(字段名) </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">  id INT,</span><br><span class="line">  stuname VARCHAR(20),</span><br><span class="line">  gender CHAR(1),</span><br><span class="line">  seat INT,</span><br><span class="line">  age INT,</span><br><span class="line">  majorid INT,</span><br><span class="line">  CONSTRAINT pk PRIMARY KEY(id),#主键</span><br><span class="line">  CONSTRAINT uq UNIQUE(seat),#唯一键</span><br><span class="line">  CONSTRAINT ck CHECK(gender =&#x27;男&#x27; OR gender  = &#x27;女&#x27;),#检查</span><br><span class="line">  CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br><span class="line"></span><br><span class="line">#通用的写法:★</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  stuname VARCHAR(20),</span><br><span class="line">  sex CHAR(1),</span><br><span class="line">  age INT DEFAULT 18,</span><br><span class="line">  seat INT UNIQUE,</span><br><span class="line">  majorid INT,</span><br><span class="line">  CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#二、修改表时添加约束</span><br><span class="line">/*</span><br><span class="line">1、添加列级约束</span><br><span class="line">alter table 表名 modify column 字段名 字段类型 新约束;</span><br><span class="line"></span><br><span class="line">2、添加表级约束</span><br><span class="line">alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键的引用];</span><br><span class="line">*/</span><br><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">  id INT,</span><br><span class="line">  stuname VARCHAR(20),</span><br><span class="line">  gender CHAR(1),</span><br><span class="line">  seat INT,</span><br><span class="line">  age INT,</span><br><span class="line">  majorid INT</span><br><span class="line">);</span><br><span class="line">DESC stuinfo;</span><br><span class="line">#1.添加非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;</span><br><span class="line">#2.添加默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</span><br><span class="line">#3.添加主键</span><br><span class="line">#①列级约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">#②表级约束</span><br><span class="line">ALTER TABLE stuinfo ADD PRIMARY KEY(id);</span><br><span class="line"></span><br><span class="line">#4.添加唯一</span><br><span class="line"></span><br><span class="line">#①列级约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</span><br><span class="line">#②表级约束</span><br><span class="line">ALTER TABLE stuinfo ADD UNIQUE(seat);</span><br><span class="line"></span><br><span class="line">#5.添加外键</span><br><span class="line">ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); </span><br><span class="line"></span><br><span class="line">#三、修改表时删除约束</span><br><span class="line"></span><br><span class="line">#1.删除非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br><span class="line"></span><br><span class="line">#2.删除默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT ;</span><br><span class="line"></span><br><span class="line">#3.删除主键</span><br><span class="line">ALTER TABLE stuinfo DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">#4.删除唯一</span><br><span class="line">ALTER TABLE stuinfo DROP INDEX seat;</span><br><span class="line"></span><br><span class="line">#5.删除外键</span><br><span class="line">ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1.向表emp2的id列中添加PRIMARY KEY约束(my_emp_id_pk)</span><br><span class="line"></span><br><span class="line">ALTER TABLE emp2 MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">ALTER TABLE emp2 ADD CONSTRAINT my_emp_id_pk PRIMARY KEY(id);</span><br><span class="line"></span><br><span class="line">#2. 向表dept2的id列中添加PRIMARY KEY约束(my_dept_id_pk)</span><br><span class="line"></span><br><span class="line">#3. 向表emp2中添加列dept_id,并在其中定义FOREIGN KEY约束,与之相关联的列是dept2表中的id列。</span><br><span class="line">ALTER TABLE emp2 ADD COLUMN dept_id INT;</span><br><span class="line">ALTER TABLE emp2 ADD CONSTRAINT fk_emp2_dept2 FOREIGN KEY(dept_id) REFERENCES dept2(id);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">          位置           支持的约束类型              是否可以起约束名</span><br><span class="line">列级约束: 列的后面       语法都支持,但外键没有效果   不可以</span><br><span class="line">表级约束: 所有列的下面    默认和非空不支持,其他支持   可以(主键没有效果)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="4-5-标识列"><a href="#4-5-标识列" class="headerlink" title="4.5 标识列"></a>4.5 标识列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#标识列</span><br><span class="line">/*</span><br><span class="line">又称为自增长列</span><br><span class="line">含义:可以不用手动的插入值,系统提供默认的序列值</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、标识列必须和主键搭配吗？不一定,但要求是一个key</span><br><span class="line">2、一个表可以有几个标识列？至多一个！</span><br><span class="line">3、标识列的类型只能是数值型</span><br><span class="line">4、标识列可以通过 SET auto_increment_increment=3;设置步长</span><br><span class="line">可以通过 手动插入值,设置起始值</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、创建表时设置标识列</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS tab_identity;</span><br><span class="line">CREATE TABLE tab_identity(</span><br><span class="line">  id INT  PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">TRUNCATE TABLE tab_identity;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_identity(id,NAME) VALUES(NULL,&#x27;john&#x27;);</span><br><span class="line">INSERT INTO tab_identity(NAME) VALUES(&#x27;lucy&#x27;);</span><br><span class="line">SELECT * FROM tab_identity;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;%auto_increment%&#x27;;</span><br><span class="line"></span><br><span class="line">SET auto_increment_increment=3;</span><br><span class="line"></span><br><span class="line"># 二、 修改表时设置标识列</span><br><span class="line">alter table tab_identity modify column id int primary key auto_increment;</span><br><span class="line"></span><br><span class="line"># 三、 修改表时删除标识列</span><br><span class="line">alter table tab_identity modify column id int;</span><br></pre></td></tr></table></figure><h2 id="5-TCL语言"><a href="#5-TCL语言" class="headerlink" title="5 TCL语言"></a>5 TCL语言</h2><h3 id="5-1-事务"><a href="#5-1-事务" class="headerlink" title="5.1 事务"></a>5.1 事务</h3><p>事务:</p><blockquote><p>事务由单独单元的一个或多个SQL语句组成,在这个单元中,每个MySQL语句是相互依赖的。而整个单独单元作为一个不可分割的整体,如果单元中某条SQL语句一旦执行失败或产生错误,整个单元将会回滚。所有受到影响的数据将返回到事物开始以前的状态;如果单元中的所有SQL语句均执行成功,则事物被顺利执行。</p></blockquote><p>一、含义<br>事务:一条或多条sql语句组成一个执行单位,一组sql语句要么都执行要么都不执行<br>二、特点(ACID)<br>A 原子性:一个事务是不可再分割的整体,要么都执行要么都不执行<br>C 一致性:一个事务可以使数据从一个一致状态切换到另外一个一致的状态<br>I 隔离性:一个事务不受其他事务的干扰,多个事务互相隔离的<br>D 持久性:一个事务一旦提交了,则永久的持久化到本地</p><p>三、事务的使用步骤 ★<br>了解:<br>隐式(自动)事务:没有明显的开启和结束,本身就是一条事务可以自动提交,比如insert、update、delete<br>显式事务:具有明显的开启和结束</p><p>使用显式事务:<br>①开启事务<br>set autocommit=0;<br>start transaction;#可以省略</p><p>②编写一组逻辑sql语句<br>注意:sql语句支持的是insert、update、delete</p><p>设置回滚点:<br>savepoint 回滚点名;</p><p>③结束事务<br>提交:commit;<br>回滚:rollback;<br>回滚到指定的地方:rollback to 回滚点名;<br>四、并发事务<br>1、事务的并发问题是如何发生的？<br>多个事务 同时 操作 同一个数据库的相同数据时<br>2、并发问题都有哪些？<br>脏读:一个事务读取了其他事务还没有提交的数据,读到的是其他事务”更新”的数据<br>不可重复读:一个事务多次读取,结果不一样<br>幻读:一个事务读取了其他事务还没有提交的数据,只是读到的是 其他事务”插入”的数据<br>3、如何解决并发问题<br>通过设置隔离级别来解决并发问题<br>4、隔离级别</p><div class="table-container"><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted:读未提交</td><td>×</td><td>×</td><td>×</td></tr><tr><td>read committed:读已提交</td><td>√</td><td>×</td><td>×</td></tr><tr><td>repeatable read:可重复读</td><td>√</td><td>√</td><td>×</td></tr><tr><td>serializable:串行化</td><td>√</td><td>√</td><td>√</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#TCL</span><br><span class="line">/*</span><br><span class="line">Transaction Control Language 事务控制语言</span><br><span class="line">事务:</span><br><span class="line">一个或一组sql语句组成一个执行单元,这个执行单元要么全部执行,要么全部不执行。</span><br><span class="line"></span><br><span class="line">案例:转账</span><br><span class="line"></span><br><span class="line">张三丰  1000</span><br><span class="line">郭襄  1000</span><br><span class="line"></span><br><span class="line">update 表 set 张三丰的余额=500 where name=&#x27;张三丰&#x27;</span><br><span class="line">意外</span><br><span class="line">update 表 set 郭襄的余额=1500 where name=&#x27;郭襄&#x27;</span><br><span class="line"></span><br><span class="line">事务的特性:</span><br><span class="line">ACID</span><br><span class="line">原子性:一个事务不可再分割,要么都执行要么都不执行</span><br><span class="line">一致性:一个事务执行会使数据从一个一致状态切换到另外一个一致状态</span><br><span class="line">隔离性:一个事务的执行不受其他事务的干扰</span><br><span class="line">持久性:一个事务一旦提交,则会永久的改变数据库的数据.</span><br><span class="line"></span><br><span class="line">事务的创建</span><br><span class="line">隐式事务:事务没有明显的开启和结束的标记</span><br><span class="line">比如insert、update、delete语句</span><br><span class="line"></span><br><span class="line">delete from 表 where id =1;</span><br><span class="line"></span><br><span class="line">显式事务:事务具有明显的开启和结束的标记</span><br><span class="line">前提:必须先设置自动提交功能为禁用</span><br><span class="line"></span><br><span class="line">set autocommit=0;</span><br><span class="line"></span><br><span class="line">步骤1:开启事务</span><br><span class="line">set autocommit=0;</span><br><span class="line">start transaction;可选的</span><br><span class="line">步骤2:编写事务中的sql语句(select insert update delete)</span><br><span class="line">语句1;</span><br><span class="line">语句2;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">步骤3:结束事务</span><br><span class="line">commit;提交事务</span><br><span class="line">rollback;回滚事务</span><br><span class="line"></span><br><span class="line">savepoint 节点名;设置保存点</span><br><span class="line"></span><br><span class="line">事务的隔离级别:</span><br><span class="line">                  脏读      不可重复读 幻读</span><br><span class="line">read uncommitted:√              √     √</span><br><span class="line">read committed:  ×              √     √</span><br><span class="line">repeatable read: ×              ×     √</span><br><span class="line">serializable      ×              ×     ×</span><br><span class="line"></span><br><span class="line">mysql中默认 第三个隔离级别 repeatable read</span><br><span class="line">oracle中默认第二个隔离级别 read committed</span><br><span class="line">查看隔离级别</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">设置隔离级别</span><br><span class="line">set session|global transaction isolation level 隔离级别;</span><br><span class="line"></span><br><span class="line">开启事务的语句;</span><br><span class="line">update 表 set 张三丰的余额=500 where name=&#x27;张三丰&#x27;</span><br><span class="line"></span><br><span class="line">update 表 set 郭襄的余额=1500 where name=&#x27;郭襄&#x27; </span><br><span class="line">结束事务的语句;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;autocommit&#x27;;</span><br><span class="line">SHOW ENGINES;#查看存储引擎</span><br><span class="line"></span><br><span class="line">#1.演示事务的使用步骤</span><br><span class="line"></span><br><span class="line">#开启事务</span><br><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account SET balance = 1000 WHERE username=&#x27;张无忌&#x27;;</span><br><span class="line">UPDATE account SET balance = 1000 WHERE username=&#x27;赵敏&#x27;;</span><br><span class="line"></span><br><span class="line">#结束事务</span><br><span class="line">ROLLBACK;</span><br><span class="line">#commit;</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;</span><br><span class="line"></span><br><span class="line">#2.演示事务对于delete和truncate的处理的区别</span><br><span class="line"></span><br><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">DELETE FROM account;</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">#3.演示savepoint 的使用</span><br><span class="line">SET autocommit=0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account WHERE id=25;</span><br><span class="line">SAVEPOINT a;#设置保存点</span><br><span class="line">DELETE FROM account WHERE id=28;</span><br><span class="line">ROLLBACK TO a;#回滚到保存点</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;</span><br></pre></td></tr></table></figure><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><h3 id="6-1-视图"><a href="#6-1-视图" class="headerlink" title="6.1 视图"></a>6.1 视图</h3><p>一、含义<br>mysql5.1版本出现的新特性,本身是一个虚拟表,它的数据来自于表,通过执行时动态生成。<br>好处:<br>1、简化sql语句<br>2、提高了sql的重用性<br>3、保护基表的数据,提高了安全性<br>二、创建<br><code>create view 视图名</code><br><code>as</code><br><code>查询语句;</code></p><p>三、修改<br>方式一:<br><code>create or replace view 视图名</code><br><code>as</code><br><code>查询语句;</code><br>方式二:<br><code>alter view 视图名</code><br><code>as</code><br><code>查询语句;</code></p><p>四、删除<br><code>drop view 视图1,视图2,...;</code><br>五、查看<br><code>desc 视图名;</code><br><code>show create view 视图名;</code><br>六、使用<br>1.插入<br><code>insert</code><br>2.修改<br><code>update</code><br>3.删除<br><code>delete</code><br>4.查看<br><code>select</code><br>注意:视图一般用于查询的,而不是更新的,所以具备以下特点的视图都不允许更新<br>①包含分组函数、group by、distinct、having、union、<br>②join<br>③常量视图<br>④where后的子查询用到了from中的表<br>⑤用到了不可更新的视图</p><p>七、视图和表的对比</p><div class="table-container"><table><thead><tr><th></th><th>关键字</th><th>是否占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>view</td><td>占用较小,只保存sql逻辑</td><td>一般用于查询</td></tr><tr><td>表</td><td>table</td><td>保存实际的数据</td><td>增删改查</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">#视图</span><br><span class="line">/*</span><br><span class="line">含义：虚拟表，和普通表一样使用</span><br><span class="line">mysql5.1版本出现的新特性，是通过表动态生成的数据</span><br><span class="line"></span><br><span class="line">比如：舞蹈班和普通班级的对比</span><br><span class="line">  创建语法的关键字  是否实际占用物理空间  使用</span><br><span class="line"></span><br><span class="line">视图  create view   只是保存了sql逻辑  增删改查，只是一般不能增删改</span><br><span class="line">表   create table  保存了数据       增删改查</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例：查询姓张的学生名和专业名</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m ON s.`majorid`= m.`id`</span><br><span class="line">WHERE s.`stuname` LIKE &#x27;张%&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE VIEW v1</span><br><span class="line">AS</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m ON s.`majorid`= m.`id`;</span><br><span class="line"></span><br><span class="line">SELECT * FROM v1 WHERE stuname LIKE &#x27;张%&#x27;;</span><br><span class="line"></span><br><span class="line">#一、创建视图</span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line">create view 视图名</span><br><span class="line">as</span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#1.查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="line">#①创建</span><br><span class="line">CREATE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d ON e.department_id  = d.department_id</span><br><span class="line">JOIN jobs j ON j.job_id  = e.job_id;</span><br><span class="line"></span><br><span class="line">#②使用</span><br><span class="line">SELECT * FROM myv1 WHERE last_name LIKE &#x27;%a%&#x27;;</span><br><span class="line"></span><br><span class="line">#2.查询各部门的平均工资级别</span><br><span class="line"></span><br><span class="line">#①创建视图查看每个部门的平均工资</span><br><span class="line">CREATE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#②使用</span><br><span class="line">SELECT myv2.`ag`,g.grade_level</span><br><span class="line">FROM myv2</span><br><span class="line">JOIN job_grades g</span><br><span class="line">ON myv2.`ag` BETWEEN g.`lowest_sal` AND g.`highest_sal`;</span><br><span class="line"></span><br><span class="line">#3.查询平均工资最低的部门信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">#4.查询平均工资最低的部门名和工资</span><br><span class="line"></span><br><span class="line">CREATE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">SELECT d.*,m.ag</span><br><span class="line">FROM myv3 m</span><br><span class="line">JOIN departments d</span><br><span class="line">ON m.`department_id`=d.`department_id`;</span><br><span class="line"></span><br><span class="line">#二、视图的修改</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line">/*</span><br><span class="line">create or replace view  视图名</span><br><span class="line">as</span><br><span class="line">查询语句;</span><br><span class="line">*/</span><br><span class="line">SELECT * FROM myv3;</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line">alter view 视图名</span><br><span class="line">as </span><br><span class="line">查询语句;</span><br><span class="line">*/</span><br><span class="line">ALTER VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">#三、删除视图</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">语法：drop view 视图名,视图名,...;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">DROP VIEW emp_v1,emp_v2,myv3;</span><br><span class="line"></span><br><span class="line">#四、查看视图</span><br><span class="line"></span><br><span class="line">DESC myv3;</span><br><span class="line"></span><br><span class="line">SHOW CREATE VIEW myv3;</span><br><span class="line"></span><br><span class="line">#五、视图的更新</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email,salary*12*(1+IFNULL(commission_pct,0)) &quot;annual salary&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv1;</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line">#1.插入</span><br><span class="line"></span><br><span class="line">INSERT INTO myv1 VALUES(&#x27;张飞&#x27;,&#x27;zf@qq.com&#x27;);</span><br><span class="line"></span><br><span class="line">#2.修改</span><br><span class="line">UPDATE myv1 SET last_name = &#x27;张无忌&#x27; WHERE last_name=&#x27;张飞&#x27;;</span><br><span class="line"></span><br><span class="line">#3.删除</span><br><span class="line">DELETE FROM myv1 WHERE last_name = &#x27;张无忌&#x27;;</span><br><span class="line"></span><br><span class="line">#具备以下特点的视图不允许更新</span><br><span class="line"></span><br><span class="line">#①包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT MAX(salary) m,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv1;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">UPDATE myv1 SET m=9000 WHERE department_id=10;</span><br><span class="line"></span><br><span class="line">#②常量视图</span><br><span class="line">CREATE OR REPLACE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT &#x27;john&#x27; NAME;</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv2;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">UPDATE myv2 SET NAME=&#x27;lucy&#x27;;</span><br><span class="line"></span><br><span class="line">#③Select中包含子查询</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT department_id,(SELECT MAX(salary) FROM employees) 最高工资</span><br><span class="line">FROM departments;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">SELECT * FROM myv3;</span><br><span class="line">UPDATE myv3 SET 最高工资=100000;</span><br><span class="line"></span><br><span class="line">#④join</span><br><span class="line">CREATE OR REPLACE VIEW myv4</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.department_id  = d.department_id;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv4;</span><br><span class="line">UPDATE myv4 SET last_name  = &#x27;张飞&#x27; WHERE last_name=&#x27;Whalen&#x27;;</span><br><span class="line">INSERT INTO myv4 VALUES(&#x27;陈真&#x27;,&#x27;xxxx&#x27;);</span><br><span class="line"></span><br><span class="line">#⑤from一个不能更新的视图</span><br><span class="line">CREATE OR REPLACE VIEW myv5</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM myv3;</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv5;</span><br><span class="line"></span><br><span class="line">UPDATE myv5 SET 最高工资=10000 WHERE department_id=60;</span><br><span class="line"></span><br><span class="line">#⑥where子句的子查询引用了from子句中的表</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv6</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN(</span><br><span class="line">  SELECT  manager_id</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE manager_id IS NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#更新</span><br><span class="line">SELECT * FROM myv6;</span><br><span class="line">UPDATE myv6 SET salary=10000 WHERE last_name = &#x27;k_ing&#x27;;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#一、创建视图emp_v1,要求查询电话号码以‘011’开头的员工姓名和工资、邮箱</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW emp_v1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,salary,email</span><br><span class="line">FROM employees</span><br><span class="line">WHERE phone_number LIKE &#x27;011%&#x27;;</span><br><span class="line"></span><br><span class="line">#二、创建视图emp_v2，要求查询部门的最高工资高于12000的部门信息</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW emp_v2</span><br><span class="line">AS</span><br><span class="line">SELECT MAX(salary) mx_dep,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">SELECT d.*,m.mx_dep</span><br><span class="line">FROM departments d</span><br><span class="line">JOIN emp_v2 m</span><br><span class="line">ON m.department_id = d.`department_id`;</span><br></pre></td></tr></table></figure><h3 id="6-2-变量"><a href="#6-2-变量" class="headerlink" title="6.2 变量"></a>6.2 变量</h3><p>分类<br>一、系统变量<br>说明:变量由系统提供的,不用自定义<br>语法:<br>①查看系统变量<br><code>show [global|session ]variables like &#39;&#39;;</code> 如果没有显式声明global还是session,则默认是session<br>②查看指定的系统变量的值<br><code>select @@[global|session].变量名;</code> 如果没有显式声明global还是session,则默认是session<br>③为系统变量赋值<br>方式一:<br><code>set [global|session ] 变量名=值;</code> 如果没有显式声明global还是session,则默认是session<br>方式二:<br><code>set @@global.变量名=值;</code><br><code>set @@变量名=值;</code></p><p>1、全局变量<br>服务器层面上的,必须拥有super权限才能为系统变量赋值,作用域为整个服务器,也就是针对于所有连接(会话)有效</p><p>2、会话变量<br>服务器为每一个连接的客户端都提供了系统变量,作用域为当前的连接(会话)</p><p>二、自定义变量<br>说明:<br>1、用户变量<br>作用域:针对于当前连接(会话)生效<br>位置:begin end里面,也可以放在外面<br>使用:</p><p>①声明并赋值:<br><code>set @变量名=值;</code>或<br><code>set @变量名:=值;</code>或<br><code>select @变量名:=值;</code></p><p>②更新值<br>方式一:<br><code>set @变量名=值;</code>或<br><code>set @变量名:=值;</code>或<br><code>select @变量名:=值;</code><br>方式二:<br><code>select xx into @变量名 from 表;</code></p><p>③使用<br><code>select @变量名;</code></p><p>2、局部变量<br>作用域:仅仅在定义它的begin end中有效<br>位置:只能放在begin end中,而且只能放在第一句<br>使用:<br>①声明<br><code>declare 变量名 类型 [default 值];</code><br>②赋值或更新<br>方式一:<br><code>set 变量名=值;</code>或<br><code>set 变量名:=值;</code>或<br><code>select @变量名:=值;</code><br>方式二:<br><code>select xx into 变量名 from 表;</code><br>③使用<br><code>select 变量名;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">#变量</span><br><span class="line">/*</span><br><span class="line">系统变量：</span><br><span class="line">  全局变量</span><br><span class="line">  会话变量</span><br><span class="line">自定义变量：</span><br><span class="line">  用户变量</span><br><span class="line">  局部变量</span><br><span class="line">*/</span><br><span class="line">#一、系统变量</span><br><span class="line">/*</span><br><span class="line">说明：变量由系统定义，不是用户定义，属于服务器层面</span><br><span class="line">注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别</span><br><span class="line">使用步骤：</span><br><span class="line">1、查看所有系统变量</span><br><span class="line">show global|【session】variables;</span><br><span class="line">2、查看满足条件的部分系统变量</span><br><span class="line">show global|【session】 variables like &#x27;%char%&#x27;;</span><br><span class="line">3、查看指定的系统变量的值</span><br><span class="line">select @@global|【session】系统变量名;</span><br><span class="line">4、为某个系统变量赋值</span><br><span class="line">方式一：</span><br><span class="line">set global|【session】系统变量名=值;</span><br><span class="line">方式二：</span><br><span class="line">set @@global|【session】系统变量名=值;</span><br><span class="line">*/</span><br><span class="line">#1》全局变量</span><br><span class="line">/*</span><br><span class="line">作用域：针对于所有会话（连接）有效，但不能跨重启</span><br><span class="line">*/</span><br><span class="line">#①查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line">#②查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;%char%&#x27;;</span><br><span class="line">#③查看指定的系统变量的值</span><br><span class="line">SELECT @@global.autocommit;</span><br><span class="line">#④为某个系统变量赋值</span><br><span class="line">SET @@global.autocommit=0;</span><br><span class="line">SET GLOBAL autocommit=0;</span><br><span class="line"></span><br><span class="line">#2》会话变量</span><br><span class="line">/*</span><br><span class="line">作用域：针对于当前会话（连接）有效</span><br><span class="line">*/</span><br><span class="line">#①查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">#②查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#x27;%char%&#x27;;</span><br><span class="line">#③查看指定的会话变量的值</span><br><span class="line">SELECT @@autocommit;</span><br><span class="line">SELECT @@session.tx_isolation;</span><br><span class="line">#④为某个会话变量赋值</span><br><span class="line">SET @@session.tx_isolation=&#x27;read-uncommitted&#x27;;</span><br><span class="line">SET SESSION tx_isolation=&#x27;read-committed&#x27;;</span><br><span class="line"></span><br><span class="line">#二、自定义变量</span><br><span class="line">/*</span><br><span class="line">说明：变量由用户自定义，而不是系统提供的</span><br><span class="line">使用步骤：</span><br><span class="line">1、声明</span><br><span class="line">2、赋值</span><br><span class="line">3、使用（查看、比较、运算等）</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1》用户变量</span><br><span class="line">/*</span><br><span class="line">作用域：针对于当前会话（连接）有效，作用域同于会话变量</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#赋值操作符：=或:=</span><br><span class="line">#①声明并初始化</span><br><span class="line">/*</span><br><span class="line">SET @变量名=值;</span><br><span class="line">SET @变量名:=值;</span><br><span class="line">SELECT @变量名:=值;</span><br><span class="line">*/</span><br><span class="line">#②赋值（更新变量的值）</span><br><span class="line">#方式一：</span><br><span class="line">/*</span><br><span class="line">  SET @变量名=值;</span><br><span class="line">  SET @变量名:=值;</span><br><span class="line">  SELECT @变量名:=值;</span><br><span class="line">*/</span><br><span class="line">#方式二：</span><br><span class="line">/*</span><br><span class="line">  SELECT 字段 INTO @变量名</span><br><span class="line">  FROM 表;</span><br><span class="line">*/</span><br><span class="line">#③使用（查看变量的值）</span><br><span class="line">#SELECT @变量名;</span><br><span class="line"></span><br><span class="line">#2》局部变量</span><br><span class="line">/*</span><br><span class="line">作用域：仅仅在定义它的begin end块中有效</span><br><span class="line">应用在 begin end中的第一句话</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#①声明</span><br><span class="line">/*</span><br><span class="line">DECLARE 变量名 类型;</span><br><span class="line">DECLARE 变量名 类型 【DEFAULT 值】;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#②赋值（更新变量的值）</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line">/*</span><br><span class="line">  SET 局部变量名=值;</span><br><span class="line">  SET 局部变量名:=值;</span><br><span class="line">  SELECT 局部变量名:=值;</span><br><span class="line">*/</span><br><span class="line">#方式二：</span><br><span class="line">/*</span><br><span class="line">  SELECT 字段 INTO 具备变量名</span><br><span class="line">  FROM 表;</span><br><span class="line">*/</span><br><span class="line">#③使用（查看变量的值）</span><br><span class="line">#SELECT 局部变量名;</span><br><span class="line"></span><br><span class="line">#案例：声明两个变量，求和并打印</span><br><span class="line"></span><br><span class="line">#用户变量</span><br><span class="line">SET @m=1;</span><br><span class="line">SET @n=1;</span><br><span class="line">SET @sum=@m+@n;</span><br><span class="line">SELECT @sum;</span><br><span class="line"></span><br><span class="line">#局部变量</span><br><span class="line">/*</span><br><span class="line">DECLARE m INT DEFAULT 1;</span><br><span class="line">DECLARE n INT DEFAULT 1;</span><br><span class="line">DECLARE SUM INT;</span><br><span class="line">SET SUM=m+n;</span><br><span class="line">SELECT SUM;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#用户变量和局部变量的对比</span><br><span class="line">/*</span><br><span class="line">    作用域     定义位置    语法</span><br><span class="line">用户变量  当前会话    会话的任何地方   加@符号，不用指定类型</span><br><span class="line">局部变量  定义它的BEGIN END中  BEGIN END的第一句话  一般不用加@,需要指定类型</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="6-3-存储过程和函数"><a href="#6-3-存储过程和函数" class="headerlink" title="6.3 存储过程和函数"></a>6.3 存储过程和函数</h3><p>说明:都类似于java中的方法,将一组完成特定功能的逻辑语句包装起来,对外暴露名字</p><p>好处:<br>1.提高重用性<br>2.sql语句简单<br>3.减少了和数据库服务器连接的次数,提高了效率</p><h4 id="6-3-1-存储过程"><a href="#6-3-1-存储过程" class="headerlink" title="6.3.1 存储过程"></a>6.3.1 存储过程</h4><p>一、创建 ★<br><code>create procedure 存储过程名(参数模式 参数名 参数类型)</code><br><code>begin</code><br><code>存储过程体</code><br><code>end</code><br>注意:<br>1.参数模式:in、out、inout,其中in可以省略<br>2.存储过程体的每一条sql语句都需要用分号结尾</p><p>二、调用<br><code>call 存储过程名(实参列表)</code><br>举例:<br>调用in模式的参数:call sp1(‘值’);<br>调用out模式的参数:set @name; call sp1(@name);select @name;<br>调用inout模式的参数:set @name=值; call sp1(@name); select @name;<br>三、查看<br><code>show create procedure 存储过程名;</code><br>四、删除<br><code>drop procedure 存储过程名;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">#存储过程和函数</span><br><span class="line">/*</span><br><span class="line">存储过程和函数：类似于java中的方法</span><br><span class="line">好处：</span><br><span class="line">1、提高代码的重用性</span><br><span class="line">2、简化操作</span><br><span class="line">*/</span><br><span class="line">#存储过程</span><br><span class="line">/*</span><br><span class="line">含义：一组预先编译好的SQL语句的集合，理解成批处理语句</span><br><span class="line">1、提高代码的重用性</span><br><span class="line">2、简化操作</span><br><span class="line">3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、创建语法</span><br><span class="line">/*</span><br><span class="line">CREATE PROCEDURE 存储过程名(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">  存储过程体（一组合法的SQL语句）</span><br><span class="line">END</span><br><span class="line">*/</span><br><span class="line">#注意：</span><br><span class="line">/*</span><br><span class="line">1、参数列表包含三部分</span><br><span class="line">参数模式  参数名  参数类型</span><br><span class="line">举例：</span><br><span class="line">in stuname varchar(20)</span><br><span class="line"></span><br><span class="line">参数模式：</span><br><span class="line">in：该参数可以作为输入，也就是该参数需要调用方传入值</span><br><span class="line">out：该参数可以作为输出，也就是该参数可以作为返回值</span><br><span class="line">inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span><br><span class="line"></span><br><span class="line">2、如果存储过程体仅仅只有一句话，begin end可以省略</span><br><span class="line">存储过程体中的每条sql语句的结尾要求必须加分号。</span><br><span class="line">存储过程的结尾可以使用 delimiter 重新设置</span><br><span class="line">语法：</span><br><span class="line">delimiter 结束标记</span><br><span class="line">案例：</span><br><span class="line">delimiter $</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#二、调用语法</span><br><span class="line"></span><br><span class="line">#CALL 存储过程名(实参列表);</span><br><span class="line"></span><br><span class="line">#--------------------------------案例演示-----------------------------------</span><br><span class="line">#1.空参列表</span><br><span class="line">#案例：插入到admin表中五条记录</span><br><span class="line"># 注意:需要到命令行窗口去执行</span><br><span class="line">SELECT * FROM admin;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE myp1()</span><br><span class="line">BEGIN</span><br><span class="line">  INSERT INTO admin(username,`password`) </span><br><span class="line">  VALUES(&#x27;john1&#x27;,&#x27;0000&#x27;),(&#x27;lily&#x27;,&#x27;0000&#x27;),(&#x27;rose&#x27;,&#x27;0000&#x27;),(&#x27;jack&#x27;,&#x27;0000&#x27;),(&#x27;tom&#x27;,&#x27;0000&#x27;);</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp1()$</span><br><span class="line"></span><br><span class="line">#2.创建带in模式参数的存储过程</span><br><span class="line"></span><br><span class="line">#案例1：创建存储过程实现 根据女神名，查询对应的男神信息</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT bo.*</span><br><span class="line">  FROM boys bo</span><br><span class="line">  RIGHT JOIN beauty b ON bo.id = b.boyfriend_id</span><br><span class="line">  WHERE b.name=beautyName;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp2(&#x27;柳岩&#x27;)$</span><br><span class="line"></span><br><span class="line">#案例2 ：创建存储过程实现，用户是否登录成功</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE result INT DEFAULT 0;#声明并初始化</span><br><span class="line">  SELECT COUNT(*) INTO result#赋值</span><br><span class="line">  FROM admin</span><br><span class="line">  WHERE admin.username = username</span><br><span class="line">  AND admin.password = PASSWORD;</span><br><span class="line">  SELECT IF(result&gt;0,&#x27;成功&#x27;,&#x27;失败&#x27;);#使用</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp3(&#x27;张飞&#x27;,&#x27;8888&#x27;)$</span><br><span class="line"></span><br><span class="line">#3.创建out 模式参数的存储过程</span><br><span class="line">#案例1：根据输入的女神名，返回对应的男神名</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT bo.boyname INTO boyname</span><br><span class="line">  FROM boys bo</span><br><span class="line">  RIGHT JOIN</span><br><span class="line">  beauty b ON b.boyfriend_id = bo.id</span><br><span class="line">  WHERE b.name=beautyName ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#案例2：根据输入的女神名，返回对应的男神名和魅力值</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) </span><br><span class="line">BEGIN</span><br><span class="line">  SELECT boys.boyname ,boys.usercp INTO boyname,usercp</span><br><span class="line">  FROM boys </span><br><span class="line">  RIGHT JOIN</span><br><span class="line">  beauty b ON b.boyfriend_id = boys.id</span><br><span class="line">  WHERE b.name=beautyName ;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp7(&#x27;小昭&#x27;,@name,@cp)$</span><br><span class="line">SELECT @name,@cp$</span><br><span class="line"></span><br><span class="line">#4.创建带inout模式参数的存储过程</span><br><span class="line">#案例1：传入a和b两个值，最终a和b都翻倍并返回</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)</span><br><span class="line">BEGIN</span><br><span class="line">  SET a=a*2;</span><br><span class="line">  SET b=b*2;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">SET @m=10$</span><br><span class="line">SET @n=20$</span><br><span class="line">CALL myp8(@m,@n)$</span><br><span class="line">SELECT @m,@n$</span><br><span class="line"></span><br><span class="line">#三、删除存储过程</span><br><span class="line">#语法：drop procedure 存储过程名</span><br><span class="line">DROP PROCEDURE p1;</span><br><span class="line">DROP PROCEDURE p2,p3;#错误</span><br><span class="line"></span><br><span class="line">#四、查看存储过程的信息</span><br><span class="line">DESC myp2;#错误</span><br><span class="line">SHOW CREATE PROCEDURE  myp2;</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#一、创建存储过程实现传入用户名和密码，插入到admin表中</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE test_pro1(IN username VARCHAR(20),IN loginPwd VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">  INSERT INTO admin(admin.username,PASSWORD)</span><br><span class="line">  VALUES(username,loginpwd);</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#二、创建存储过程实现传入女神编号，返回女神名称和女神电话</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_pro2(IN id INT,OUT NAME VARCHAR(20),OUT phone VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT b.name ,b.phone INTO NAME,phone</span><br><span class="line">  FROM beauty b</span><br><span class="line">  WHERE b.id = id;</span><br><span class="line">END $</span><br><span class="line">#三、创建存储存储过程或函数实现传入两个女神生日，返回大小</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_pro3(IN birth1 DATETIME,IN birth2 DATETIME,OUT result INT)</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT DATEDIFF(birth1,birth2) INTO result;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#四、创建存储过程或函数实现传入一个日期，格式化成xx年xx月xx日并返回</span><br><span class="line">CREATE PROCEDURE test_pro4(IN mydate DATETIME,OUT strDate VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT DATE_FORMAT(mydate,&#x27;%y年%m月%d日&#x27;) INTO strDate;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro4(NOW(),@str)$</span><br><span class="line">SELECT @str $</span><br><span class="line"></span><br><span class="line">#五、创建存储过程或函数实现传入女神名称，返回：女神 and 男神  格式的字符串</span><br><span class="line">/*如 传入 ：小昭</span><br><span class="line">返回： 小昭 AND 张无忌</span><br><span class="line">*/</span><br><span class="line">DROP PROCEDURE test_pro5 $</span><br><span class="line">CREATE PROCEDURE test_pro5(IN beautyName VARCHAR(20),OUT str VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT CONCAT(beautyName,&#x27; and &#x27;,IFNULL(boyName,&#x27;null&#x27;)) INTO str</span><br><span class="line">  FROM boys bo</span><br><span class="line">  RIGHT JOIN beauty b ON b.boyfriend_id = bo.id</span><br><span class="line">  WHERE b.name=beautyName;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro5(&#x27;柳岩&#x27;,@str)$</span><br><span class="line">SELECT @str $</span><br><span class="line"></span><br><span class="line">#六、创建存储过程或函数，根据传入的条目数和起始索引，查询beauty表的记录</span><br><span class="line">DROP PROCEDURE test_pro6$</span><br><span class="line">CREATE PROCEDURE test_pro6(IN startIndex INT,IN size INT)</span><br><span class="line">BEGIN</span><br><span class="line">  SELECT * FROM beauty LIMIT startIndex,size;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro6(3,5)$</span><br></pre></td></tr></table></figure><h4 id="6-3-2-函数"><a href="#6-3-2-函数" class="headerlink" title="6.3.2 函数"></a>6.3.2 函数</h4><p>一、创建<br><code>create function 函数名(参数名 参数类型) returns  返回类型</code><br><code>begin</code><br><code>函数体</code><br><code>end</code></p><p>注意:函数体中肯定需要有return语句<br>二、调用<br><code>select 函数名(实参列表);</code><br>三、查看<br><code>show create function 函数名;</code><br>四、删除<br><code>drop function 函数名;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#函数</span><br><span class="line">/*</span><br><span class="line">含义：一组预先编译好的SQL语句的集合，理解成批处理语句</span><br><span class="line">1、提高代码的重用性</span><br><span class="line">2、简化操作</span><br><span class="line">3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line"></span><br><span class="line">存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新</span><br><span class="line">函数：有且仅有1 个返回，适合做处理数据后返回一个结果</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、创建语法</span><br><span class="line">/*</span><br><span class="line">CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型</span><br><span class="line">BEGIN</span><br><span class="line">  函数体</span><br><span class="line">END</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">注意：</span><br><span class="line">1.参数列表 包含两部分：</span><br><span class="line">参数名 参数类型</span><br><span class="line"></span><br><span class="line">2.函数体：肯定会有return语句，如果没有会报错</span><br><span class="line">如果return语句没有放在函数体的最后也不报错，但不建议</span><br><span class="line"></span><br><span class="line">return 值;</span><br><span class="line">3.函数体中仅有一句话，则可以省略begin end</span><br><span class="line">4.使用 delimiter语句设置结束标记</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#二、调用语法</span><br><span class="line">#SELECT 函数名(参数列表)</span><br><span class="line"></span><br><span class="line">#------------------------------案例演示----------------------------</span><br><span class="line">#1.无参有返回</span><br><span class="line">#案例：返回公司的员工个数</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE FUNCTION myf1() RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE c INT DEFAULT 0;#定义局部变量</span><br><span class="line">  SELECT COUNT(*) INTO c#赋值</span><br><span class="line">  FROM employees;</span><br><span class="line">  RETURN c;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf1()$</span><br><span class="line"></span><br><span class="line">#2.有参有返回</span><br><span class="line">#案例1：根据员工名，返回它的工资</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">  SET @sal=0;#定义用户变量 </span><br><span class="line">  SELECT salary INTO @sal   #赋值</span><br><span class="line">  FROM employees</span><br><span class="line">  WHERE last_name = empName;</span><br><span class="line">  </span><br><span class="line">  RETURN @sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf2(&#x27;k_ing&#x27;) $</span><br><span class="line"></span><br><span class="line">#案例2：根据部门名，返回该部门的平均工资</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE sal DOUBLE ;</span><br><span class="line">  SELECT AVG(salary) INTO sal</span><br><span class="line">  FROM employees e</span><br><span class="line">  JOIN departments d ON e.department_id = d.department_id</span><br><span class="line">  WHERE d.department_name=deptName;</span><br><span class="line">  RETURN sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf3(&#x27;IT&#x27;)$</span><br><span class="line"></span><br><span class="line">#三、查看函数</span><br><span class="line"></span><br><span class="line">SHOW CREATE FUNCTION myf3;</span><br><span class="line"></span><br><span class="line">#四、删除函数</span><br><span class="line">DROP FUNCTION myf3;</span><br><span class="line"></span><br><span class="line">#案例</span><br><span class="line">#一、创建函数，实现传入两个float，返回二者之和</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION test_fun1(num1 FLOAT,num2 FLOAT) RETURNS FLOAT</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE SUM FLOAT DEFAULT 0;</span><br><span class="line">  SET SUM=num1+num2;</span><br><span class="line">  RETURN SUM;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_fun1(1,2)$</span><br></pre></td></tr></table></figure><h3 id="6-4-流程控制结构"><a href="#6-4-流程控制结构" class="headerlink" title="6.4 流程控制结构"></a>6.4 流程控制结构</h3><p>顺序结构:程序从上往下依次执行<br>分支结构:程序按条件进行选择执行,从两条或多条路径中选择一条执行<br>循环结构:程序满足一定条件下,重复执行一组语句</p><h4 id="6-4-1-分支结构"><a href="#6-4-1-分支结构" class="headerlink" title="6.4.1 分支结构"></a>6.4.1 分支结构</h4><p>特点:<br>1、if函数<br>功能:实现简单双分支<br>语法:<br><code>if(条件,值1,值2)</code><br>位置:<br>可以作为表达式放在任何位置<br>2、case结构<br>功能:实现多分支<br>语法1:<br><code>case 表达式或字段</code><br><code>when 值1 then 语句1;</code><br><code>when 值2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end [case];</code></p><p>语法2:<br><code>case</code><br><code>when 条件1 then 语句1;</code><br><code>when 条件2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end [case];</code></p><p>位置:<br>可以放在任何位置,<br>如果放在begin end 外面,作为表达式结合着其他语句使用<br>如果放在begin end 里面,一般作为独立的语句使用<br>3、if结构<br>功能:实现多分支<br>语法:<br><code>if 条件1 then 语句1;</code><br><code>elseif 条件2 then 语句2;</code><br><code>...</code><br><code>else 语句n;</code><br><code>end if;</code><br>位置:<br>只能放在begin end中</p><h4 id="6-4-2-循环结构"><a href="#6-4-2-循环结构" class="headerlink" title="6.4.2 循环结构"></a>6.4.2 循环结构</h4><p>位置:<br>只能放在begin end中</p><p>特点:都能实现循环结构</p><p>对比:</p><p>①这三种循环都可以省略名称,但如果循环中添加了循环控制语句(leave或iterate)则必须添加名称<br>②loop 一般用于实现简单的死循环<br>while 先判断后执行<br>repeat 先执行后判断,无条件至少执行一次</p><p>1、while<br>语法:<br><code>[名称:]while 循环条件 do</code><br><code>循环体</code><br><code>end while [名称];</code><br>2、loop<br>语法:<br><code>[名称:]loop</code><br><code>循环体</code><br><code>end loop [名称];</code></p><p>3、repeat<br>语法:<br><code>[名称:]repeat</code><br><code>循环体</code><br><code>until 结束条件</code><br><code>end repeat [名称];</code></p><p>二、循环控制语句<br>leave:类似于break,用于跳出所在的循环<br>iterate:类似于continue,用于结束本次循环,继续下一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">#流程控制结构</span><br><span class="line">/*</span><br><span class="line">顺序、分支、循环</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#一、分支结构</span><br><span class="line">#1.if函数</span><br><span class="line">/*</span><br><span class="line">语法：if(条件,值1，值2)</span><br><span class="line">功能：实现双分支</span><br><span class="line">应用在begin end中或外面</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#2.case结构</span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line">情况1：类似于switch</span><br><span class="line">case 变量或表达式</span><br><span class="line">when 值1 then 语句1;</span><br><span class="line">when 值2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line">情况2：</span><br><span class="line">case </span><br><span class="line">when 条件1 then 语句1;</span><br><span class="line">when 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line">应用在begin end 中或外面</span><br><span class="line">*/</span><br><span class="line">#else可以省略，如果else省略了并且所有when条件都不满足，返回null</span><br><span class="line">#3.if结构</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">if 条件1 then 语句1;</span><br><span class="line">elseif 条件2 then 语句2;</span><br><span class="line">....</span><br><span class="line">[else 语句n;]</span><br><span class="line">end if;</span><br><span class="line">功能：类似于多重if</span><br><span class="line"></span><br><span class="line">只能应用在begin end 中</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#案例1：创建函数，实现传入成绩，如果成绩&gt;90,显示或返回A，如果成绩&gt;80,显示或返回B，如果成绩&gt;60,显示或返回C，否则显示或返回D</span><br><span class="line">delimiter $</span><br><span class="line">CREATE procedure test_case(in score int)</span><br><span class="line">BEGIN</span><br><span class="line">  case</span><br><span class="line">  when score&gt;=90 and score&lt;=100 then select &#x27;A&#x27;;</span><br><span class="line">  when score&gt;=80 then select &#x27;B&#x27;;</span><br><span class="line">  when score&gt;=60 then select &#x27;C&#x27;;</span><br><span class="line">  else select &#x27;D&#x27;;</span><br><span class="line">    end case;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">call test_case(87)$</span><br><span class="line"></span><br><span class="line">create function test_if(score int) returns char</span><br><span class="line">begin</span><br><span class="line">  if score&gt;=90 and score&lt;=100 then return &#x27;A&#x27;;</span><br><span class="line">  elseif score&gt;=80 then return &#x27;B&#x27;;</span><br><span class="line">  elseif score&gt;=60 then return &#x27;C&#x27;;</span><br><span class="line">  else return &#x27;D&#x27;;</span><br><span class="line">    end if;</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">select test_if(86)$</span><br><span class="line"></span><br><span class="line">#案例2：创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_if_pro(IN sal DOUBLE)</span><br><span class="line">BEGIN</span><br><span class="line">  IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary=sal;</span><br><span class="line">  ELSEIF sal&gt;=2000 AND sal&lt;5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;</span><br><span class="line">  ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;</span><br><span class="line">  END IF;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_if_pro(2100)$</span><br><span class="line"></span><br><span class="line">#案例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION test_case(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN </span><br><span class="line">  DECLARE ch CHAR DEFAULT &#x27;A&#x27;;</span><br><span class="line">  </span><br><span class="line">  CASE </span><br><span class="line">  WHEN score&gt;90 THEN SET ch=&#x27;A&#x27;;</span><br><span class="line">  WHEN score&gt;80 THEN SET ch=&#x27;B&#x27;;</span><br><span class="line">  WHEN score&gt;60 THEN SET ch=&#x27;C&#x27;;</span><br><span class="line">  ELSE SET ch=&#x27;D&#x27;;</span><br><span class="line">  END CASE;</span><br><span class="line">  </span><br><span class="line">  RETURN ch;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_case(56)$</span><br><span class="line"></span><br><span class="line">#二、循环结构</span><br><span class="line">/*</span><br><span class="line">分类：</span><br><span class="line">while、loop、repeat</span><br><span class="line"></span><br><span class="line">循环控制：</span><br><span class="line"></span><br><span class="line">iterate类似于 continue，继续，结束本次循环，继续下一次</span><br><span class="line">leave 类似于  break，跳出，结束当前所在的循环</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1.while</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">【标签:】while 循环条件 do</span><br><span class="line">  循环体;</span><br><span class="line">end while【 标签】;</span><br><span class="line"></span><br><span class="line">联想：</span><br><span class="line"></span><br><span class="line">while(循环条件)&#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#2.loop</span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line">【标签:】loop</span><br><span class="line">  循环体;</span><br><span class="line">end loop 【标签】;</span><br><span class="line"></span><br><span class="line">可以用来模拟简单的死循环</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#3.repeat</span><br><span class="line">/*</span><br><span class="line">语法：</span><br><span class="line">【标签：】repeat</span><br><span class="line">  循环体;</span><br><span class="line">until 结束循环的条件</span><br><span class="line">end repeat 【标签】;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#1.没有添加循环控制语句</span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录</span><br><span class="line">DROP PROCEDURE pro_while1$</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE i INT DEFAULT 1;</span><br><span class="line">  WHILE i&lt;=insertCount DO</span><br><span class="line">    INSERT INTO admin(username,`password`) VALUES(CONCAT(&#x27;Rose&#x27;,i),&#x27;666&#x27;);</span><br><span class="line">    SET i=i+1;</span><br><span class="line">  END WHILE;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100)$</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">int i=1;</span><br><span class="line">while(i&lt;=insertcount)&#123;</span><br><span class="line">  //插入</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#2.添加leave语句</span><br><span class="line"></span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while1$</span><br><span class="line">CREATE PROCEDURE test_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE i INT DEFAULT 1;</span><br><span class="line">  a:WHILE i&lt;=insertCount DO</span><br><span class="line">    INSERT INTO admin(username,`password`) VALUES(CONCAT(&#x27;xiaohua&#x27;,i),&#x27;0000&#x27;);</span><br><span class="line">    IF i&gt;=20 THEN LEAVE a;</span><br><span class="line">    END IF;</span><br><span class="line">    SET i=i+1;</span><br><span class="line">  END WHILE a;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while1(100)$</span><br><span class="line"></span><br><span class="line">#3.添加iterate语句</span><br><span class="line"></span><br><span class="line">#案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while1$</span><br><span class="line">CREATE PROCEDURE test_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE i INT DEFAULT 0;</span><br><span class="line">  a:WHILE i&lt;=insertCount DO</span><br><span class="line">    SET i=i+1;</span><br><span class="line">    IF MOD(i,2)!=0 THEN ITERATE a;</span><br><span class="line">    END IF;</span><br><span class="line">    INSERT INTO admin(username,`password`) VALUES(CONCAT(&#x27;xiaohua&#x27;,i),&#x27;0000&#x27;);</span><br><span class="line">  END WHILE a;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while1(100)$</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;=insertCount)&#123;</span><br><span class="line">  i++;</span><br><span class="line">  if(i%2==0)&#123;</span><br><span class="line">    continue;</span><br><span class="line">  &#125;</span><br><span class="line">  插入</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/*一、已知表stringcontent</span><br><span class="line">其中字段：</span><br><span class="line">id 自增长</span><br><span class="line">content varchar(20)</span><br><span class="line"></span><br><span class="line">向该表插入指定个数的，随机的字符串</span><br><span class="line">*/</span><br><span class="line">DROP TABLE IF EXISTS stringcontent;</span><br><span class="line">CREATE TABLE stringcontent(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  content VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE test_randstr_insert(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE i INT DEFAULT 1;</span><br><span class="line">  DECLARE str VARCHAR(26) DEFAULT &#x27;abcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">  DECLARE startIndex INT;#代表初始索引</span><br><span class="line">  DECLARE len INT;#代表截取的字符长度</span><br><span class="line">  WHILE i&lt;=insertcount DO</span><br><span class="line">    SET startIndex=FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26</span><br><span class="line">    SET len=FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-（20-startIndex+1）</span><br><span class="line">    INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));</span><br><span class="line">    SET i=i+1;</span><br><span class="line">  END WHILE;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_randstr_insert(10)$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/posts/78cea6d8.html"/>
      <url>/posts/78cea6d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS初识"><a href="#1-CSS初识" class="headerlink" title="1 CSS初识"></a>1 CSS初识</h2><ul><li><p>概念:</p><p>CSS(Cascading Style Sheets)  ,通常称为CSS样式表或层叠样式表(级联样式表)</p></li><li><p>作用:</p><ul><li>主要用于<strong>设置</strong> HTML页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式、边距等)以及<strong>版面的布局和外观显示样式。</strong></li><li>CSS以HTML为基础,提供了丰富的功能,如字体、颜色、背景的控制及整体排版等,而且还可以针对不同的浏览器设置不同的样式。</li></ul></li></ul><h2 id="2-引入CSS样式表"><a href="#2-引入CSS样式表" class="headerlink" title="2 引入CSS样式表"></a>2 引入CSS样式表</h2><h3 id="2-1-行内式-内联样式"><a href="#2-1-行内式-内联样式" class="headerlink" title="2.1 行内式(内联样式)"></a>2.1 行内式(内联样式)</h3><ul><li><p>概念:</p><p>  称行内样式、行间样式.</p><p>  是通过标签的style属性来设置元素的样式</p></li><li><p>其基本语法格式如下:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上任何HTML标签都拥有style属性,用来设置行内式。</p><ul><li>案例:</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">12px</span>;&quot;&gt;青春不常在&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>注意:<ul><li>style其实就是标签的属性</li><li>样式属性和值中间是<code>:</code></li><li>多组属性值之间用<code>;</code>隔开。</li><li>只能控制当前的标签和以及嵌套在其中的字标签,造成代码冗余</li></ul></li><li>缺点:<ul><li>没有实现样式和结构相分离</li></ul></li></ul><h3 id="2-2-内部样式表-内嵌样式表"><a href="#2-2-内部样式表-内嵌样式表" class="headerlink" title="2.2 内部样式表(内嵌样式表)"></a>2.2 内部样式表(内嵌样式表)</h3><ul><li><p>概念:</p><p>  称内嵌式</p><p>  是将CSS代码集中写在HTML文档的head头部标签中,并且用style标签定义</p></li><li><p>基本语法格式如下:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/CSS&quot;&gt;</span><br><span class="line">    选择器(选择的标签) &#123; </span><br><span class="line">      属性1: 属性值1;</span><br><span class="line">      属性2: 属性值2; </span><br><span class="line">      属性3: 属性值3;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> <span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>注意:</p><ul><li>style标签一般位于head标签中,当然理论上他可以放在HTML文档的任何地方。</li><li>type=”text/css”  在html5中可以省略。</li><li>只能控制当前的页面</li></ul></li><li><p>缺点:</p><p>没有彻底分离</p></li></ul><h5 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="comment">/*选择器&#123;属性:值;&#125;*/</span></span><br><span class="line">   <span class="selector-tag">p</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>:<span class="number">#06C</span>; </span><br><span class="line">     <span class="attribute">font-size</span>:<span class="number">14px</span>;  </span><br><span class="line">   &#125;  <span class="comment">/*文字的颜色是 蓝色*/</span></span><br><span class="line">   <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#900</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#090</span>; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">body</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">bg2.jpg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>思考:<br>1.如何实现结构与样式完全分离？<br>2.如何实现css样式共享？</p><h3 id="2-3-外部样式表-外链式"><a href="#2-3-外部样式表-外链式" class="headerlink" title="2.3 外部样式表(外链式)"></a>2.3 外部样式表(外链式)</h3><ul><li><p>概念:</p><p>  链入式</p><p>  是将所有的样式放在一个或多个以<strong>.CSS</strong>为扩展名的外部样式表文件中</p><p>  通过link标签将外部样式表文件链接到HTML文档中</p></li><li><p>其基本语法格式如下:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:  </p><ul><li>link 是个单标签</li><li>link标签需要放在head头部标签中,并且指定link标签的三个属性</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>rel</td><td style="text-align:left">定义当前文档与被链接文档之间的关系,在这里需要指定为“stylesheet”,表示被链接的文档是一个样式表文件。</td></tr><tr><td>type</td><td style="text-align:left">定义所链接文档的类型,在这里需要指定为“text/CSS”,表示链接的外部文件为CSS样式表。我们都可以省略</td></tr><tr><td>href</td><td style="text-align:left">定义所链接外部样式表文件的URL,可以是相对路径,也可以是绝对路径。</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/10css外链式.jpg" alt=""></p><h3 id="2-4-三种样式表总结-位置"><a href="#2-4-三种样式表总结-位置" class="headerlink" title="2.4 三种样式表总结(位置)"></a>2.4 三种样式表总结(位置)</h3><div class="table-container"><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便,权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签(少)</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面(中)</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多,强烈推荐</td><td>控制整个站点(多)</td></tr></tbody></table></div><h5 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h5><p>样式书写一般有两种:</p><p>一种是紧凑格式 (Compact)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><p>一种是展开格式(推荐)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: deeppink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h5><p>样式选择器,属性名,属性值关键字全部使用小写字母书写,属性字符串允许使用大小写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span>&#123;</span><br><span class="line"><span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-CSS样式规则总结"><a href="#3-CSS样式规则总结" class="headerlink" title="3 CSS样式规则总结"></a>3 CSS样式规则总结</h2><p>使用HTML时,需要遵从一定的规范。CSS亦如此,要想熟练地使用CSS对网页进行修饰,首先需要了解CSS样式规则,</p><p>具体格式如下:                                          </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/gz.png" alt=""></p><p><strong>总结:</strong></p><ol><li>选择器用于指定CSS样式作用的HTML标签,花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性,例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”连接。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ol><h2 id="4-CSS选择器作用-重点"><a href="#4-CSS选择器作用-重点" class="headerlink" title="4 CSS选择器作用(重点)"></a>4 CSS选择器作用(重点)</h2><p>选择器的作用</p><ul><li>找到特定的HTML页面元素</li></ul><blockquote><p>CSS选择器干啥的？   就是选择标签用的,把我们想要的标签选择出来</p></blockquote><p>css 就是两件事,选对人,做对事。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是2件事, 把  h3选出来, 然后 把它变成了 红色。 以后我们都这么干。</p><p>选择器分为基础选择器和 复合选择器,我们这里先讲解一下 基础选择器。</p><h2 id="5-CSS基础选择器"><a href="#5-CSS基础选择器" class="headerlink" title="5 CSS基础选择器"></a>5 CSS基础选择器</h2><h3 id="5-1-标签选择器"><a href="#5-1-标签选择器" class="headerlink" title="5.1 标签选择器"></a>5.1 标签选择器</h3><p>概念:<br>标签选择器(元素选择器)是指用<strong>HTML标签名</strong>称作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125; </span><br></pre></td></tr></table></figure></p><p>作用:<br>标签选择器 可以把某一类标签<strong>全部</strong>选择出来  比如所有的div标签  和 所有的 span标签</p><p>优点:<br>是能快速为页面中同类型的标签统一样式</p><p>缺点:<br>不能设计差异化样式。</p><p><strong>总结 口诀:</strong><br>   标签选择器,<br>   页面同选起。<br>   直接写标签,<br>   全部不放弃。</p><h3 id="5-2-类选择器"><a href="#5-2-类选择器" class="headerlink" title="5.2 类选择器"></a>5.2 类选择器</h3><p>类选择器使用“.”(英文点号)进行标识,后面紧跟类名.</p><p>语法:</p><ul><li>类名选择器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名  &#123;   </span><br><span class="line">    属性1:属性值1; </span><br><span class="line">    属性2:属性值2; </span><br><span class="line">    属性3:属性值3;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&#x27;类名&#x27;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>优点:<br>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </p><p>注意</p><ul><li>类选择器使用“.”(英文点号)进行标识,后面紧跟类名(自定义,我们自己命名的)</li><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要纯数字、中文等命名, 尽量使用英文字母来表示。</li></ul><p><strong>记忆口诀</strong></p><p>差异化选择<br>一个或多个<br>上面点定义<br>类名别写错<br>谁用谁调用<br>class来做</p><p><strong>案例:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/go.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-类选择器特殊用法-多类名"><a href="#5-3-类选择器特殊用法-多类名" class="headerlink" title="5.3 类选择器特殊用法- 多类名"></a>5.3 类选择器特殊用法- 多类名</h3><p>我们可以给标签指定多个类名,从而达到更多的选择目的。</p><p>注意:</p><ul><li>各个类名中间用空格隔开。</li><li>多类名选择器在后期布局比较复杂的情况下,还是较多使用的。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-id选择器"><a href="#5-4-id选择器" class="headerlink" title="5.4 id选择器"></a>5.4 id选择器</h3><p>id选择器使用<code>#</code>进行标识,后面紧跟id名</p><p>基本语法格式如下:</p><ul><li>id选择器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></li><li>标签<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><p>元素的id值是唯一的,只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h5 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h5><p>W3C标准规定,在同一个页面内,不允许有相同名字的id对象出现,但是允许相同名字的class。</p><ul><li>类选择器(class) 好比人的名字,是可以多次重复使用的,比如张伟 王伟 李伟 李娜</li><li>id选择器     好比人的身份证号码,全中国是唯一的,不得重复。只能使用一次。</li></ul><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><ul><li>类选择器我们在修改样式中,用的最多。</li><li>id选择器一般用于页面唯一性的元素身上,经常和我们后面学习的javascript 搭配使用。</li></ul><h3 id="5-5-通配符选择器"><a href="#5-5-通配符选择器" class="headerlink" title="5.5 通配符选择器"></a>5.5 通配符选择器</h3><p>概念:<br>通配符选择器用<code>*</code>号表示, * 就是 选择所有的标签      他是所有选择器中作用范围最广的,能匹配页面中所有的元素。</p><p>基本语法格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面的代码,使用通配符选择器定义CSS样式,清除所有HTML标记的默认边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<br>会匹配页面所有的元素,降低页面响应速度,不建议随便使用</p><h3 id="5-6-基础选择器总结"><a href="#5-6-基础选择器总结" class="headerlink" title="5.6 基础选择器总结"></a>5.6 基础选择器总结</h3><div class="table-container"><table><thead><tr><th>选择器</th><th>作用</th><th>缺点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签,比如p</td><td>不能差异化选择</td><td>较多</td><td>p { color:red;}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav { color: red; }</td></tr><tr><td>id选择器</td><td>一次只能选择器1个标签</td><td>只能使用一次</td><td>不推荐使用</td><td>#nav {color: red;}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多,有部分不需要</td><td>不推荐使用</td><td>* {color: red;}</td></tr></tbody></table></div><p>最常用的:类选择器。</p><h3 id="5-7-约定"><a href="#5-7-约定" class="headerlink" title="5.7 约定"></a>5.7 约定</h3><p>选择器</p><ul><li>尽量少用通用选择器 <code>*</code></li><li>尽量少用 id 选择器</li><li>不使用无具体语义定义的标签选择器 div span </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">li &#123;&#125;</span><br><span class="line">p&#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 不推荐 */</span><br><span class="line">*&#123;&#125;</span><br><span class="line">#jdc &#123;&#125;</span><br><span class="line">div&#123;&#125;   因为div 没有语义,我们尽量少用</span><br></pre></td></tr></table></figure><h2 id="6-font字体"><a href="#6-font字体" class="headerlink" title="6 font字体"></a>6 font字体</h2><h3 id="6-1-font-size-大小"><a href="#6-1-font-size-大小" class="headerlink" title="6.1 font-size:大小"></a>6.1 font-size:大小</h3><p>作用:<br>font-size属性用于设置字号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单位:</p><ul><li>可以使用相对长度单位,也可以使用绝对长度单位。</li><li>相对长度单位比较常用,推荐使用像素单位px,绝对长度单位使用较少。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dd.png" alt=""></p><p><strong>注意:</strong></p><ul><li>文字大小基本就用px,其他单位很少使用</li><li>谷歌浏览器默认的文字大小为16px</li><li>但是不同浏览器可能默认显示的字号大小不一致,我们尽量给一个明确值大小,不要默认大小。一般给body指定整个页面文字的大小</li></ul><h3 id="6-2-font-family-字体"><a href="#6-2-font-family-字体" class="headerlink" title="6.2 font-family:字体"></a>6.2 font-family:字体</h3><p>作用:<br>font-family属性用于设置哪一种字体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>网页中常用的字体有宋体、微软雅黑、黑体等,例如将网页中所有段落文本的字体设置为微软雅黑</li><li>可以同时指定多个字体,中间以逗号隔开,表示如果浏览器不支持第一个字体,则会尝试下一个,直到找到合适的字体, 如果都没有,则以我们电脑默认的字体为准。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><p>常用技巧:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">2. 中文字体需要加英文状态下的引号,英文字体一般不需要加引号。当需要设置英文字体时,英文字体名必须位于中文字体名之前。</span><br><span class="line">3. 如果字体名中包含空格、#、$等符号,则该字体必须加英文状态下的单引号或双引号,例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">4. 尽量使用系统默认字体,保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure><h5 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h5><p>为什么使用 Unicode字体?</p><ul><li>在 CSS 中设置字体名称,直接写中文是可以的。但是在文件编码(GB2312、UTF-8 等)不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li></ul><p>解决:</p><ul><li>方案一: 你可以使用英文来替代。 比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。</li><li>方案二: 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称,浏览器是可以正确的解析的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table></div><p>为了照顾不同电脑的字体安装问题,我们尽量只使用宋体和微软雅黑中文字体</p><h3 id="6-3-font-weight-字体粗细"><a href="#6-3-font-weight-字体粗细" class="headerlink" title="6.3 font-weight:字体粗细"></a>6.3 font-weight:字体粗细</h3><p>在html中如何将字体加粗我们可以用标签来实现</p><ul><li>使用 b  和 strong 标签是文本加粗。<br>可以使用CSS 来实现,但是CSS 是没有语义的。</li></ul><div class="table-container"><table><thead><tr><th>属性值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>normal</td><td style="text-align:left">默认值(不加粗的)</td></tr><tr><td>bold</td><td style="text-align:left">定义粗体(加粗的)</td></tr><tr><td>100~900</td><td style="text-align:left">400 等同于 normal,而 700 等同于 bold</td></tr></tbody></table></div><p>提倡:</p><p>  我们平时更喜欢用数字来表示加粗和不加粗。</p><h3 id="6-4-font-style-字体风格"><a href="#6-4-font-style-字体风格" class="headerlink" title="6.4 font-style:字体风格"></a>6.4 font-style:字体风格</h3><p>在html中如何将字体倾斜我们可以用标签来实现</p><ul><li>字体倾斜除了用 i  和 em 标签,<br>可以使用CSS 来实现,但是CSS 是没有语义的</li></ul><p>font-style属性用于定义字体风格,如设置斜体、倾斜或正常字体,其可用属性值如下:</p><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>normal</td><td style="text-align:left">默认值,浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td>italic</td><td style="text-align:left">浏览器会显示斜体的字体样式。</td></tr></tbody></table></div><p>小技巧:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平时我们很少给文字加斜体,反而喜欢给斜体标签(em,i)改为普通模式。</span><br></pre></td></tr></table></figure></p><h3 id="6-5-font-综合设置字体样式-重点"><a href="#6-5-font-综合设置字体样式-重点" class="headerlink" title="6.5 font:综合设置字体样式 (重点)"></a>6.5 font:综合设置字体样式 (重点)</h3><p>font属性用于对字体样式进行综合设置</p><p>基本语法格式如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>使用font属性时,必须按上面语法格式中的顺序书写,不能更换顺序,各个属性以<strong>空格</strong>隔开。</li><li>其中不需要设置的属性可以省略(取默认值),但必须保留font-size和font-family属性,否则font属性将不起作用。</li></ul><h3 id="6-6-font总结"><a href="#6-6-font总结" class="headerlink" title="6.6 font总结"></a>6.6 font总结</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">表示</th><th style="text-align:left">注意点</th></tr></thead><tbody><tr><td style="text-align:left">font-size</td><td style="text-align:left">字号</td><td style="text-align:left">我们通常用的单位是px 像素,一定要跟上单位</td></tr><tr><td style="text-align:left">font-family</td><td style="text-align:left">字体</td><td style="text-align:left">实际工作中按照团队约定来写字体</td></tr><tr><td style="text-align:left">font-weight</td><td style="text-align:left">字体粗细</td><td style="text-align:left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td style="text-align:left">font-style</td><td style="text-align:left">字体样式</td><td style="text-align:left">记住倾斜是 italic     不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td style="text-align:left">font</td><td style="text-align:left">字体连写</td><td style="text-align:left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table></div><h2 id="7-CSS外观属性"><a href="#7-CSS外观属性" class="headerlink" title="7 CSS外观属性"></a>7 CSS外观属性</h2><h3 id="7-1-color-文本颜色"><a href="#7-1-color-文本颜色" class="headerlink" title="7.1 color:文本颜色"></a>7.1 color:文本颜色</h3><p>作用:<br>  color属性用于定义文本的颜色,</p><p>其取值方式有如下3种:</p><div class="table-container"><table><thead><tr><th style="text-align:left">表示表示</th><th style="text-align:left">属性值</th></tr></thead><tbody><tr><td style="text-align:left">预定义的颜色值</td><td style="text-align:left">red,green,blue,还有我们的御用色 pink</td></tr><tr><td style="text-align:left">十六进制</td><td style="text-align:left">#FF0000,#FF6600,#29D794</td></tr><tr><td style="text-align:left">RGB代码</td><td style="text-align:left">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table></div><p>注意:<br>我们实际工作中, 用 16进制的写法是最多的,而且我们更喜欢简写方式比如  #f00 代表红色</p><h3 id="7-2-text-align-文本水平对齐方式"><a href="#7-2-text-align-文本水平对齐方式" class="headerlink" title="7.2 text-align:文本水平对齐方式"></a>7.2 text-align:文本水平对齐方式</h3><p>作用:<br>  text-align属性用于设置文本内容的水平对齐,相当于html中的align对齐属性</p><p>其可用属性值如下:</p><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td>left</td><td style="text-align:center">左对齐(默认值)</td></tr><tr><td>right</td><td style="text-align:center">右对齐</td></tr><tr><td>center</td><td style="text-align:center">居中对齐</td></tr></tbody></table></div><p>注意:<br>  是让盒子里面的内容水平居中, 而不是让盒子居中对齐</p><h3 id="7-3-line-height-行间距"><a href="#7-3-line-height-行间距" class="headerlink" title="7.3 line-height:行间距"></a>7.3 line-height:行间距</h3><p>作用:</p><ul><li>line-height属性用于设置行间距,就是行与行之间的距离,即字符的垂直间距,一般称为行高。</li></ul><p>单位:</p><ul><li>line-height常用的属性值单位有三种,分别为像素px,相对值em和百分比%,实际工作中使用最多的是像素px</li></ul><p>技巧:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般情况下,行距比字号大7.8像素左右就可以了。</span><br><span class="line">line-height: 24px;</span><br></pre></td></tr></table></figure></p><h3 id="7-4-text-indent-首行缩进"><a href="#7-4-text-indent-首行缩进" class="headerlink" title="7.4 text-indent:首行缩进"></a>7.4 text-indent:首行缩进</h3><p>作用:</p><ul><li>text-indent属性用于设置首行文本的缩进,</li></ul><p>属性值</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%,允许使用负值,</li><li>建议使用em作为设置单位。</li></ul><p><strong>1em就是一个字的宽度   如果是汉字的段落,1em 就是一个汉字的宽度</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="comment">/*行间距*/</span></span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">      <span class="comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">      <span class="attribute">text-indent</span>: <span class="number">2em</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-text-decoration-文本的装饰"><a href="#7-5-text-decoration-文本的装饰" class="headerlink" title="7.5 text-decoration 文本的装饰"></a>7.5 text-decoration 文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。 取消下划线(最常用)</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的(常用)</td></tr><tr><td>overline</td><td>定义文本上的一条线。(不用)</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。(不常用)</td></tr></tbody></table></div><h3 id="7-6-CSS外观属性总结"><a href="#7-6-CSS外观属性总结" class="headerlink" title="7.6 CSS外观属性总结"></a>7.6 CSS外观属性总结</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">表示</th><th style="text-align:left">注意点</th></tr></thead><tbody><tr><td style="text-align:left">color</td><td style="text-align:left">颜色</td><td style="text-align:left">我们通常用  十六进制   比如 而且是简写形式 #fff</td></tr><tr><td style="text-align:left">line-height</td><td style="text-align:left">行高</td><td style="text-align:left">控制行与行之间的距离</td></tr><tr><td style="text-align:left">text-align</td><td style="text-align:left">水平对齐</td><td style="text-align:left">可以设定文字水平的对齐方式</td></tr><tr><td style="text-align:left">text-indent</td><td style="text-align:left">首行缩进</td><td style="text-align:left">通常我们用于段落首行缩进2个字的距离   text-indent: 2em;</td></tr><tr><td style="text-align:left">text-decoration</td><td style="text-align:left">文本修饰</td><td style="text-align:left">记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table></div><h2 id="8-开发者工具-chrome"><a href="#8-开发者工具-chrome" class="headerlink" title="8 开发者工具(chrome)"></a>8 开发者工具(chrome)</h2><p>如果代码出现问题:</p><ul><li>“按F12”或者是 “shift+ctrl+i”打开开发者工具。</li><li>菜单:右击网页空白出—-检查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/11开发人员工具.jpg" alt=""></p><ul><li>通过开发人员工具小指针工具,查找页面元素</li><li>左侧是html页面结构,右侧是css样式</li></ul><p>小技巧:</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li><li>ctrl + 0  复原浏览器大小</li></ol><h2 id="9-sublime快捷操作emmet语法"><a href="#9-sublime快捷操作emmet语法" class="headerlink" title="9 sublime快捷操作emmet语法"></a>9 sublime快捷操作emmet语法</h2><p>Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。</p><ol><li><p>生成标签 直接输入标签名按tab键即可比如div然后tab 键,就可以生成 <code>&lt;div&gt;&lt;/div&gt;</code></p></li><li><p>如果想要生成多个相同标签加上 <em> 就可以了 比如`div</em>3`就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签,可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签,用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的,  直接写  .demo  或者  #two   tab 键就可以了</p></li><li><p>如果生成的div 类名是有顺序的, 可以用 自增符号  $     </p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.demo$*3        </span><br><span class="line">&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zong1.jpg" alt=""></p><h2 id="10-CSS复合选择器"><a href="#10-CSS复合选择器" class="headerlink" title="10 CSS复合选择器"></a>10 CSS复合选择器</h2><p><strong>为什么要学习css复合选择器</strong></p><p>CSS选择器分为基础选择器和复合选择器,但是基础选择器不能满足我们实际开发中,快速高效的选择标签。</p><ul><li>目的是为了可以选择更准确更精细的目标元素标签。</li><li>复合选择器是由两个或多个基础选择器,通过不同的方式组合而成的</li></ul><h3 id="10-1-后代选择器-重点"><a href="#10-1-后代选择器-重点" class="headerlink" title="10.1 后代选择器(重点)"></a>10.1 后代选择器(重点)</h3><p>概念:<br>  后代选择器又称为包含选择器</p><p>作用:<br>  用来选择元素或元素组的<strong>子孙后代</strong></p><p>其写法就是把外层标签写在前面,内层标签写在后面,中间用<strong>空格</strong>分隔,先写父亲爷爷,再写儿子孙子。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父级 子级&#123;属性:属性值;属性:属性值;&#125;</span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class h3&#123;color:red;font-size:16px;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/hou.png" alt=""></p><ul><li>当标签发生嵌套时,内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。 或者说,它能选择任何包含在内 的标签。</li></ul><h3 id="10-2-子元素选择器"><a href="#10-2-子元素选择器" class="headerlink" title="10.2 子元素选择器"></a>10.2 子元素选择器</h3><p>作用:<br>子元素选择器只能选择作为某元素<strong>子元素(亲儿子)</strong>的元素。</p><p>其写法就是把父级标签写在前面,子级标签写在后面,中间跟一个 <code>&gt;</code> 进行连接</p><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class&gt;h3&#123;color:red;font-size:14px;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/zi1.png" alt=""></p><blockquote><p>这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p></blockquote><p>比如:.demo &gt; h3 {color: red;} 说明h3一定是demo亲儿子。demo元素包含着h3。</p><h3 id="10-3-交集选择器"><a href="#10-3-交集选择器" class="headerlink" title="10.3 交集选择器"></a>10.3 交集选择器</h3><p>条件<br>交集选择器由两个选择器构成,找到的标签必须满足:既有标签一的特点,也有标签二的特点。</p><p>语法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/jiao.png" alt=""></p><p>其中第一个为标签选择器,第二个为class选择器,两个选择器之间<strong>不能有空格</strong>,如h3.special。</p><p><strong>技巧:</strong></p><p>交集选择器是并且的意思。  即…又…的意思</p><p>比如:p.one  选择的是:类名为.one的段落标签。  </p><p>用的相对来说比较少,不太建议使用。</p><h3 id="10-4-并集选择器-重点"><a href="#10-4-并集选择器-重点" class="headerlink" title="10.4 并集选择器(重点)"></a>10.4 并集选择器(重点)</h3><p>应用:</p><ul><li>如果某些选择器定义的相同样式,就可以利用并集选择器,可以让代码更简洁。<br>并集选择器(CSS选择器分组)是各个选择器通过<code>,</code>连接而成的,通常用于集体声明。</li></ul><p>语法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/bing.png" alt=""></p><p>任何形式的选择器(包括标签选择器、class类选择器id选择器等),都可以作为并集选择器的一部分。</p><p>技巧:<br>并集选择器通常用于集体声明,逗号隔开的,所有选择器都会执行后面样式,逗号可以理解为和的意思。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  </span><br><span class="line">表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span><br><span class="line">通常用于集体声明。  </span><br></pre></td></tr></table></figure><h5 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sitenav&quot;</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-l&quot;</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-r&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不修改以上结构代码的前提下,完成以下任务:</p><ol><li>链接 登录 的颜色为红色</li><li>主导航栏里面的所有的链接改为橙色    </li><li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li></ol><h3 id="10-5-链接伪类选择器-重点"><a href="#10-5-链接伪类选择器-重点" class="headerlink" title="10.5  链接伪类选择器(重点)"></a>10.5  链接伪类选择器(重点)</h3><p>伪类选择器:<br>类选择器是一个点 比如 .demo {}<br>而我们的伪类用2个点就是冒号比如:link{}</p><p>作用:</p><p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果, 比如可以选择第1个,第n个元素。</p><p>因为伪类选择器很多,比如链接伪类,结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>      <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>   <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>     <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>    <span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>写的时候,他们的顺序尽量不要颠倒按照lvha的顺序。否则可能引起错误。  </li><li>因为叫链接伪类,所以都是 利用交集选择器  a:link    a:hover  </li><li>因为a链接浏览器具有默认样式,所以我们实际工作中都需要给链接单独指定样式。</li><li>实际工作开发中,我们很少写全四个状态,一般我们写法如下:</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line"><span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候,由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-复合选择器总结"><a href="#10-6-复合选择器总结" class="headerlink" title="10.6 复合选择器总结"></a>10.6 复合选择器总结</h3><div class="table-container"><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择元素后代</td><td>是选择所有的子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> .nav a</td></tr><tr><td>子代选择器</td><td>选择 最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>&gt;</strong>   .nav&gt;p</td></tr><tr><td>交集选择器</td><td>选择两个标签交集的部分</td><td>既是 又是</td><td>较少</td><td><strong>没有符号</strong>  p.one</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的选择器</td><td>可以用于集体声明</td><td>较多</td><td>符号是<strong>逗号</strong> .nav, .header</td></tr><tr><td>链接伪类选择器</td><td>给链接更改状态</td><td></td><td>较多</td><td>重点记住 a{} 和 a:hover  实际开发的写法</td></tr></tbody></table></div><h2 id="11-标签显示模式-display-重点"><a href="#11-标签显示模式-display-重点" class="headerlink" title="11 标签显示模式(display)重点"></a>11 标签显示模式(display)重点</h2><h3 id="11-1-什么是标签显示模式"><a href="#11-1-什么是标签显示模式" class="headerlink" title="11.1 什么是标签显示模式"></a>11.1 什么是标签显示模式</h3><p>什么是标签的显示模式？<br>标签以什么方式进行显示,比如div自己占一行,比如span一行可以放很多个</p><p>作用:<br>我们网页的标签非常多,再不同地方会用到不同类型的标签,以便更好的完成我们的网页。</p><p>标签的类型(分类)<br>HTML标签一般分为块标签和行内标签两种类型,它们也称块元素和行内元素。</p><h3 id="11-2-块级元素-block-level"><a href="#11-2-块级元素-block-level" class="headerlink" title="11.2 块级元素(block-level)"></a>11.2 块级元素(block-level)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等,其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/12块级元素.png" alt=""></p><p>块级元素的特点<br>(1)自己独占一行<br>(2)高度,宽度、外边距以及内边距都可以控制。<br>(3)宽度默认是容器(父级宽度)的100%<br>(4)是一个容器及盒子,里面可以放行内或者块级元素。</p><p>注意:</p><ul><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素,特别是 p 不能放div </li><li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt,他们都是文字类块级标签,里面不能放其他块级元素。</li></ul><h3 id="11-3-行内元素-inline-level"><a href="#11-3-行内元素-inline-level" class="headerlink" title="11.3 行内元素(inline-level)"></a>11.3 行内元素(inline-level)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等,其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/13行内元素.png" alt=""></p><p>行内元素的特点:<br>(1)相邻行内元素在一行上,一行可以显示多个。<br>(2)高、宽直接设置是无效的。<br>(3)默认宽度就是它本身内容的宽度。<br>(4)<strong>行内元素只能容纳文本或则其他行内元素。</strong></p><p>注意:</p><ul><li>链接里面不能再放链接。</li><li>特殊情况a里面可以放块级元素,但是给a转换一下块级模式最安全。</li></ul><h3 id="11-4-行内块元素-inline-block"><a href="#11-4-行内块元素-inline-block" class="headerlink" title="11.4 行内块元素(inline-block)"></a>11.4 行内块元素(inline-block)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;,可以对它们设置宽高和对齐属性,有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/14行内块元素.png" alt=""></p><p>行内块元素的特点:<br>(1)和相邻行内元素(行内块)在一行上,但是之间会有空白缝隙。一行可以显示多个<br>(2)默认宽度就是它本身内容的宽度。<br>(3)高度,行高、外边距以及内边距都可以控制。</p><h3 id="11-5-三种模式总结区别"><a href="#11-5-三种模式总结区别" class="headerlink" title="11.5 三种模式总结区别"></a>11.5 三种模式总结区别</h3><div class="table-container"><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或则其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td></tr></tbody></table></div><h3 id="11-6-标签显示模式转换-display"><a href="#11-6-标签显示模式转换-display" class="headerlink" title="11.6 标签显示模式转换 display"></a>11.6 标签显示模式转换 display</h3><ul><li>块转行内:display:inline;</li><li>行内转块:display:block;</li><li>块、行内元素转换为行内块: display: inline-block;</li></ul><h2 id="12-行高-line-height"><a href="#12-行高-line-height" class="headerlink" title="12 行高(line-height)"></a>12 行高(line-height)</h2><h3 id="12-1-行高测量"><a href="#12-1-行高测量" class="headerlink" title="12.1 行高测量"></a>12.1 行高测量</h3><p>行高的测量方法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/line1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/line2.png" alt=""></p><h3 id="12-2-单行文本垂直居中"><a href="#12-2-单行文本垂直居中" class="headerlink" title="12.2 单行文本垂直居中"></a>12.2 单行文本垂直居中</h3><p>行高我们利用最多的一个地方是: 可以让单行文本在盒子中垂直居中对齐。</p><p><strong>文字的行高等于盒子的高度。</strong></p><p>行高   =  上距离 +  内容高度  + 下距离 </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1.png" alt=""></p><p>上距离和下距离总是相等的,因此文字看上去是垂直居中的。</p><p><strong>行高和高度的三种关系</strong></p><ul><li>如果行高等于高度  文字会垂直居中</li><li>如果行高大于高度  文字会偏下 </li><li>如果行高小于高度  文字会偏上 </li></ul><h2 id="13-CSS-背景-background"><a href="#13-CSS-背景-background" class="headerlink" title="13 CSS 背景(background)"></a>13 CSS 背景(background)</h2><h3 id="13-1-背景颜色-color"><a href="#13-1-背景颜色-color" class="headerlink" title="13.1 背景颜色(color)"></a>13.1 背景颜色(color)</h3><p>语法:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure></p><h3 id="13-2-背景图片-image"><a href="#13-2-背景图片-image" class="headerlink" title="13.2 背景图片(image)"></a>13.2 背景图片(image)</h3><p>语法: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | url (url) </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>none</td><td style="text-align:center">无背景图(默认的)</td></tr><tr><td>url</td><td style="text-align:center">使用绝对或相对地址指定背景图像</td></tr></tbody></table></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : <span class="built_in">url</span>(<span class="string">images/demo.png</span>);</span><br></pre></td></tr></table></figure><p>小技巧: 我们提倡背景图片后面的地址,url不要加引号。</p><h3 id="13-3-背景平铺-repeat"><a href="#13-3-背景平铺-repeat" class="headerlink" title="13.3 背景平铺(repeat)"></a>13.3 背景平铺(repeat)</h3><p>语法: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>repeat</td><td style="text-align:center">背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td style="text-align:center">背景图像不平铺</td></tr><tr><td>repeat-x</td><td style="text-align:center">背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td style="text-align:center">背景图像在纵向平铺</td></tr></tbody></table></div><h3 id="13-4-背景位置-position-重点"><a href="#13-4-背景位置-position-重点" class="headerlink" title="13.4 背景位置(position) 重点"></a>13.4 背景位置(position) 重点</h3><p>语法: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td>length</td><td style="text-align:center">百分数 \</td><td>由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td style="text-align:center">top \</td><td>center \</td><td>bottom \</td><td>left \</td><td>center \</td><td>right   方位名词</td></tr></tbody></table></div><p>注意:</p><ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果指定两个值,两个值都是方位名字,则两个值前后顺序无关,比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词,另一个值默认居中对齐。</li><li>如果position 后面是精确坐标, 那么第一个,肯定是 x  第二的一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标,另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用,则第一个值是x坐标,第二个值是y坐标</li></ul><p><strong>实际工作用的最多的,就是背景图片居中对齐。</strong></p><h3 id="13-5-背景附着"><a href="#13-5-背景附着" class="headerlink" title="13.5 背景附着"></a>13.5 背景附着</h3><p>背景附着就是解释背景是滚动的还是固定的</p><p>语法: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>scroll</td><td style="text-align:center">背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td style="text-align:center">背景图像固定</td></tr></tbody></table></div><h3 id="13-6-背景简写"><a href="#13-6-背景简写" class="headerlink" title="13.6 背景简写"></a>13.6 背景简写</h3><p>background:属性的值的书写顺序官方并没有强制标准的。为了可读性,建议大家如下写:<br>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure><h5 id="案例-导航栏案例"><a href="#案例-导航栏案例" class="headerlink" title="案例: 导航栏案例"></a>案例: 导航栏案例</h5><h3 id="13-7-背景透明-CSS3"><a href="#13-7-背景透明-CSS3" class="headerlink" title="13.7 背景透明(CSS3)"></a>13.7 背景透明(CSS3)</h3><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是alpha 透明度  取值范围 <code>0~1</code>之间</li><li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li><li>注意:  背景半透明是指盒子背景半透明, 盒子里面的内容不受影响</li><li>因为是CSS3 ,所以 低于 ie9 的版本是不支持的。</li></ul><h3 id="13-8-背景总结"><a href="#13-8-背景总结" class="headerlink" title="13.8 背景总结"></a>13.8 背景总结</h3><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td>background-color</td><td style="text-align:left">背景颜色</td><td style="text-align:left">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td style="text-align:left">背景图片</td><td style="text-align:left">url(图片路径)</td></tr><tr><td>background-repeat</td><td style="text-align:left">是否平铺</td><td style="text-align:left">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td style="text-align:left">背景位置</td><td style="text-align:left">length/position    分别是x  和 y坐标, 切记 如果有 精确数值单位,则必须按照先X 后Y 的写法</td></tr><tr><td>background-attachment</td><td style="text-align:left">背景固定还是滚动</td><td style="text-align:left">scroll/fixed</td></tr><tr><td>背景简写</td><td style="text-align:left">更简单</td><td style="text-align:left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td>背景透明</td><td style="text-align:left">让盒子半透明</td><td style="text-align:left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td></tr></tbody></table></div><h2 id="14-CSS-三大特性"><a href="#14-CSS-三大特性" class="headerlink" title="14 CSS 三大特性"></a>14 CSS 三大特性</h2><h3 id="14-1-CSS层叠性"><a href="#14-1-CSS层叠性" class="headerlink" title="14.1 CSS层叠性"></a>14.1 CSS层叠性</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/20层叠性.png" alt=""></p><p>概念:<br>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上,那么这个时候一个属性就会将另一个属性层叠掉</p><p>原则:</p><ul><li>样式冲突,遵循的原则是<strong>就近原则</strong>。 哪个样式离着结构近,就执行哪个样式。</li><li>样式不冲突,不会层叠</li></ul><h3 id="14-2-CSS继承性"><a href="#14-2-CSS继承性" class="headerlink" title="14.2 CSS继承性"></a>14.2 CSS继承性</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/21继承性.png" alt=""></p><p>概念:</p><p>子标签会继承父标签的某些样式,如文本颜色和字号。</p><p>想要设置一个可继承的属性,只需将它应用于父元素即可。</p><p>简单的理解就是:子承父业。</p><p><strong>注意</strong>:</p><ul><li>恰当地使用继承可以简化代码,降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式,可以给父级指定一个,这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式(<strong>text-,font-,line-这些元素开头的可以继承,以及color属性</strong>)</li></ul><h3 id="14-3-CSS优先级-重点"><a href="#14-3-CSS优先级-重点" class="headerlink" title="14.3 CSS优先级(重点)"></a>14.3 CSS优先级(重点)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/22优先级.png" alt=""></p><p>概念:</p><p>定义CSS样式时,经常出现两个或更多规则应用在同一元素上,此时,</p><ul><li>选择器相同,则执行层叠性</li><li>选择器不同,就会出现优先级的问题。</li></ul><h5 id="1-权重计算公式"><a href="#1-权重计算公式" class="headerlink" title="1)权重计算公式"></a>1)权重计算公式</h5><p>关于CSS权重,我们需要一套计算公式来去计算,这个就是 CSS Specificity(特殊性)</p><div class="table-container"><table><thead><tr><th>标签选择器</th><th>计算权重公式</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0,0,0,0</td></tr><tr><td>每个元素(标签选择器)</td><td>0,0,0,1</td></tr><tr><td>每个类,伪类</td><td>0,0,1,0</td></tr><tr><td>每个ID</td><td>0,1,0,0</td></tr><tr><td>每个行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>每个!important  重要的</td><td>∞ 无穷大</td></tr></tbody></table></div><ul><li>值从左到右,左面的最大,一级大于一级,数位之间没有进制,级别之间不可超越。 </li><li>关于CSS权重,我们需要一套计算公式来去计算,这个就是 CSS Specificity(特殊性)</li><li>div {<pre><code>color: pink!important;  </code></pre>}</li></ul><h5 id="2-权重叠加"><a href="#2-权重叠加" class="headerlink" title="2)权重叠加"></a>2)权重叠加</h5><p>我们经常用交集选择器,后代选择器等,是有多个基础选择器组合而成,那么此时,就会出现权重叠加。</p><p>就是一个简单的加法计算</p><ul><li>div ul  li   ———&gt;      0,0,0,3</li><li>.nav ul li   ———&gt;      0,0,1,2</li><li>a:hover      ———&gt;      0,0,1,1</li><li>.nav a       ———&gt;      0,0,1,1</li></ul><p>注意:<br>数位之间没有进制 比如说: 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0, 所以不会存在10个div能赶上一个类选择器的情况。</p><h5 id="3-继承的权重是0"><a href="#3-继承的权重是0" class="headerlink" title="3)继承的权重是0"></a>3)继承的权重是0</h5><p>当我们修改样式时,一定要看该标签有没有被选中。</p><p>1) 如果选中了,那么以上面的公式来计权重。谁大听谁的。<br>2) 如果没有选中,那么权重是0,因为继承的权重为0.</p><h2 id="15-CSS注释"><a href="#15-CSS注释" class="headerlink" title="15 CSS注释"></a>15 CSS注释</h2><p><strong>CSS注释规则:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*  需要注释的内容  */  进行注释的,即在需要注释的内容前使用 &quot;/*&quot; 标记开始注释,在内容的结尾使用 &quot;*/&quot;结束。</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-盒子模型-CSS重点"><a href="#16-盒子模型-CSS重点" class="headerlink" title="16 盒子模型(CSS重点)"></a>16 盒子模型(CSS重点)</h2><p>css学习三大重点: css 盒子模型、浮动、定位 </p><h3 id="16-1-看透网页布局的本质"><a href="#16-1-看透网页布局的本质" class="headerlink" title="16.1 看透网页布局的本质"></a>16.1 看透网页布局的本质</h3><p>网页布局的本质:</p><ul><li>首先利用CSS设置好盒子的大小,然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等,放入盒子里面。</li></ul><p>盒子是网页布局的关键点</p><h3 id="16-2-盒子模型-Box-Model"><a href="#16-2-盒子模型-Box-Model" class="headerlink" title="16.2 盒子模型(Box Model)"></a>16.2 盒子模型(Box Model)</h3><p>盒子模型:<br>就是把HTML页面中的布局元素看作是一个矩形的盒子,也就是一个盛装内容的容器。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/盒子模型.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/boxs.png" alt=""></p><ul><li>盒子模型有元素的内容、边框(border)、内边距(padding)、和外边距(margin)组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们成为 盒子的边框 </li><li>盒子内容与边框的距离是内边距(类似单元格的 cellpadding)</li><li>盒子与盒子之间的距离是外边距(类似单元格的 cellspacing)</li></ul><p><strong>标准盒子模型</strong><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/标准盒子模型.png" alt=""></p><h3 id="16-3-盒子边框-border"><a href="#16-3-盒子边框-border" class="headerlink" title="16.3 盒子边框(border)"></a>16.3 盒子边框(border)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/盒子边框.png" alt=""></p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>border-width</td><td style="text-align:center">定义边框粗细,单位是px</td></tr><tr><td>border-style</td><td style="text-align:center">边框的样式</td></tr><tr><td>border-color</td><td style="text-align:center">边框颜色</td></tr></tbody></table></div><p>边框的样式:</p><ul><li>none:没有边框即忽略所有边框的宽度(默认值)</li><li>solid:边框为单实线(最为常用的)</li><li>dashed:边框为虚线  </li><li>dotted:边框为点线</li></ul><h4 id="16-3-1-边框综合设置"><a href="#16-3-1-边框综合设置" class="headerlink" title="16.3.1 边框综合设置"></a>16.3.1 边框综合设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border : border-width || border-style || border-color </span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  没有顺序  </span><br></pre></td></tr></table></figure><h4 id="16-3-2-盒子边框写法总结表"><a href="#16-3-2-盒子边框写法总结表" class="headerlink" title="16.3.2 盒子边框写法总结表"></a>16.3.2 盒子边框写法总结表</h4><p>很多情况下,我们不需要指定4个边框,我们是可以单独给4个边框分别指定的。</p><div class="table-container"><table><thead><tr><th style="text-align:left">上边框</th><th style="text-align:left">下边框</th><th style="text-align:left">左边框</th><th style="text-align:left">右边框</th></tr></thead><tbody><tr><td style="text-align:left">border-top-style:样式;</td><td style="text-align:left">border-bottom-style:样式;</td><td style="text-align:left">border-left-style:样式;</td><td style="text-align:left">border-right-style:样式;</td></tr><tr><td style="text-align:left">border-top-width:宽度;</td><td style="text-align:left">border- bottom-width:宽度;</td><td style="text-align:left">border-left-width:宽度;</td><td style="text-align:left">border-right-width:宽度;</td></tr><tr><td style="text-align:left">border-top-color:颜色;</td><td style="text-align:left">border- bottom-color:颜色;</td><td style="text-align:left">border-left-color:颜色;</td><td style="text-align:left">border-right-color:颜色;</td></tr><tr><td style="text-align:left">border-top:宽度 样式 颜色;</td><td style="text-align:left">border-bottom:宽度 样式 颜色;</td><td style="text-align:left">border-left:宽度 样式 颜色;</td><td style="text-align:left">border-right:宽度 样式 颜色;</td></tr></tbody></table></div><h4 id="16-3-3-表格的细线边框"><a href="#16-3-3-表格的细线边框" class="headerlink" title="16.3.3 表格的细线边框"></a>16.3.3 表格的细线边框</h4><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0,</p><p>但是两个单元格之间的边框会出现重叠,从而使边框变粗</p><p>通过css属性:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table&#123; border-collapse:collapse; &#125;  </span><br></pre></td></tr></table></figure><ul><li>collapse 单词是合并的意思</li><li>border-collapse:collapse; 表示相邻边框合并在一起。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="16-4-内边距-padding"><a href="#16-4-内边距-padding" class="headerlink" title="16.4. 内边距(padding)"></a>16.4. 内边距(padding)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/16内边距.png" alt=""></p><h4 id="16-4-1-内边距"><a href="#16-4-1-内边距" class="headerlink" title="16.4.1 内边距:"></a>16.4.1 内边距:</h4><p>padding属性用于设置内边距。 <strong>是指边框与内容之间的距离。</strong></p><h4 id="16-4-2-设置"><a href="#16-4-2-设置" class="headerlink" title="16.4.2 设置"></a>16.4.2 设置</h4><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>padding-left</td><td style="text-align:left">左内边距</td></tr><tr><td>padding-right</td><td style="text-align:left">右内边距</td></tr><tr><td>padding-top</td><td style="text-align:left">上内边距</td></tr><tr><td>padding-bottom</td><td style="text-align:left">下内边距</td></tr></tbody></table></div><p>当我们给盒子指定padding值之后,发生了2件事情:</p><ol><li>内容和边框 有了距离,添加了内边距。</li><li>盒子会变大了。</li></ol><p><strong>注意:后面跟几个数值表示的意思是不一样的。</strong></p><p>我们分开写有点麻烦,我们可以不可以简写呢？</p><div class="table-container"><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding:上下左右内边距;</td></tr><tr><td>2个值</td><td>padding: 上下内边距    左右内边距 ;</td></tr><tr><td>3个值</td><td>padding:上内边距   左右内边距   下内边距;</td></tr><tr><td>4个值</td><td>padding: 上内边距 右内边距 下内边距 左内边距 ;</td></tr></tbody></table></div><p><strong>练习:</strong></p><p>请写出如下内边距:</p><ol><li>要求盒子有一个左边内边距是 5像素</li><li>要求简写的形式写出  一个盒子上下是 25像素   左右是15像素。</li><li>要求简写的形式写出 一个盒子  上内边距是 12像素  下内边距是 0  左内边距是 25像素  右内边距是 10像素</li></ol><h5 id="案例-新浪导航"><a href="#案例-新浪导航" class="headerlink" title="案例:  新浪导航"></a>案例:  新浪导航</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/al.gif" alt=""></p><h4 id="16-4-3-内盒尺寸计算-元素实际大小"><a href="#16-4-3-内盒尺寸计算-元素实际大小" class="headerlink" title="16.4.3 内盒尺寸计算(元素实际大小)"></a>16.4.3 内盒尺寸计算(元素实际大小)</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/盒模型大小.png" alt=""></p><p>宽度<br>Element Height = content height + padding + border (Height为内容高度)</p><p>高度<br>Element Width = content width + padding + border (Width为内容宽度)</p><p>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框   </p><h4 id="16-4-4-内边距产生的问题"><a href="#16-4-4-内边距产生的问题" class="headerlink" title="16.4.4 内边距产生的问题"></a>16.4.4 内边距产生的问题</h4><p>问题:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/31padding问题.png" alt=""></p><p>会撑大原来的盒子</p><p>解决:</p><p>通过给设置了宽高的盒子,减去相应的内边距的值,维持盒子原有的大小</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/32padding问题解决.png" alt=""></p><p><strong>练习</strong></p><ol><li>一个盒子宽度为100, padding为 10, 边框为5像素,问这个盒子实际的宽度的是()</li></ol><ul><li><p>[x] (A) 130</p></li><li><p>[ ] (B) 135 </p></li><li><p>[ ] (C) 125</p></li><li><p>[ ] (D) 115</p></li></ul><blockquote><p>100 +  20 + 10 </p></blockquote><ol><li>关于根据下列代码计算 盒子宽高下列说法正确的是()</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">         <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">5px</span> solid blue;</span><br><span class="line"></span><br><span class="line"><span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[ ] (A) 宽度为200px 高度为200px</li><li>[x] (B) 宽度为352px 高度为306px</li><li>[ ] (C) 宽度为302px 高度为307px</li><li>[ ] (D) 宽度为302px 高度为252px</li></ul><blockquote><p>w  200 +  150 + 2  = 352<br>h  200 +  100 + 6  = 306 </p></blockquote><h4 id="16-4-5-padding不影响盒子大小情况"><a href="#16-4-5-padding不影响盒子大小情况" class="headerlink" title="16.4.5 padding不影响盒子大小情况"></a>16.4.5 padding不影响盒子大小情况</h4><blockquote><p>如果没有给一个盒子指定宽度,此时,如果给这个盒子指定padding,则不会撑开盒子。</p></blockquote><h3 id="16-5-外边距-margin"><a href="#16-5-外边距-margin" class="headerlink" title="16.5 外边距(margin)"></a>16.5 外边距(margin)</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/18margin外边距.png" alt=""></p><h4 id="16-5-1-外边距"><a href="#16-5-1-外边距" class="headerlink" title="16.5.1 外边距"></a>16.5.1 外边距</h4><p>margin属性用于设置外边距。margin就是控制<strong>盒子和盒子之间的距离</strong></p><h4 id="16-5-2-设置"><a href="#16-5-2-设置" class="headerlink" title="16.5.2 设置:"></a>16.5.2 设置:</h4><div class="table-container"><table><thead><tr><th>属性</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>margin-left</td><td style="text-align:left">左外边距</td></tr><tr><td>margin-right</td><td style="text-align:left">右外边距</td></tr><tr><td>margin-top</td><td style="text-align:left">上外边距</td></tr><tr><td>margin-bottom</td><td style="text-align:left">下外边距</td></tr></tbody></table></div><p>margin值的简写(复合写法)代表意思跟padding完全相同。</p><h4 id="16-5-3-块级盒子水平居中"><a href="#16-5-3-块级盒子水平居中" class="headerlink" title="16.5.3 块级盒子水平居中"></a>16.5.3 块级盒子水平居中</h4><p>可以让一个块级盒子实现水平居中必须:</p><ul><li>盒子必须指定了宽度(width)</li><li>然后就给<strong>左右的外边距都设置为auto</strong>,</li></ul><p>实际工作中常用这种方式进行网页布局,示例代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>常见的写法,以下三种都可以:</p><ul><li>margin-left: auto;   margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><h4 id="16-5-4-文字居中和盒子居中区别"><a href="#16-5-4-文字居中和盒子居中区别" class="headerlink" title="16.5.4 文字居中和盒子居中区别"></a>16.5.4 文字居中和盒子居中区别</h4><ol><li>盒子内的文字水平居中是  text-align: center,  而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> auto;  <span class="comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure><h4 id="16-5-5-插入图片和背景图片区别"><a href="#16-5-5-插入图片和背景图片区别" class="headerlink" title="16.5.5 插入图片和背景图片区别"></a>16.5.5 插入图片和背景图片区别</h4><ol><li>插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line"><span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">images/sun.jpg</span>) no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更改位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-5-6-清除元素的默认内外边距-重要"><a href="#16-5-6-清除元素的默认内外边距-重要" class="headerlink" title="16.5.6 清除元素的默认内外边距(重要)"></a>16.5.6 清除元素的默认内外边距(重要)</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/19清除内外边距.png" alt=""></p><p>为了更灵活方便地控制网页中的元素,制作网页时,我们需要将元素的默认内外边距清除</p><p>代码: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:  </p><ul><li>行内元素为了照顾兼容性,尽量只设置左右内外边距,不要设置上下内外边距。</li></ul><h4 id="16-5-7-外边距合并"><a href="#16-5-7-外边距合并" class="headerlink" title="16.5.7 外边距合并"></a>16.5.7 外边距合并</h4><p>使用margin定义块元素的<strong>垂直外边距</strong>时,可能会出现外边距的合并。</p><h5 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1) 相邻块元素垂直外边距的合并"></a>(1) 相邻块元素垂直外边距的合并</h5><p>当上下相邻的两个块元素相遇时,如果上面的元素有下外边距margin-bottom<br>下面的元素有上外边距margin-top,则他们之间的垂直间距不是margin-bottom与margin-top之和<br><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并(也称外边距塌陷)。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/www.png" alt=""></p><p><strong>解决方案:尽量只给一个盒子添加margin值</strong>。</p><h5 id="2-嵌套块元素垂直外边距的合并-塌陷"><a href="#2-嵌套块元素垂直外边距的合并-塌陷" class="headerlink" title="(2) 嵌套块元素垂直外边距的合并(塌陷)"></a>(2) 嵌套块元素垂直外边距的合并(塌陷)</h5><ul><li>对于两个嵌套关系的块元素,如果父元素没有上内边距及边框</li><li>父元素的上外边距会与子元素的上外边距发生合并</li><li>合并后的外边距为两者中的较大者</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/n.png" alt=""></p><p><strong>解决方案:</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden。</li></ol><p>还有其他方法,比如浮动、固定、绝对定位的盒子不会有问题</p><h3 id="16-6-盒子模型布局稳定性"><a href="#16-6-盒子模型布局稳定性" class="headerlink" title="16.6 盒子模型布局稳定性"></a>16.6 盒子模型布局稳定性</h3><p>学习完盒子模型,内边距和外边距,什么情况下用内边距,什么情况下用外边距？</p><ul><li>大部分情况下是可以混用的。就是说,你用内边距也可以,用外边距也可以。 你觉得哪个方便,就用哪个。</li></ul><p>我们根据稳定性来分,建议如下:<br>按照 优先使用宽度(width)其次使用内边距(padding)再次外边距(margin)。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin   </span><br></pre></td></tr></table></figure><p>原因:</p><ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug(讨厌)所以最后使用。</li><li>padding  会影响盒子大小, 需要进行加减计算(麻烦) 其次使用。</li><li>width   没有问题(嗨皮)我们经常使用宽度剩余法 高度剩余法来做。</li></ul><h3 id="16-7-ps基本操作以及常用快捷键"><a href="#16-7-ps基本操作以及常用快捷键" class="headerlink" title="16.7 ps基本操作以及常用快捷键:"></a>16.7 ps基本操作以及常用快捷键:</h3><p>因为网页美工大部分效果图都是利用ps 来做的,所以以后我们大部分切图工作都是在ps里面完成。</p><ul><li>文件—打开 —  可以打开 我们要测量的图片</li><li>ctrl+r 可以打开标尺  或者  视图 —  标尺</li><li>右击标尺,  把里面的单位改为  像素  </li><li>ctrl+ 加号 键  可以 放大  视图  ctrl+ 减号 缩小视图</li><li>按住空格键,  鼠标可以 变成小手 ,拖动 ps 视图</li><li>用选区 拖动  可以 测量 大小 </li><li>ctrl+ d  可以取消选区  或者旁边空白处点击一下也可以取消选区</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ps2.png" alt=""></p><h5 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/lieb.png" alt=""></p><h5 id="去掉列表默认的样式"><a href="#去掉列表默认的样式" class="headerlink" title="去掉列表默认的样式"></a>去掉列表默认的样式</h5><p>无序和有序列表前面默认的列表样式,在不同浏览器显示效果不一样,而且也比较难看,所以,我们一般上来就直接去掉这些列表样式就行了。 代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123; <span class="attribute">list-style</span>: none; &#125;</span><br></pre></td></tr></table></figure><h5 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/圆角.png" alt=""></p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;  </span><br></pre></td></tr></table></figure><p>其中每一个值可以为 数值或百分比的形式。 </p><p>技巧: 让一个正方形变成圆圈 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/radio.png" alt=""></p><ul><li>以上效果图矩形的圆角, 就不要用百分比了,因为百分比会表示高度和宽度的一半。</li><li>而我们这里矩形就只用高度的一半就好了。精确单位。</li></ul><h5 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/阴影.png" alt=""></p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:水平阴影 垂直阴影 模糊距离(虚实)  阴影尺寸(影子大小)  阴影颜色  内/外阴影;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498467567011.png" alt=""></p><ul><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 是默认的 但是不能写   想要内阴影可以写  inset </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line"><span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line"><span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸(影子大小) 阴影颜色  内/外阴影; */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-CSS书写规范"><a href="#17-CSS书写规范" class="headerlink" title="17 CSS书写规范"></a>17 CSS书写规范</h2><h3 id="17-1-空格规范"><a href="#17-1-空格规范" class="headerlink" title="17.1 空格规范"></a>17.1 空格规范</h3><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性名 与之后的 : 之间不允许包含空格, : 与 属性值 之间必须包含空格。</p><p>示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br></pre></td></tr></table></figure><h3 id="17-2-选择器规范"><a href="#17-2-选择器规范" class="headerlink" title="17.2 选择器规范"></a>17.2 选择器规范</h3><p>【强制】 并集选择器,每个选择器声明必须独占一行。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【建议】 一般情况情况下,选择器的嵌套层级应不大于 3 级,位置靠后的限定条件应尽可能精确。</p><p>示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span>  <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="17-3-属性规范"><a href="#17-3-属性规范" class="headerlink" title="17.3 属性规范"></a>17.3 属性规范</h3><p>【强制】 属性定义必须另起一行。</p><p>示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>【强制】 属性定义后必须以分号结尾。</p><p>示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-浮动-float"><a href="#18-浮动-float" class="headerlink" title="18 浮动(float)"></a>18 浮动(float)</h2><h3 id="18-1-CSS-布局的三种机制"><a href="#18-1-CSS-布局的三种机制" class="headerlink" title="18.1 CSS 布局的三种机制"></a>18.1 CSS 布局的三种机制</h3><blockquote><p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置,分别是<strong>普通流</strong>(标准流)、<strong>浮动</strong>和<strong>定位</strong>,其中: </p><ol><li><strong>普通流</strong>(标准流)<ul><li><strong>块级元素</strong>会独占一行,<strong>从上向下</strong>顺序排列;<ul><li>常用元素:<code>div、hr、p、h1~h6、ul、ol、dl、form、table</code></li></ul></li><li><strong>行内元素</strong>会按照顺序,<strong>从左到右</strong>顺序排列,碰到父元素边缘则自动换行;<ul><li>常用元素:span、a、i、em等</li></ul></li></ul></li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位,特别是后面的 js 特效。</li></ul></li></ol><h3 id="18-2-为什么需要浮动？"><a href="#18-2-为什么需要浮动？" class="headerlink" title="18.2 为什么需要浮动？"></a>18.2 为什么需要浮动？</h3><p>思考题:</p><p> 我们首先要思考以下2个布局中最常见的问题？</p><ol><li>如何让多个盒子(div)水平排列成一行？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/03_水平排列div.png" alt=""></p><ol><li>如何实现盒子的左右对齐？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/float1.png" alt=""></p><p>虽然我们前面学过行内块(inline-block) 但是他却有自己的缺陷:</p><ol><li>它可以实现多个元素一行显示,但是中间会有空白缝隙,不能满足以上第一个问题。</li><li>它不能实现以上第二个问题,盒子左右对齐 </li></ol><blockquote><p>因为一些网页布局要求,标准流不能满足我们的需要了,因此我们需要浮动来完成网页布局。</p></blockquote><h3 id="18-3-什么是浮动-float"><a href="#18-3-什么是浮动-float" class="headerlink" title="18.3  什么是浮动(float)"></a>18.3  什么是浮动(float)</h3><p><strong>概念</strong>:元素的浮动是指<strong>设置了浮动属性的元素</strong></p><ol><li>脱离标准普通流的控制</li><li>移动到指定位置。</li></ol><p>作用:</p><ol><li><strong>让多个盒子(div)水平排列成一行</strong>,使得浮动成为布局的重要手段。</li><li>可以实现盒子的左右对齐等等..</li><li>浮动最早是用来<strong>控制图片</strong>,实现<strong>文字环绕图片的效果</strong>。</li></ol><p>语法:</p><p>在 CSS 中,通过 <code>float</code> 属性定义浮动,语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>none</strong></td><td>元素不浮动(<strong>默认值</strong>)</td></tr><tr><td><strong>left</strong></td><td>元素向<strong>左</strong>浮动</td></tr><tr><td><strong>right</strong></td><td>元素向<strong>右</strong>浮动</td></tr></tbody></table></div><h5 id="1-浮动口诀之-浮"><a href="#1-浮动口诀之-浮" class="headerlink" title="1) 浮动口诀之 浮"></a>1) 浮动口诀之 浮</h5><p>浮动 脱离标准流。 俗称 “脱标”   </p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/23浮动脱标.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong>:</p><p><code>float</code> 属性会让盒子漂浮在标准流的上面,所以第二个标准流的盒子跑到浮动盒子的底下了。</p><h5 id="2-浮动口诀之-漏"><a href="#2-浮动口诀之-漏" class="headerlink" title="2)  浮动口诀之 漏"></a>2)  浮动口诀之 漏</h5><p>浮动的盒子,把自己原来的位置漏给下面标准流的盒子,就是不占有原来位置,是脱离标准流的,我们俗称 “脱标”。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">/* 让第 1 个盒子漂浮起来,不占位置 */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以,box2下面的其实就是跑到box1盒子下面了, 被box1给压住了,遮挡起来了</p><p>看个立体图</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/23浮动脱标.png" alt=""></p><h5 id="3-浮动口诀之-特"><a href="#3-浮动口诀之-特" class="headerlink" title="3) 浮动口诀之 特"></a>3) 浮动口诀之 特</h5><p>浮动特性  float属性会改变元素display属性。</p><p>任何元素都可以浮动。浮动元素会生成一个块级框,而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p><h5 id="案例-div-水平排列"><a href="#案例-div-水平排列" class="headerlink" title="案例:div 水平排列"></a>案例:div 水平排列</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为行内块元素,可以水平显示,不过 div 之间有间隙,不方便处理 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* display: inline-block; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置浮动属性,可以让 div 水平排列,并且没有间隙 */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: hotpink;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/24浮动一行显示.png" alt=""></p><p><strong>注意: 浮动的元素互相贴靠一起的,但是如果父级宽度装不下这些浮动的盒子, 多出的盒子会另起一行对齐</strong></p><h3 id="18-4-浮动-float-小结"><a href="#18-4-浮动-float-小结" class="headerlink" title="18.4 浮动(float)小结"></a>18.4 浮动(float)小结</h3><p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p><p>float:<br>| 特点 | 说明                                                         |<br>| —— | —————————————————————————————— |<br>| 浮   | 加了浮动的盒子<strong>是浮起来</strong>的,漂浮在其他标准流盒子的上面。   |<br>| 漏   | 加了浮动的盒子<strong>是不占位置的</strong>,它原来的位置<strong>漏给了标准流的盒子</strong>。 |<br>| 特   | <strong>特别注意</strong>:浮动元素会改变display属性, 类似转换为了行内块,但是元素之间没有空白缝隙 |</p><h3 id="18-5-浮动-float-的应用-重要"><a href="#18-5-浮动-float-的应用-重要" class="headerlink" title="18.5 浮动(float)的应用(重要)"></a>18.5 浮动(float)的应用(重要)</h3><h5 id="浮动和标准流的父盒子搭配"><a href="#浮动和标准流的父盒子搭配" class="headerlink" title="浮动和标准流的父盒子搭配"></a>浮动和标准流的父盒子搭配</h5><p>我们知道,浮动是脱标的,会影响下面的标准流元素,此时,我们需要给浮动的元素添加一个标准流的父亲,这样最大化的减小了对其他标准流的影响。</p><blockquote><p>一个完整的网页,是 标准流 +  浮动 +  定位 一起完成的。</p></blockquote><h5 id="浮动应用案例"><a href="#浮动应用案例" class="headerlink" title="浮动应用案例"></a>浮动应用案例</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/mii.png" alt=""></p><p>注意,实际重要的导航栏中,我们不会直接用链接a而是用li包含链接(li+a)的做法。</p><ol><li>li+a 语义更清晰,一看这就是有条理的列表型内容。</li><li>如果直接用a,搜索引擎容易辨别为有堆砌关键字嫌疑(故意堆砌关键字容易被搜索引擎有降权的风险),从而影响网站排名</li></ol><h3 id="18-6-浮动-float-的扩展"><a href="#18-6-浮动-float-的扩展" class="headerlink" title="18.6  浮动(float)的扩展"></a>18.6  浮动(float)的扩展</h3><h5 id="1-浮动元素与父盒子的关系"><a href="#1-浮动元素与父盒子的关系" class="headerlink" title="1) 浮动元素与父盒子的关系"></a>1) 浮动元素与父盒子的关系</h5><ul><li>子盒子的浮动参照父盒子对齐</li><li>不会与父盒子的边框重叠,也不会超过父盒子的内边距<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05_父子盒子关系示意图.png" alt=""></li></ul><h5 id="2-浮动元素与兄弟盒子的关系"><a href="#2-浮动元素与兄弟盒子的关系" class="headerlink" title="2) 浮动元素与兄弟盒子的关系"></a>2) 浮动元素与兄弟盒子的关系</h5><p>在一个父级盒子中,如果<strong>前一个兄弟盒子</strong>是:</p><ul><li><strong>浮动</strong>的,那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐;</li><li><strong>普通流</strong>的,那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。 </li></ul><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子,不会影响前面的标准流。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/two1.jpg" alt=""></p><p><strong>建议:</strong></p><p><strong>如果一个盒子里面有多个子盒子,如果其中一个盒子浮动了,其他兄弟也应该浮动。防止引起问题</strong></p><h2 id="19-清除浮动"><a href="#19-清除浮动" class="headerlink" title="19 清除浮动"></a>19 清除浮动</h2><h3 id="19-1-为什么要清除浮动"><a href="#19-1-为什么要清除浮动" class="headerlink" title="19.1 为什么要清除浮动"></a>19.1 为什么要清除浮动</h3><p>因为父级盒子很多情况下,不方便给高度,但是子盒子浮动就不占有位置,最后父级盒子高度为0,就影响了下面的标准流盒子。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/n.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/no.jpg" alt=""></p><p>总结:</p><ul><li>由于浮动元素不再占用原文档流的位置,所以它会对后面的元素排版产生影响</li><li>准确地说,并不是清除浮动,而是<strong>清除浮动后造成的影响</strong></li></ul><h3 id="19-2-清除浮动本质"><a href="#19-2-清除浮动本质" class="headerlink" title="19.2 清除浮动本质"></a>19.2 清除浮动本质</h3><p><strong>清除浮动本质:</strong><br>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后, 父级就会根据浮动的子盒子自动检测高度。父级有了高度,就不会影响下面的标准流了</p><h3 id="19-3-清除浮动的方法"><a href="#19-3-清除浮动的方法" class="headerlink" title="19.3 清除浮动的方法"></a>19.3 清除浮动的方法</h3><p>在CSS中,clear属性用于清除浮动</p><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;   clear 清除  </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table></div><p>但是我们实际工作中, 几乎只用 clear: both;</p><h5 id="1-额外标签法-隔墙法"><a href="#1-额外标签法-隔墙法" class="headerlink" title="1) 额外标签法(隔墙法)"></a>1) 额外标签法(隔墙法)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,或则其他标签br等亦可。</span><br></pre></td></tr></table></figure><ul><li>优点: 通俗易懂,书写方便</li><li>缺点: 添加许多无意义的标签,结构化较差。</li></ul><h5 id="2-父级添加overflow属性方法"><a href="#2-父级添加overflow属性方法" class="headerlink" title="2) 父级添加overflow属性方法"></a>2) 父级添加overflow属性方法</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加: overflow为 hidden| auto| scroll  都可以实现。</span><br></pre></td></tr></table></figure><p>优点:  代码简洁</p><p>缺点:  内容增多时候容易造成不会自动换行导致内容被隐藏掉,无法显示需要溢出的元素。</p><h5 id="3-使用after伪元素清除浮动"><a href="#3-使用after伪元素清除浮动" class="headerlink" title="3) 使用after伪元素清除浮动"></a>3) 使用after伪元素清除浮动</h5><p><strong>:after 方式为空元素额外标签法的升级版,好处是不用单独加标签了</strong> </p><p>使用方法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;*zoom: <span class="number">1</span>;&#125;   <span class="comment">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure><ul><li>优点: 符合闭合浮动思想  结构语义化正确</li><li>缺点: 由于IE6-7不支持:after,使用 zoom:1触发 hasLayout。</li><li>代表网站: 百度、淘宝网、网易等</li></ul><h5 id="4-使用双伪元素清除浮动"><a href="#4-使用双伪元素清除浮动" class="headerlink" title="4) 使用双伪元素清除浮动"></a>4) 使用双伪元素清除浮动</h5><p>使用方法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:  代码更简洁</li><li>缺点:  由于IE6-7不支持:after,使用 zoom:1触发 hasLayout。</li><li>代表网站: 小米、腾讯等</li></ul><h3 id="19-4-清除浮动总结"><a href="#19-4-清除浮动总结" class="headerlink" title="19.4 清除浮动总结"></a>19.4 清除浮动总结</h3><p><strong>什么时候用清除浮动呢？</strong></p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了,我们就应该清除浮动了。</li></ol><div class="table-container"><table><thead><tr><th>清除浮动的方式</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td><td style="text-align:left">通俗易懂,书写方便</td><td style="text-align:left">添加许多无意义的标签,结构化较差。</td></tr><tr><td>父级overflow:hidden;</td><td style="text-align:left">书写简单</td><td style="text-align:left">溢出隐藏</td></tr><tr><td>父级after伪元素</td><td style="text-align:left">结构语义化正确</td><td style="text-align:left">由于IE6-7不支持:after,兼容性问题</td></tr><tr><td>父级双伪元素</td><td style="text-align:left">结构语义化正确</td><td style="text-align:left">由于IE6-7不支持:after,兼容性问题</td></tr></tbody></table></div><p>后面两种伪元素清除浮动,会使用就好</p><h2 id="20-Photoshop-切图"><a href="#20-Photoshop-切图" class="headerlink" title="20 Photoshop 切图"></a>20 Photoshop 切图</h2><p><strong>常见的图片格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. jpg图像格式: </span><br><span class="line">JPEG(.JPG)对色彩的信息保留较好,高清,颜色较多,我们产品类的图片经常用jpg格式的</span><br><span class="line">2. gif图像格式:</span><br><span class="line">GIF格式最多只能储存256色,所以通常用来显示简单图形及字体,但是可以保存透明背景和动画效果</span><br><span class="line">3. png图像格式</span><br><span class="line">是一种新兴的网络图形格式,结合了GIF和JPEG的优点,具有存储形式丰富的特点,能够保持透明背景</span><br><span class="line">4. PSD图像格式</span><br><span class="line">PSD格式是Photoshop的专用格式,里面可以存放图层、通道、遮罩等多种设计草稿。 </span><br></pre></td></tr></table></figure><p>PS切图可以分为利用切片工具切图以及利用PS的插件快速切图。</p><h3 id="1-PS切片工具"><a href="#1-PS切片工具" class="headerlink" title="1) PS切片工具"></a>1) PS切片工具</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498466173246.png" alt=""></p><p>ps切图片,分两大步:</p><p><strong>1) 用切片选中图片</strong></p><ul><li>利用切片工具手动划出</li><li>图层菜单—-新建基于图层的切片</li><li>利用辅助线 来切图 — 基于参考线的切片 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498466734205.png" alt=""></p><p><strong>2) 导出切片</strong></p><p>文件菜单-&gt;存储为web设备所用格式-&gt;选择我们要的图片格式-&gt;点存储-&gt;别忘了选中的切片</p><h5 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h5><p>视图菜单— 清除 辅助线/ 清除切片</p><h3 id="2-切图插件"><a href="#2-切图插件" class="headerlink" title="2) 切图插件"></a>2) 切图插件</h3><p>Cutterman是一款运行在photoshop中的插件,能够自动将你需要的图层进行输出, 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出,方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则,纯点击操作,方便、快捷,易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>注意: cutterman插件要求你的ps 必须是完整版,不能是绿色版,所以大家需要从新安装完整版本。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sample1.gif" alt=""></p><h2 id="21-定位-position"><a href="#21-定位-position" class="headerlink" title="21 定位(position)"></a>21 定位(position)</h2><h3 id="21-1-CSS-布局的三种机制"><a href="#21-1-CSS-布局的三种机制" class="headerlink" title="21.1 CSS 布局的三种机制"></a>21.1 CSS 布局的三种机制</h3><blockquote><p>网页布局的核心 —— 就是<strong>用 CSS 来摆放盒子位置</strong>。</p></blockquote><p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置,分别是<strong>普通流</strong>、<strong>浮动</strong>和<strong>定位</strong>,其中:</p><ol><li><strong>普通流</strong>(<strong>标准流</strong>)</li><li><strong>浮动</strong><ul><li>让盒子从普通流中<strong>浮</strong>起来 —— <strong>让多个盒子(div)水平排列成一行</strong>。</li></ul></li><li><strong>定位</strong><ul><li>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子的上面  —— CSS 离不开定位,特别是后面的 js 特效。</li></ul></li></ol><h3 id="21-2-为什么使用定位"><a href="#21-2-为什么使用定位" class="headerlink" title="21.2 为什么使用定位"></a>21.2 为什么使用定位</h3><blockquote><p>我们先来看一个效果,同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p></blockquote><p>1.<strong>吸引用户的眼球</strong>。</p><p>2.<strong>当我们滚动窗口的时候,盒子是固定屏幕某个位置的</strong></p><blockquote><p><strong>结论</strong>:要实现以上效果,<strong>标准流</strong>或<strong>浮动</strong>都无法快速实现<br>将盒子<strong>定</strong>在某一个<strong>位</strong>置  自由的漂浮在其他盒子(包括标准流和浮动)的上面 </p></blockquote><p>三种布局机制的上下顺序</p><p>标准流在最底层 (海底)  浮动的盒子在中间层 (海面)   定位的盒子在最上层 (天空)</p><h3 id="21-3-定位详解"><a href="#21-3-定位详解" class="headerlink" title="21.3 定位详解"></a>21.3 定位详解</h3><p>定位也是用来布局的,它有两部分组成:</p><blockquote><p><code>定位 = 定位模式 + 边偏移</code></p></blockquote><h4 id="21-3-1-边偏移"><a href="#21-3-1-边偏移" class="headerlink" title="21.3.1 边偏移"></a>21.3.1 边偏移</h4><p>简单说, 我们定位的盒子,是通过边偏移来移动位置的。</p><p>在 CSS 中,通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>边偏移</strong>:(方位名词)</p><div class="table-container"><table><thead><tr><th>边偏移属性</th><th style="text-align:left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td style="text-align:left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量,定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td style="text-align:left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量,定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td style="text-align:left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量,定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td style="text-align:left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量,定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table></div><p>定位的盒子有了边偏移才有价值。 一般情况下,凡是有定位地方必定有边偏移。</p><h4 id="21-3-2-定位模式-position"><a href="#21-3-2-定位模式-position" class="headerlink" title="21.3.2  定位模式 (position)"></a>21.3.2  定位模式 (position)</h4><p>在 CSS 中,通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>,语法如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><p>定位模式是有不同分类的,在不同情况下,我们用到不同的定位模式。</p><div class="table-container"><table><thead><tr><th>值</th><th style="text-align:center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td style="text-align:center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td style="text-align:center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td style="text-align:center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td style="text-align:center"><strong>固定</strong>定位</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/26定位的概念.png" alt=""></p><p><strong>静态定位(static)</strong> 了解</p><ul><li><strong>静态定位</strong>是元素的默认定位方式,无定位的意思。它相当于 border 里面的none, 不要定位的时候用。</li><li>静态定位 按照标准流特性摆放位置,它没有边偏移。</li><li>静态定位在布局时我们几乎不用的 </li></ul><p><strong>3.2.1 相对定位(relative)</strong> - 重要</p><p><strong>相对定位</strong>是元素<strong>相对</strong>于它  原来在标准流中的位置来说的</p><p><strong>效果图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/04_相对定位案例.png" alt=""></p><p>相对定位的特点:(务必记住)</p><ul><li>相对于 自己原来在标准流中位置来移动的</li><li>原来<strong>在标准流的区域继续占有</strong>,后面的盒子仍然以标准流的方式对待它。</li></ul><p><strong>3.2.3 绝对定位(absolute)</strong> - 重要</p><p><strong>绝对定位</strong>是元素以带有定位的父级元素来移动位置</p><ol><li><p><strong>完全脱标</strong> —— 完全不占位置;  </p></li><li><p><strong>父元素没有定位</strong>,则以<strong>浏览器</strong>为准定位(Document 文档)。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/05_绝对定位_父级无定位.png" alt=""></p><ol><li><strong>父元素要有定位</strong></li></ol><ul><li>将元素依据最近的已经定位(绝对、固定或相对定位)的父元素(祖先)进行定位。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/06_绝对定位_父级有定位.png" alt=""></p><p>绝对定位的特点:(务必记住)</p><ul><li>绝对是以带有定位的父级元素来移动位置 (拼爹型) 如果父级都没有定位,则以浏览器文档为准移动位置</li><li>不保留原来的位置,完全是脱标的。</li></ul><p>因为绝对定位的盒子是拼爹的,所以要和父级搭配一起来使用。</p><h5 id="定位口诀-——-子绝父相"><a href="#定位口诀-——-子绝父相" class="headerlink" title="定位口诀 —— 子绝父相"></a>定位口诀 —— 子绝父相</h5><p>刚才咱们说过,绝对定位,要和带有定位的父级搭配使用,那么父级要用什么定位呢？</p><p><strong>子绝父相</strong> —— <strong>子级</strong>是<strong>绝对</strong>定位,<strong>父级</strong>要用<strong>相对</strong>定位。</p><p><strong>疑问</strong>:为什么在布局时,<strong>子级元素</strong>使用<strong>绝对定位</strong>时,<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p><p>观察下图,思考一下在布局时,<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/27子绝父相.png" alt=""></p><p><strong>分析</strong>:</p><ol><li><strong>方向箭头</strong>叠加在其他图片上方,应该使用<strong>绝对定位</strong>,因为<strong>绝对定位完全脱标</strong>,完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>,因为<strong>相对定位不脱标</strong>,后续盒子仍然以标准流的方式对待它。</li></ol><ul><li>如果父级盒子也使用<strong>绝对定位</strong>,会完全脱标,那么下方的<strong>广告盒子</strong>会上移,这显然不是我们想要的。</li></ul><p><strong>结论</strong>:<strong>父级要占有位置,子级要任意摆放</strong>,这就是<strong>子绝父相</strong>的由来。</p><p><strong>固定定位(fixed)</strong> - 重要</p><p><strong>固定定位</strong>是<strong>绝对定位</strong>的一种特殊形式:   如果说绝对定位是一个矩形 那么 固定定位就类似于正方形</p><ol><li><strong>完全脱标</strong> —— 完全不占位置;</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置;</li></ol><ul><li>跟父元素没有任何关系;单独使用的</li><li>不随滚动条滚动。</li></ul><p><strong>提示</strong>:IE 6 等低版本浏览器不支持固定定位。</p><h3 id="21-4-定位-position-的案例"><a href="#21-4-定位-position-的案例" class="headerlink" title="21.4 定位(position)的案例"></a>21.4 定位(position)的案例</h3><h4 id="21-4-1-哈根达斯"><a href="#21-4-1-哈根达斯" class="headerlink" title="21.4.1 哈根达斯"></a>21.4.1 哈根达斯</h4><p><strong>案例截图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/09_哈根达斯案例示意图.png" alt=""></p><h5 id="哈根达斯分析"><a href="#哈根达斯分析" class="headerlink" title="哈根达斯分析"></a>哈根达斯分析</h5><ol><li>一个大的 <code>div</code> 中包含 <code>3</code> 张图片;</li><li>大的 <code>div</code> 水平居中;</li><li><code>2</code> 张小图片<strong>重叠</strong>在<strong>广告</strong>图片上方 —— 脱标,不占位置,需要使用<strong>绝对定位</strong>;</li><li><code>2</code> 张小图片分别显示在<strong>左上角</strong>和<strong>右下角</strong> —— 需要<strong>使用边偏移确定准确位置</strong>。</li></ol><p><strong>案例小结</strong>:</p><ol><li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>,<strong>父元素</strong>使用<strong>相对定位</strong>;</li><li><strong>与浮动的对比</strong>:</li></ol><ul><li><strong>绝对定位</strong>:脱标,<strong>利用边偏移指定准确位置</strong>;</li><li><strong>浮动</strong>:脱标,不能指定准确位置,<strong>让多个块级元素在一行显示</strong>。</li></ul><h4 id="21-4-2-仿新浪头部和广告"><a href="#21-4-2-仿新浪头部和广告" class="headerlink" title="21.4.2 仿新浪头部和广告"></a>21.4.2 仿新浪头部和广告</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/xl.png" alt=""></p><h5 id="新浪案例分析"><a href="#新浪案例分析" class="headerlink" title="新浪案例分析"></a>新浪案例分析</h5><ol><li>顶部图片<strong>固定</strong>在浏览器可视窗口顶部,不会随窗口一起滚动;</li><li>左右两侧的广告图片<strong>固定</strong>在浏览器可视窗口的左右两侧,不会随窗口一起滚动;</li><li>注意:<strong>底部的内容图片</strong>初始<strong>显示在顶部图片的下方</strong>,如何解决？</li></ol><h5 id="步骤-1-——-顶部图片和底部内容"><a href="#步骤-1-——-顶部图片和底部内容" class="headerlink" title="步骤 1 —— 顶部图片和底部内容"></a>步骤 1 —— 顶部图片和底部内容</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="comment">/* 注意:使用固定定位时,如果盒子中没有内容,需要指定宽度 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/top.png</span>) no-repeat top center;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1002px</span>;</span><br><span class="line">    <span class="comment">/* 顶部的 44px 的 margin 可以让 box 显示在顶部图片下方 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">44px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><ol><li>在使用固定定位时,如果盒子中没有内容,需要指定宽度</li><li>设置底部内容图片的<strong>顶部 <code>margin</code></strong>,可以让底部盒子初始显示在顶部图片的下方。</li></ol><h5 id="步骤-2-——-左右两侧广告"><a href="#步骤-2-——-左右两侧广告" class="headerlink" title="步骤 2 —— 左右两侧广告"></a>步骤 2 —— 左右两侧广告</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ad-left</span>,</span><br><span class="line"><span class="selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ad-left</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ad-right</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:不要同时使用 <code>left</code> 和 <code>right</code> 和边偏移属性。</p><p><strong>案例小结</strong>:</p><ol><li><strong>固定定位</strong>的应用场景:<strong>固定在浏览器可视窗口某个位置的布局</strong>;</li><li>在使用固定和绝对定位时,如果盒子中没有内容,需要指定宽度(稍后就讲)。</li></ol><h3 id="21-5-定位-position-的扩展"><a href="#21-5-定位-position-的扩展" class="headerlink" title="21.5 定位(position)的扩展"></a>21.5 定位(position)的扩展</h3><h4 id="21-5-1-绝对定位的盒子居中"><a href="#21-5-1-绝对定位的盒子居中" class="headerlink" title="21.5.1 绝对定位的盒子居中"></a>21.5.1 绝对定位的盒子居中</h4><p><strong>注意</strong>:<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p><p>在使用<strong>绝对定位</strong>时要想实现水平居中,可以按照下图的方法:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/10_绝对定位水平居中.png" alt=""></p><ol><li><code>left: 50%;</code>:让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>;</li><li><code>margin-left: -100px;</code>:让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li></ol><blockquote><p>案例演示:相对定位案例。</p></blockquote><h5 id="盒子居中定位示意图"><a href="#盒子居中定位示意图" class="headerlink" title="盒子居中定位示意图"></a>盒子居中定位示意图</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/11_绝对定位居中示意图.png" alt=""></p><h4 id="21-5-2-堆叠顺序-z-index"><a href="#21-5-2-堆叠顺序-z-index" class="headerlink" title="21.5.2 堆叠顺序(z-index)"></a>21.5.2 堆叠顺序(z-index)</h4><p>在使用<strong>定位</strong>布局时,可能会<strong>出现盒子重叠的情况</strong>。</p><p>加了定位的盒子,默认<strong>后来者居上</strong>, 后面的盒子会压住前面的盒子。</p><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/12_zindex示意图.png" alt=""></p><p><code>z-index</code> 的特性如下:</p><ol><li><strong>属性值</strong>:<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>,默认值是 0,数值越大,盒子越靠上;</li><li>如果<strong>属性值相同</strong>,则按照书写顺序,<strong>后来居上</strong>;</li><li><strong>数字后面不能加单位</strong>。</li></ol><p><strong>注意</strong>:<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素,其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p><h4 id="21-5-3-定位改变display属性"><a href="#21-5-3-定位改变display属性" class="headerlink" title="21.5.3 定位改变display属性"></a>21.5.3 定位改变display属性</h4><p>display是显示模式,可以改变显示模式有以下方式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块(类似,并不完全一样,因为浮动是脱标的)</li><li>绝对定位和固定定位也和浮动类似, 默认转换的特性 转换为行内块。</li></ul><p>所以说, 一个行内的盒子,如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>,不用转换,就可以给这个盒子直接设置宽度和高度等。</p><p><strong>注意:</strong><br>浮动元素、绝对定位(固定定位)元素的都不会触发外边距合并的问题。(我们以前是用padding border overflow解决的)</p><p>也就是说,我们给盒子改为了浮动或者定位,就不会有垂直外边距合并的问题了。</p><h3 id="21-6-综合演练-淘宝轮播图"><a href="#21-6-综合演练-淘宝轮播图" class="headerlink" title="21.6. 综合演练 - 淘宝轮播图"></a>21.6. 综合演练 - 淘宝轮播图</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/28淘宝.png" alt=""></p><h5 id="圆角矩形设置4个角"><a href="#圆角矩形设置4个角" class="headerlink" title="圆角矩形设置4个角"></a>圆角矩形设置4个角</h5><p>圆角矩形可以为4个角分别设置圆度, 但是是有顺序的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius:20px;</span><br><span class="line">border-top-right-radius:20px;</span><br><span class="line">border-bottom-right-radius:20px;</span><br><span class="line">border-bottom-left-radius:20px;</span><br></pre></td></tr></table></figure><ul><li><p>如果4个角,数值相同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br></pre></td></tr></table></figure></li><li><p>里面数值不同,我们也可以按照简写的形式,具体格式如下:</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>还是遵循顺时针。</p><h3 id="12-7-定位小结"><a href="#12-7-定位小结" class="headerlink" title="12.7 定位小结"></a>12.7 定位小结</h3><div class="table-container"><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th style="text-align:left">移动位置基准</th><th>模式转换(行内块)</th><th>使用情况</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标,正常模式</td><td style="text-align:left">正常模式</td><td>不能</td><td>几乎不用</td></tr><tr><td>相对定位relative</td><td>不脱标,占有位置</td><td style="text-align:left">相对自身位置移动</td><td>不能</td><td>基本单独使用</td></tr><tr><td>绝对定位absolute</td><td>完全脱标,不占有位置</td><td style="text-align:left">相对于定位父级移动位置</td><td>能</td><td>要和定位父级元素搭配使用</td></tr><tr><td>固定定位fixed</td><td>完全脱标,不占有位置</td><td style="text-align:left">相对于浏览器移动位置</td><td>能</td><td>单独使用,不需要父级</td></tr></tbody></table></div><p><strong>注意</strong>:</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用,<strong>单独使用无效</strong>;</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用;</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><p>一个小技巧:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dingwei.png" alt=""></p><h3 id="21-9-网页布局总结"><a href="#21-9-网页布局总结" class="headerlink" title="21.9 网页布局总结"></a>21.9 网页布局总结</h3><p>一个完整的网页,有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。</p><h5 id="1-标准流"><a href="#1-标准流" class="headerlink" title="1) 标准流"></a>1) 标准流</h5><p>可以让盒子上下排列 或者 左右排列的</p><h5 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2) 浮动"></a>2) 浮动</h5><p>可以让多个块级元素一行显示  或者 左右对齐盒子   浮动的盒子就是按照顺序左右排列 </p><h5 id="3-定位"><a href="#3-定位" class="headerlink" title="3) 定位"></a>3) 定位</h5><p>定位最大的特点是有层叠的概念,就是可以让多个盒子 前后 叠压来显示。 但是每个盒子需要测量数值。</p><h2 id="22-CSS高级技巧"><a href="#22-CSS高级技巧" class="headerlink" title="22 CSS高级技巧"></a>22 CSS高级技巧</h2><h3 id="22-1-元素的显示与隐藏"><a href="#22-1-元素的显示与隐藏" class="headerlink" title="22.1 元素的显示与隐藏"></a>22.1 元素的显示与隐藏</h3><p>目的<br>让一个元素在页面中消失或者显示出来</p><p>场景<br>类似网站广告,当我们点击关闭就不见了,但是我们重新刷新页面,会重新出现！</p><h4 id="22-1-1-display-显示-重点"><a href="#22-1-1-display-显示-重点" class="headerlink" title="22.1.1 display 显示(重点)"></a>22.1.1 display 显示(重点)</h4><p>display 设置或检索对象是否及如何显示。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display:block 除了转换为块级元素之外,同时还有显示元素的意思。</span><br></pre></td></tr></table></figure></p><p>特点: 隐藏之后,不再保留位置。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/29none.png" alt=""></p><p>实际开发场景:</p><blockquote><p>配合后面js做特效,比如下拉菜单,原先没有,鼠标经过,显示下拉菜单, 应用极为广泛</p></blockquote><h4 id="22-1-2-visibility-可见性-了解"><a href="#22-1-2-visibility-可见性-了解" class="headerlink" title="22.1.2 visibility 可见性 (了解)"></a>22.1.2 visibility 可见性 (了解)</h4><p>设置或检索是否显示对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visibility:visible ; 　对象可视</span><br><span class="line">  </span><br><span class="line">visibility:hidden; 　  对象隐藏</span><br></pre></td></tr></table></figure><p>特点: 隐藏之后,继续保留原有位置</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/30visibility.png" alt=""></p><h4 id="22-1-3-overflow-溢出-重点"><a href="#22-1-3-overflow-溢出-重点" class="headerlink" title="22.1.3 overflow 溢出(重点)"></a>22.1.3 overflow 溢出(重点)</h4><ul><li>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</li></ul><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容,超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否,总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条,不超出不显示滚动条</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/33overflow.png" alt=""></p><p>实际开发场景:</p><ol><li>清除浮动</li><li>隐藏超出内容,隐藏掉,  不允许内容超过父盒子。</li></ol><h4 id="22-1-4-显示与隐藏总结"><a href="#22-1-4-显示与隐藏总结" class="headerlink" title="22.1.4 显示与隐藏总结"></a>22.1.4 显示与隐藏总结</h4><div class="table-container"><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display</strong></td><td>隐藏对象,不保留位置</td><td>配合后面js做特效,比如下拉菜单,原先没有,鼠标经过,显示下拉菜单, 应用极为广泛</td></tr><tr><td><strong>visibility</strong></td><td>隐藏对象,保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table></div><h3 id="22-2-CSS用户界面样式"><a href="#22-2-CSS用户界面样式" class="headerlink" title="22.2 CSS用户界面样式"></a>22.2 CSS用户界面样式</h3><p>所谓的界面样式, 就是更改一些用户操作样式,以便提高更好的用户体验。</p><ul><li>更改用户的鼠标样式 (滚动条因为兼容性非常差,我们不研究) </li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul><h4 id="22-2-1-鼠标样式cursor"><a href="#22-2-1-鼠标样式cursor" class="headerlink" title="22.2.1 鼠标样式cursor"></a>22.2.1 鼠标样式cursor</h4><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>default</strong></td><td>小白  默认</td></tr><tr><td><strong>pointer</strong></td><td>小手</td></tr><tr><td><strong>move</strong></td><td>移动</td></tr><tr><td><strong>text</strong></td><td>文本</td></tr><tr><td><strong>not-allowed</strong></td><td>禁止</td></tr></tbody></table></div><p> 鼠标放我身上查看效果哦:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:default&quot;</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:move&quot;</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:text&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:not-allowed&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-轮廓线-outline"><a href="#2-2-轮廓线-outline" class="headerlink" title="2.2 轮廓线 outline"></a>2.2 轮廓线 outline</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/outline.png" alt=""></p><p>是绘制于元素周围的一条线,位于边框边缘的外围,可起到突出元素的作用。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color ||outline-style || outline-width </span><br></pre></td></tr></table></figure><p>但是我们都不关心可以设置多少,我们平时都是去掉的。 li  </p><p>最直接的写法是 :  outline: 0;   或者  outline: none;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;outline: 0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="22-2-3-防止拖拽文本域resize"><a href="#22-2-3-防止拖拽文本域resize" class="headerlink" title="22.2.3 防止拖拽文本域resize"></a>22.2.3 防止拖拽文本域resize</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/34textarea.png" alt=""></p><p>实际开发中,我们文本域右下角是不可以拖拽: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="22-2-4-用户界面样式总结"><a href="#22-2-4-用户界面样式总结" class="headerlink" title="22.2.4 用户界面样式总结"></a>22.2.4 用户界面样式总结</h4><div class="table-container"><table><thead><tr><th>属性</th><th>用途</th><th>用途</th></tr></thead><tbody><tr><td><strong>鼠标样式</strong></td><td>更改鼠标样式cursor</td><td>样式很多,重点记住 pointer</td></tr><tr><td><strong>轮廓线</strong></td><td>表单默认outline</td><td>outline 轮廓线,我们一般直接去掉,border是边框,我们会经常用</td></tr><tr><td>防止拖拽</td><td>主要针对文本域resize</td><td>防止用户随意拖拽文本域,造成页面布局混乱,我们resize:none</td></tr></tbody></table></div><h3 id="22-3-vertical-align-垂直对齐"><a href="#22-3-vertical-align-垂直对齐" class="headerlink" title="22.3 vertical-align 垂直对齐"></a>22.3 vertical-align 垂直对齐</h3><ul><li>有宽度的块级元素居中对齐,是margin: 0 auto;</li><li>让文字居中对齐,是 text-align: center;</li></ul><p>但是我们从来没有讲过有垂直居中的属性。</p><p>vertical-align 垂直对齐,它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>,</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/xian.jpg" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure><p>设置或检索对象内容的垂直对其方式。</p><ul><li><p>注意:</p><p>vertical-align 不影响块级元素中的内容对齐,它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>,</p><p>特别是行内块元素, <strong>通常用来控制图片/表单与文字的对齐</strong>。</p></li></ul><h4 id="22-3-1-图片、表单和文字对齐"><a href="#22-3-1-图片、表单和文字对齐" class="headerlink" title="22.3.1 图片、表单和文字对齐"></a>22.3.1 图片、表单和文字对齐</h4><p>我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/基线对齐.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/1498467742995.png" alt=""></p><h4 id="22-3-2-去除图片底侧空白缝隙"><a href="#22-3-2-去除图片底侧空白缝隙" class="headerlink" title="22.3.2 去除图片底侧空白缝隙"></a>22.3.2 去除图片底侧空白缝隙</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/35vertical.png" alt=""></p><p>原因:<br>图片或者表单等行内块元素,他的底线会和父级盒子的基线对齐。<br>就是图片底侧会有一个空白缝隙。</p><p>解决的方法:<br>1.给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐。<br>2.给img 添加 display:block; 转换为块级元素就不会存在问题了。</p><h3 id="22-4-溢出的文字省略号显示"><a href="#22-4-溢出的文字省略号显示" class="headerlink" title="22.4 溢出的文字省略号显示"></a>22.4 溢出的文字省略号显示</h3><h4 id="22-4-1-white-space"><a href="#22-4-1-white-space" class="headerlink" title="22.4.1 white-space"></a>22.4.1 white-space</h4><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:normal ;默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ;　强制在同一行内显示所有文本,直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><h4 id="22-4-2-text-overflow-文字溢出"><a href="#22-4-2-text-overflow-文字溢出" class="headerlink" title="22.4.2 text-overflow 文字溢出"></a>22.4.2 text-overflow 文字溢出</h4><p>设置或检索是否使用一个省略标记(…)标示对象内文本的溢出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow : clip ;不显示省略标记(...),而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow:ellipsis ; 当对象内文本溢出时显示省略标记(...)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><p>一定要首先强制一行内显示,再次和overflow属性  搭配使用</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dot.png" alt=""></p><h4 id="22-4-3-总结"><a href="#22-4-3-总结" class="headerlink" title="22.4.3 总结"></a>22.4.3 总结</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="22-5-CSS精灵技术-sprite-重点"><a href="#22-5-CSS精灵技术-sprite-重点" class="headerlink" title="22.5 CSS精灵技术(sprite) 重点"></a>22.5 CSS精灵技术(sprite) 重点</h3><h4 id="22-5-1-为什么需要精灵技术"><a href="#22-5-1-为什么需要精灵技术" class="headerlink" title="22.5.1 为什么需要精灵技术"></a>22.5.1 为什么需要精灵技术</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/sss.png" alt=""></p><p>图所示为网页的请求原理图,当用户访问一个网站时,需要向服务器发送请求,网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而,一个网页中往往会应用很多小的背景图像作为修饰,当网页中的图像过多时,服务器就会频繁地接受和发送请求,这将大大降低页面的加载速度。</p><p>为什么需要精灵技术:<br><strong>为了有效地减少服务器接受和发送请求的次数,提高页面的加载速度。</strong></p><p>出现了CSS精灵技术(也称CSS Sprites)。</p><h4 id="22-5-2-精灵技术讲解"><a href="#22-5-2-精灵技术讲解" class="headerlink" title="22.5.2 精灵技术讲解"></a>22.5.2 精灵技术讲解</h4><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中(精灵图),然而,各个网页元素通常只需要精灵图中不同位置的某个小图,要想精确定位到精灵图中的某个小图。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/jds.png" alt=""></p><p>这样,当用户访问该页面时,只需向服务发送一次请求,网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的</p><ul><li>background-image</li><li>background-repeat</li><li>background-position属性进行背景定位,</li><li>其中最关键的是使用background-position 属性精确地定位。</li></ul><h4 id="22-5-3-精灵技术使用的核心总结"><a href="#22-5-3-精灵技术使用的核心总结" class="headerlink" title="22.5.3 精灵技术使用的核心总结"></a>22.5.3 精灵技术使用的核心总结</h4><p>首先我们知道,css精灵技术主要针对于背景图片,插入的图片img 是不需要这个技术的。</p><ol><li>精确测量,每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时, 背景定位基本都是 负值。</li></ol><h4 id="22-5-4-制作精灵图-了解"><a href="#22-5-4-制作精灵图-了解" class="headerlink" title="22.5.4 制作精灵图(了解)"></a>22.5.4 制作精灵图(了解)</h4><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中(精灵图),那我们要做的,就是把小图拼合成一张大图。</p><p>大部分情况下,精灵图都是网页美工做。</p><p>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。<br>我们可以横向摆放也可以纵向摆放,但是每个图片之间留有适当的空隙<br>在我们精灵图的最低端,留一片空隙,方便我们以后添加其他精灵图。</p><p>小公司,背景图片很少的情况,没有必要使用精灵技术,维护成本太高。 如果是背景图片比较多,可以建议使用精灵技术。</p><h3 id="22-6-滑动门"><a href="#22-6-滑动门" class="headerlink" title="22.6 滑动门"></a>22.6 滑动门</h3><h5 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h5><p>制作网页时,为了美观,常常需要为网页元素设置特殊形状的背景,比如微信导航栏,有凸起和凹下去的感觉,最大的问题是里面的字数不一样多,咋办？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/wxx.jpg" alt=""></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少,出现了CSS滑动门技术。它从新的角度构建页面,使各种特殊形状的背景能够自由拉伸滑动,以适应元素内部的文本内容,可用性更强。 最常见于各种导航栏的滑动门。</p><h5 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h5><p>核心技术就是利用CSS精灵(主要是背景位置)和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">      <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/wx.jpg</span>) repeat-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.father</span> &#123;</span><br><span class="line">      <span class="attribute">padding-top</span>:<span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">      <span class="attribute">margin</span>:<span class="number">0</span>  <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat left ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat right ;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">     <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">./images/ao.png</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结: </p><p>1.a 设置 背景左侧,padding撑开合适宽度。<br>2.span 设置背景右侧, padding撑开合适宽度 剩下由文字继续撑开宽度。<br>3.之所以a包含span就是因为 整个导航都是可以点击的。</p><h4 id="22-7-1-margin负值之美"><a href="#22-7-1-margin负值之美" class="headerlink" title="22.7.1 margin负值之美"></a>22.7.1 margin负值之美</h4><h5 id="1-负边距-定位-水平垂直居中"><a href="#1-负边距-定位-水平垂直居中" class="headerlink" title="1) 负边距+定位:水平垂直居中"></a>1) 负边距+定位:水平垂直居中</h5><p>咱们前面讲过,一个绝对定位的盒子,利用父级盒子的50%,然后往左(上)走自己宽度的一半 ,可以实现盒子水平垂直居中。</p><h5 id="2-压住盒子相邻边框"><a href="#2-压住盒子相邻边框" class="headerlink" title="2) 压住盒子相邻边框"></a>2) 压住盒子相邻边框</h5><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/margin.png" alt=""></p><h3 id="7-2-CSS三角形之美"><a href="#7-2-CSS三角形之美" class="headerlink" title="7.2 CSS三角形之美"></a>7.2 CSS三角形之美</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border-top</span>: <span class="number">10px</span> solid red;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">border-right</span>: <span class="number">10px</span> solid green;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#000</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>css 三角是怎么来的, 做法如下:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/arr.png" alt=""></p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写,只保留需要的边框颜色,其余的不能省略,都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器,加上 font-size: 0;  line-height: 0;</li></ol><p><a href="https://github.com/liaojie1314/web">代码</a>,仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/posts/38ea7f4b.html"/>
      <url>/posts/38ea7f4b.html</url>
      
        <content type="html"><![CDATA[<p>.net/dotnet:一般指.Net Framework框架.一种平台,一种技术</p><p>C#(sharp):一种编程语言,可以开发基于.net平台的应用</p><p>.net都能干什么?</p><ul><li>桌面应用程序  Winform</li><li>Internet应用程序 ASP.NET</li><li>手机开发 wp8</li><li>Unity3D游戏开发或者虚拟现实</li></ul><p>.NET俩种交互模式</p><ul><li>C/S:客户机(Client)/服务器模式(Server) winform应用程序</li><li>B/S:浏览器(Browser)/服务器模式(Server) Internet应用程序</li></ul><h3 id="1-1-开发工具-Visual-Studio"><a href="#1-1-开发工具-Visual-Studio" class="headerlink" title="1.1 开发工具:Visual Studio"></a>1.1 开发工具:Visual Studio</h3><p>新建项目:选择Visual C#-&gt;Windows-&gt;控制台应用程序,起一个英文名称(最好见名知意)<br>一个解决方案下可以有多个项目:解决方案右键-&gt;添加-&gt;新建项目</p><p>.cs结尾的称为类文件</p><p>解决方案资源管理器(视图里找)</p><p>Program组成部分</p><ul><li>命名空间</li><li>方法或函数(Main函数为程序的入口)</li></ul><p>.sln: 解决方案文件,里面包含整个解决方案的信息,可以双击运行</p><p>.csproj: 项目文件,里面包含项目的信息,可以双击运行</p><h3 id="1-2-C-基础"><a href="#1-2-C-基础" class="headerlink" title="1.2 C#基础"></a>1.2 C#基础</h3><p>C#中,每行代码都以<code>;</code>结束.</p><p>输出: <code>Console.WriteLine(&quot;输出内容&quot;);</code></p><p><code>Console.ReadKey();</code> 作用:暂停当前程序,等待用户按下任意键继续,按下的任意键将显示在控制台当中</p><p>vs快捷键：</p><ul><li>Ctrl+K+D 快速对齐</li><li>Ctrl+S 保存</li><li>Ctrl+Z 撤销</li><li>Ctrl+J 提示</li><li>Ctrl+K+C 注释</li><li>Ctrl+K+U 取消注释</li><li><h1 id="region…-endregion-折叠代码"><a href="#region…-endregion-折叠代码" class="headerlink" title="region…#endregion 折叠代码"></a>region…#endregion 折叠代码</h1></li></ul><p>vs设置: 工具-&gt;选项(推荐将字体(环境-&gt;字体和颜色)改为Consolas)</p><p>启动项目设置: 解决方案右键-&gt;属性-&gt;启动项目改为当前选定内容</p><p>项目的加载与卸载: 右键需要修改的项目-&gt;移除/卸载(不可用,当需要时可以右键重新加载)</p><h3 id="1-3-注释符"><a href="#1-3-注释符" class="headerlink" title="1.3 注释符"></a>1.3 注释符</h3><p>作用:<br> 1.注销<br> 2.解释</p><p>单行注释: <code>//</code><br>多行注释: <code>/* 注释内容 */</code><br>文档注释: <code>///</code> 多用来解释类或者方法</p><h3 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h3><p>在计算机中存储数据</p><p>语法: <code>变量类型 变量名 = 值;</code></p><p>整数类型: int 只能存整数,不能存储小数</p><p>小数类型: double 既能存整数,也能存小数,小数点后位数 15 ~ 16位</p><p>字符类型不能为空,并且只能有一个 字符: <code>char ch = &#39;a&#39;;</code> </p><p>字符串类型可以存空,字符串: <code>string name = &quot;张三&quot;;</code></p><p>存钱: <code>decimal money = 5000m;</code> 后面需加上一个m</p><p>变量命名规则:</p><ul><li>必须以字母下划线或”@”符号开头,不能以数字开头</li><li>后面可以跟任意字母、数字、下划线</li><li>不能更C#关键字重复</li><li>区分大小写</li><li>同一变量名不允许重复定义</li><li>变量命名必须有意义</li><li>Camel命名规则:除第一个单词第一个字母小写,其他每一个单词第一个字母大写(变量命名)</li><li>Pascal命名规则:每一个单词第一个字母大写(类或者方法命名)</li></ul><p>变量必须先声明,再赋值,最后再使用</p><h3 id="1-5-赋值运算符"><a href="#1-5-赋值运算符" class="headerlink" title="1.5 赋值运算符 ="></a>1.5 赋值运算符 =</h3><p>意义: 表示把等号右边的值赋值给等号左边的变量</p><p>“+”号作用:<br>1.连接俩个字符串<br>2.相加(俩个数字)</p><h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><p>使用方法: 先挖个坑,再填</p><p>多填:没效果<br>少填:抛异常</p><p>输出顺序:按照挖坑的顺序</p><p>保留小数:</p><p>{:0.00}//保留俩位小数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n1 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> n2 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">int</span> n3 = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//占位符</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数字：&#123;0&#125;,第二个数字：&#123;1&#125;,第三个数字：&#123;2&#125;&quot;</span>, n1, n2, n3);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h4 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h4><p>交换变量:<br>1.设置中间变量temp<br>2.交换俩整型变量：n1=n1-n2;n2=n1+n2;n1=n2-n1;</p><h3 id="1-6-输入"><a href="#1-6-输入" class="headerlink" title="1.6 输入"></a>1.6 输入</h3><p><code>string str = Console.ReadLine();</code></p><h3 id="1-7转义符"><a href="#1-7转义符" class="headerlink" title="1.7转义符"></a>1.7转义符</h3><p>转义符指的是一个’\’+一个特殊字符组成一个具有特殊意义的字符</p><p>\n:表示换行<br>\“:表示一个英文半角的双引号<br>\t:表示一个Tab键的空格<br>\b:表示退格键，放字符串俩边无用<br>@:<br>1.取消\转义作用<br>2.将字符串按照原格式输出<br>\r\n:windows操作系统不认识\n,只认识\r\n<br>\\:表示一个\</p><h3 id="1-8-算术运算符-二元运算符"><a href="#1-8-算术运算符-二元运算符" class="headerlink" title="1.8 算术运算符 (二元运算符)"></a>1.8 算术运算符 (二元运算符)</h3><p>加(+)、减(-)、乘( * )、除(/)、取余(%)</p><h3 id="1-9-显式类型转换和隐式类型转换"><a href="#1-9-显式类型转换和隐式类型转换" class="headerlink" title="1.9 显式类型转换和隐式类型转换"></a>1.9 显式类型转换和隐式类型转换</h3><p>要求等号俩边参与运算的操作数的类型必须一致,如果不一致,满足下列条件会发生自动类型转换,或者称之为隐式类型转换</p><ul><li>俩种类型兼容</li><li>目标类型大于原类型(eg:double&gt;int) int —- double</li></ul><p>强制类型转换 double —- int 显式类型转换 (eg:(int)double值)</p><ul><li>俩种类型相兼容</li><li>大的转换为小的</li></ul><p>语法: (待转换的类型)要转换的值</p><h3 id="1-10-Convert类型转换"><a href="#1-10-Convert类型转换" class="headerlink" title="1.10 Convert类型转换"></a>1.10 Convert类型转换</h3><p>条件:</p><ul><li>面上必须要过得去</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> d = Convert.ToDouble(s);</span><br><span class="line"><span class="built_in">int</span> n = Convert.ToInt32(s);</span><br><span class="line">Console.WriteLine(d);</span><br><span class="line">Console.WriteLine(n);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h3 id="1-11-加加减减-一元运算符"><a href="#1-11-加加减减-一元运算符" class="headerlink" title="1.11 加加减减 (一元运算符)"></a>1.11 加加减减 (一元运算符)</h3><p>++: 分为前++、后++,最终结果都为变量+1,不同的是前++是先+1再用+1后的值去运算,后++是先用原先的值参与运算再将这个变量+1<br>—: 同上</p><blockquote><p>一元运算符优先级高于二元运算符</p></blockquote><h3 id="1-12-关系运算符和逻辑运算符"><a href="#1-12-关系运算符和逻辑运算符" class="headerlink" title="1.12 关系运算符和逻辑运算符"></a>1.12 关系运算符和逻辑运算符</h3><p>关系运算符:<br>大于(&gt;)、小于(&lt;)、大于等于(&gt;=)、小于等于(&lt;=)、等于(==)、不等于(!=)</p><p>bool类型:</p><ul><li>True</li><li>False</li></ul><p>逻辑运算符:<br>逻辑与(&amp;&amp;)全真才真,一假就假、逻辑或(||)全假才假,一真就真、逻辑非(!)</p><p>&amp;&amp;优先级高于||</p><h3 id="1-13-复合赋值运算符"><a href="#1-13-复合赋值运算符" class="headerlink" title="1.13 复合赋值运算符"></a>1.13 复合赋值运算符</h3><p>+=、-=、*=、/=、%=</p><h5 id="异常捕获："><a href="#异常捕获：" class="headerlink" title="异常捕获："></a>异常捕获：</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  可能出异常的代码</span><br><span class="line">   &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">     出异常执行代码</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 流程控制"></a>2 流程控制</h2><p>循环结构:程序从Main函数进入,从上到下一行一行的执行,不会落下任意一行<br>分支结构:if if-else<br>选择结构:if else-if switch-case<br>循环结构:while do-while for foreach</p><h3 id="2-1-if"><a href="#2-1-if" class="headerlink" title="2.1 if"></a>2.1 if</h3><p>if:<br>语法:<br>if(判断条件)<br>{<br>    要执行的代码;<br>}</p><p>判断条件:一般为关系表达式或者bool类型的值</p><p>if-else:<br>语法:<br>if(判断条件)<br>{<br>    条件成立执行的代码;<br>}else{<br>    条件不成立执行代码;<br>}</p><p>if else-if:<br>语法:<br>if(判断条件1)<br>{<br>    条件1成立执行的代码;<br>}else if(判断条件2)<br>{<br>    条件2成立执行的代码;<br>}…<br>else{<br>    条件都不成立执行代码;<br>}</p><h3 id="2-2-switch-case"><a href="#2-2-switch-case" class="headerlink" title="2.2 switch-case"></a>2.2 switch-case</h3><p>作用: 用于处理多条件的定值的判断</p><p>语法:<br>switch(变量或者表达式的值)<br>{<br>    case 值1:要执行的代码;<br>    break;<br>    case 值2:要执行的代码;<br>    break;<br>    case 值3:要执行的代码;<br>    break;<br>    …<br>    default:要执行的代码;<br>    break;<br>}</p><h5 id="案例-判断年份"><a href="#案例-判断年份" class="headerlink" title="案例: 判断年份"></a>案例: 判断年份</h5><p>案例描述: 输入年份和月份,输出对应的天数</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 判断闰年</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入一个年份&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> year = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入一个月份&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">int</span> month = Convert.ToInt32(Console.ReadLine());<span class="comment">//1~12</span></span><br><span class="line">                    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">12</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> day = <span class="number">0</span>;<span class="comment">//声明一个变量用来存储天数</span></span><br><span class="line">                        <span class="keyword">switch</span> (month)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                                day = <span class="number">31</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                <span class="comment">//有平年和润年的不同</span></span><br><span class="line">                                <span class="keyword">if</span> ((year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    day = <span class="number">29</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    day = <span class="number">28</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="literal">default</span>:<span class="comment">//4,6,9,11</span></span><br><span class="line">                                day = <span class="number">30</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;&#123;0&#125;年&#123;1&#125;月有&#123;2&#125;天&quot;</span>, year, month, day);</span><br><span class="line">                    &#125;<span class="comment">//if判断</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;输入的月份不符合要求,程序退出&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span><span class="comment">//月份</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;输入的月份有误,程序退出&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span><span class="comment">//年份</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;输入的年份有误,程序退出&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-while"><a href="#2-3-while" class="headerlink" title="2.3 while"></a>2.3 while</h3><p>语法:<br>while(循环条件)<br>{<br>    循环体;<br>}</p><p>break用法:<br>1.跳出switch-case结构<br>2.跳出当前循环<br>一般不单独使用,而是跟着if判断一起使用</p><p>特点:先判断,再执行,有可以一遍循环都不执行</p><h3 id="2-4-do-while循环"><a href="#2-4-do-while循环" class="headerlink" title="2.4 do-while循环"></a>2.4 do-while循环</h3><p>语法:<br>do<br>{<br>    循环体;<br>}while(循环条件);</p><p>特点:先执行,再判断,至少执行一遍</p><h5 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h5><ul><li>设置断点(在行号前点击空白处)</li><li>单步运行(F11逐语句调试)</li><li>观察变量(鼠标放在变量名上观察)</li><li>F10逐过程调试</li></ul><h3 id="2-5-for循环"><a href="#2-5-for循环" class="headerlink" title="2.5 for循环"></a>2.5 for循环</h3><p>语法:<br>for(表达式1;表达式2;表达式3)<br>{<br>    循环体4;<br>}</p><p>表达式1:一般为声明循环变量,记录循环的次数(int i = 0;)<br>表达式2:一般为循环条件<br>表达式3:一般为改变循环条件的代码,使循环条件终会不成立,否则就是死循环</p><p>顺序:1-&gt;2-&gt;4-&gt;3-&gt;2-&gt;4-&gt;3-&gt;…</p><p>代码提示: 输入for,再按俩下Tab键</p><h5 id="案例-水仙花数"><a href="#案例-水仙花数" class="headerlink" title="案例: 水仙花数"></a>案例: 水仙花数</h5><p>案例描述:输出三位数的水仙花数(水仙花数:每位数字的三次方的和等于原数字)</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 水仙花数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> bai = i / <span class="number">100</span>;</span><br><span class="line">                <span class="built_in">int</span> shi = i % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">                <span class="built_in">int</span> ge = i % <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span> (bai*bai*bai+shi*shi*shi+ge*ge*ge==i)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;&#123;0&#125;\t&quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-for循环嵌套"><a href="#2-6-for循环嵌套" class="headerlink" title="2.6 for循环嵌套"></a>2.6 for循环嵌套</h3><h5 id="案例-九九乘法表"><a href="#案例-九九乘法表" class="headerlink" title="案例: 九九乘法表"></a>案例: 九九乘法表</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 九九乘法表</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(<span class="string">&quot;&#123;0&#125;x&#123;1&#125;=&#123;2&#125;\t&quot;</span>, j, i, i * j);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();<span class="comment">//换行</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-类型转换"><a href="#2-7-类型转换" class="headerlink" title="2.7 类型转换"></a>2.7 类型转换</h3><p>int.TryParse:尝试将一个字符串转换成int类型</p><p>eg:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//参数 返回值</span></span><br><span class="line"><span class="built_in">bool</span> b = <span class="built_in">int</span>.TryParse(<span class="string">&quot;123&quot;</span>,<span class="keyword">out</span> number);</span><br><span class="line">Console.WriteLine(b);</span><br><span class="line">Console.WriteLine(number);</span><br><span class="line"><span class="comment">//转换成功:b = True number = 123</span></span><br><span class="line"><span class="comment">//转换失败:b = False number = 0</span></span><br></pre></td></tr></table></figure><h5 id="案例-质数"><a href="#案例-质数" class="headerlink" title="案例: 质数"></a>案例: 质数</h5><p>案例描述:<br>找出100以内的所有质数(质数/素数:只能被1和本身整除的数字,比如:2)</p><p>提示:<br>continue用法:<br>结束本次循环,判断循环条件,如果成立则进入下一次循环,否则退出循环</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 质数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)<span class="comment">//计算质数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> b = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">2</span>;j&lt;i;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        b = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(b)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-8-三元表达式"><a href="#2-8-三元表达式" class="headerlink" title="2.8 三元表达式"></a>2.8 三元表达式</h3><p>语法: <code>表达式1?表达式2:表达式3;</code></p><p>表达式1一般为一个关系表达式<br>如果1为True,结果为2的值;如果1为False,结果为3的值<br>2与3与整个三元表达式类型须一致</p><h5 id="案例-随机数"><a href="#案例-随机数" class="headerlink" title="案例: 随机数"></a>案例: 随机数</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 随机数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//产生随机数</span></span><br><span class="line">                <span class="comment">//1.创建产生随机数的对象</span></span><br><span class="line">                Random r = <span class="keyword">new</span> Random();</span><br><span class="line">                <span class="comment">//2.让产生随机数的对象调用方法来产生随机数</span></span><br><span class="line">                <span class="built_in">int</span> rNumber = r.Next(<span class="number">1</span>, <span class="number">11</span>);<span class="comment">//产生1~10的随机数</span></span><br><span class="line">                Console.WriteLine(rNumber);</span><br><span class="line">                Console.ReadKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-复杂数据类型"><a href="#3-复杂数据类型" class="headerlink" title="3 复杂数据类型"></a>3 复杂数据类型</h2><h3 id="3-1-常量"><a href="#3-1-常量" class="headerlink" title="3.1 常量"></a>3.1 常量</h3><p>不能被重新赋值</p><p>语法: <code>const 变量类型 变量名 = 值;</code></p><h3 id="3-2-枚举"><a href="#3-2-枚举" class="headerlink" title="3.2 枚举"></a>3.2 枚举</h3><p>语法: <code>[public] enum 枚举名&#123;    值1,    值2,    值3,    ...&#125;</code></p><p>public: 访问修饰符,公开的,哪都可以访问<br>enum: 声明枚举的关键字<br>枚举名: Pascal命名规范</p><blockquote><p>枚举就是一个变量类型,只是枚举声明、赋值、使用的方式与普通变量类型不同</p></blockquote><p>枚举类型和string、int类型之间转换:</p><ul><li>枚举类型与int类型是兼容的(枚举从0开始),可以使用强制类型转换相互转换</li><li>int类型转枚举:超出枚举范围直接输出int值</li><li>Enum.Parse(typeof(要转换的枚举类型即枚举名),”要转换的字符串”)字符串转换为枚举类型<ul><li>如果转换的字符串是数字且枚举中没有,不会抛异常</li><li>如果转换的是文本且枚举中没有,会抛异常</li></ul></li><li>所有类型都可以转换为string类型 调用ToString()</li></ul><p>代码:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 枚举</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Gender</span><br><span class="line">    &#123;</span><br><span class="line">        男,</span><br><span class="line">        女</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Enum.Parse(typeof(要转换的枚举类型),&quot;要转换的字符串&quot;)转换为枚举类型</span></span><br><span class="line">            <span class="comment">//所有类型都可以转换为string类型 调用ToString()</span></span><br><span class="line">            Gender gender = Gender.男;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="3-3-结构"><a href="#3-3-结构" class="headerlink" title="3.3 结构"></a>3.3 结构</h3><p>作用: 一次性声明多个不同类型的变量</p><p>语法: <code>[public] struct 结构名&#123;    成员;//字段&#125;</code></p><p>字段可以存储多个值,规范上每个字段前加一个下划线<code>_</code></p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 结构</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> Person</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> _name;<span class="comment">//字段</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _age;</span><br><span class="line">        <span class="keyword">public</span> Gender _gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> Gender</span><br><span class="line">    &#123;</span><br><span class="line">        男,</span><br><span class="line">        女</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person zsPerson;</span><br><span class="line">            zsPerson._name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">            zsPerson._age = <span class="number">11</span>;</span><br><span class="line">            zsPerson._gender = Gender.男;</span><br><span class="line">            Console.WriteLine(zsPerson._name);</span><br><span class="line">            Console.WriteLine(zsPerson._age);</span><br><span class="line">            Console.WriteLine(zsPerson._gender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-数组"><a href="#3-4-数组" class="headerlink" title="3.4 数组"></a>3.4 数组</h3><p>一次性存储多个相同类型的变量</p><p>语法: <code>数组类型[] 数组名=new 数组类型[数组长度];</code></p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 数组</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] nums = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">int</span>[] numsTwo = &#123; <span class="number">1</span>, <span class="number">2</span>,<span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            Array.Sort(numsTwo);<span class="comment">//升序排列</span></span><br><span class="line">            Array.Reverse(numsTwo);<span class="comment">//反转数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>将数组中的元素从大到小或者从小到大进行排序</p><p>代码:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 冒泡排序</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] number = &#123; <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; number.Length<span class="number">-1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;number.Length-i<span class="number">-1</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(number[j]&gt;number[j+<span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> temp = number[j + <span class="number">1</span>];</span><br><span class="line">                        number[j + <span class="number">1</span>] = number[j];</span><br><span class="line">                        number[j] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; number.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(number[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-5-方法-函数"><a href="#3-5-方法-函数" class="headerlink" title="3.5 方法(函数)"></a>3.5 方法(函数)</h3><p>函数就是将一堆代码进行重用的一种机制</p><p>语法:<br><code>[public] static 返回值类型 方法名 ([参数列表])&#123;    方法体;&#125;</code></p><p>static: 静态的<br>方法名: Pascal命名规则</p><p>方法写好后需在Main()函数中调用<br>调用语法:<code>类名.方法名([参数]);</code></p><blockquote><p>如果你写的方法跟Main()函数同在一个类(Program)中,类名可以省略</p></blockquote><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> max=Program.GetMax(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(max);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求俩个数最大值并返回</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;n1&quot;&gt;</span>第一个整数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;n2&quot;&gt;</span>第二个整数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>最大值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetMax</span>(<span class="params"><span class="built_in">int</span> n1,<span class="built_in">int</span> n2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n1 &gt; n2 ? n1 : n1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return作用:<br>1.在方法中返回要返回的函数值<br>2.立即结束本方法</p><p>调用者:Main()函数中调用其他方法;被调用者:其他方法</p><p>如果被调用者要使用调用者的值:</p><ul><li>传递参数</li><li>使用静态字段来模拟全局变量 <code>public static int _number = 10;</code>(函数外,Program类中) </li></ul><p>如果调用者要得到被调用者的值:</p><ul><li>返回值</li></ul><p>不管是实参还是形参都是在内存中开辟了空间的</p><p>方法的功能一定是单一的,方法中最忌讳的就是出现提示用户输入的字眼</p><h4 id="3-5-1-out参数"><a href="#3-5-1-out参数" class="headerlink" title="3.5.1 out参数"></a>3.5.1 out参数</h4><p>返回多个类型相同的值的时候,可以考虑返回一个数组<br>返回对个不同类型的值的时候,可以考虑使用out参数</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">//out 参数：可以返回多个不同的值</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">out</span>参数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">            <span class="built_in">int</span>[] res = GetMaxMinSumAvg(numbers);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最大值是&#123;0&#125;，最小值是&#123;1&#125;，总和是&#123;2&#125;，平均值是&#123;3&#125;&quot;</span>,res[<span class="number">0</span>],res[<span class="number">1</span>],res[<span class="number">2</span>],res[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> max;</span><br><span class="line">            <span class="built_in">int</span> min;</span><br><span class="line">            <span class="built_in">int</span> sum;</span><br><span class="line">            <span class="built_in">int</span> avg;</span><br><span class="line">            <span class="built_in">bool</span> b;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">double</span> d;</span><br><span class="line">            Test(numbers, <span class="keyword">out</span> max, <span class="keyword">out</span> min, <span class="keyword">out</span> sum, <span class="keyword">out</span> avg,<span class="keyword">out</span> b,<span class="keyword">out</span> s,<span class="keyword">out</span> d);</span><br><span class="line">            Console.WriteLine(max);</span><br><span class="line">            Console.WriteLine(min);</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">            Console.WriteLine(avg);</span><br><span class="line">            Console.WriteLine(b);</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">            Console.WriteLine(d);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求数组最大最小总和平均值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nums&quot;&gt;</span>传入数据数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回的数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span>[] <span class="title">GetMaxMinSumAvg</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] res = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line">            res[<span class="number">0</span>] = nums[<span class="number">0</span>];<span class="comment">//max</span></span><br><span class="line">            res[<span class="number">1</span>] = nums[<span class="number">0</span>];<span class="comment">//min</span></span><br><span class="line">            res[<span class="number">2</span>] = <span class="number">0</span>;<span class="comment">//sum</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;nums.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;res[<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    res[<span class="number">0</span>] = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;res[<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    res[<span class="number">1</span>] = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                res[<span class="number">2</span>] += nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//平均值</span></span><br><span class="line">            res[<span class="number">3</span>] = res[<span class="number">2</span>] / nums.Length;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求数组最大最小总和平均值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nums&quot;&gt;</span>传入数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;max&quot;&gt;</span>多余返回的最大值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;min&quot;&gt;</span>多余返回的最小值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sum&quot;&gt;</span>多余返回的总和<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;avg&quot;&gt;</span>多余返回的平均值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">int</span>[] nums, <span class="keyword">out</span> <span class="built_in">int</span> max, <span class="keyword">out</span> <span class="built_in">int</span> min, <span class="keyword">out</span> <span class="built_in">int</span> sum, <span class="keyword">out</span> <span class="built_in">int</span> avg, <span class="keyword">out</span> <span class="built_in">bool</span> b, <span class="keyword">out</span> <span class="built_in">string</span> s, <span class="keyword">out</span> <span class="built_in">double</span> d</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//out 参数要求在方法内给初值</span></span><br><span class="line">            max = nums[<span class="number">0</span>];<span class="comment">//max</span></span><br><span class="line">            min = nums[<span class="number">0</span>];<span class="comment">//min</span></span><br><span class="line">            sum = <span class="number">0</span>;<span class="comment">//sum</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; max)</span><br><span class="line">                &#123;</span><br><span class="line">                    max = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt; min)</span><br><span class="line">                &#123;</span><br><span class="line">                    min = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                sum += nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//平均值</span></span><br><span class="line">            avg = sum / nums.Length;</span><br><span class="line">            b = <span class="literal">true</span>;</span><br><span class="line">            s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">            d = <span class="number">3.14</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-ref参数"><a href="#3-5-2-ref参数" class="headerlink" title="3.5.2 ref参数"></a>3.5.2 ref参数</h4><p>能够将一个变量带入一个方法中进行改变,改变完成后,再将改变后的值带出方法</p><p>要求:在方法外必须赋初值</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ref</span>参数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> salary = <span class="number">5000</span>;</span><br><span class="line">            JiangJin(<span class="keyword">ref</span> salary);</span><br><span class="line">            Console.WriteLine(salary);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JiangJin</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">double</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s += <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FaKuan</span>(<span class="params"><span class="built_in">double</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s -= <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5500</span></span><br></pre></td></tr></table></figure><h4 id="3-5-3-params可变参数"><a href="#3-5-3-params可变参数" class="headerlink" title="3.5.3 params可变参数"></a>3.5.3 params可变参数</h4><p>将实参列表中跟可变参数数组类型一致的元素都当做数组的元素去处理</p><p>params可变参数只能做最后一个参数且只能有一个</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">params</span>参数<span class="comment">//可变参数params 只能做成最后一个参数且只能有一个</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] score = &#123; <span class="number">98</span>,<span class="number">78</span>,<span class="number">90</span> &#125;;</span><br><span class="line">            Test(<span class="string">&quot;张三&quot;</span>, <span class="number">360</span>,<span class="number">98</span>, <span class="number">78</span>, <span class="number">90</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> id,<span class="keyword">params</span> <span class="built_in">int</span>[] score</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;score.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += score[i];</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;这次考试的总成绩是&#123;1&#125;，学号为&#123;2&#125;&quot;</span>, name, sum,id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//张三这次考试的总成绩是266，学号为360</span></span><br></pre></td></tr></table></figure><h4 id="3-5-4-方法的重载"><a href="#3-5-4-方法的重载" class="headerlink" title="3.5.4 方法的重载"></a>3.5.4 方法的重载</h4><p>方法的重载指的是方法的名称相同、参数不同</p><ul><li>参数个数相同,类型就不能相同</li><li>参数类型相同,个数就不能相同</li></ul><h4 id="3-5-5-方法的递归"><a href="#3-5-5-方法的递归" class="headerlink" title="3.5.5 方法的递归"></a>3.5.5 方法的递归</h4><p>递归:方法自己调用自己</p><h5 id="案例-飞行棋"><a href="#案例-飞行棋" class="headerlink" title="案例: 飞行棋"></a>案例: 飞行棋</h5><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">//保留俩位小数(会四舍五入)</span></span><br><span class="line"><span class="comment">//double num=0.12453;</span></span><br><span class="line"><span class="comment">//string s=num.ToString(&quot;0.00&quot;);</span></span><br><span class="line"><span class="comment">//num=Convert.ToDouble(s);</span></span><br><span class="line"><span class="keyword">namespace</span> 飞行棋项目</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span>[] Maps = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">100</span>];<span class="comment">//静态字段模拟全局变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span>[] PlayerPos = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];<span class="comment">//声明一个静态数组存储玩家坐标</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>[] PlayerNames = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">2</span>];<span class="comment">//存储玩家姓名</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span>[] Flags = <span class="keyword">new</span> <span class="built_in">bool</span>[<span class="number">2</span>];<span class="comment">//Flags[0]=false,Flags[1]=false;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameShow();</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 输入姓名</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入玩家A的姓名:&quot;</span>);</span><br><span class="line">            PlayerNames[<span class="number">0</span>] = Console.ReadLine();</span><br><span class="line">            <span class="keyword">while</span>(PlayerNames[<span class="number">0</span>]==<span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;玩家A的姓名不能为空&quot;</span>);</span><br><span class="line">                PlayerNames[<span class="number">0</span>] = Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入玩家B的姓名:&quot;</span>);</span><br><span class="line">            PlayerNames[<span class="number">1</span>] = Console.ReadLine();</span><br><span class="line">            <span class="keyword">while</span> (PlayerNames[<span class="number">1</span>] == <span class="string">&quot;&quot;</span>||PlayerNames[<span class="number">1</span>]==PlayerNames[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(PlayerNames[<span class="number">1</span>]==<span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;玩家A的姓名不能为空&quot;</span>);</span><br><span class="line">                    PlayerNames[<span class="number">1</span>] = Console.ReadLine();</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;玩家B的姓名不能跟A的相同，请重新输入&quot;</span>);</span><br><span class="line">                    PlayerNames[<span class="number">1</span>] = Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            <span class="comment">//玩家姓名输入完成后首先清屏</span></span><br><span class="line">            Console.Clear();</span><br><span class="line">            GameShow();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;的士兵用A表示&quot;</span>,PlayerNames[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;的士兵用B表示&quot;</span>,PlayerNames[<span class="number">1</span>]);</span><br><span class="line">            InitailMap();</span><br><span class="line">            DrawMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(PlayerPos[<span class="number">0</span>]&lt;<span class="number">99</span>&amp;&amp;PlayerPos[<span class="number">1</span>]&lt;<span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Flags[<span class="number">0</span>]==<span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PlayGame(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Flags[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(PlayerPos[<span class="number">0</span>]&gt;=<span class="number">99</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;胜利&quot;</span>,PlayerNames[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Flags[<span class="number">1</span>] == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PlayGame(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Flags[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (PlayerPos[<span class="number">1</span>] &gt;= <span class="number">99</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;胜利&quot;</span>, PlayerNames[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 游戏头</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GameShow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Blue;<span class="comment">//添加颜色</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;*******飞行棋项目*******&quot;</span>);</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Gray;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化地图</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitailMap</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] luckyturn = &#123; <span class="number">6</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">83</span> &#125;;<span class="comment">//幸运圆盘◎</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;luckyturn.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//int index = luckyturn[i];</span></span><br><span class="line">                Maps[luckyturn[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span>[] landMine = &#123; <span class="number">5</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">38</span>, <span class="number">50</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">94</span> &#125;;<span class="comment">//地雷☆</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; landMine.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Maps[landMine[i]] = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span>[] pause = &#123; <span class="number">9</span>, <span class="number">27</span>, <span class="number">60</span>, <span class="number">93</span> &#125;;<span class="comment">//暂停▲</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pause.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Maps[pause[i]] = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span>[] timeTunnel = &#123; <span class="number">20</span>, <span class="number">25</span>, <span class="number">45</span>, <span class="number">63</span>, <span class="number">72</span>, <span class="number">88</span>, <span class="number">90</span> &#125;;<span class="comment">//时空隧道卐</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; timeTunnel.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Maps[timeTunnel[i]] = <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 画地图</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawMap</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;图例：幸运圆盘：◎  地雷：☆  暂停：▲  时空隧道：卐 &quot;</span>);</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 第一横行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">            &#125;<span class="comment">//for</span></span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            <span class="comment">//画完第一行需换行</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 第一竖行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">30</span>;i&lt;<span class="number">35</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">28</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 第二横行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">64</span>;i&gt;=<span class="number">35</span>;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 第二竖行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">65</span>;i&lt;=<span class="number">69</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(DrawStringMap(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 第三横行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">70</span>;i&lt;=<span class="number">99</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;<span class="comment">//DrawMap</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 从画地图方法中抽象出来的一个方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;i&quot;&gt;</span>位置坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DrawStringMap</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 画图</span></span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[<span class="number">0</span>] == PlayerPos[<span class="number">1</span>] &amp;&amp; PlayerPos[<span class="number">1</span>] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                str=<span class="string">&quot;&lt;&gt;&quot;</span>;<span class="comment">//玩家坐标相同并且都在地图上</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (PlayerPos[<span class="number">0</span>] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                str=<span class="string">&quot;Ａ&quot;</span>;<span class="comment">//shift+空格 切全角</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (PlayerPos[<span class="number">1</span>] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                str=<span class="string">&quot;Ｂ&quot;</span>;<span class="comment">//shift+空格 切全角</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (Maps[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">                        str = <span class="string">&quot;□&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">                        str = <span class="string">&quot;◎&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Cyan;</span><br><span class="line">                        str = <span class="string">&quot;☆&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                        str = <span class="string">&quot;▲&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Blue;</span><br><span class="line">                        str=<span class="string">&quot;卐&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//switch</span></span><br><span class="line">            &#125;<span class="comment">//else</span></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 玩游戏</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PlayGame</span>(<span class="params"><span class="built_in">int</span> playerNumber</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="built_in">int</span> rNumber = r.Next(<span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;按任意键开始掷骰子&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;掷出了&#123;1&#125;&quot;</span>, PlayerNames[playerNumber],rNumber);</span><br><span class="line">            PlayerPos[playerNumber] += rNumber;</span><br><span class="line">            ChangePos();</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;按任意键继续行动&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;行动完了&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">            Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[playerNumber] == PlayerPos[<span class="number">1</span>- playerNumber])</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到玩家&#123;1&#125;，玩家&#123;2&#125;退6格&quot;</span>, PlayerNames[playerNumber], PlayerNames[<span class="number">1</span>- playerNumber], PlayerNames[<span class="number">1</span>- playerNumber]);</span><br><span class="line">                PlayerPos[<span class="number">1</span>- playerNumber] -= <span class="number">6</span>;</span><br><span class="line">                ChangePos();</span><br><span class="line">                Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//关卡</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//玩家坐标</span></span><br><span class="line">                <span class="keyword">switch</span> (Maps[PlayerPos[playerNumber]])<span class="comment">//0 1 2 3 4</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到了方块，安全&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">                        Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到了幸运圆盘，请选择：1--交换位置，2--轰炸对方&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">                        <span class="built_in">string</span> input = Console.ReadLine();</span><br><span class="line">                        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (input == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;与玩家&#123;1&#125;交换位置&quot;</span>, PlayerNames[playerNumber], PlayerNames[<span class="number">1</span>- playerNumber]);</span><br><span class="line">                                Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                                <span class="built_in">int</span> temp = PlayerPos[playerNumber];</span><br><span class="line">                                PlayerPos[playerNumber] = PlayerPos[<span class="number">1</span>- playerNumber];</span><br><span class="line">                                PlayerPos[<span class="number">1</span>- playerNumber] = temp;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;交换完成，按任意键继续!!!&quot;</span>);</span><br><span class="line">                                Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;轰炸玩家&#123;1&#125;，玩家&#123;2&#125;退6格&quot;</span>, PlayerNames[playerNumber], PlayerNames[<span class="number">1</span>- playerNumber], PlayerNames[<span class="number">1</span>- playerNumber]);</span><br><span class="line">                                Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                                PlayerPos[<span class="number">1</span>- playerNumber] -= <span class="number">6</span>;</span><br><span class="line">                                ChangePos();</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;退了6格&quot;</span>, PlayerNames[<span class="number">1</span>- playerNumber]);</span><br><span class="line">                                Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;只能输入1或者2 :1--交换位置，2--轰炸对方&quot;</span>);</span><br><span class="line">                                input = Console.ReadLine();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到了地雷，退6格&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">                        Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                        PlayerPos[playerNumber] -= <span class="number">6</span>;</span><br><span class="line">                        ChangePos();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到了暂停，暂停一回合&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">                        Flags[playerNumber] = <span class="literal">true</span>;</span><br><span class="line">                        Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;玩家&#123;0&#125;踩到了时空隧道，前进10格&quot;</span>, PlayerNames[playerNumber]);</span><br><span class="line">                        PlayerPos[playerNumber] += <span class="number">10</span>;</span><br><span class="line">                        ChangePos();</span><br><span class="line">                        Console.ReadKey(<span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//switch</span></span><br><span class="line">            &#125;<span class="comment">//else</span></span><br><span class="line">            ChangePos();</span><br><span class="line">            Console.Clear();</span><br><span class="line">            DrawMap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 玩家坐标发生改变时调用</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChangePos</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[<span class="number">0</span>]&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerPos[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[<span class="number">0</span>] &gt;<span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerPos[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[<span class="number">1</span>] &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerPos[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (PlayerPos[<span class="number">1</span>] &gt; <span class="number">99</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerPos[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 反转数组内容</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;names&quot;&gt;</span>传入数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span>[] names</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; names.Length / <span class="number">2</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> temp = names[i];</span><br><span class="line">                names[i] = names[names.Length - <span class="number">1</span> - i];</span><br><span class="line">                names[names.Length - <span class="number">1</span> - i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-面向对象"><a href="#4-面向对象" class="headerlink" title="4 面向对象"></a>4 面向对象</h2><p>面向对象意在写出一个通用的代码屏蔽差异</p><p>描述一个对象通常描述这个对象的属性和方法</p><p>类:将具有相同属性和方法的对象进一步封装,抽象出类的概念</p><p>对象是根据类创建出来的</p><h3 id="4-1-类"><a href="#4-1-类" class="headerlink" title="4.1 类"></a>4.1 类</h3><p>语法:<br><code>[public] class 类名&#123;    字段(Fiels);    属性(Property);    方法(Method);&#125;</code></p><p>添加类:需要添加类的项目-&gt;右键-&gt;添加-&gt;类(.cs)</p><p>写好一个类之后,我们需要创建这个类的对象,我们称创建类的过程称为类的实例化,使用关键字<code>new</code></p><p>类不占内存，对象占内存</p><p>属性的作用就是保护字段、对字段的赋值和取值进行限定。<br>属性的本质就是get(读)和set(写)俩个方法</p><p>访问修饰符:</p><ul><li>public:公开的,在哪都能访问</li><li>private:私有的,只能在当前类的内部进行访问,出了这个类就访问不到</li></ul><p>静态与非静态的区别:<br>1.在非静态类中,既可以有实例成员,也可以有静态成员<br>2.在调用实例成员时,需要使用<code>对象名.实例成员</code><br>  在调用静态成员时,需要使用<code>类名.静态成员名</code></p><p>总结:</p><ul><li>静态成员必须使用类名区调用,而实例成员使用对象名区调用</li><li>静态函数中,只能访问静态成员,不允许访问实例成员</li><li>实例函数中,既可以访问静态成员,也可以访问实例成员</li><li>静态类中只允许有静态成员,不允许出现实例成员</li></ul><p>使用:<br>1.如果你需要将你的类当做一个工具类使用时可以考虑将类写成静态的<br>2.静态类在整个项目中资源共享<br>只有在程序全部结束后静态类才会释放资源</p><p>堆、栈 静态存储区域</p><p>释放资源:GC</p><p>构造函数:<br>创建对象时会执行构造函数<br>构造函数可以有重载<br>作用:帮助我们初始化对象<br>构造函数是一个特殊的方法:<br>1.没有返回值,连void也不用写<br>2.名称必须跟类名一样</p><p>类中有一个默认的无参数的构造函数,当你写了一个新的构造函数会替代原先的构造函数</p><p>new关键字帮我们干的3件事:<br>1.在内存中开辟一块空间<br>2.在开辟的空间中创建对象<br>3.调用对象的构造函数进行初始化对象</p><p>this关键字:<br>1.代表当前类的对象<br>2.在类中显示调用本类的构造函数 <code>:this</code></p><p>析构函数:<br>当程序结束时,析构函数才执行<br>作用:帮助我们释放资源</p><p>Person.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 面向对象初级</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span><span class="comment">//工具类使用静态类,静态类在整个项目中资源共享</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">        ~Person()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;析构函数调用&quot;</span>);<span class="comment">//帮助我们释放资源</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> age,<span class="built_in">char</span> gender</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._name = name;</span><br><span class="line">            <span class="keyword">this</span>._age = age;</span><br><span class="line">            <span class="keyword">this</span>._gender = gender;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>):<span class="title">this</span>(<span class="params">name,age,<span class="string">&#x27;男&#x27;</span></span>)<span class="comment">//this：在类中显示调用本类的构造函数 优点：减少代码重复量</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//this._name = name;</span></span><br><span class="line">            <span class="comment">//this._age = age;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">        <span class="comment">//属性 保护字段</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">get</span>&#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">value</span>&lt;<span class="number">0</span>||<span class="keyword">value</span>&gt;<span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">char</span> _gender;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">char</span> Gender</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(_gender!=<span class="string">&#x27;男&#x27;</span>&amp;&amp;_gender!=<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> _gender = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _gender; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _gender = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CHLSS</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;,&#123;1&#125;岁,&#123;2&#125;,会吃喝拉撒睡&quot;</span>,<span class="keyword">this</span>.Name,<span class="keyword">this</span>.Age,<span class="keyword">this</span>.Gender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Program.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 面向对象初级</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建类的对象   -&gt; 类的实例化</span></span><br><span class="line">            <span class="comment">//类不占内存，对象占内存</span></span><br><span class="line">            Person sunQuan = <span class="keyword">new</span> Person(<span class="string">&quot;孙权&quot;</span>,<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">            sunQuan.CHLSS();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//孙权,18岁,男,会吃喝拉撒睡</span></span><br></pre></td></tr></table></figure></p><h3 id="4-2-命名空间"><a href="#4-2-命名空间" class="headerlink" title="4.2 命名空间"></a>4.2 命名空间</h3><p>导入类所在命名空间:<br>1.用鼠标点<br>2.alt+shift+F10<br>3.记住常见类的命名空间,手敲</p><p>一个项目中引用另一个项目的类<br>1.添加引用:引用-&gt;右键-&gt;引用<br>2.引用命名空间 <code>using 命名空间;</code></p><h3 id="4-3-值类型和引用类型"><a href="#4-3-值类型和引用类型" class="headerlink" title="4.3 值类型和引用类型"></a>4.3 值类型和引用类型</h3><p>区别:<br>1.在内存上存储的地方不一样<br>2.在传递值类型和传递引用类型时,传递的方式不同(值传递和引用传递)</p><p>值传递:int、double、bool、char、decimal、struct、enum<br>引用传递:string、自定义类、数组</p><p>存储:<br>值类型的值是存储在内存的栈当中<br>引用类型的值是存储在内存的堆中</p><h3 id="4-4-字符串"><a href="#4-4-字符串" class="headerlink" title="4.4 字符串"></a>4.4 字符串</h3><p>1.字符串的不可变性(当重新给一个字符串赋值后,原来值并没用销毁,而是重新开辟一块内存存储新值)<br>当程序结束后,GC扫描整个内存,如果发现有的空间没有被指向,立即将它销毁</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//字符串的不可变性 </span></span><br><span class="line">            <span class="built_in">string</span> s1 = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> s2 = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.可以将字符串看成是char类型的只读数组,可以通过下标访问字符串中的一个元素</p><ul><li>将字符串转换为char类型数组 <code>字符串.ToCharArray()</code></li><li>将字符数组转换为字符串 <code>new string(字符数组)</code></li></ul><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//可以将字符串看成是char类型的只读数组</span></span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">            Console.WriteLine(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//s[0] = &#x27;b&#x27;;不能这样做</span></span><br><span class="line">            <span class="comment">//首先将字符串转换为char类型数组</span></span><br><span class="line">            <span class="built_in">char</span>[] chs = s.ToCharArray();</span><br><span class="line">            chs[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">            <span class="comment">//将字符数组转换为字符串</span></span><br><span class="line">            s = <span class="keyword">new</span> <span class="built_in">string</span>(chs);</span><br><span class="line">            Console.WriteLine(s[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b</span></span><br><span class="line"><span class="comment">//bbcdef</span></span><br></pre></td></tr></table></figure><p>StringBuilder:不开内存空间,比string快<br>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();<span class="comment">//同一块内存</span></span><br><span class="line">            <span class="built_in">string</span> str = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//创建计时器,用来记录程序运行的时间</span></span><br><span class="line">            Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            sw.Start();<span class="comment">//开始计时</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//str += i;</span></span><br><span class="line">                sb.Append(i);</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();<span class="comment">//结束计时</span></span><br><span class="line">            Console.WriteLine(sb.ToString());</span><br><span class="line">            Console.WriteLine(sw.Elapsed);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>s.ToUpper() 转换为大写<br>s.ToLower() 转换为小写<br>s1.Equals(s1,StringComparison.OrdinalIgnoreCase) 比较 StringComparison.OrdinalIgnoreCase:忽略比较字符串大小写</p><p><strong>分割字符串:</strong>s.Split(chs,StringSplitOptions.RemoveEmptyEntries) chs:需要移除的字符数组 StringSplitOptions.RemoveEmptyEntries:去除空项<br>返回字符串类型数组</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//字符串分割Split()返回字符串类型数组</span></span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;a b    dfd    _+   =  ,,, fdf&quot;</span>;</span><br><span class="line">            <span class="built_in">char</span>[] chs = &#123; <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;,&#x27;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span>[] str = s.Split(chs,StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>s1.Contains(s2) s1包含s2<br>s.Replace(要替换的内容,替换成为的内容) 替换</p><p>代码:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;国家关键人物老赵&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(str.Contains(<span class="string">&quot;老赵&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                str = str.Replace(<span class="string">&quot;老赵&quot;</span>, <span class="string">&quot;**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>s.SubString(起始位置0开始,截取个数) 截取字符串</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//SubString 截取字符串</span></span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;今天天气好晴朗，处处好风光&quot;</span>;</span><br><span class="line">            str = str.Substring(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//天天</span></span><br></pre></td></tr></table></figure><p>s.StartsWith(str) 以什么开始,返回bool类型<br>s.EndsWith(str) 以什么结尾,返回bool类型</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;今天天气好晴朗，处处好风光&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(str.StartsWith(<span class="string">&quot;今天&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;不是&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>str.IndexOf(字符串,开始查找位置包括当前位置); 判读该字符串第一次出现位置,从0开始<br>str.LastIndexOf(字符串,开始查找位置包括当前位置); 判断该字符串最后出现位置,从0开始</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;今天天气好晴朗，处处好风光&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> index = str.IndexOf(<span class="string">&#x27;天&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">int</span> index1 = str.LastIndexOf(<span class="string">&#x27;天&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">            Console.WriteLine(index);</span><br><span class="line">            Console.WriteLine(index1);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>str.Trim(); 去空格 返回string类型<br>str.TrimStart(); 去前面空格 返回string类型<br>str.TrimEnd(); 去后面空格 返回string类型</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;      hahaha     &quot;</span>;</span><br><span class="line">            <span class="comment">//str = str.Trim();</span></span><br><span class="line">            <span class="comment">//str = str.TrimStart();</span></span><br><span class="line">            str = str.TrimEnd();</span><br><span class="line">            Console.Write(str);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string.IsNullOrEmpty(str) 判断字符串是否为NULL或Empty</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(str))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;是的&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;不是&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string.Join(字符串, 可变数组); 将数组按照指定的字符串连接,返回一个字符串</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] names = &#123; <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> strNew = <span class="built_in">string</span>.Join(<span class="string">&quot;|&quot;</span>, names);</span><br><span class="line">            Console.WriteLine(strNew);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-字符串使用"><a href="#案例-字符串使用" class="headerlink" title="案例: 字符串使用"></a>案例: 字符串使用</h5><p>案例描述:<br>文本文件中存储了多个文章标题、作者，<br>标题和作者之间用若干空格(数量不定)隔开，每行一个，<br>标题有的长有的短，输出到控制台的时候最多标题长度10.<br>如果超过10，则截取长度8的子串并且最后添加“…”，加一个竖线后输出作者的名字。</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 字符串</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> path = <span class="string">@&quot;文件路径&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span>[] contents = File.ReadAllLines(path, Encoding.Default);</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;contents.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span>[] strNew = contents[i].Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27; &#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">                Console.WriteLine((strNew[<span class="number">0</span>].Length &gt; <span class="number">10</span> ? strNew[<span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">8</span>)+<span class="string">&quot;......r&quot;</span>: strNew[<span class="number">0</span>]) + <span class="string">&quot;|&quot;</span> + strNew[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-继承"><a href="#4-5-继承" class="headerlink" title="4.5 继承"></a>4.5 继承</h3><p>子类  派生类<br>父类  基类<br>子类继承了父类,继承了父类的属性和方法,但是子类没有继承父类的私有字段</p><p>继承的特性:<br>1.单根性:一个子类只能有一个父类<br>2.传递性</p><p>子类并没有继承父类的构造函数,但是子类会默认调用父类无参数的构造函数创建父类对象,让子类可以使用父类中的成员。所以,如果在父类中重新写了一个有参数的构造函数后,那个无参数的就被干掉了,子类就调用不到了,所以子类会报错。<br>解决方法:<br>1.在父类中重新写一个无参数的构造函数<br>2.在子类中显示的调用父类的构造函数,使用关键字<code>:base()</code></p><p>object是所有类的基类</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 继承</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Reporter rep = <span class="keyword">new</span> Reporter(<span class="string">&quot;狗仔&quot;</span>, <span class="number">34</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&quot;偷拍&quot;</span>);</span><br><span class="line">            rep.ReporterSayHello();</span><br><span class="line">            Programmer pro = <span class="keyword">new</span> Programmer(<span class="string">&quot;程序猿&quot;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">            pro.ProgrammerSayHello();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">char</span> _gender;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">char</span> Gender</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _gender; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _gender = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age,<span class="built_in">char</span> gender</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.Age = age;</span><br><span class="line">            <span class="keyword">this</span>.Gender = gender;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;大家好，我是人类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Reporter</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Reporter</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> age,<span class="built_in">char</span> gender,<span class="built_in">string</span> hobby</span>)</span></span><br><span class="line"><span class="function">            :<span class="title">base</span>(<span class="params">name,age,gender</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Hobby = hobby;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _hobby;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Hobby</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _hobby; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _hobby = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReporterSayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我叫&#123;0&#125;，我是一名记者，我的爱好是&#123;1&#125;，我是&#123;2&#125;生，我今年&#123;3&#125;岁&quot;</span>, <span class="keyword">this</span>.Name, <span class="keyword">this</span>.Hobby, <span class="keyword">this</span>.Gender, <span class="keyword">this</span>.Age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;大家好，我是记者&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Programmer</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Programmer</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">char</span> gender, <span class="built_in">int</span> workYear</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">name, age, gender</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.WorkYear = workYear;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _workYear;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> WorkYear</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _workYear; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _workYear = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProgrammerSayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我叫&#123;0&#125;，我是一名程序员，我是&#123;1&#125;生，我今年&#123;2&#125;岁,我的工作年限是&#123;3&#125;年&quot;</span>, <span class="keyword">this</span>.Name,  <span class="keyword">this</span>.Gender, <span class="keyword">this</span>.Age,<span class="keyword">this</span>.WorkYear);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">SayHello</span>()<span class="comment">//new ：隐藏从父类那里继承来的成员</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;大家好，我是程序猿&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new关键字:<br>1.创建对象<br>2.隐藏从父类继承过来的同名成员    隐藏后果:子类调用不到父类的成员</p><h3 id="4-6-里氏转换"><a href="#4-6-里氏转换" class="headerlink" title="4.6 里氏转换"></a>4.6 里氏转换</h3><p>1.子类可以赋值给父类     如果有一个地方需要父类作为参数,我们可以给一个子类代替<br>2.如果父类中装的是子类对象,那么可以将这个父类强转为子类对象</p><p>子类对象可以调用父类的成员,但是父类对象只能调用自己的成员</p><p>is: 表示类型转换,如果能转换成功,则返回true,不能转换成功返回false<br>as: 表示类型转换,如果能够转换则返回对应的对象,否则返回一个NULL</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 里氏转换</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1.子类可以赋值给父类：如果有一个地方需要父类作为参数，我们可以给一个子类代替</span></span><br><span class="line">            <span class="comment">//Student s = new Student();</span></span><br><span class="line">            <span class="comment">//Person p = s;</span></span><br><span class="line">            Person p = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//2.如果父类中装的是子类对象，那么可以将这个父类强转为子类对象</span></span><br><span class="line">            <span class="comment">//is用法</span></span><br><span class="line">            <span class="comment">//if(p is Student)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Student ss = (Student)p;</span></span><br><span class="line">            <span class="comment">//    ss.StudentSayHello();</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//else</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Console.WriteLine(&quot;转换失败&quot;);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//as用法</span></span><br><span class="line">            Student t = p <span class="keyword">as</span> Student;</span><br><span class="line">            t.StudentSayHello();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PersonSayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是父类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StudentSayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TeacherSayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是老师&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h5><p>受保护的:可以在当前类的内部以及该类的子类中访问</p><h3 id="4-7-ArrayList集合"><a href="#4-7-ArrayList集合" class="headerlink" title="4.7 ArrayList集合"></a>4.7 ArrayList集合</h3><p>集合好处(相对于数组):<br>1.长度可以任意改变<br>2.类型随意</p><p>我们将一个对象输出到控制台,默认情况下就是打印这个对象的命名空间</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ArrayList</span>集合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            list.Add(<span class="number">1</span>);</span><br><span class="line">            list.Add(<span class="number">3.14</span>);</span><br><span class="line">            list.Add(<span class="literal">true</span>);</span><br><span class="line">            list.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            list.Add(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">            list.Add(<span class="number">5000</span>m);</span><br><span class="line">            list.Add(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;);</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            list.Add(p);</span><br><span class="line">            list.Add(list);</span><br><span class="line">            list.Remove(<span class="literal">true</span>);<span class="comment">//删除单个元素</span></span><br><span class="line">            list.RemoveAt(<span class="number">0</span>);<span class="comment">//根据下标删除元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;list.Count;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(list[i] <span class="keyword">is</span> Person)</span><br><span class="line">                &#123;</span><br><span class="line">                    ((Person)list[i]).SayHello();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] <span class="keyword">is</span> <span class="built_in">int</span>[])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>;j&lt;((<span class="built_in">int</span>[])list[i]).Length;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(((<span class="built_in">int</span>[])list[i])[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(list[i]);</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            list.Clear();<span class="comment">//清除所有元素</span></span><br><span class="line">            <span class="comment">//添加集合元素 AddRange()</span></span><br><span class="line">            list.AddRange(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;);</span><br><span class="line">            list.AddRange(list);</span><br><span class="line">            list.RemoveRange(<span class="number">0</span>, <span class="number">8</span>);<span class="comment">//根据下标删除范围元素</span></span><br><span class="line">            list.Sort();<span class="comment">//升序排列</span></span><br><span class="line">            list.Reverse();<span class="comment">//反转</span></span><br><span class="line">            list.Insert(<span class="number">1</span>, <span class="number">9</span>);<span class="comment">//在位置1插入数字9 InsertRange()在指定位置插入一个集合</span></span><br><span class="line">            <span class="built_in">bool</span> b = list.Contains(<span class="number">1</span>);<span class="comment">//判断是否包含指定的内容</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;list.Count;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(list[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(b);</span><br><span class="line">            Console.WriteLine(list.Count);</span><br><span class="line">            Console.WriteLine(list.Capacity);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList集合长度:</p><ul><li>count 表示这个集合中实际包含的元素个数 没元素:0</li><li>capcity 表示这个集合中可以包含的元素个数 没元素:0<br>当实际包含的元素个数(count)超过了可以包含的元素个数(capcity)时,集合就会向内存中申请多开一倍的空间来保证集合的长度一直够用</li></ul><h3 id="4-8-HashTable集合-键值对集合"><a href="#4-8-HashTable集合-键值对集合" class="headerlink" title="4.8 HashTable集合 (键值对集合)"></a>4.8 HashTable集合 (键值对集合)</h3><p>类似于生活中的字典,<code>键值对对象[键]=值</code></p><p>键值对集合中,键必须是唯一的,值可以是重复的</p><p>使用foreach循环输出,不能使用for循环  var:根据值能够推断出来类型</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Hashtable</span>集合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//var:根据值能够推断出来类型</span></span><br><span class="line">            <span class="comment">//var n = 5;</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(n.GetType());</span></span><br><span class="line">            <span class="comment">//创建一个键值对集合对象</span></span><br><span class="line">            Hashtable ht = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            ht.Add(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ht.Add(<span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">            ht.Add(<span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">            ht.Add(<span class="literal">false</span>, <span class="string">&quot;错误的&quot;</span>);</span><br><span class="line">            <span class="comment">//ht.Clear();//清空</span></span><br><span class="line">            ht[<span class="number">5</span>] = <span class="string">&quot;new&quot;</span>;</span><br><span class="line">            ht[<span class="number">1</span>] = <span class="string">&quot;换掉张三&quot;</span>;</span><br><span class="line">            <span class="comment">//ht.Remove(5);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(ht[1]);</span></span><br><span class="line">            <span class="comment">//不能使用for循环遍历，使用foreach循环</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> ht.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;键是---&#123;0&#125;，值是---&#123;1&#125;&quot;</span>,item,ht[item]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//for (int i=0;i&lt;ht.Count,;i++)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//  Console.WriteLine(ht[i]);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-Path类"><a href="#4-9-Path类" class="headerlink" title="4.9 Path类"></a>4.9 Path类</h3><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Path</span>类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">@&quot;文件路径&quot;</span>;</span><br><span class="line">            <span class="comment">//int index = str.LastIndexOf(&quot;\\&quot;);</span></span><br><span class="line">            <span class="comment">//str = str.Substring(index + 1);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(str);</span></span><br><span class="line">            <span class="comment">//快速获得一个路径下文件的名字</span></span><br><span class="line">            Console.WriteLine(Path.GetFileName(str));</span><br><span class="line">            <span class="comment">//获得没有扩展名的文件名</span></span><br><span class="line">            Console.WriteLine(Path.GetFileNameWithoutExtension(str));</span><br><span class="line">            <span class="comment">//获得文件扩展名</span></span><br><span class="line">            Console.WriteLine(Path.GetExtension(str));</span><br><span class="line">            <span class="comment">//获得文件所在文件夹名称</span></span><br><span class="line">            Console.WriteLine(Path.GetDirectoryName(str));</span><br><span class="line">            <span class="comment">//获得文件全路径</span></span><br><span class="line">            Console.WriteLine(Path.GetFullPath(str));</span><br><span class="line">            <span class="comment">//连接俩个字符串作为路径</span></span><br><span class="line">            Console.WriteLine(Path.Combine(<span class="string">@&quot;c:\a\&quot;</span>,<span class="string">&quot;b.txt&quot;</span>));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-File类"><a href="#4-10-File类" class="headerlink" title="4.10 File类"></a>4.10 File类</h3><p>File.Exists():判断是否存在<br>File.Copy():复制文件<br>File.Move():剪切,俩个参数,第一个原地址,第二个新地址<br>File.Delete():删除</p><p>读取文件的三个方法:</p><p>1.<code>byte[] buffer = File.ReadAllBytes(@&quot;文件路径&quot;);string str = System.Text.Encoding.Default.GetString(buffer);//将二进制转换为字符串</code></p><p>2.<code>string[] str = File.ReadAllLines(@&quot;文件路径&quot;,Encoding.Default);//读取所有行</code></p><p>3.<code>string str = File.ReadAllText(@&quot;文件路径&quot;,Encoding.Default);</code></p><p>写入文件:</p><p>1.<code>byte[] buffer = System.Text.Encoding.Default.GetBytes(str);//将字符串转换为字节数组File.WriteAllBytes(@&quot;文件路径&quot;,buffer);</code></p><p>2.<code>File.WriteAllLines(@&quot;文件路径&quot;,str数组);</code></p><p>3.<code>File.WriteAllText(@&quot;文件路径&quot;,str);</code></p><p>File.AppendAllText(@”文件路径”,str);//追加文字</p><p>多媒体(只能以字节形式)的复制:<br><code>byte[] buffer = File.ReadAllBytes(@&quot;文件路径&quot;);File.WriteAllBytes(@&quot;存放路径&quot;,buffer);</code></p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">File</span>类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建一个文件</span></span><br><span class="line">            <span class="comment">//File.Create(@&quot;F:\new.txt&quot;);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;创建成功&quot;);</span></span><br><span class="line">            <span class="comment">//Console.ReadKey();</span></span><br><span class="line">            <span class="comment">//删除一个文件</span></span><br><span class="line">            <span class="comment">//File.Delete(@&quot;F:\str.docx&quot;);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;删除成功&quot;);</span></span><br><span class="line">            <span class="comment">//Console.ReadKey();</span></span><br><span class="line">            <span class="comment">//赋值一个文件</span></span><br><span class="line">            File.Copy(<span class="string">@&quot;F:\new.txt&quot;</span>, <span class="string">@&quot;F:\copy.txt&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;复制成功&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编码:</p><p>ASC     128<br>ASCII   256</p><p>GB2312  简体字(中国)<br>Big5    繁体字</p><p>unicode 全,但解析慢<br>UTF-8   web</p><p>将字符串以怎样的形式保存为二进制</p><p>乱码:<br>产生原因:保存文件的编码和打开文件的编码格式不同</p><h5 id="Directory操作"><a href="#Directory操作" class="headerlink" title="Directory操作"></a>Directory操作</h5><p>Directory.CreateDirectory():创建文件夹<br>Directory.Delete(@”文件夹路径”,true):删除文件夹 true表示即使该文件夹下不为空也删除<br>Directory.Exists():判断文件夹是否存在<br>Directory.Move():剪切<br>Directory.GetDirectories():得到该路径下所有文件夹路径的字符串数组<br>Directory.GetFiles():得到该路径下所有文件路径的字符串数组 第二个参数为指定文件后缀名 <code>*.avi</code></p><h5 id="FileStream"><a href="#FileStream" class="headerlink" title="FileStream"></a>FileStream</h5><p>操作字节</p><p>File只能操作小文件;操作大文件(字符):StreamReader、StreamWriter</p><p>读:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建FileStream对象</span></span><br><span class="line">FileStream fsRead = <span class="keyword">new</span> FileStream(<span class="string">@&quot;文件路径&quot;</span>,FileMode.Open,FileAccess.Read);</span><br><span class="line"><span class="comment">//创建缓冲区的大小</span></span><br><span class="line"><span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[fsRead.Length];</span><br><span class="line"><span class="comment">//开始读取数据 返回的是这次实际读取到的数据</span></span><br><span class="line"><span class="built_in">int</span> r = fsRead.Read(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line"><span class="comment">//将字节数组转换为字符串</span></span><br><span class="line"><span class="built_in">string</span> str = System.Text.Encoding.Default.GetString(buffer);</span><br><span class="line">fsRead.Close();<span class="comment">//关闭流</span></span><br><span class="line">fsRead.Dispose();<span class="comment">//释放流占用的资源</span></span><br></pre></td></tr></table></figure></p><p>写: 追加:FileMode.Append<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(FileStream fsWrite = <span class="keyword">new</span> FileStream(<span class="string">@&quot;文件路径&quot;</span>,FileMode.OpenOrCreate,FileAccess.Write))&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = System.Text.Encoding.Default.GetBytes(str);</span><br><span class="line">    fsWrite.Write(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多媒体文件的复制:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyFile</span>(<span class="params"><span class="built_in">string</span> source,<span class="built_in">string</span> target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span>(FileStream fsRead = <span class="keyword">new</span> FileStream(source,FileMode.Open,FileAccess.Read))&#123;</span><br><span class="line">        <span class="keyword">using</span>(FileStream fsWrite = <span class="keyword">new</span> FileStream(target,FileMode.OpenOrCreate,FileAccess.Write))&#123;</span><br><span class="line">            <span class="comment">//创建缓冲区的大小</span></span><br><span class="line">            <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">7</span>];</span><br><span class="line">            <span class="comment">//开始读取数据 返回的是这次实际读取到的数据</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> r = fsRead.Read(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line">                <span class="keyword">if</span>(r==<span class="number">0</span>)<span class="comment">//读完了</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fsWrite.Write(buffer,<span class="number">0</span>,r);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//source:原文件路径</span></span><br><span class="line"><span class="comment">//target:复制到的文件路径</span></span><br></pre></td></tr></table></figure></p><p>StreamReader读数据</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用FileStream来读取数据</span></span><br><span class="line"><span class="keyword">using</span>(FileStream fsRead = <span class="keyword">new</span> FileStream(<span class="string">@&quot;文件路径&quot;</span>,FileMode.Open,FileAccess.Read))&#123;</span><br><span class="line">    <span class="keyword">using</span>(StreamReader sr = <span class="keyword">new</span> StreamReader(fsRead,Encoding.Default))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!sr.EndOfStream)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(sr.ReadLine());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可简写为:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>(StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">@&quot;文件路径&quot;</span>),Encoding.Default)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!sr.EndOfStream)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(sr.ReadLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>StreamReader写数据</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用FileStream来写数据 追加:FileMode.Append</span></span><br><span class="line"><span class="keyword">using</span>(FileStream fsWrite = <span class="keyword">new</span> FileStream(<span class="string">@&quot;文件路径&quot;</span>,FileMode.OpenOrCreate,FileAccess.Write))&#123;</span><br><span class="line">    <span class="keyword">using</span>(StreamWriter sw = <span class="keyword">new</span> StreamWriter(fsWrite,Encoding.Default))&#123;</span><br><span class="line">        sw.Write(<span class="string">&quot;xxx&quot;</span>);<span class="comment">//俩个字符替换一个字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可简写为: true:追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>(StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">@&quot;文件路径&quot;</span>),<span class="literal">true</span>)&#123;</span><br><span class="line">    sw.Write(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h3 id="4-11-List泛型集合"><a href="#4-11-List泛型集合" class="headerlink" title="4.11 List泛型集合"></a>4.11 List泛型集合</h3><p>方法跟ArrayList差不多</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">List</span>泛型集合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建泛型集合对象</span></span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            list.Add(<span class="number">1</span>);</span><br><span class="line">            list.Add(<span class="number">2</span>);</span><br><span class="line">            list.Add(<span class="number">3</span>);</span><br><span class="line">            list.AddRange(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;);</span><br><span class="line">            list.AddRange(list);</span><br><span class="line">            <span class="comment">//list泛型集合可以转换为数组</span></span><br><span class="line">            <span class="built_in">int</span>[] nums = list.ToArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(list[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-12-装箱和拆箱"><a href="#4-12-装箱和拆箱" class="headerlink" title="4.12 装箱和拆箱"></a>4.12 装箱和拆箱</h3><p>装箱:就是将值类型转换为引用类型<br>拆箱:就是将引用类型转换为值类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">object</span> o=n;<span class="comment">//装箱</span></span><br><span class="line"><span class="built_in">int</span> nn=(<span class="built_in">int</span>)o;<span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure><p>装箱会浪费时间,代码中应该避免装箱和拆箱</p><p>注意:Convert.ToInt(str)没有发生任意类型的装箱和拆箱</p><p>发生装箱和拆箱的条件:看是否有继承关系,有继承关系才有可能发生</p><h3 id="4-13-Dictionary集合"><a href="#4-13-Dictionary集合" class="headerlink" title="4.13 Dictionary集合"></a>4.13 Dictionary集合</h3><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Dictionary</span>集合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">            dic.Add(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            dic.Add(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            dic.Add(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            dic[<span class="number">1</span>] = <span class="string">&quot;新来的&quot;</span>;</span><br><span class="line">            <span class="comment">//遍历方式</span></span><br><span class="line">            <span class="comment">//1.foreach</span></span><br><span class="line">            <span class="comment">//foreach (var item in dic.Keys)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Console.WriteLine(&quot;&#123;0&#125;---&#123;1&#125;&quot;, item, dic[item]);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//2.一对数据的遍历</span></span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; kv <span class="keyword">in</span> dic)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;---&#123;1&#125;&quot;</span>, kv.Key, kv.Value);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-14-多态"><a href="#4-14-多态" class="headerlink" title="4.14 多态"></a>4.14 多态</h3><p>多态:<br>概念:让一个对象能够表现出多种状态(类型)<br>实现多态的3种手段:<br>1.虚方法</p><p>将父类方法标记为虚方法,在其返回类型之前加<code>virtual</code>,这个函数子类要重写一遍,在重写方法返回类型前加<code>override</code></p><p>2.抽象类</p><p>当父类中的方法不知道如何去实现时,可以考虑将父类写成抽象类<code>abstract class</code>,将方法写成抽象方法<code>abstract 返回类型</code> 子类也需要重写(在重写方法返回类型前加<code>override</code>),而且子类必须要实现父类中所有的抽象成员<br>实现多态:不能创建父类对象,可以创建子类对象<code>Father f = new Son(); a.Eat();</code></p><p>抽象方法不能有方法体<code>public abstract void func();</code><br>空实现:<code>public abstract void func()&#123;&#125;</code></p><p>抽象类可以有非抽象成员,但是非抽象类中不能有抽象成员</p><p>如果子类也是抽象类,不用重写父类抽象成员</p><p>抽象类是由构造函数的,虽然不能被实例化</p><p>子类重写父类抽象函数时返回值和参数必须一样</p><p>如果父类中的方法有默认的实现,并且父类需要被实例化,这时可以考虑将父类定义成一个普通类,用虚方法来实现多态<br>如果父类中的方法没有默认实现,父类也不需要被实例化,则可以将父类定义为抽象类</p><p>抽象类也可以有虚方法,子类也不是必须要重写虚方法</p><h5 id="案例-使用多态求矩形的面积和周长以及圆形的面积和周长"><a href="#案例-使用多态求矩形的面积和周长以及圆形的面积和周长" class="headerlink" title="案例:使用多态求矩形的面积和周长以及圆形的面积和周长"></a>案例:使用多态求矩形的面积和周长以及圆形的面积和周长</h5><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 抽象类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Shape shape = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line">            <span class="built_in">double</span> area = shape.GetArea();</span><br><span class="line">            <span class="built_in">double</span> perimeter = shape.GetPerimeter();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;面积:&#123;0&#125;,周长:&#123;1&#125;&quot;</span>, area, perimeter);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> _r;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> R</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _r; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _r = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">double</span> r</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.R = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.PI * <span class="keyword">this</span>.R * <span class="keyword">this</span>.R;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * Math.PI * <span class="keyword">this</span>.R;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> _Height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Height</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _Height; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _Height = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> _Width;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Width</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _Width; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; _Width = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span>(<span class="params"><span class="built_in">double</span> height,<span class="built_in">double</span> width</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Height = height;</span><br><span class="line">            <span class="keyword">this</span>.Width = width;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.Height * <span class="keyword">this</span>.Width;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetPerimeter</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">this</span>.Height + <span class="keyword">this</span>.Width);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.接口</p><p>接口就是一个规范、能力</p><p>语法:<br><code>[public] interface I...able&#123;    成员;&#125;</code></p><p>接口中的成员不允许添加访问修饰符<br>不允许写具有方法体的函数 自动属性<br>不能写字段和构造函数,只能有方法、属性、索引器、事件<br>一个类继承了一个接口就必须实现这个接口中所有成员<br>为了多态,接口不能被实例化,接口不能创建对象<br>接口中的成员不能有任何实现<br>接口与接口间可以继承,并且可以多继承<br>接口只能继承接口<br>类继承类A,继承接口B,写法上A在B前(先继承类)</p><p>显式实现接口就是为了解决方法重名问题</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 显式实现接口</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//显式实现接口就是为了解决方法重名问题</span></span><br><span class="line">            IFlyable fly = <span class="keyword">new</span> Bird();</span><br><span class="line">            fly.Fly();</span><br><span class="line">            Bird bird = <span class="keyword">new</span> Bird();</span><br><span class="line">            bird.Fly();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bird</span>:<span class="title">IFlyable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸟会飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 显式实现接口</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">void</span> IFlyable.Fly()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是接口的Fly&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h5><p>public:公开的,公共的<br>private:私有的,只有在当前类的内部访问<br>protected:受保护的,只能在当前类的内部以及该类的子类中访问<br>internal:只能在当前项目中访问,在同一个项目中,与public权限一样<br>protected internal:protected+internal</p><p>1.能够修饰类的修饰符:public、internal(默认)<br>2.可访问性不一致<br>子类访问权限不能高于父类访问权限,因为子类会暴露父类成员</p><h5 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h5><p>设计模式:设计这个项目的一种方式</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 简单工厂设计模式</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入你想要的笔记本品牌:&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> brand = Console.ReadLine();</span><br><span class="line">            NoteBook nb = GetNoteBook(brand);</span><br><span class="line">            nb.SayHello();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 简单工厂的核心,根据用户的输入创建对象赋值给父类</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;brand&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoteBook <span class="title">GetNoteBook</span>(<span class="params"><span class="built_in">string</span> brand</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NoteBook nb = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (brand)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Lenovo&quot;</span>:nb = <span class="keyword">new</span> Lenovo();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;IBM&quot;</span>:nb = <span class="keyword">new</span> IBM();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Acer&quot;</span>:nb = <span class="keyword">new</span> Acer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Dell&quot;</span>:nb = <span class="keyword">new</span> Dell();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> nb;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">NoteBook</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lenovo</span> : <span class="title">NoteBook</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是联想笔记本&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Acer</span> : <span class="title">NoteBook</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是鸿基笔记本&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dell</span> : <span class="title">NoteBook</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是戴尔笔记本&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IBM</span> : <span class="title">NoteBook</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是IBM笔记本&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值类型:int,double,char,decimal,bool,enum,struct<br>复制时,传递的是本身<br>引用类型:string,数组,自定义类,集合,object,接口<br>复制时,传递的是地址 注意:字符串的不可变型</p><p>加ref:值传递-&gt;引用传递</p><p>序列化和反序列化:<br>序列化:就是将对象转换为二进制<br>在类上加<code>[Serializable]</code></p><p>反序列化:就是将二进制转换为对象</p><p>作用:传递数据</p><p>部分类:在类的class前加<code>partial</code>,可以写相同类</p><p>密封类:在类的class前加<code>sealed</code>,不能被继承,但是可以继承其他类</p><p>重写toString方法:</p><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 重写<span class="title">toString</span>方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            Console.WriteLine(p.ToString());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-超市收银系统"><a href="#案例-超市收银系统" class="headerlink" title="案例: 超市收银系统"></a>案例: 超市收银系统</h5><p>商品类、</p><p>GUID:产生一个不会重复的编号 <code>Guid.NewGuid().toString()</code></p><p>代码:</p><p>ProductFather.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ProductFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Price</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ID</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductFather</span>(<span class="params"><span class="built_in">string</span> id,<span class="built_in">double</span> price,<span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.ID = id;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.Price = price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Acer.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Acer</span>:<span class="title">ProductFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Acer</span>(<span class="params"><span class="built_in">string</span> id,<span class="built_in">double</span> price,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">id, price, name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SamSung.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SamSung</span>:<span class="title">ProductFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SamSung</span>(<span class="params"><span class="built_in">string</span> id,<span class="built_in">double</span> price,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">id, price, name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JiangYou.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">JiangYou</span>:<span class="title">ProductFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JiangYou</span>(<span class="params"><span class="built_in">string</span> id,<span class="built_in">double</span> price,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">id, price, name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Banana.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Banana</span>:<span class="title">ProductFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Banana</span>(<span class="params"><span class="built_in">string</span> id,<span class="built_in">double</span> price,<span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">id, price, name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CangKu.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CangKu</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//存储货物 使用父类</span></span><br><span class="line">        List&lt;List&lt;ProductFather&gt;&gt; list = <span class="keyword">new</span> List&lt;List&lt;ProductFather&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向用户展示货物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowPros</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;仓库有:&quot;</span>+item[<span class="number">0</span>].Name+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;有&quot;</span>+item.Count+<span class="string">&quot;个&quot;</span>+<span class="string">&quot;\t\t每个&quot;</span>+item[<span class="number">0</span>].Price+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//list[0]存放Acer电脑</span></span><br><span class="line">        <span class="comment">//list[1]存放三星手机</span></span><br><span class="line">        <span class="comment">//list[2]存放酱油</span></span><br><span class="line">        <span class="comment">//list[3]存放酱油</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在创建仓库对象时 向仓库中添加货架</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CangKu</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            list.Add(<span class="keyword">new</span> List&lt;ProductFather&gt;());</span><br><span class="line">            list.Add(<span class="keyword">new</span> List&lt;ProductFather&gt;());</span><br><span class="line">            list.Add(<span class="keyword">new</span> List&lt;ProductFather&gt;());</span><br><span class="line">            list.Add(<span class="keyword">new</span> List&lt;ProductFather&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 进货</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strType&quot;&gt;</span>货物类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;count&quot;&gt;</span>货物数量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JinPros</span>(<span class="params">String strType,<span class="built_in">int</span> count</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span>(strType)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Acer&quot;</span>:</span><br><span class="line">                        list[<span class="number">0</span>].Add(<span class="keyword">new</span> Acer(Guid.NewGuid().ToString(),<span class="number">1000</span>,<span class="string">&quot;鸿基笔记本&quot;</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;SamSung&quot;</span>:</span><br><span class="line">                        list[<span class="number">1</span>].Add(<span class="keyword">new</span> SamSung(Guid.NewGuid().ToString(), <span class="number">800</span>, <span class="string">&quot;三星手机&quot;</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;JiangYou&quot;</span>:</span><br><span class="line">                        list[<span class="number">2</span>].Add(<span class="keyword">new</span> JiangYou(Guid.NewGuid().ToString(), <span class="number">8</span>, <span class="string">&quot;酱油&quot;</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Banana&quot;</span>:</span><br><span class="line">                        list[<span class="number">3</span>].Add(<span class="keyword">new</span> Banana(Guid.NewGuid().ToString(), <span class="number">3</span>, <span class="string">&quot;香蕉&quot;</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 从仓库中去货物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;count&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ProductFather[] <span class="title">QuPros</span>(<span class="params">String strType, <span class="built_in">int</span> count</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ProductFather[] pros = <span class="keyword">new</span> ProductFather[count];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pros.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (strType)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Acer&quot;</span>:</span><br><span class="line">                        pros[i]=list[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                        list[<span class="number">0</span>].RemoveAt(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;SamSung&quot;</span>:</span><br><span class="line">                        pros[i] = list[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                        list[<span class="number">1</span>].RemoveAt(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;JiangYou&quot;</span>:</span><br><span class="line">                        pros[i] = list[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">                        list[<span class="number">2</span>].RemoveAt(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Banana&quot;</span>:</span><br><span class="line">                        pros[i] = list[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">                        list[<span class="number">3</span>].RemoveAt(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pros;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SupperMarket.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SupperMarket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建仓库对象</span></span><br><span class="line">        CangKu ck = <span class="keyword">new</span> CangKu();</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建超市对象时给仓库货架上导入货物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SupperMarket</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            ck.JinPros(<span class="string">&quot;Acer&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">            ck.JinPros(<span class="string">&quot;SamSung&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">            ck.JinPros(<span class="string">&quot;JiangYou&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">            ck.JinPros(<span class="string">&quot;Banana&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 与用户交互</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AskBuying</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;欢迎光临,请问你要什么&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我们有Acer、SamSung、JiangYou、Banana&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> strType = Console.ReadLine();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你需要多少&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> count = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            <span class="comment">//去仓库取货</span></span><br><span class="line">            ProductFather[] pros = ck.QuPros(strType, count);</span><br><span class="line">            <span class="built_in">double</span> realMoney = GetMoney(pros);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你总共消费&#123;0&#125;元&quot;</span>, realMoney);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请选择打折方式:1--不打折,2--打9折,3--打85折,4--满300减50,5--满500减100&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> input = Console.ReadLine();</span><br><span class="line">            <span class="comment">//通过简单工厂设计模式根据用户输入获得一个打折对象</span></span><br><span class="line">            CalFather cal = GetCal(input);</span><br><span class="line">            <span class="built_in">double</span> totalMoney=cal.GetTotalMoney(realMoney);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;打折后价钱:&#123;0&#125;&quot;</span>, totalMoney);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;以下是你的小票:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> pros)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;货物名称:&#123;0&#125;\t货物单价:&#123;1&#125;\t货物编号:&#123;2&#125;&quot;</span>, item.Name, item.Price, item.ID);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 根据用户选择的打折方式返回一个打折对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;input&quot;&gt;</span>用户选择<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回的是父类对象 但是里面装的是子类对象<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CalFather <span class="title">GetCal</span>(<span class="params"><span class="built_in">string</span> input</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            CalFather cal = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (input)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    cal=<span class="keyword">new</span> CalNormal();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> CalRate(<span class="number">0.9</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> CalRate(<span class="number">0.85</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> CalMN(<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> CalMN(<span class="number">500</span>,<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cal;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 根据用户买的货物计算总价钱</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pros&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetMoney</span>(<span class="params">ProductFather[] pros</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> realMoney = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pros.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                realMoney += pros[i].Price;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> realMoney;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowPros</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            ck.ShowPros();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CalFather.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CalFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 计算打折后价钱</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realMoney&quot;&gt;</span>打折前的价钱<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>打折后的价钱<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetTotalMoney</span>(<span class="params"><span class="built_in">double</span> realMoney</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CalNormal.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CalNormal</span> : <span class="title">CalFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 不打折</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realMoney&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetTotalMoney</span>(<span class="params"><span class="built_in">double</span> realMoney</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> realMoney;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CalRate.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CalRate</span> : <span class="title">CalFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 折扣率</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Rate</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalRate</span>(<span class="params"><span class="built_in">double</span> rate</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Rate = rate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetTotalMoney</span>(<span class="params"><span class="built_in">double</span> realMoney</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> realMoney * <span class="keyword">this</span>.Rate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CalMN.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CalMN</span> : <span class="title">CalFather</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> M</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> N</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalMN</span>(<span class="params"><span class="built_in">double</span> m,<span class="built_in">double</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.M = m;</span><br><span class="line">            <span class="keyword">this</span>.N = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetTotalMoney</span>(<span class="params"><span class="built_in">double</span> realMoney</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(realMoney&gt;=<span class="keyword">this</span>.M)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> realMoney - (<span class="built_in">int</span>)(realMoney / <span class="keyword">this</span>.M) * <span class="keyword">this</span>.N;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> realMoney;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Main.cs<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 超市收银系统</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建超市对象</span></span><br><span class="line">            SupperMarket sm = <span class="keyword">new</span> SupperMarket();</span><br><span class="line">            <span class="comment">//展示货物</span></span><br><span class="line">            sm.ShowPros();</span><br><span class="line">            <span class="comment">//用户交互</span></span><br><span class="line">            sm.AskBuying();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h5><p>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MD5</span>加密</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//&quot;123&quot;  202cb962ac59075b964b07152d234b70</span></span><br><span class="line">            <span class="built_in">string</span> s = GetMD5(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetMD5</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建MD5对象</span></span><br><span class="line">            MD5 md5 = MD5.Create();</span><br><span class="line">            <span class="comment">//加密</span></span><br><span class="line">            <span class="comment">//将字符串转化为字节数组</span></span><br><span class="line">            <span class="built_in">byte</span>[] buffer = Encoding.Default.GetBytes(str);</span><br><span class="line">            <span class="built_in">byte</span>[] MD5Buffer = md5.ComputeHash(buffer);</span><br><span class="line">            <span class="comment">//将字节数组转化为字符串</span></span><br><span class="line">            <span class="comment">//将字节数组中每一个元素按照指定的编码格式解析成字符串</span></span><br><span class="line">            <span class="comment">//直接将数组ToString()</span></span><br><span class="line">            <span class="comment">//将字节数组中每个元素ToString()</span></span><br><span class="line">            <span class="comment">//return Encoding.Default.GetString(MD5Buffer);</span></span><br><span class="line">            <span class="built_in">string</span> strs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; MD5Buffer.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                strs += MD5Buffer[i].ToString(<span class="string">&quot;x2&quot;</span>);<span class="comment">//将10进制转化为16进制：x   x2起对齐作用</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-winform"><a href="#5-winform" class="headerlink" title="5 winform"></a>5 winform</h2><p>winform应用程序是一种智能客户端技术,我们可以使用winform应用程序帮助我们获得信息或者传输信息等</p><p>创建时选择Windows窗体应用(.NET Framework)</p><p>后台切前台:右键-&gt;查看设计器</p><h4 id="Button控件"><a href="#Button控件" class="headerlink" title="Button控件"></a>Button控件</h4><p>属性:<br>1.Name:在后台要获得前台的空间对象时需要使用Name属性<br>2.visible:指示一个控件是否可见<br>3.Enabled:指示一个控件是否可用</p><p>事件:<br>注册事件:双击控件注册的都是控件默认选中的那个事件<br>触发事件:</p><p>在Main函数中创建的窗体对象我们称之为这个窗体应用程序的主窗体</p><p>关闭所有窗体:</p><p>新建一个静态类<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Form1 _fr1Test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主窗体load加载时发生:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test._fr1Test = <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><br>需要调用关闭事件的地方:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test._fr1Test.Close();</span><br></pre></td></tr></table></figure></p><p>Button常用事件:Click、MouseEnter</p><h4 id="TextBox控件"><a href="#TextBox控件" class="headerlink" title="TextBox控件"></a>TextBox控件</h4><p>属性:<br>1.WordWrap:指示文本框是否换行<br>2.PasswordChar:让文本框显示一个单一的字符<br>3.ScollBars:是否显示滚动条<br>事件:TextChanged:当文本框中内容改变时执行这个事件</p><p>Timer<br>在指定的一段时间间隔内<br>事件:Tick:每隔一段时间执行一次事件</p><p>播放音乐:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SoundPlayer sp = <span class="keyword">new</span> SoundPlayer();</span><br><span class="line">sp.SoundLocation = <span class="string">@&quot;音乐文件路径(只支持.wav)&quot;</span>;</span><br><span class="line">sp.play();</span><br></pre></td></tr></table></figure></p><h4 id="CheckBox-复选框"><a href="#CheckBox-复选框" class="headerlink" title="CheckBox 复选框"></a>CheckBox 复选框</h4><p>checked:指示这个空间是否选中</p><h4 id="RadioButton-单选"><a href="#RadioButton-单选" class="headerlink" title="RadioButton 单选"></a>RadioButton 单选</h4><p>默认情况下,在一个窗体中,所有单选按钮只允许选中一个,但可以使用GroupBox容器:用于分组</p><h3 id="MDI窗体设计"><a href="#MDI窗体设计" class="headerlink" title="MDI窗体设计"></a>MDI窗体设计</h3><p>1.首先确定一个父窗体<br>isMdiContainer -&gt; true<br>2.创建子窗体,并且设置他们的父窗体</p><p><a href="https://github.com/liaojie1314/MDIdesign">代码</a></p><h4 id="PictureBox"><a href="#PictureBox" class="headerlink" title="PictureBox"></a>PictureBox</h4><p>.Image = Image.FromFile(图片全路径);</p><h3 id="Directory-操作文件夹"><a href="#Directory-操作文件夹" class="headerlink" title="Directory 操作文件夹"></a>Directory 操作文件夹</h3><p>CreateDirectory 创建文件夹<br>Delete 删除文件夹<br>Move 剪切文件夹<br>Exist 判断是否存在<br>GetFiles 获得指定目录下所有文件的全路径<br>GetDirectory 获得指定目录下所有文件夹的全路径</p><h4 id="WebBrowser-浏览器控件"><a href="#WebBrowser-浏览器控件" class="headerlink" title="WebBrowser 浏览器控件"></a>WebBrowser 浏览器控件</h4><p>Url:网站网址</p><p>Uri uri = new Uri(“<a href="http://&quot;+str">http://&quot;+str</a>);</p><h4 id="ComboBox-下拉框控件"><a href="#ComboBox-下拉框控件" class="headerlink" title="ComboBox 下拉框控件"></a>ComboBox 下拉框控件</h4><p>DropDownStyle:控制下拉框的外观样式</p><p>名字:cbo+…</p><p>.Items.Add()//添加<br>.Items.Clear()//清空<br>.SelectedItem.ToString()//获取当前选择的文本</p><h5 id="案例-日期选择器"><a href="#案例-日期选择器" class="headerlink" title="案例: 日期选择器"></a>案例: 日期选择器</h5><p><a href="https://github.com/liaojie1314/DatePickers">代码</a></p><h4 id="ListBox控件"><a href="#ListBox控件" class="headerlink" title="ListBox控件"></a>ListBox控件</h4><p>.Items.Add()//添加</p><h5 id="案例-石头剪刀布"><a href="#案例-石头剪刀布" class="headerlink" title="案例: 石头剪刀布"></a>案例: 石头剪刀布</h5><p><a href="https://github.com/liaojie1314/RockPaperScissors">代码</a></p><h4 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h4><p>打开对话框</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog ofd = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line"><span class="comment">//设置对话框标题</span></span><br><span class="line">ofd.Title = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//设置对话框可以多选</span></span><br><span class="line">ofd.Multiselect = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//设置对话框初始目录</span></span><br><span class="line">ofd.InitialDirectory = <span class="string">@&quot;全路径&quot;</span>;</span><br><span class="line"><span class="comment">//设置对话框的文件类型</span></span><br><span class="line">ofd.Filter = <span class="string">&quot;文本文件|*.txt|媒体文件|*.wmv|图片文件|*.jpg|所有文件|*.*&quot;</span>;</span><br><span class="line"><span class="comment">//展示对话框</span></span><br><span class="line">ofd.ShowDialog();</span><br><span class="line"><span class="comment">//获得在打开对话框中选中文件的路径</span></span><br><span class="line"><span class="built_in">string</span> path = ofd.FileName;</span><br><span class="line"><span class="keyword">if</span>(path==<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span>(FileStream fsRead = <span class="keyword">new</span> FileStream(path,FileMode.OpenOrCreate,FileAccess.Read))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">int</span> r = fsRead.Read(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line">    textBox.Text = Encoding.Default.GetString(buffer,<span class="number">0</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存对话框</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">sfd.Title = <span class="string">&quot;&quot;</span>;</span><br><span class="line">sfd.InitialDirectory = <span class="string">@&quot;全路径&quot;</span>;</span><br><span class="line">sfd.Filter = <span class="string">&quot;文本文件|*.txt|媒体文件|*.wmv|图片文件|*.jpg|所有文件|*.*&quot;</span>;</span><br><span class="line">sfd.ShowDialog();</span><br><span class="line"><span class="built_in">string</span> path = sfd.FileName;</span><br><span class="line"><span class="keyword">if</span>(path==<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span>(FileStream fsWrite = <span class="keyword">new</span> FileStream(path,FileMode.OpenOrCreate,FileAccess.Write))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = Encoding.Default.GetBytes(textBox.Text);</span><br><span class="line">    fsWrite.Write(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line">&#125;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;保存成功&quot;</span>);</span><br></pre></td></tr></table></figure><p>字体和颜色对话框</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FontDialog fd = <span class="keyword">new</span> FontDialog();</span><br><span class="line">fd.ShowDialog();</span><br><span class="line">textBox.Font = fd.Font;</span><br><span class="line"></span><br><span class="line">ColorDialog cd = <span class="keyword">new</span> ColorDialog();</span><br><span class="line">cd.ShowDialog();</span><br><span class="line">textBox.ForeColor = cd.Color;</span><br></pre></td></tr></table></figure><p>panel.Visibel = false;//隐藏</p><h3 id="进程类"><a href="#进程类" class="headerlink" title="进程类"></a>进程类</h3><p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 进程类</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取当前程序所有正在运行的进程</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Process[] pros = Process.GetProcesses();</span></span><br><span class="line"><span class="comment">            foreach (var item in pros)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                Console.WriteLine(item);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">//Process.Start(&quot;calc&quot;);//打开计算机</span></span><br><span class="line">            <span class="comment">//打开指定文件</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo(<span class="string">@&quot;E:\test.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//1.创建进程对象</span></span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            p.Start();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程分类:</p><ul><li>前台线程:只有所有前台线程都关闭才能完成程序关闭</li><li>后台线程:只要所有前台线程结束,后台线程自动关闭</li></ul><p>单线程问题:</p><ul><li>假死</li><li>耗时</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread th;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个线程</span></span><br><span class="line">th = <span class="keyword">new</span> Thread(Test);</span><br><span class="line"><span class="comment">//将线程设置为后台线程</span></span><br><span class="line">th.IsBackground = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//标记这个线程准备就绪,随时可以被执行</span></span><br><span class="line">th.Start();</span><br></pre></td></tr></table></figure><p>.NET下不允许跨线程访问</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消跨线程访问</span></span><br><span class="line">Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>关闭窗体时判断新线程是否为null,避免主线程关闭,新线程未关闭</p><p>Closing<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(th != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//结束这个线程</span></span><br><span class="line">    th.Abort();<span class="comment">//一旦Abort就不能Start了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Thread.Sleep(3000);//休眠3秒</p><h2 id="Socket网络编程"><a href="#Socket网络编程" class="headerlink" title="Socket网络编程"></a>Socket网络编程</h2><p>如果线程执行的方法需要参数,那么要求这个参数必须是object类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread th = <span class="keyword">new</span> Thread(Test);</span><br><span class="line">th.IsBackground = <span class="literal">true</span>;</span><br><span class="line">th.Start(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是Test方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span> s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> ss = (<span class="built_in">string</span>)s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP:3次握手 安全、稳定但效率低<br>UDP:快速、效率高,但是不稳定 容易发生数据丢失</p><p>服务器:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个负责监听的Socket</span></span><br><span class="line">    Socket socketWatch = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</span><br><span class="line">    <span class="comment">//创建IP地址和端口号对象</span></span><br><span class="line">    IPAddress ip = IPAddress.Any; <span class="comment">//IPAddress.Parse(txtServer.Text);</span></span><br><span class="line">    IPEndPoint point = <span class="keyword">new</span> IPEndPoint(ip,Convert.ToInt32(txtPort.Text));<span class="comment">//第二个参数为端口号</span></span><br><span class="line">    <span class="comment">//让负责监听的Socket绑定IP地址的端口号</span></span><br><span class="line">    socketWatch.Bind(point);</span><br><span class="line">    ShowMsg(<span class="string">&quot;监听成功&quot;</span>);</span><br><span class="line">    <span class="comment">//设置监听队列 在某一个时间点内能够连入这个服务端的最大客户端数量</span></span><br><span class="line">    socketWatch.Listen(<span class="number">10</span>);</span><br><span class="line">    Thread th = <span class="keyword">new</span> Thread(Listen);</span><br><span class="line">    th.IsBackground = <span class="literal">true</span>;</span><br><span class="line">    th.Start(socketWatch);</span><br><span class="line">    &#125;<span class="keyword">catch</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">Socket socketSend;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待客户端的连接 并且创建与之通信的Socket</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Listen</span>(<span class="params"><span class="built_in">object</span> o</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//负责跟客户端通信的Socket 将远程地址的端口号存在下拉列表中</span></span><br><span class="line">    Socket socketWatch = o <span class="keyword">as</span> Socket;</span><br><span class="line">    <span class="comment">//负责监听的Socket 来接收客户端的连接 创建跟客户端通信的Socket</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            socketSend = socketWatch.Accept();</span><br><span class="line">            <span class="comment">//将远程连接的客户端的IP地址和Socket存入集合中</span></span><br><span class="line">            dicSocket.Add(socketSend.RemoteEndPoint.ToString(),socketSend);</span><br><span class="line">            <span class="comment">//将远程连接的客户端IP地址和端口号存入下拉框中</span></span><br><span class="line">            cboUsers.Items.Add(socketSend.RemoteEndPoint.ToString());</span><br><span class="line">            <span class="comment">//RemoteEndPoint 得到远程地址的端口号</span></span><br><span class="line">            ShowMsg(socketSend.RemoteEndPoint.ToString()+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">            <span class="comment">//开启一个新线程 不同接收客户端发来的消息</span></span><br><span class="line">            Thread th = <span class="keyword">new</span> Thread(Recive);</span><br><span class="line">            th.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            th.Start(socketSend);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将远程连接的客户端的IP地址和Socket存入集合中</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>,Socket&gt; dicSocket = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,Socket&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器端不停接收客户端发送的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Recive</span>(<span class="params"><span class="built_in">object</span> o</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Socket socketSend = o <span class="keyword">as</span> Socket;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//客户端连接成功后 服务器应该接收客户端发来的消息</span></span><br><span class="line">                <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">                <span class="comment">//r 实际接收到的有效字节数</span></span><br><span class="line">                <span class="built_in">int</span> r = socketSend.Receive(buffer);</span><br><span class="line">                <span class="keyword">if</span>(r==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">string</span> str = Encoding.UTF8.GetString(buffer,<span class="number">0</span>,r);</span><br><span class="line">                ShowMsg(socketSend.RemoteEndPoint+<span class="string">&quot;:&quot;</span>+str);</span><br><span class="line">            &#125;<span class="keyword">catch</span></span><br><span class="line">            &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowMsg</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    txtLog.AppendText(str + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端个客户端发送消息 点击事件</span></span><br><span class="line"><span class="built_in">string</span> str = txtMsg.Text;</span><br><span class="line"><span class="built_in">byte</span>[] buffer = System.Text.Encoding.UTF8.GetBytes(str);</span><br><span class="line">List&lt;<span class="built_in">byte</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">list.Add(<span class="number">0</span>);</span><br><span class="line">list.AddRange(buffer);</span><br><span class="line"><span class="comment">//将泛型集合转化为数组</span></span><br><span class="line"><span class="built_in">byte</span>[] newBuffer = list.ToArray();</span><br><span class="line"><span class="comment">//获得在下拉框中选择的IP地址</span></span><br><span class="line"><span class="built_in">string</span> ip = cboUsers.SelectedItem.ToString();</span><br><span class="line">dicSocket[ip].Send(newBuffer);</span><br><span class="line"><span class="comment">//socketSend.Send(buffer);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择要发送的文件  按钮点击事件</span></span><br><span class="line">OpenFileDialog ofd =<span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">ofd.InitialDirectory = <span class="string">@&quot;初始目录全路径&quot;</span>;</span><br><span class="line">ofd.Title = <span class="string">&quot;请选择要发送的文件&quot;</span>;</span><br><span class="line">ofd.Filter = <span class="string">&quot;所有文件|*.*&quot;</span>;</span><br><span class="line">ofd.ShowDialog();</span><br><span class="line">txtPath.Text = ofd.FileName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按钮点击事件</span></span><br><span class="line"><span class="built_in">string</span> path = txtPath.Text;</span><br><span class="line"><span class="keyword">using</span>(FileStream fsRead = <span class="keyword">new</span> FileStream(path,FileMode.Open,FileAccess.Read))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">int</span> r = fsRead.Read(buffer,<span class="number">0</span>,buffer.Length);</span><br><span class="line">    List&lt;<span class="built_in">byte</span>&gt;list = <span class="keyword">new</span> List&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">    list.Add(<span class="number">1</span>);</span><br><span class="line">    list.AddRange(buffer);</span><br><span class="line">    <span class="built_in">byte</span>[] newBuffer = list.ToArray();</span><br><span class="line">    dicSocket[cboUsers.SelectedItem.ToString()].Send(newBuffer,<span class="number">0</span>,r+<span class="number">1</span>,SocketFlags.None);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//震动 按钮点击事件</span></span><br><span class="line"><span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1</span>];</span><br><span class="line">buffer[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">dicSocket[cboUsers.SelectedItem.ToString()].Send(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决线程间操作不到问题</span></span><br><span class="line"><span class="comment">//在程序加载时取消跨线程的检查</span></span><br><span class="line">Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><p>打开Telnet Client:<br>控制面板-&gt;查看方式(类别)-&gt;程序-&gt;程序和功能-&gt;启用或关闭Windows功能(在左边)-&gt;Telnet Client(勾上),点击确认</p><p>客户端:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">Socket socketSend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//创建负责通讯的Socket</span></span><br><span class="line">    socketSend = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</span><br><span class="line">    IPAddress ip = IPAddress.Parse(txtServer.Text);</span><br><span class="line">    IPEndPoint point = <span class="keyword">new</span> IPEndPoint(ip,Convert.ToInt32(txtPort.Text));</span><br><span class="line">    <span class="comment">//获得要连接的远程服务器应用程序的IP地址和端口号</span></span><br><span class="line">    socketSend.Connect(point);</span><br><span class="line">    ShowMsg(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    <span class="comment">//开启新线程不停接收服务端发来的消息</span></span><br><span class="line">    Thread th = <span class="keyword">new</span> Thread(Recive);</span><br><span class="line">    th.IsBackground = <span class="literal">true</span>;</span><br><span class="line">    th.Start();</span><br><span class="line">    &#125;<span class="keyword">catch</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不停接收服务端发来的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Recive</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">3</span>];</span><br><span class="line">            <span class="built_in">int</span> r = socketSend.Receive(buffer);</span><br><span class="line">            <span class="comment">//实际接收到的有效字节数组</span></span><br><span class="line">            <span class="keyword">if</span>(r==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//发送文字消息</span></span><br><span class="line">                <span class="built_in">string</span> s = Encoding.UTF8.GetString(buffer,<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line">                ShowMsg(socketSend.RemoteEndPoint+<span class="string">&quot;:&quot;</span>+s);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SaveFileDialog sfd = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">                sfd.InitialDirectory = <span class="string">@&quot;保存默认地址&quot;</span>;</span><br><span class="line">                sfd.Title = <span class="string">&quot;请选择要保存的文件&quot;</span>;</span><br><span class="line">                sfd.Filter = <span class="string">&quot;所有文件|*.*&quot;</span>;</span><br><span class="line">                sfd.ShowDialog(<span class="keyword">this</span>);</span><br><span class="line">                <span class="built_in">string</span> path = sfd.FileName;</span><br><span class="line">                <span class="keyword">using</span>(FileStream fsWrite = <span class="keyword">new</span> FileStream(path,FileMode.OpenOrCreate,FileAccess.Write))</span><br><span class="line">                &#123;</span><br><span class="line">                    fsWrite.Write(buffer,<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buffer[<span class="number">0</span>]==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ZD();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//震动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZD</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; <span class="number">500</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Location = <span class="keyword">new</span> Point(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">this</span>.Location = <span class="keyword">new</span> Point(<span class="number">280</span>,<span class="number">280</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息事件中</span></span><br><span class="line"><span class="built_in">string</span> str = txtMsg.Text.Trim();</span><br><span class="line"><span class="built_in">byte</span>[] buffer = System.Text.Encoding.UTF8.GetBytes(str);</span><br><span class="line">socketSend.Send();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowMsg</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    txtLog.AppendText(str + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决线程间操作不到问题</span></span><br><span class="line"><span class="comment">//在程序加载时取消跨线程的检查</span></span><br><span class="line">Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><p>开启多个项目:右键项目-&gt;调试-&gt;启动新实例</p><p>设计”协议”:</p><ul><li>0 文本</li><li>1 文件</li><li>2 震动</li></ul><h2 id="GDI绘图"><a href="#GDI绘图" class="headerlink" title="GDI绘图"></a>GDI绘图</h2><p>保留2位小数: <code>avg = Convert.ToDouble(avg.ToString(&quot;0.00&quot;));</code></p><p>窗体事件:Print<br>窗体重新绘制时都会画一遍</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建GDI对象</span></span><br><span class="line">Graphics g = <span class="keyword">this</span>.CreateGraphics();</span><br><span class="line"><span class="comment">//创建画笔对象</span></span><br><span class="line">Pen pen = <span class="keyword">new</span> Pen(Brushes.Red);</span><br><span class="line"><span class="comment">//扇形</span></span><br><span class="line">Size sizePie = <span class="keyword">new</span> System.Drawing.Size(<span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">Rectangle recPie = <span class="keyword">new</span> Rectangle(<span class="keyword">new</span> Point(<span class="number">150</span>, <span class="number">150</span>), sizePie);</span><br><span class="line">g.DrawPie(pen, recPie, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line"><span class="comment">//矩形</span></span><br><span class="line">Size size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">Rectangle rec = <span class="keyword">new</span> Rectangle(<span class="keyword">new</span> Point(<span class="number">50</span>,<span class="number">50</span>),size);</span><br><span class="line">g.DrawRectangle(pen, rec);</span><br><span class="line"><span class="comment">//创建俩个点</span></span><br><span class="line">Point p1 = <span class="keyword">new</span> Point(<span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line">Point p2 = <span class="keyword">new</span> Point(<span class="number">25</span>, <span class="number">250</span>);</span><br><span class="line">g.DrawLine(pen, p1, p2);</span><br></pre></td></tr></table></figure><h5 id="案例-验证码"><a href="#案例-验证码" class="headerlink" title="案例: 验证码"></a>案例: 验证码</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pictureBox1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="built_in">string</span> str = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> rNumber = r.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    str += rNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MessageBox.Show(str);</span></span><br><span class="line"><span class="comment">//创建GDI对象</span></span><br><span class="line">Bitmap bmp = <span class="keyword">new</span> Bitmap(<span class="number">110</span>,<span class="number">30</span>);</span><br><span class="line">Graphics g = Graphics.FromImage(bmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Point p = <span class="keyword">new</span> Point(i*<span class="number">20</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span>[] fonts = &#123; <span class="string">&quot;微软雅黑&quot;</span>, <span class="string">&quot;宋体&quot;</span>, <span class="string">&quot;隶书&quot;</span>, <span class="string">&quot;黑体&quot;</span>, <span class="string">&quot;仿宋&quot;</span> &#125;;</span><br><span class="line">    Color[] colors = &#123; Color.Yellow, Color.Blue, Color.Green, Color.Black, Color.Red &#125;;</span><br><span class="line">    g.DrawString(str[i].ToString(),<span class="keyword">new</span> Font(fonts[r.Next(<span class="number">0</span>,<span class="number">5</span>)],<span class="number">20</span>,FontStyle.Bold),<span class="keyword">new</span> SolidBrush(colors[r.Next(<span class="number">0</span>,<span class="number">5</span>)]),p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Point p1 = <span class="keyword">new</span> Point(r.Next(<span class="number">0</span>,bmp.Width),r.Next(<span class="number">0</span>,bmp.Height));</span><br><span class="line">    Point p2 = <span class="keyword">new</span> Point(r.Next(<span class="number">0</span>,bmp.Width),r.Next(<span class="number">0</span>,bmp.Height));</span><br><span class="line">    g.DrawLine(<span class="keyword">new</span> Pen(Brushes.Green),p1,p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Point p = <span class="keyword">new</span> Point(r.Next(<span class="number">0</span>, bmp.Width), r.Next(<span class="number">0</span>, bmp.Height));</span><br><span class="line">    bmp.SetPixel(p.X,p.Y,Color.Black);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将图片镶嵌到PictureBox中</span></span><br><span class="line">pictureBox1.Image = bmp;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/liaojie1314/VerificationCodeC-">代码</a></p><h5 id="案例-简单播放器"><a href="#案例-简单播放器" class="headerlink" title="案例: 简单播放器"></a>案例: 简单播放器</h5><p>添加<code>Windows Media Player</code>：<br>工具箱里找到组件右键-&gt;选择项-&gt;COM组件-&gt;找到Windows Media Player勾上并确认</p><p><strong>windows media player控件的常用属性和方法</strong></p><p>以下 music player 均为windows media player控件的名字。<br>1.属性<br>1）musicPlayer.settings.autoStart：打开播放器时是否自动播放 。true：自动播放，false：不自动播放，默认自动播放。<br>2）musicPlayer.URL：要播放歌曲的路径。<br>3）musicPlayer.settings.mute：是否静音。true：静音，false：不静音。<br>4）musicPlayer.settings.volume：音量值大小，范围是1 ~ 100。<br>5）musicPlayer.Ctlcontrols.currentPositionString：当前播放时间。返回值是字符串类型，例如：02：23。<br>6）musicPlayer.Ctlcontrols.currentPosition：也是返回当前播放的时间。返回值是 double 类型，例如：133.8。<br>7）musicPlayer.currentMedia.name：返回当前播放歌曲的名字。<br>8）musicPlayer.playState：播放器当前的状态。</p><ul><li>有一个枚举 WMPLib.WMPPlayState 说明了它的取值：<br>0——wmppsUndefined：未知状态<br>1——wmppsStopped：播放停止<br>2——wmppsPaused：播放暂停<br>3——wmppsPlaying：正在播放<br>4——wmppsScanForward：向前搜索<br>5——wmppsScanReverse：向后搜索<br>6——wmppsBuffering ：正在缓冲<br>7——wmppsWaiting：正在等待流开始<br>8——wmppsMediaEnded：播放流已结束<br>9——wmppsTransitioning ：准备新的媒体文件<br>10——wmppsReady：播放准备就绪<br>11——wmppsReconnecting：尝试重新连接流媒体数据<br>12——wmppsLast：上一次状态,状态没有改变</li></ul><p>2.方法<br>1）musicPlayer.Ctlcontrols.play()：播放<br>2）musicPlayer.Ctlcontrols.pause()：暂停<br>3）musicPlayer.Ctlcontrols.stop()：停止</p><p>属性:<br>url:音乐地址</p><p>1.在程序加载时取消播放器自动播放功能<br>2.播放或者暂停按钮<br>3.上一曲、下一曲<br>4.多选删除</p><ul><li>给ListBox添加一个右键菜单<br>5.静音和放音<br>6.选择列表中的音乐文件,单击按钮直接播放<br>7.自动播放下一曲</li></ul><p><a href="">代码</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>需要安装组件<code>ASP.net 和 Web开发</code>中的<code>其他项目模板(早期版本)</code></p><ul><li>位置:展开最右边的ASP.NET和Web开发下拉菜单</li></ul><p>新建网站项目:<br>选择<code>ASP.NET 空网站</code>这个选项即可<br>添加html页:右键项目-&gt;添加-&gt;添加新项-&gt;HTML页</p><p>HTML:超文本标记语言</p><p>标签:</p><ul><li>p: 段落标签</li><li>&amp;nbsp: 空格</li><li>h#: 标题标签</li><li><code>&lt;!-- 要注释的内容 --&gt;</code>: 注释符</li><li><code>&lt;img/&gt;</code>: 图片标签<ul><li>src: 要显示图片的路径</li><li>height: 图片高度</li><li>width: 图片宽度</li><li>alt: 图片显示失败所显示的文本</li><li>title: 光标移动到图片上所显示的文本</li></ul></li><li><code>&lt;hr/&gt;</code>: 分割线</li><li><code>&lt;font&gt;&lt;/font&gt;</code>: 字体标签 <ul><li>size=1 ~ 7 最大:7</li><li>color: 颜色</li><li>face: 字体系列</li></ul></li><li>a标签:<ul><li>href: 要连接的地址</li><li>target: 打开新网页的方式(<code>_blank</code>:打开一个新的页面;<code>_self</code>:当前页面跳转)<br>作用:<br>1.实现页面内的跳转<br>2.实现页面间的跳转<br>3.发送邮件</li></ul></li><li>div+span</li><li>frame: 框架标签</li></ul><p>更多请查看HTML</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS:控制网页内容的效果</p><p>更多请查看CSS</p><h2 id="委托、XML、播放器项目"><a href="#委托、XML、播放器项目" class="headerlink" title="委托、XML、播放器项目"></a>委托、XML、播放器项目</h2><p>单例模式<br>1.将构造函数私有化<br>2.提供一个静态方法,返回一个对象<br>3.创建一个单例</p><h3 id="XML-可扩展标记语言"><a href="#XML-可扩展标记语言" class="headerlink" title="XML:可扩展标记语言"></a>XML:可扩展标记语言</h3><ul><li>存储数据<br>注意:XML严格区分大小写且也是成对出现<br>XML文档有且只有一个根节点</li></ul><p>节点<br>元素</p><p>通过代码创建XML文档<br>1.引用命名空间</p><ul><li><code>using System.Xml;</code><br>2.创建XML文档对象</li><li><code>XmlDocument doc = new XmlDocument();</code><br>追加文档<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">XmlElement root;</span><br><span class="line"><span class="keyword">if</span>(File.Exists(<span class="string">&quot;xxx.xml&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//文件存在 加载XML</span></span><br><span class="line">    doc.Load(<span class="string">&quot;xxx.xml&quot;</span>); </span><br><span class="line">    <span class="comment">//获取文件根节点</span></span><br><span class="line">    root = doc.DocumentElement;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//文件不存在</span></span><br><span class="line">    <span class="comment">//创建第一行描述信息,并添加到文档中</span></span><br><span class="line">    XmlDeclaration dec = doc.CreateXmlDeclaration(<span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    doc.AppendChild(dec);</span><br><span class="line">    <span class="comment">//创建根节点</span></span><br><span class="line">    root = doc.CreateElement(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    doc.AppendChild(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>读取XML文档<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">doc.Load(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取文件根节点</span></span><br><span class="line">XmlElement root = doc.DocumentElement;</span><br><span class="line"><span class="comment">//获得子节点 返回结点集合</span></span><br><span class="line">XmlNodeList xnl = root.ChildNodes;</span><br><span class="line"><span class="keyword">foreach</span>(XmlNode item <span class="keyword">in</span> xnl)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.InnerText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>读取带属性XML文档<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doc.Load(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line">XmlNodeList xnl = doc.SelectNodes(<span class="string">&quot;/xxx/xxx&quot;</span>);<span class="comment">//找到节点</span></span><br><span class="line"><span class="keyword">foreach</span>(XmlNode node <span class="keyword">in</span> xnl)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(node.Attributes[<span class="string">&quot;属性名&quot;</span>].Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>删除节点<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doc.Load(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line">XmlNode xn = doc.SelectSingleNode(<span class="string">&quot;/xxx/xxx&quot;</span>);</span><br><span class="line">xn.RemoveAll();</span><br><span class="line">doc.Save(<span class="string">&quot;xxx.xml&quot;</span>);</span><br></pre></td></tr></table></figure>3.创建第一行描述信息,并添加到文档中</li><li><code>XmlDeclaration dec = doc.CreateXmlDeclaration(&quot;1.0&quot;,&quot;utf-8&quot;,null);</code></li><li><code>doc.AppendChild(dec);</code><br>4.创建根节点</li><li><code>XmlElement root = doc.CreateElement(&quot;xxx&quot;);</code></li><li><code>doc.AppendChild(root);</code><br>5.创建子节点</li><li><code>XmlElement child = doc.CreateElement(&quot;xxxxx&quot;);</code><br>6.给根节点添加子节点<br><code>child.InnerText = &quot;&quot;;</code> 添加文本<br><code>child.InnerXml = &quot;&quot;;</code> 添加标签<br><code>child.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;);</code> 添加属性</li><li><code>root.AppendChild(child);</code></li><li><code>doc.Save(&quot;xxx.xml&quot;);</code></li></ul><p>保存的文件放在bin目录下</p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>1.为什么使用委托</p><p>将一个方法作为参数传递给另一个方法</p><p>2.委托概念</p><p>声明一个委托类型(命名空间下)<br><code>public delegate void func(参数类型,参数名);</code><br>委托所指向的函数必须跟委托具有相同的签名(参数和返回值)</p><p>3.匿名函数</p><p>没有名字的函数<br>函数只调用一次时建议使用匿名函数<br>匿名函数必须跟委托具有相同的签名(参数和返回值)</p><p>4.练习:使用委托求数组最大值<br>5.练习:使用委托求任意数组最大值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 委托求数组最大值</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">DelCompare</span>(<span class="params"><span class="built_in">object</span> o1,<span class="built_in">object</span> o2</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">object</span>[] o1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            <span class="built_in">object</span> result1 = GetMax(o1, Compare1);</span><br><span class="line">            <span class="built_in">object</span>[] o2 = &#123; <span class="string">&quot;vhgfh&quot;</span>,<span class="string">&quot;yuewueg&quot;</span>,<span class="string">&quot;fdg&quot;</span> &#125;;</span><br><span class="line">            <span class="comment">//object result2 = GetMax(o2, Compare2);</span></span><br><span class="line">            <span class="comment">//object result2 = GetMax(o2, delegate(object o1,object o2) &#123;</span></span><br><span class="line">            <span class="comment">//    string s1 = (string)o1;</span></span><br><span class="line">            <span class="comment">//    string s2 = (string)o2;</span></span><br><span class="line">            <span class="comment">//    return s1.Length - s2.Length;</span></span><br><span class="line">            <span class="comment">//&#125;);</span></span><br><span class="line">            <span class="built_in">object</span> result2 = GetMax(o2, (<span class="built_in">object</span> o1,<span class="built_in">object</span> o2) =&gt;&#123;</span><br><span class="line">                <span class="built_in">string</span> s1 = (<span class="built_in">string</span>)o1;</span><br><span class="line">                <span class="built_in">string</span> s2 = (<span class="built_in">string</span>)o2;</span><br><span class="line">                <span class="keyword">return</span> s1.Length - s2.Length;</span><br><span class="line">            &#125;);</span><br><span class="line">            Console.WriteLine(result2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetMax</span>(<span class="params"><span class="built_in">object</span> []nums,DelCompare del</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">object</span> max = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//要传一个比较方法</span></span><br><span class="line">                <span class="keyword">if</span>(del(max,nums[i])&lt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    max = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Compare1</span>(<span class="params"><span class="built_in">object</span> o1,<span class="built_in">object</span> o2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n1 = (<span class="built_in">int</span>)o1;</span><br><span class="line">            <span class="built_in">int</span> n2 = (<span class="built_in">int</span>)o2;</span><br><span class="line">            <span class="keyword">return</span> n1 - n2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Compare2</span>(<span class="params"><span class="built_in">object</span> o1, <span class="built_in">object</span> o2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s1 = (<span class="built_in">string</span>)o1;</span><br><span class="line">            <span class="built_in">string</span> s2 = (<span class="built_in">string</span>)o2;</span><br><span class="line">            <span class="keyword">return</span> s1.Length - s2.Length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.泛型委托</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 泛型委托求数组最大值</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">DelCompare</span>&lt;<span class="title">T</span>&gt;(<span class="params">T o1,T o2</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] nums= &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            <span class="built_in">int</span> result1 = GetMax&lt;<span class="built_in">int</span>&gt;(nums, Compare1);</span><br><span class="line">            <span class="built_in">string</span>[] str = &#123; <span class="string">&quot;vhgfh&quot;</span>,<span class="string">&quot;yuewueg&quot;</span>,<span class="string">&quot;fdg&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> result2 = GetMax&lt;<span class="built_in">string</span>&gt;(str, (<span class="built_in">string</span> s1, <span class="built_in">string</span> s2) =&gt;</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">return</span> s1.Length - s2.Length;</span><br><span class="line">             &#125;);</span><br><span class="line">            Console.WriteLine(result2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetMax</span>&lt;<span class="title">T</span>&gt;(<span class="params">T []nums,DelCompare&lt;T&gt; del</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            T max = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//要传一个比较方法</span></span><br><span class="line">                <span class="keyword">if</span>(del(max,nums[i])&lt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    max = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Compare1</span>(<span class="params"><span class="built_in">int</span> n1,<span class="built_in">int</span> n2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n1 - n2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Compare2</span>(<span class="params"><span class="built_in">string</span> s1, <span class="built_in">string</span> s2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.Length - s2.Length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.多播委托</p><p>委托可以指向多个函数,但要满足指向的函数必须跟委托具有相同的签名(参数和返回值)<br>可以使用<code>=</code> <code>+=</code> 操作</p><p>8.lambda表达式</p><p>(参数)=&gt;{方法体}   =&gt; goes to<br>eg:<br><code>list.RemoveAll(n =&gt; n &gt; 4);</code> //移除大于4的元素</p><p>9.使用委托实现窗体传值</p><p><a href="https://github.com/liaojie1314/DelegateValueTransfer">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/posts/5751eea2.html"/>
      <url>/posts/5751eea2.html</url>
      
        <content type="html"><![CDATA[<p>C++编写软件(推荐):Visual Studio</p><p>Visual Studio安装:</p><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-创建新项目"><a href="#1-1-创建新项目" class="headerlink" title="1.1 创建新项目"></a>1.1 创建新项目</h3><p>选择Visual C++下的空项目,然后给项目取一个名;右键源文件,添加-&gt;新建项,在弹出的页面中选择C++文件(.cpp),给它取一个名称.</p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p>作用:方便程序员阅读</p><p>俩种格式:<br>1.单行注释: <code>//描述信息</code></p><ul><li>通常放在一行代码的上方,或者一条语句的末尾,对该行代码说明<br>2.多行注释: <code>/* 描述信息 */</code></li><li>通常放在一段代码的上方,对该段代码做整体说明</li></ul><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p>作用: 给一段指定的内存空间起名,方便操作这段内存</p><p>语法: <code>数据类型 变量名 = 初始值</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h3><p>作用: 用于记录程序中不可更改的数据</p><p>C++定义常量的俩种方式:<br> 1.#define宏常量: <code>#define 常量名 常量值</code></p><ul><li>通常在文件上方定义,表示一个常量<br>2.const修饰的变量: <code>const 数据类型 常量名 = 常量值</code></li><li>通常在变量定义前加关键字const,修饰该变量为常量,不可修改</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> month 12</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> month = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p>作用: 定义变量或者常量时,不能使用关键字</p><p>C++关键字如下:</p><div class="table-container"><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td></tr></tbody></table></div><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><p>标识符争取做到见名知意的效果</p><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><div class="table-container"><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>-2^15~2^15-1</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-2^31~2^31-1</td></tr><tr><td>long(长整型)</td><td>Window为4字节,Linux为4字节(32位),8字节(64位)</td><td>-2^31~2^31-1</td></tr><tr><td>long long(长长整型)</td><td>8字节</td><td>-2^63~2^63-1</td></tr></tbody></table></div><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p>作用: 利用sizeof关键字可以统计数据类型所占内存大小</p><p>语法: <code>sizeof(数据类型/变量)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;short占用内存空间为:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int占用内存空间为:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long占用内存空间为:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long long占用内存空间为:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>大小比较:</p><blockquote><p>short &lt; int &lt;= long &lt;= long long</p></blockquote><h3 id="2-3-实型-浮点型"><a href="#2-3-实型-浮点型" class="headerlink" title="2.3 实型(浮点型)"></a>2.3 实型(浮点型)</h3><p>作用: 用于表示小数</p><p>浮点型变量分为俩种:<br> 1.单精度float<br> 2.双精度double</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15~16位有效数字</td></tr></tbody></table></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="type">float</span> f2 = <span class="number">3e2</span>;<span class="comment">//3*10^2</span></span><br><span class="line"><span class="type">float</span> f3 = <span class="number">3e-2</span>;<span class="comment">//3*0.1^2</span></span><br></pre></td></tr></table></figure><blockquote><p>默认情况下输出一个小数会显示出6位有效数字</p></blockquote><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p>作用: 字符型变量用于显示单个字符</p><p>语法: <code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1: 在显示字符型变量时,用单引号将字符括起来,不要用双引号</p><p>注意2: 单引号内只能有一个字符,不可能是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用1个字节</li><li>字符型变量并不是把字符本身放到内存中存储,而是将对应的ASCII编码(int(ch))放入到存储单元</li></ul><p>a - 97<br>A - 65</p><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p>作用: 用于表示一些不能显示出来的ASCII字符<br>常用转义字符有: <code>\n \\ \t</code></p><div class="table-container"><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值(十进制)</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS),将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF),将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF),将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR),将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) (跳到下一个TAB位置)</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\</td><td>代表一个反斜线字符”\”</td><td>092</td></tr><tr><td>\’</td><td>代表一个单引号(撇号)字符</td><td>039</td></tr><tr><td>\”</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\？</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符,d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符,h范围0~9,A~F</td><td>3位16进制</td></tr></tbody></table></div><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p>作用: 用于表示一串字符</p><p>俩种风格:<br> 1.C风格字符串: <code>char 变量名[] = &quot;字符串值&quot;;</code><br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//C风格字符串 等号后面要用双引号</span></span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><br> 2.C++风格字符串: <code>string 变量名 = &quot;字符串值&quot;;</code><br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//C++风格字符串 需包含头文件：#include&lt;string&gt;</span></span><br><span class="line">string str2 = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-7-布尔类型bool"><a href="#2-7-布尔类型bool" class="headerlink" title="2.7 布尔类型bool"></a>2.7 布尔类型bool</h3><p>作用: 布尔数据类型代表真或假的值</p><p>bool类型只有俩个值:</p><ul><li>true —- 真 (本质是1)</li><li>false —- 假 (本质是0)</li></ul><p>bool类型占1个字节大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p>作用: 用于从键盘获取数据</p><p>关键字: cin</p><p>语法: <code>cin &gt;&gt; 变量</code></p><blockquote><p>bool类型只要是非0的值都代表真</p></blockquote><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p>作用: 用于执行代码的运算</p><div class="table-container"><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋值给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较,并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table></div><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p>作用: 用于处理四则运算</p><div class="table-container"><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>1+2</td><td>3</td></tr><tr><td>-</td><td>减</td><td>2-1</td><td>1</td></tr><tr><td>*</td><td>乘</td><td>1*2</td><td>2</td></tr><tr><td>/</td><td>除</td><td>2/1</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2;b=++a;</td><td>a=3;b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2;b=a++;</td><td>a=3;b=2;</td></tr><tr><td>—</td><td>前置递减</td><td>a=2;b=—a;</td><td>a=1;b=1;</td></tr><tr><td>—</td><td>后置递减</td><td>a=2;b=a—;</td><td>a=1;b=2;</td></tr></tbody></table></div><blockquote><p>俩个整数相除结果依然是整数,将小数部分去除</p><p>前置递增 先让变量+1,然后进行表达式计算;后置递增 先进行表达式计算,然后让变量+1(递减同理)</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p>作用: 用于将表达式的值赋值给变量</p><div class="table-container"><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2;b=3;</td><td>a=2;b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0;a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5;a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2;a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4;a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3;a%=2;</td><td>a=1;</td></tr></tbody></table></div><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p>作用: 用于表达式的比较,并返回一个真值或假值</p><div class="table-container"><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4!=3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4&gt;=3</td><td>1</td></tr></tbody></table></div><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p>作用: 用于根据表达式的值返回真值或假值</p><div class="table-container"><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假,则!a为真;如果a为真,则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a&amp;&amp;b</td><td>如果a和b都为真,则结果为真,否则为假。</td></tr><tr><td>\</td><td>\</td><td></td><td>或</td><td>a\</td><td>\</td><td>b</td><td>如果a和b有一个为真,则结果为真,二者都为假时,结果为假。</td></tr></tbody></table></div><p>在C++中,除0外都为真</p><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基础的三种程序运算结构:顺序结构、选择结构、循环结构</p><ul><li>顺序结构:程序按顺序执行,不发生跳转</li><li>选择结构:依据条件是否满足,有选择的执行相应功能</li><li>循环结构:依据条件是否满足,循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p>作用: 执行满足条件的语句</p><p>if语句的三种形式</p><ul><li>单行格式if语句</li><li>多行格式if语句</li><li>多条件的if语句</li></ul><p>1.单行格式if语句: <code>if(条件)&#123;条件满足执行的语句&#125;</code></p><p>2.多行格式if语句: <code>if(条件)&#123;条件满足执行的语句&#125;else&#123;条件不满足执行的语句&#125;</code></p><p>3.多条件的if语句: <code>if(条件1)&#123;条件1满足执行的语句&#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123;条件都不满足执行的语句&#125;</code></p><p>嵌套if语句: 在if语句中,可以嵌套使用if语句,达到更精确的条件判断</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入你的分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; score;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;你的分数为：&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">600</span>)<span class="comment">// 注意:if 条件后面不能加分号</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;恭喜你考上一本&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (score &gt; <span class="number">700</span>) </span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;恭喜你考上北大&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score&gt;<span class="number">650</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;恭喜你考上清华&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;恭喜你考上重大&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">500</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;恭喜你考上二本&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>  <span class="keyword">if</span> (score&gt;<span class="number">400</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;恭喜你考上三本&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;<span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;未考上本科大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p>作用: 通过三目运算符实现简单的判断</p><p>语法: <code>表达式1?表达式2:表达式3</code></p><p>解释: </p><ul><li>如果表达式1的值为真,执行表达式2,并返回表达式2的结果;</li><li>如果表达式1的值为假,执行表达式3,并返回表达式3的结果。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//三目运算符</span></span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">  c = (a &gt; b ? a : b);</span><br><span class="line">  <span class="comment">//C++中三目运算符返回的是变量可以继续赋值  (a &lt; b ? a : b)=100; ==&gt;a=100;b=20</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p>作用: 执行多条件分支语句</p><p>语法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">1</span>: 执行语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">2</span>: 执行语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">default</span>: 执行语句;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请打分&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; score;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;你打的分为&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">switch</span> (score)</span><br><span class="line">    <span class="comment">//缺点：只能是整数或者字符</span></span><br><span class="line">    <span class="comment">//优点：结构清晰，执行效率高</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;很好&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;很好&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;不好&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case里如果没有break,那么程序会一直向下执行</p><blockquote><p>if与switch区别?<br>switch 缺点：判断时只能是整数或者字符,不可以是一个区间<br>switch 优点：结构清晰，执行效率高</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>while(循环条件)&#123;循环语句&#125;</code></p><p>解释: 只要循环条件的结果为真,就执行循环语句</p><p>写循环时应避免死循环!!!</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//打印0~9</span></span><br><span class="line">  <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>do&#123;循环语句&#125;while(循环条件);</code></p><p>注意: 与while的区别在于do…while会先执行一次循环语句,在判断循环条件</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//打印0~9</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125; <span class="keyword">while</span> (num&lt;<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成随机数<br>添加随机数种子 利用系统当前时间生成随机数,防止每次随机数相同<br>srand((unsigned int)time(NULL));<br>int num = rand() % 100 + 1;<br>生成 0 + 1 ~ 99 + 1随机数</p></blockquote><h5 id="案例-水仙花数"><a href="#案例-水仙花数" class="headerlink" title="案例: 水仙花数"></a>案例: 水仙花数</h5><p>案例描述: 水仙花数是指一个3位数,它的每个位上的数字的3次幂之和等于它本身<br>例如: 1^3+5^3+3^3=153</p><p>代码: </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1.先打印所有三位数</span></span><br><span class="line">  <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//2.从所有三位数中找到水仙花数</span></span><br><span class="line">    <span class="type">int</span> a = num % <span class="number">10</span>; <span class="comment">// 个位</span></span><br><span class="line">    <span class="type">int</span> b = num / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//十位</span></span><br><span class="line">    <span class="type">int</span> c = num / <span class="number">100</span>;<span class="comment">//百位</span></span><br><span class="line">    <span class="keyword">if</span> (a*a*a+b*b*b+c*c*c == num)<span class="comment">//如果是水仙花数才打印</span></span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">  &#125; <span class="keyword">while</span> (num&lt;<span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p>作用: 满足循环条件,执行循环语句</p><p>语法: <code>for(起始表达式;条件表达式;末尾循环体)&#123;循环语句;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//打印0~9</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p>作用: 在循环体中再嵌套一层循环,解决一些设计问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* 打印10*10星图</span></span><br><span class="line"><span class="comment">  for (int i = 0;i &lt; 10;i++) </span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    for (int j = 0;j &lt; 10;j++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      cout &lt;&lt; &quot;*&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">//九九乘法表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; j &lt;&lt; <span class="string">&quot;x&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; (i * j)&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p>作用: 用于跳出选择结构或循环结构</p><p>break 使用场景：<br>1.switch语句中 case:break;<br>2.循环语句中 跳出当前循环<br>3.嵌套循环语句中 跳出内部循环</p><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p>作用: 在循环语句中,跳出本次循环中余下尚未执行的语句,继续执行下一次循环</p><p>continue:筛选条件符合的内容</p><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p>作用: 可以无条件跳转语句</p><p>语法: <code>goto 标记;</code><br>翻译: 如果标记的名称存在,在执行到goto语句时,会跳转到标记的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//goto:</span></span><br><span class="line">  <span class="comment">//语法：goto 标记;</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;1 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;2 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">goto</span> FLAG;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;3 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;4 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  FLAG:</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;5 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/goto.png" alt=""></p><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组就是一个集合里面存放了相同类型的数据结构</p><p>特点1:数组中的每个数据元素都是相同的数据类型<br>特点2:数组是由连续的内存位置组成的</p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>1.<code>数据类型 数组名[数组长度];</code><br>2.<code>数据类型 数组名[数组长度] = &#123;值1,值2...&#125;;</code><br>3.<code>数据类型 数组名[] = &#123;值1,值2...&#125;;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//一维定义：</span></span><br><span class="line">  <span class="comment">//1.</span></span><br><span class="line">  <span class="type">int</span> arr1[<span class="number">5</span>];</span><br><span class="line">  arr1[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">  arr1[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">  arr1[<span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line">  arr1[<span class="number">3</span>] =<span class="number">40</span>;</span><br><span class="line">  arr1[<span class="number">4</span>] = <span class="number">50</span>;</span><br><span class="line">  <span class="comment">//2.</span></span><br><span class="line">  <span class="type">int</span> arr2[<span class="number">5</span>]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">  <span class="comment">//3.</span></span><br><span class="line">  <span class="type">int</span> arr3[]=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">  <span class="comment">//定义数组的时候,必须有初始长度</span></span><br><span class="line">  <span class="comment">//数组名(常量，不可修改)：</span></span><br><span class="line">  <span class="comment">//1.统计整个数组在内存中的长度 sizeof(arr)</span></span><br><span class="line">  <span class="comment">//2.获取数组在内存中的首地址  cout&lt;&lt;(int)arr&lt;&lt;endl;  第一个元素地址: (int)&amp;arr[0]</span></span><br><span class="line">  <span class="comment">//3.元素个数 sizeof(arr)/sizeof(arr[0])</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组元素逆置"><a href="#数组元素逆置" class="headerlink" title="数组元素逆置"></a>数组元素逆置</h5><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//元素逆置：(start&lt;end执行互换)</span></span><br><span class="line">  <span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span> &#125;;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;逆序前&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> end = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>;<span class="comment">//末尾元素下标</span></span><br><span class="line">  <span class="keyword">while</span> (start&lt;end)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//起始下标与结束下标的元素互换</span></span><br><span class="line">    <span class="type">int</span> temp = arr[start];</span><br><span class="line">    arr[start] = arr[end];</span><br><span class="line">    arr[end] = temp;</span><br><span class="line">    <span class="comment">//起始位置++;结束位置--</span></span><br><span class="line">    start++;</span><br><span class="line">    end--;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;逆序后&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); j++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[j] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/元素逆置.png" alt=""></p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//冒泡排序</span></span><br><span class="line">  <span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序前&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//排序总轮数=元素个数-1</span></span><br><span class="line">  <span class="comment">//每轮对比次数=元素个数-排序轮数-1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>])-i - <span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); j++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[j] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/冒泡排序.png" alt=""></p><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>1.<code>数据类型 数组名[行数][列数];</code><br>2.<code>数据类型 数组名[行数][列数] = &#123;&#123;数据1,数据2&#125;,&#123;数据3,数据4&#125;&#125;;</code><br>3.<code>数据类型 数组名[行数][列数] = &#123;数据1,数据2,数据3,数据4&#125;;</code><br>3.<code>数据类型 数组名[][列数] = &#123;数据1,数据2,数据3,数据4&#125;;;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//二维定义:</span></span><br><span class="line">  <span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//数组名(常量，不可修改)：</span></span><br><span class="line">  <span class="comment">//1.占内存空间大小 sizeof(arr) 第一行占用内存 sizeof(arr[0]) 第一个元素 sizeof(arr[0][0])</span></span><br><span class="line">  <span class="comment">//行数：sizeof(arr)/sizeof(arr[0]) 列数：sizeof(arr[0])/sizeof(arr[0][0])</span></span><br><span class="line">  <span class="comment">//2.获取数组在内存中的首地址  cout&lt;&lt;arr&lt;&lt;endl; (arr arr[0] &amp;arr[0][0])</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><p>作用: 将一段经常用的代码封装起来,减少重复代码</p><h3 id="6-1-函数的定义"><a href="#6-1-函数的定义" class="headerlink" title="6.1 函数的定义"></a>6.1 函数的定义</h3><p>函数的定义一般主要有5个步骤</p><p>1、返回值类型<br>2、函数名<br>3、参数列表(形参)<br>4、函数体语句<br>5、return表达式</p><p>语法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名 (参数列表)</span><br><span class="line">&#123;</span><br><span class="line">  函数体语句</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> 表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-函数的调用"><a href="#6-2-函数的调用" class="headerlink" title="6.2 函数的调用"></a>6.2 函数的调用</h3><p>功能: 使用定义好的函数</p><p>语法: <code>函数名 (参数)</code></p><p>当调用函数时候,实参的值会传递给形参</p><h3 id="6-3-值传递"><a href="#6-3-值传递" class="headerlink" title="6.3 值传递"></a>6.3 值传递</h3><ul><li>所谓值传递,就是函数调用时实参将数值传入给形参</li><li>值传递时,如果形参发生,并不会影响实参</li></ul><h3 id="6-4-函数的常见样式"><a href="#6-4-函数的常见样式" class="headerlink" title="6.4 函数的常见样式"></a>6.4 函数的常见样式</h3><p>1.无参无返<br>2.有参无返<br>3.无参有返<br>4.有参有返</p><h3 id="6-5-函数的声明"><a href="#6-5-函数的声明" class="headerlink" title="6.5 函数的声明"></a>6.5 函数的声明</h3><p>作用: 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义</p><ul><li>函数的声明可以多次,但是函数的定义只能有一次</li></ul><h3 id="6-6-函数的分文件编写"><a href="#6-6-函数的分文件编写" class="headerlink" title="6.6 函数的分文件编写"></a>6.6 函数的分文件编写</h3><p>作用: 让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤:<br>1.创建.h头文件<br>头文件右键-&gt;添加-&gt;新建项,在弹出页面中选择头文件(eg:max.h)<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/头文件.png" alt=""><br>2.创建.cpp源文件<br>源文件右键-&gt;添加-&gt;新建项,在弹出页面中选择源文件(eg:max.cpp)<br>3.头文件写函数声明<br>4.源文件写函数定义</p><p>代码:</p><p>max.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></p><p>max.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;max.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="built_in">max</span>(a, b);</span><br><span class="line">  cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><p>作用: 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的,一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h3 id="7-1-指针变量的定义和使用"><a href="#7-1-指针变量的定义和使用" class="headerlink" title="7.1 指针变量的定义和使用"></a>7.1 指针变量的定义和使用</h3><p>语法: <code>数据类型 * 变量名;</code></p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">/*int* p;</span></span><br><span class="line"><span class="comment">  p = &amp;a;*/</span></span><br><span class="line">  <span class="comment">//32位系统指针占4个字节</span></span><br><span class="line">  <span class="comment">//64位系统指针占8个字节</span></span><br><span class="line">  <span class="type">int</span>* p = &amp;a;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a地址为&quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p=&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">  <span class="comment">/*通过解引用使用指针</span></span><br><span class="line"><span class="comment">  *p = 100;</span></span><br><span class="line"><span class="comment">  cout &lt;&lt; &quot;*p=&quot; &lt;&lt; *p &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  cout &lt;&lt; &quot;a=&quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-2-空指针和野指针"><a href="#7-2-空指针和野指针" class="headerlink" title="7.2 空指针和野指针"></a>7.2 空指针和野指针</h3><p>空指针：<br>1.用于指针变量初始化： int* p =NULL;<br>2.空指针不可以进行访问：0 ~ 255之间的内存编号是系统占用</p><p>野指针：避免出现<br>int<em> p= (int \</em>)0x1100;</p><h3 id="7-3-const修饰指针"><a href="#7-3-const修饰指针" class="headerlink" title="7.3 const修饰指针"></a>7.3 const修饰指针</h3><p>const修饰指针：常量指针const int<em> p = &amp;a(指针指向可以修改，指针指向的值不可以改)<br>指针常量int </em> const p = &amp;a(指针指向不可以改，指针指向的值可以修改)<br>const int* const p = &amp;a(指针指向,指针指向的值都不可以改)</p><h3 id="7-4-指针和数组"><a href="#7-4-指针和数组" class="headerlink" title="7.4 指针和数组"></a>7.4 指针和数组</h3><p>作用: 利用指针访问数组中元素</p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="comment">//指针与数组：</span></span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">int</span>* p = arr;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr[0]=&quot;</span> &lt;&lt; *p&lt;&lt;endl;</span><br><span class="line">  p++;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr[1]=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;指针遍历数组&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span>* p2 = arr;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *p2 &lt;&lt; endl;</span><br><span class="line">    p2++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-5-指针和函数"><a href="#7-5-指针和函数" class="headerlink" title="7.5 指针和函数"></a>7.5 指针和函数</h3><p>作用: 利用指针作函数参数,可以修改实参的值</p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* p1, <span class="type">int</span>* p2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="comment">/*地址传递：</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">swap</span>(&amp;num1, &amp;num2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;num1=&quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;num2=&quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* p1, <span class="type">int</span>* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp = *p1;</span><br><span class="line">  *p1 = *p2;</span><br><span class="line">  *p2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/swap.png" alt=""></p><h5 id="案例-指针、数组、函数"><a href="#案例-指针、数组、函数" class="headerlink" title="案例: 指针、数组、函数"></a>案例: 指针、数组、函数</h5><p>案例描述: 封装一个函数,利用冒泡排序,实现对整型数组的升序排序<br>例如数组: <code>int arr[10] = &#123;4,3,6,9,1,2,10,8,7,5&#125;;</code></p><p>代码:</p><p>bubbleSort.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure></p><p>bubbleSort.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//排序总轮数=元素个数-1</span></span><br><span class="line">  <span class="comment">//每轮对比次数=元素个数-排序轮数-1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len- i - <span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;bubbleSort.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//案例：</span></span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line">  <span class="built_in">printArray</span>(arr, len);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/指针数组函数.png" alt=""></p><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><p>结构体属于用户自定义的数据类型,允许用户存储不同的数据类型</p><h3 id="8-1-结构体定义和使用"><a href="#8-1-结构体定义和使用" class="headerlink" title="8.1 结构体定义和使用"></a>8.1 结构体定义和使用</h3><p>语法: <code>struct 结构体名 &#123;结构体成员列表&#125;;</code></p><p>通过结构体创建变量的方式有三种:</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = {成员1值,成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;s3;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Student</span> s1;</span><br><span class="line">  <span class="comment">//等同于Student s1;</span></span><br><span class="line">  s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  s1.age = <span class="number">18</span>;</span><br><span class="line">  s1.score = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">struct</span>  <span class="title class_">Student</span> s2= &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">88</span> &#125;;</span><br><span class="line">  s3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">  s3.age = <span class="number">17</span>;</span><br><span class="line">  s3.score = <span class="number">90</span>;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-结构体数组"><a href="#8-2-结构体数组" class="headerlink" title="8.2 结构体数组"></a>8.2 结构体数组</h3><p>作用: 将自定义的结构体放入到数组中方便维护</p><p>语法: <code>struct 结构体名 数组名[元素个数] = &#123;&#123;&#125;,&#123;&#125;,...&#123;&#125;&#125;</code></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体数组</span></span><br><span class="line"><span class="comment">//1.定义结构体</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//2.创建结构体数组</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Student</span> stuArray[<span class="number">3</span>] =</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">16</span>,<span class="number">89</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">18</span>,<span class="number">98</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//3.给结构体数组赋值</span></span><br><span class="line">  stuArray[<span class="number">2</span>].name = <span class="string">&quot;张六&quot;</span>;</span><br><span class="line">  stuArray[<span class="number">2</span>].age = <span class="number">19</span>;</span><br><span class="line">  stuArray[<span class="number">2</span>].score = <span class="number">90</span>;</span><br><span class="line">  <span class="comment">//4.遍历结构体数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stuArray[i].name </span><br><span class="line">      &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stuArray[i].age </span><br><span class="line">      &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stuArray[i].score &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-结构体指针"><a href="#8-3-结构体指针" class="headerlink" title="8.3 结构体指针"></a>8.3 结构体指针</h3><p>作用: 通过指针访问结构体中的成员</p><ul><li>利用操作符<code>-&gt;</code>可以通过结构体指针访问结构体属性</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1.创建结构体变量</span></span><br><span class="line">  Student s = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">90</span> &#125;;</span><br><span class="line">  <span class="comment">//2.通过指针指向结构体变量</span></span><br><span class="line">  Student* p = &amp;s;</span><br><span class="line">  <span class="comment">//3.通过指针访问数据</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name</span><br><span class="line">    &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age</span><br><span class="line">    &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-结构体嵌套结构体"><a href="#8-4-结构体嵌套结构体" class="headerlink" title="8.4 结构体嵌套结构体"></a>8.4 结构体嵌套结构体</h3><p>作用: 结构体中的成员可以是另一个结构体</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体嵌套</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Student</span> stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1.创建结构体变量</span></span><br><span class="line">  Teacher t;</span><br><span class="line">  t.id = <span class="number">10</span>;</span><br><span class="line">  t.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">  t.age = <span class="number">50</span>;</span><br><span class="line">  t.stu.name = <span class="string">&quot;小王&quot;</span>;</span><br><span class="line">  t.stu.age = <span class="number">18</span>;</span><br><span class="line">  t.stu.score = <span class="number">100</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;老师姓名：&quot;</span> &lt;&lt; t.name</span><br><span class="line">    &lt;&lt; <span class="string">&quot; 老师年龄：&quot;</span> &lt;&lt; t.age</span><br><span class="line">    &lt;&lt; <span class="string">&quot;学生姓名：&quot;</span> &lt;&lt; t.stu.name</span><br><span class="line">    &lt;&lt; <span class="string">&quot; 学生年龄：&quot;</span> &lt;&lt; t.stu.age</span><br><span class="line">    &lt;&lt; <span class="string">&quot; 学生分数：&quot;</span> &lt;&lt; t.stu.score &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-结构体做函数参数"><a href="#8-5-结构体做函数参数" class="headerlink" title="8.5 结构体做函数参数"></a>8.5 结构体做函数参数</h3><p>作用: 将结构体作为参数向函数中传递</p><p>传递方式有俩种:</p><ul><li>值传递</li><li>地址传递</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">printStudent1</span><span class="params">(<span class="keyword">struct</span> student s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;值传递子函数 : 姓名：&quot;</span> &lt;&lt; s.name &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;值传递子函数 : 年龄：&quot;</span> &lt;&lt; s.age &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;值传递子函数 : 分数：&quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">printStudent2</span><span class="params">(<span class="keyword">struct</span> student *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;地址传递子函数 : 姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;地址传递子函数 : 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;地址传递子函数 : 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> s;</span><br><span class="line">  s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  s.age = <span class="number">20</span>;</span><br><span class="line">  s.score = <span class="number">85</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;main : 姓名：&quot;</span> &lt;&lt; s.name &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;main : 年龄：&quot;</span> &lt;&lt; s.age&lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;main : 分数：&quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printStudent1</span>(s);</span><br><span class="line">  <span class="built_in">printStudent2</span>(&amp;s);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/结构体做函数参数.png" alt=""></p><blockquote><p>总结:如果不想修改主函数中的数据用值传递,反之用地址传递</p></blockquote><h3 id="8-6-结构体中const使用场景"><a href="#8-6-结构体中const使用场景" class="headerlink" title="8.6 结构体中const使用场景"></a>8.6 结构体中const使用场景</h3><p>作用: 用const来防止误操作</p><h5 id="案例-结构体"><a href="#案例-结构体" class="headerlink" title="案例: 结构体"></a>案例: 结构体</h5><p>案例描述: 设计一个英雄的结构体,包括成员姓名,年龄,性别;创建结构体数组,数组中存放5名英雄。通过冒泡排序算法,将数组中的英雄按照年龄进行升序排序,最终打印排序后的结果</p><p>五名英雄信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,</span><br><span class="line">&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hero</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">struct</span> Hero heroArray[], <span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length-i<span class="number">-1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (heroArray[j].age &gt; heroArray[j + <span class="number">1</span>].age)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Hero</span> temp = heroArray[j];</span><br><span class="line">        heroArray[j] = heroArray[j + <span class="number">1</span>];</span><br><span class="line">        heroArray[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHero</span><span class="params">(<span class="keyword">struct</span> Hero heroArray[], <span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; heroArray[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; heroArray[i].age &lt;&lt; <span class="string">&quot; 性别：&quot;</span> &lt;&lt; heroArray[i].sex &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Hero</span> heroArray[<span class="number">5</span>] = &#123;</span><br><span class="line">  &#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125; &#125;;</span><br><span class="line">  <span class="type">int</span> length = <span class="built_in">sizeof</span>(heroArray) / <span class="built_in">sizeof</span>(heroArray[<span class="number">0</span>]);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printHero</span>(heroArray, length);</span><br><span class="line">  <span class="built_in">bubbleSort</span>(heroArray, length);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printHero</span>(heroArray, length);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/结构体案例.png" alt=""></p><h5 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h5><p>功能要求:</p><ul><li>菜单功能:用户选择功能的界面 void showMenu()</li><li>添加联系人:向通讯录中添加新人,信息包括(姓名、性别、年龄、联系电话、家庭地址)最多记录1000人<br>步骤:<ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul></li><li>显示联系人:显示通讯录中所有联系人的信息<br>步骤:<ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul></li><li>删除联系人:按照姓名进行删除指定联系人<br>步骤:<ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除指定联系人</li></ul></li><li>查找联系人:按照姓名查看指定联系人信息<br>步骤:<ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul></li><li>修改联系人:按照姓名重新修改指定联系人<br>步骤:<ul><li>封装修改联系人函数</li><li>测试修改指定联系人</li></ul></li><li>清空联系人:清空通讯录中所有信息</li><li>退出通讯录:退出当前使用的通讯录 当用户选择0时,退出</li></ul><p>提示代码:<br><code>system(&quot;cls&quot;);</code>//清屏</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="comment">//联系人结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span>  m_Sex;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">  string m_Phone;</span><br><span class="line">  string m_Addr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通讯录结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Addressbooks</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Person</span> personArray[MAX];</span><br><span class="line">  <span class="type">int</span> m_Size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//添加联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addPerson</span><span class="params">(Addressbooks* abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (abs-&gt;m_Size==MAX)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    string name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入性别:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1  ---  男&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2  ---  女&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      cin &gt;&gt; sex;</span><br><span class="line">      <span class="keyword">if</span> (sex==<span class="number">1</span>||sex==<span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;输入有误，重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入年龄:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">      cin &gt;&gt; age;</span><br><span class="line">      <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age&lt;<span class="number">150</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;输入有误，重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入联系电话:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    string phone;</span><br><span class="line">    cin &gt;&gt; phone;</span><br><span class="line">    abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入家庭住址:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    string address;</span><br><span class="line">    cin &gt;&gt; address;</span><br><span class="line">    abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;</span><br><span class="line">    abs-&gt;m_Size++;<span class="comment">//更新</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">(Addressbooks* abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (abs-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (abs-&gt;personArray[i].m_Sex==<span class="number">1</span>?<span class="string">&quot;男&quot;</span>:<span class="string">&quot;女&quot;</span>)&lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Phone&lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;地址：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查联系人是否存在，存在返回其在数组中位置，不存在返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isExist</span><span class="params">(Addressbooks* abs, string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; abs-&gt;m_Size; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (abs-&gt;personArray[i].m_Name == name)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deletePerson</span><span class="params">(Addressbooks* abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入删除的联系人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  string name;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  <span class="type">int</span> ret = <span class="built_in">isExist</span>(abs, name);</span><br><span class="line">  <span class="keyword">if</span> ( ret!= <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ret; i &lt; abs-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//数据前移</span></span><br><span class="line">      abs-&gt;personArray[i] = abs-&gt;personArray[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    abs-&gt;m_Size--;<span class="comment">//更新</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findPerson</span><span class="params">(Addressbooks *abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入要查找的联系人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  string name;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  <span class="type">int</span> ret=<span class="built_in">isExist</span>(abs, name);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (abs-&gt;personArray[ret].m_Sex == <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;地址：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifyPerson</span><span class="params">(Addressbooks* abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入要修改的联系人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  string name;</span><br><span class="line">  cin &gt;&gt; name;</span><br><span class="line">  <span class="type">int</span> ret = <span class="built_in">isExist</span>(abs, name);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    string name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    abs-&gt;personArray[ret].m_Name = name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入性别:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1  ---  男&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2  ---  女&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      cin &gt;&gt; sex;</span><br><span class="line">      <span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        abs-&gt;personArray[ret].m_Sex = sex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;输入有误，重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入年龄:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      cin &gt;&gt; age;</span><br><span class="line">      <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        abs-&gt;personArray[ret].m_Age = age;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;输入有误，重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入联系电话:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    string phone;</span><br><span class="line">    cin &gt;&gt; phone;</span><br><span class="line">    abs-&gt;personArray[ret].m_Phone = phone;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入家庭住址:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    string address;</span><br><span class="line">    cin &gt;&gt; address;</span><br><span class="line">    abs-&gt;personArray[ret].m_Addr = address;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空联系人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearPerson</span><span class="params">(Addressbooks* abs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  abs-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;通讯录已清空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 1.添加联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 2.显示联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 3.删除联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 4.查找联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 5.修改联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 6.清空联系人 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;***** 0.退出通讯录 *****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Addressbooks abs;</span><br><span class="line">  abs.m_Size = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">showMenu</span>();<span class="comment">//菜单</span></span><br><span class="line">    cin &gt;&gt; select;</span><br><span class="line">    <span class="keyword">switch</span> (select)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//1.添加联系人</span></span><br><span class="line">      <span class="built_in">addPerson</span>(&amp;abs);<span class="comment">//地址传递，可以修饰实参</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//2.显示联系人</span></span><br><span class="line">      <span class="built_in">showPerson</span>(&amp;abs);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//3.删除联系人</span></span><br><span class="line">      <span class="built_in">deletePerson</span>(&amp;abs);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//4.查找联系人</span></span><br><span class="line">      <span class="built_in">findPerson</span>(&amp;abs);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//5.修改联系人</span></span><br><span class="line">      <span class="built_in">modifyPerson</span>(&amp;abs);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//6.清空联系人</span></span><br><span class="line">      <span class="built_in">clearPerson</span>(&amp;abs);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//0.退出通讯录</span></span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;欢迎下次使用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-C-核心编程"><a href="#2-C-核心编程" class="headerlink" title="2 C++核心编程"></a>2 C++核心编程</h2><h3 id="2-1-内存分区模式"><a href="#2-1-内存分区模式" class="headerlink" title="2.1 内存分区模式"></a>2.1 内存分区模式</h3><ul><li>代码区:存放函数体的二进制代码,由操作系统进行管理的 特点:共享、只读</li><li>全局区:存放全局变量和静态变量以及常量 该区域的数据在程序结束后由操作系统释放</li><li>栈区:由编译器自动分配释放,存放函数的参数值,局部变量等 不要返回局部变量的地址:第一次可以正确打印是因为编译器做了保留,第二次这个数据就不再保留了</li><li>堆区:由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收 主要利用new在堆区开辟内存</li></ul><p>程序运行前:代码区、全局区</p><p>不在全局区：局部变量，const修饰局部变量(局部常量)<br>全局区：全局变量，静态变量(static关键字修饰 eg:static int s_a = 10),常量:字符串常量、const修饰全局变量</p><p>程序运行后:栈区、堆区</p><p><strong>内存4区意义:</strong><br>不同区域存放的数据,赋予不同的生命周期,给我们更大的灵活编程</p><p>指针本质是局部变量</p><h4 id="2-1-1-new操作符"><a href="#2-1-1-new操作符" class="headerlink" title="2.1.1 new操作符"></a>2.1.1 new操作符</h4><p>C++中利用<code>new</code>操作符在堆区开辟数据<br>堆区开辟的数据,由程序员手动开辟、手动释放,释放利用操作符<code>delete</code></p><p>语法: <code>new 数据类型</code></p><p>利用new创建的数据,会返回该数据对应的类型的指针<br>释放数组<code>delete[] arr;</code></p><h3 id="2-2-引用"><a href="#2-2-引用" class="headerlink" title="2.2 引用"></a>2.2 引用</h3><h4 id="2-2-1-引用的基本使用"><a href="#2-2-1-引用的基本使用" class="headerlink" title="2.2.1 引用的基本使用"></a>2.2.1 引用的基本使用</h4><p>作用: 给变量起别名</p><p>语法: <code>数据类型 &amp;别名 = 原名</code></p><ul><li>引用必须初始化</li><li>引用一旦初始化就不能更改</li></ul><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//引用基本语法:</span></span><br><span class="line">  <span class="comment">//数据类型 &amp;别名=原名</span></span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span>&amp; b = a;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">100</span>;</span><br><span class="line">  b = c;<span class="comment">//赋值操作不是更改应用</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a=10,b=10</span></span><br><span class="line"><span class="comment">//a=100,b=100</span></span><br></pre></td></tr></table></figure></p><h4 id="2-2-2-引用做函数参数"><a href="#2-2-2-引用做函数参数" class="headerlink" title="2.2.2 引用做函数参数"></a>2.2.2 引用做函数参数</h4><p>作用: 函数传参时,可以利用引用的技术让形参修饰实参<br>优点: 简化指针修改实参</p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">mySwap</span>(a,b);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用做函数参数</span></span><br><span class="line"><span class="comment">//优点:简化指针修改实参</span></span><br><span class="line"><span class="comment">//作用：让形参修饰实参</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-3-引用做函数返回值"><a href="#2-2-3-引用做函数返回值" class="headerlink" title="2.2.3 引用做函数返回值"></a>2.2.3 引用做函数返回值</h4><p>作用: 引用是可以作为函数的返回值存在的</p><p>1.不能返回局部变量的引用<br>2.函数的调用可以作为左值</p><p>本质：指针常量 int * const ref = &amp;a</p><h4 id="2-2-4-常量引用"><a href="#2-2-4-常量引用" class="headerlink" title="2.2.4 常量引用"></a>2.2.4 常量引用</h4><p>作用: 常量引用主要用来修饰形参,防止误操作</p><p>在函数形参列表中,可以加<code>const修饰形参</code>,防止形参改变实参</p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//常量引用</span></span><br><span class="line">  <span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">  int&amp; ref = a;*/</span></span><br><span class="line">  <span class="comment">//const int&amp; ref = 10;//加入const变为只读，不能修改</span></span><br><span class="line">  <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">showValue</span>(a);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;val=&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-函数-提升"><a href="#2-3-函数-提升" class="headerlink" title="2.3 函数(提升)"></a>2.3 函数(提升)</h3><h4 id="2-3-1-函数默认参数"><a href="#2-3-1-函数默认参数" class="headerlink" title="2.3.1 函数默认参数"></a>2.3.1 函数默认参数</h4><p>在C++中,函数的形参列表中的形参是可以有默认值的</p><p>语法: <code>返回值类型 函数名 (参数 = 默认值)&#123;&#125;</code></p><p>注意:<br>1.如果某个位置已经有了默认参数,那么从这个位置往后,从左往右都必须有默认值<br>2.如果函数声明有默认参数,函数实现就不能有默认参数(声明和实现只能有一个默认参数)</p><h4 id="2-3-2-函数占位参数"><a href="#2-3-2-函数占位参数" class="headerlink" title="2.3.2 函数占位参数"></a>2.3.2 函数占位参数</h4><p>语法: <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>占位参数也可以有默认参数(void func(int a,int = 10))</p><h4 id="2-3-3-函数重载"><a href="#2-3-3-函数重载" class="headerlink" title="2.3.3 函数重载"></a>2.3.3 函数重载</h4><p>作用: 函数名可以相同,提高复用性</p><p>条件：<br>1.同一作用域<br>2.函数名称相同<br>3.函数参数<em>类型不同</em>，或者<em>个数不同</em>，或者<em>顺序不同</em></p><p>函数返回值不可以作为函数重载的条件</p><ul><li>引用可作为重载条件：void func(int&amp; a)(传入变量时执行)与 void func(const int&amp; a)（传入数据时执行）</li><li>函数重载遇到函数默认参数</li></ul><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func()的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func(int a)的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func(double a)的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func(int a,double b)的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func(double a,int b)的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//条件：</span></span><br><span class="line">  <span class="comment">//1.同一作用域</span></span><br><span class="line">  <span class="comment">//2.函数名称相同</span></span><br><span class="line">  <span class="comment">//3.函数参数类型不同，或者个数不同，或者顺序不同</span></span><br><span class="line">  <span class="comment">//函数返回值不可以作为函数重载的条件</span></span><br><span class="line">  <span class="comment">//func();</span></span><br><span class="line">  <span class="comment">//func(10);</span></span><br><span class="line">  <span class="comment">//func(3.14);</span></span><br><span class="line">  <span class="comment">//func(10,3.14);</span></span><br><span class="line">  <span class="built_in">func</span>(<span class="number">3.14</span>,<span class="number">10</span>);</span><br><span class="line">  <span class="comment">//引用可作为重载条件：void func(int&amp; a)(传入变量执行)与 void func(const int&amp; a)（传入数据执行）</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-类和对象"><a href="#2-4-类和对象" class="headerlink" title="2.4 类和对象"></a>2.4 类和对象</h3><p>C++面向对象三大特性为:<code>封装、继承、多态</code></p><p>C++认为<code>万事万物皆为对象</code>,对象上有其属性和行为</p><p>具有相同性质的对象可以抽象称为类</p><h4 id="2-4-1-封装"><a href="#2-4-1-封装" class="headerlink" title="2.4.1 封装"></a>2.4.1 封装</h4><p>封装的意义:</p><ul><li>将属性和行为作为一个整体,表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p>封装意义一:<br>    在设计类的时候,属性和行为写在一起,表现事物</p><p>语法: <code>class 类名&#123; 访问权限: 属性 / 行为 &#125;;</code></p><p>类中的属性和行为 我们统一称为 成员<br>属性: 成员属性 成员变量<br>行为: 成员函数 成员方法</p><p>封装意义二:<br>类在设计时,可以把属性和行为放在不同的权限下,加以控制<br>访问权限有三种:</p><p>1.public   公共权限   成员 类内可以访问 类外可以访问<br>2.protected保护权限   成员 类内可以访问 类外不可以访问 儿子可以访问父亲中的保护内容<br>3.private  私有权限   成员 类内可以访问 类外不可以访问 儿子不可以访问父亲中的私有内容</p><p><strong>struct和class区别:</strong></p><ul><li>struct默认权限为公共</li><li>class默认权限为私有</li></ul><p><strong>成员属性设置为私有:</strong><br>优点:<br>    1.将所有成员属性设置为私有,可以自己控制读写权限 set写;get读<br>    2.对于写权限,我们可以检测数据的有效性</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//class 与 struct区别:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* class默认私有</span></span><br><span class="line"><span class="comment">* struct默认公共</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;<span class="comment">//类中属性与行为称为成员</span></span><br><span class="line">  <span class="comment">//属性 成员属性 成员变量 (设置为私有)</span></span><br><span class="line">  <span class="comment">//行为 成员函数 成员方法</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//权限：</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * public 公共 成员类内可以访问 成员类外可以访问</span></span><br><span class="line"><span class="comment">  * protected 保护 成员类内可以访问 成员类外不可以访问</span></span><br><span class="line"><span class="comment">  * private 私有 成员类内可以访问 成员类外不可以访问</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Id;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showStudent</span><span class="params">()</span><span class="comment">//显示姓名与学号</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot;;学号：&quot;</span> &lt;&lt; m_Id &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//给姓名赋值</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_Name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//给学号赋值</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_Id = id;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  string m_Car;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  string m_Password;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    m_Car = <span class="string">&quot;bike&quot;</span>;</span><br><span class="line">    m_Password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  Student s1;</span></span><br><span class="line"><span class="comment">  //s1.m_Name = &quot;张三&quot;;</span></span><br><span class="line"><span class="comment">  s1.setName(&quot;张三&quot;);</span></span><br><span class="line"><span class="comment">  s1.m_Id = 1;</span></span><br><span class="line"><span class="comment">  s1.showStudent();</span></span><br><span class="line"><span class="comment">  system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">  return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h5 id="案例-设计立方体类"><a href="#案例-设计立方体类" class="headerlink" title="案例: 设计立方体类"></a>案例: 设计立方体类</h5><p>案例描述: </p><p>设计立方体类(Cube)<br>求出立方体的面积和体积<br>分别用全局函数和成员函数判断俩个立方体是否相等</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cube</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//设置长</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setL</span><span class="params">(<span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_L = l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取长</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getL</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置宽</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setW</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_W = w;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取宽</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getW</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_W;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置高</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setH</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_H = h;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取高</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getH</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_H;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取立方体面积</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">calculateS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * m_L*m_W + <span class="number">2</span> * m_W*m_H + <span class="number">2</span> * m_H*m_L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取立方体体积</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">calculateV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_L * m_W * m_H;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//利用成员函数判断俩个立方体是否相等</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isSameByClass</span><span class="params">(Cube &amp;c)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_L == c.<span class="built_in">getL</span>() &amp;&amp; m_W == c.<span class="built_in">getW</span>() &amp;&amp; m_H == c.<span class="built_in">getH</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_L;<span class="comment">//长</span></span><br><span class="line">  <span class="type">int</span> m_W;<span class="comment">//宽</span></span><br><span class="line">  <span class="type">int</span> m_H;<span class="comment">//高</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用全局函数判断俩立方体是否相等</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSame</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (c1.<span class="built_in">getL</span>()==c2.<span class="built_in">getL</span>()&amp;&amp;c1.<span class="built_in">getW</span>()==c2.<span class="built_in">getW</span>()&amp;&amp;c1.<span class="built_in">getH</span>()==c2.<span class="built_in">getH</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Cube c1;</span><br><span class="line">  c1.<span class="built_in">setL</span>(<span class="number">10</span>);</span><br><span class="line">  c1.<span class="built_in">setH</span>(<span class="number">10</span>);</span><br><span class="line">  c1.<span class="built_in">setW</span>(<span class="number">10</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;面积为:&quot;</span> &lt;&lt; c1.<span class="built_in">calculateS</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;体积为:&quot;</span> &lt;&lt; c1.<span class="built_in">calculateV</span>() &lt;&lt; endl;</span><br><span class="line">  Cube c2;</span><br><span class="line">  c2.<span class="built_in">setL</span>(<span class="number">10</span>);</span><br><span class="line">  c2.<span class="built_in">setH</span>(<span class="number">10</span>);</span><br><span class="line">  c2.<span class="built_in">setW</span>(<span class="number">10</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;全局函数判断&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">bool</span> ret = <span class="built_in">isSame</span>(c1, c2);</span><br><span class="line">  <span class="keyword">if</span> (ret)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1与c2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1与c2不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;成员函数判断&quot;</span> &lt;&lt; endl;</span><br><span class="line">  ret = c1.<span class="built_in">isSameByClass</span>(c2);</span><br><span class="line">  <span class="keyword">if</span> (ret)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1与c2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1与c2不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-点和圆的关系"><a href="#案例-点和圆的关系" class="headerlink" title="案例: 点和圆的关系"></a>案例: 点和圆的关系</h5><p>案例描述:<br>设计一个圆形类(Circle)和一个点类(Point),计算点和圆的关系</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点与圆关系</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//设置x</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setX</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_X = x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取x</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_X;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置y</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setY</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_Y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取y</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Y;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_X;</span><br><span class="line">  <span class="type">int</span> m_Y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//设置半径</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setR</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_R = r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取半径</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getR</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_R;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置圆心</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setCenter</span><span class="params">(Point center)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_Center=center;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取圆心</span></span><br><span class="line">  <span class="function">Point <span class="title">getCenter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_R;</span><br><span class="line">  Point m_Center;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isInCircle</span><span class="params">(Circle&amp; c, Point&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//计算俩点间距离平方</span></span><br><span class="line">  <span class="type">int</span> distance = (c.<span class="built_in">getCenter</span>().<span class="built_in">getX</span>() - p.<span class="built_in">getX</span>()) * (c.<span class="built_in">getCenter</span>().<span class="built_in">getX</span>() - p.<span class="built_in">getX</span>()) +</span><br><span class="line">    (c.<span class="built_in">getCenter</span>().<span class="built_in">getY</span>() - p.<span class="built_in">getY</span>()) * (c.<span class="built_in">getCenter</span>().<span class="built_in">getY</span>() - p.<span class="built_in">getY</span>());</span><br><span class="line">  <span class="comment">//计算半径平方</span></span><br><span class="line">  <span class="type">int</span> rDistance = c.<span class="built_in">getR</span>() * c.<span class="built_in">getR</span>();</span><br><span class="line">  <span class="keyword">if</span> (distance==rDistance)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (distance&gt;rDistance)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Circle c;</span><br><span class="line">  c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">  Point center;</span><br><span class="line">  center.<span class="built_in">setX</span>(<span class="number">10</span>);</span><br><span class="line">  center.<span class="built_in">setY</span>(<span class="number">0</span>);</span><br><span class="line">  c.<span class="built_in">setCenter</span>(center);</span><br><span class="line"></span><br><span class="line">  Point p;</span><br><span class="line">  p.<span class="built_in">setX</span>(<span class="number">10</span>);</span><br><span class="line">  p.<span class="built_in">setY</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">isInCircle</span>(c, p);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分文件:</p><p>point.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//设置x</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setX</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">  <span class="comment">//获取x</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//设置y</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setY</span><span class="params">(<span class="type">int</span> y)</span></span>;</span><br><span class="line">  <span class="comment">//获取y</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getY</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_X;</span><br><span class="line">  <span class="type">int</span> m_Y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>point.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="comment">//点类</span></span><br><span class="line"><span class="comment">//设置x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Point::setX</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  m_X = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point::getX</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置y</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Point::setY</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  m_Y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取y</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point::getY</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m_Y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>circle.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//设置半径</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setR</span><span class="params">(<span class="type">int</span> r)</span></span>;</span><br><span class="line">  <span class="comment">//获取半径</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getR</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//设置圆心</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setCenter</span><span class="params">(Point center)</span></span>;</span><br><span class="line">  <span class="comment">//获取圆心</span></span><br><span class="line">  <span class="function">Point <span class="title">getCenter</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_R;</span><br><span class="line">  Point m_Center;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>circle.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;circle.h&quot;</span></span></span><br><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="comment">//设置半径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circle::setR</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  m_R = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取半径</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Circle::getR</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m_R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置圆心</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circle::setCenter</span><span class="params">(Point center)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  m_Center = center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取圆心</span></span><br><span class="line"><span class="function">Point <span class="title">Circle::getCenter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m_Center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>Main.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点与圆关系</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;circle.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isInCircle</span><span class="params">(Circle&amp; c, Point&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//计算俩点间距离平方</span></span><br><span class="line">  <span class="type">int</span> distance = (c.<span class="built_in">getCenter</span>().<span class="built_in">getX</span>() - p.<span class="built_in">getX</span>()) * (c.<span class="built_in">getCenter</span>().<span class="built_in">getX</span>() - p.<span class="built_in">getX</span>()) +</span><br><span class="line">    (c.<span class="built_in">getCenter</span>().<span class="built_in">getY</span>() - p.<span class="built_in">getY</span>()) * (c.<span class="built_in">getCenter</span>().<span class="built_in">getY</span>() - p.<span class="built_in">getY</span>());</span><br><span class="line">  <span class="comment">//计算半径平方</span></span><br><span class="line">  <span class="type">int</span> rDistance = c.<span class="built_in">getR</span>() * c.<span class="built_in">getR</span>();</span><br><span class="line">  <span class="keyword">if</span> (distance==rDistance)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (distance&gt;rDistance)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Circle c;</span><br><span class="line">  c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">  Point center;</span><br><span class="line">  center.<span class="built_in">setX</span>(<span class="number">10</span>);</span><br><span class="line">  center.<span class="built_in">setY</span>(<span class="number">0</span>);</span><br><span class="line">  c.<span class="built_in">setCenter</span>(center);</span><br><span class="line"></span><br><span class="line">  Point p;</span><br><span class="line">  p.<span class="built_in">setX</span>(<span class="number">10</span>);</span><br><span class="line">  p.<span class="built_in">setY</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">isInCircle</span>(c, p);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-4-2-对象的初始化和清理"><a href="#2-4-2-对象的初始化和清理" class="headerlink" title="2.4.2 对象的初始化和清理"></a>2.4.2 对象的初始化和清理</h4><p>构造函数和析构函数:解决对象的初始化和清理问题</p><p>如果我们不提供构造和析构,编译器会提供编译器提供的构造函数和析构函数是空实现。</p><p><strong>构造函数语法:</strong><code>类名()&#123;&#125;</code><br>1.构造函数无返回值 不用写void<br>2.函数名与类名相同<br>3.可以有参数，可以发生重载<br>4.创建对象时会自动调用构造函数且只调用一次</p><p><strong>析构函数:</strong><code>~类名()&#123;&#125;</code><br>1.无返回值 不用写void<br>2.函数名与类名相同 在名称前加<code>~</code><br>3.不可以有参数，不可以发生重载<br>4.对象在销毁前会自动调用，且只调用一次</p><p>构造函数的分类及调用<br>1.分类</p><ul><li>按参数分:有参构造和无参构造</li><li>按类型分:普通构造和拷贝构造<br>2.三种调用方式</li><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><p>拷贝构造函数调用时机</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p>构造函数调用规则<br>默认情况下,C++编译器至少给一个类添加3个函数<br>1.默认构造函数(无参,函数体为空)<br>2.默认析构函数(无参,函数体为空)<br>3.默认拷贝构造函数,对属性进行值拷贝</p><p>构造函数调用规则如下:</p><ul><li>如果用户定义有参构造函数,C++不在提供默认无参构造,但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数,C++不会再提供其他构造函数</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数 初始化</span></span><br><span class="line"><span class="comment">/*1构造函数无返回值 不用写void</span></span><br><span class="line"><span class="comment">* 2.函数名与类名相同</span></span><br><span class="line"><span class="comment">* 3.可以有参数，可以发生重载</span></span><br><span class="line"><span class="comment">* 4.创建对象时，构造函数会自动调用，且只调用一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="built_in">Person</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//析构函数 清理(作用：将堆区开辟数据做释放操作)</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 1.无返回值 不用写void</span></span><br><span class="line"><span class="comment">  * 2.函数名与类名相同 在名称前加~</span></span><br><span class="line"><span class="comment">  * 3.不可以有参数，不可以发生重载</span></span><br><span class="line"><span class="comment">  * 4.对象在销毁前会自动调用，且只调用一次</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  ~<span class="built_in">Person</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//拷贝构造函数</span></span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//调用</span></span><br><span class="line">  <span class="comment">//1.括号法</span></span><br><span class="line">  <span class="comment">//Person p1;//栈上数据，test01执行完毕后会释放这个对象</span></span><br><span class="line">  <span class="comment">//Person p2(10);</span></span><br><span class="line">  <span class="comment">//Person p3(p2);</span></span><br><span class="line">  <span class="comment">//2.显示法</span></span><br><span class="line">  Person p1;</span><br><span class="line">  Person p2=<span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">  Person p3=<span class="built_in">Person</span>(p2);</span><br><span class="line">  <span class="built_in">Person</span>(<span class="number">10</span>);<span class="comment">//匿名对象 (不能用拷贝对象初始化)</span></span><br><span class="line">  <span class="comment">//3.隐式转换法</span></span><br><span class="line">  Person p4 = <span class="number">10</span>;</span><br><span class="line">  Person p5 = p4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//test01();</span></span><br><span class="line">  Person p;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝和浅拷贝:<br>浅拷贝:简单的赋值拷贝操作<br>深拷贝:在堆区重新申请空间,进行拷贝操作</p><p>浅拷贝：问题：堆区内存重复释放<br>深拷贝：<code>m_Height=new int(*p.m_Height);</code></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Person默认构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> age,<span class="type">int</span> height)</span><br><span class="line">  &#123;</span><br><span class="line">    m_Age = age;</span><br><span class="line">    m_Height = <span class="keyword">new</span> <span class="built_in">int</span>(height);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Person有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    m_Age = p.m_Age;</span><br><span class="line">    <span class="comment">//m_Height = p.m_Height;编译器默认实现</span></span><br><span class="line">    <span class="comment">//深拷贝操作</span></span><br><span class="line">    m_Height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Height);</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Person</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//析构代码,将堆区开辟的数据释放</span></span><br><span class="line">    <span class="keyword">if</span> (m_Height != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_Height;</span><br><span class="line">      m_Height = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Person析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> m_Age;<span class="comment">//年龄</span></span><br><span class="line">  <span class="type">int</span>* m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">160</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1的年龄:&quot;</span> &lt;&lt; p1.m_Age &lt;&lt;<span class="string">&quot;身高:&quot;</span>&lt;&lt;*p1.m_Height&lt;&lt; endl;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p2的年龄:&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="string">&quot;身高:&quot;</span> &lt;&lt; *p2.m_Height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  Person有参构造函数调用</span></span><br><span class="line"><span class="comment">  p1的年龄:18身高:160</span></span><br><span class="line"><span class="comment">  拷贝构造函数的调用</span></span><br><span class="line"><span class="comment">  p2的年龄:18身高:160</span></span><br><span class="line"><span class="comment">  Person析构函数调用</span></span><br><span class="line"><span class="comment">  Person析构函数调用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化列表:</strong></p><p>作用: C++提供了初始化列表语法,用来初始化属性</p><p>语法: <code>构造函数():属性1(值1),属性2(值2)...&#123;&#125;</code></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//传统初始化</span></span><br><span class="line">  <span class="comment">/*Person(int a, int b, int c)</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    m_A = a;</span></span><br><span class="line"><span class="comment">    m_B = b;</span></span><br><span class="line"><span class="comment">    m_C = c;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">//初始化列表</span></span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c) :<span class="built_in">m_A</span>(a), <span class="built_in">m_B</span>(b), <span class="built_in">m_C</span>(c)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line">  <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//Person p(10, 20, 30);</span></span><br><span class="line">  <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;m_A=&quot;</span> &lt;&lt; p.m_A &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;m_B=&quot;</span> &lt;&lt; p.m_B &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;m_C=&quot;</span> &lt;&lt; p.m_C &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m_A=30</span></span><br><span class="line"><span class="comment">//m_B=20</span></span><br><span class="line"><span class="comment">//m_C=10</span></span><br></pre></td></tr></table></figure><p><strong>类对象作为类成员:</strong></p><p>C++类中的成员可以是另一个类的对象,我们称该成员为对象成员</p><p>例如:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">  A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B类中有对象A作为成员,A为对象成员</p><p>当其他类对象作为本类成员,构造时先构造类对象,再构造自身<br>构造先构造其他再构造自身，析构与其相反</p><p><strong>静态成员:</strong></p><p>静态成员就是在成员变量和成员函数前加上关键字static,称为静态成员</p><p>静态成员分为:</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明,类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><h4 id="2-4-3-C-对象模型和this指针"><a href="#2-4-3-C-对象模型和this指针" class="headerlink" title="2.4.3 C++对象模型和this指针"></a>2.4.3 C++对象模型和this指针</h4><p>类内的成员变量和成员函数分开存储 只有非静态成员变量才属于类的对象上</p><p>空对象占用内存空间为1<br>C++编译器会给每个空对象分配一个字节的空间,是为了区分空对象占内存的位置<br>每个空对象也应该有一个独一无二的内存空间</p><p><strong>this指针:</strong><br><code>this指针指向被调用的成员函数所属的对象</code></p><p>this指针是隐含每一个非静态的成员函数内的一种指针<br>this指针不需要定义,直接使用即可</p><p>this指针用途:</p><ul><li>当形参和成员变量同名时,可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身,可使用<code>return *this</code></li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//this：指向被调用成员函数所属的对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Person&amp; <span class="title">PersonAddAge</span><span class="params">(Person &amp;p)</span><span class="comment">//返回引用</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//this 为指向p2的指针</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1.解决名称冲突</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1的年龄为&quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.返回对象本身用*this</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  p2.<span class="built_in">PersonAddAge</span>(p1).<span class="built_in">PersonAddAge</span>(p1).<span class="built_in">PersonAddAge</span>(p1);<span class="comment">//链式编程</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//p2的年龄为40</span></span><br></pre></td></tr></table></figure><p><strong>空指针访问成员函数:</strong><br>C++中空指针也是可以调用成员函数的,但是也要注意有没有用到this指针</p><p>如果用到this指针,需要加以判断保证代码的健壮性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const修饰成员函数:</strong></p><p>常函数:</p><ul><li>成员函数后加const后我们称为这个函数为<em>常函数</em></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后,在常函数中依然可以修改</li></ul><p>常对象:</p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//常函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//this指针本质：指针常量：指针指向不可以修改</span></span><br><span class="line">  <span class="comment">//const Person* const this;</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span> <span class="type">const</span><span class="comment">//修饰this指针，让this指向的值也不能修改</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="keyword">mutable</span> <span class="type">int</span> m_B;<span class="comment">//即使在常函数中也可以修改</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person p;</span><br><span class="line">  p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> Person p;<span class="comment">//常对象:只能调用常函数</span></span><br><span class="line">  p.m_B = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-友元"><a href="#2-4-4-友元" class="headerlink" title="2.4.4 友元"></a>2.4.4 友元</h4><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>关键字:<code>friend</code></p><p>友元三种实现:</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//友元：friend</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1.全局函数做友元：在class 添加：friend 全局函数;(friend void Person(Building* building);)</span></span><br><span class="line"><span class="comment">* 2.类做友元：在class 添加：friend 类;(friend class Person;)</span></span><br><span class="line"><span class="comment">* 3.成员函数做友元：在class 添加：friend 成员函数;(friend void Person::visit();)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//可以访问Building中私有成员</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodGay</span><span class="params">(Building* building)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Building</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  string m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Building building;</span><br><span class="line">  <span class="built_in">goodGay</span>(&amp;building);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="comment">//类外构造函数 类名::函数名（）&#123;&#125;</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问客厅</span></span><br><span class="line"><span class="comment">//访问卧室</span></span><br></pre></td></tr></table></figure></p><h4 id="2-4-5-运算符重载"><a href="#2-4-5-运算符重载" class="headerlink" title="2.4.5 运算符重载"></a>2.4.5 运算符重载</h4><p>对已有的运算符重新进行定义,赋予其另一种功能,以适应不用的数据类型</p><p>加法重载代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//1.成员函数</span></span><br><span class="line">  <span class="comment">//Person operator+(Person&amp; p)</span></span><br><span class="line">  <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//Person temp;</span></span><br><span class="line">    <span class="comment">//temp.m_A = this-&gt;m_A + p.m_A;</span></span><br><span class="line">    <span class="comment">//temp.m_B = this-&gt;m_B + p.m_B;</span></span><br><span class="line">    <span class="comment">//return temp;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1,Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">  Person temp;</span><br><span class="line">  temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">  temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person p1;</span><br><span class="line">  p1.m_A = <span class="number">10</span>;</span><br><span class="line">  p1.m_B = <span class="number">10</span>;</span><br><span class="line">  Person p2;</span><br><span class="line">  p2.m_A = <span class="number">10</span>;</span><br><span class="line">  p2.m_B = <span class="number">10</span>;</span><br><span class="line">  Person p3 = p1 + p2;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p3.m_A=&quot;</span> &lt;&lt; p3.m_A &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p3.m_B=&quot;</span> &lt;&lt; p3.m_B &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左移重载:<br>作用:可以输出自定义数据类型<br>不会利用成员函数重载<code>&lt;&lt;</code>运算符,因为无法实现cout在左边<br>只能利用全局函数重载左移运算符<br>左移重载代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line"><span class="comment">//左移</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">  &#123;</span><br><span class="line">    m_A = a;</span><br><span class="line">    m_B = b;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">//成员函数:通常不用</span></span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;m_A=&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot;m_B=&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">  <span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; p&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递增重载:<br>作用:通过重载递增运算符,实现自己的整型数据<br>递增重载代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger myint);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyInteger</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    m_Num = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重载++前置</span></span><br><span class="line">  MyInteger&amp; <span class="keyword">operator</span>++()<span class="comment">//返回引用是为了对一个数据进行++</span></span><br><span class="line">  &#123;</span><br><span class="line">    m_Num++;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重载++后置</span></span><br><span class="line">  MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>)<span class="comment">//int 表示占位参数 可以用于区分前置和后置递增 返回值</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//先记录，再递增，最后返回记录值</span></span><br><span class="line">    MyInteger temp = *<span class="keyword">this</span>;</span><br><span class="line">    m_Num++;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger myint)</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt;myint.m_Num;</span><br><span class="line">  <span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MyInteger myint;</span><br><span class="line">  cout &lt;&lt; ++myint &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; myint &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MyInteger myint1;</span><br><span class="line">  cout &lt;&lt; myint1++ &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; myint1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值重载:<br>C++编译器至少给一个类添加4个函数<br>1.默认构造函数(无参,函数体为空)<br>2.默认析构函数(无参,函数体为空)<br>3.默认拷贝构造函数,对属性进行值拷贝<br>4.赋值运算符 operator=,对属性进行值拷贝</p><p>如果类中有属性指向堆区,做赋值操作时也会出现深浅拷贝问题<br>赋值重载代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Person</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_Age!= <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_Age;</span><br><span class="line">      m_Age = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重载赋值</span></span><br><span class="line">  Person&amp; <span class="keyword">operator</span>=(Person&amp; p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//深拷贝 先判断时是否有属性在堆区，如果有先释放干净，再进行深拷贝</span></span><br><span class="line">    <span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_Age;</span><br><span class="line">      m_Age = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Age);<span class="comment">//深拷贝</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">  p2 = p1;<span class="comment">//赋值</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1的年龄为&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系运算符重载:<br>作用:重载关系运算符,可以让俩个自定义类型对象进行对比操作<br>关系运算符重载代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关系运算符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(string name,<span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    m_Age = age;</span><br><span class="line">    m_Name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重载==</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重载!=</span></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>!=(Person&amp; p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (p1 == p2)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1与p2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1与p2不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (p1 != p2)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1与p2不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1与p2相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数调用运算符重载:</p><ul><li>函数调用运算符()也可以发生重载</li><li>由于重载后使用的方式非常像函数的调用,因此称为仿函数</li><li>仿函数没有固定写法,非常灵活<br>小括号重载代码:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小括号 十分灵活</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(string test)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; test &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MyPrint myPrint;</span><br><span class="line">  <span class="built_in">myPrint</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:<br>  1.对于内置的数据类型的表达式的运算符是不可能改变的<br>  2.不要滥用运算符重载</p><h4 id="2-4-6-继承"><a href="#2-4-6-继承" class="headerlink" title="2.4.6 继承"></a>2.4.6 继承</h4><p>继承是面向对象三大特性之一</p><p>好处:减少重复代码</p><p>基本语法: <code>class 子类 : 继承方式 父类</code><br>子类也称为派生类<br>父类也称为基类</p><p>派生类中的成员,包含俩大部分:<br>一类是从基类继承过来的,一类是自己增加的成员<br>从基类继承过来的表现其共性,而新增的成员体现了其个性</p><p>继承方式一共有三种:</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> :<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_A = <span class="number">10</span>;<span class="comment">//父类公共，子类公共</span></span><br><span class="line">    m_B = <span class="number">10</span>;<span class="comment">//父类保护，子类保护</span></span><br><span class="line">    <span class="comment">//父类私有，子类访问不到</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Son1 s1;</span><br><span class="line">  s1.m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> :<span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_A = <span class="number">10</span>;<span class="comment">//父类公共，子类保护</span></span><br><span class="line">    m_B = <span class="number">10</span>;<span class="comment">//父类保护，子类保护</span></span><br><span class="line">    <span class="comment">//父类私有，子类访问不到</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Son2 s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span> :<span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_A = <span class="number">10</span>;<span class="comment">//父类公共，子类私有</span></span><br><span class="line">    m_B = <span class="number">10</span>;<span class="comment">//父类保护，子类私有</span></span><br><span class="line">    <span class="comment">//父类私有，子类访问不到</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Son3 s3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承中的对象模型:<br>父类中所有非静态成员属性都会被子类继承下去<br>父类中的私有成员属性  是被编译器隐藏了 所以访问不到 但是确实被继承下去了</p><p>查看对象模型:打开开发人员命令行工具找到对应.cpp所在的目录,输入<code>cl /dl reportSingleClassLayout所属类名 &quot;对应.cpp&quot;</code></p><p>继承中的构造和析构顺序:<br>先构造父类,再构造子类;析构与构造顺序相反<br>子类继承父类后,当创建子类对象,也会调用父类的构造函数</p><p>继承同名成员(函数)处理方式:</p><ul><li>访问子类同名成员(函数) 直接访问即可</li><li>访问父类同名成员(函数) 需要加作用域  <code>s.Base::m_A</code></li></ul><p>如果子类中出现和父类同名的成员函数,子类的同名成员会隐藏掉父类中所有同名成员函数<br>如果想访问到父类中隐藏的同名成员函数,需要加作用域</p><p>继承同名静态成员处理方式:<br>静态成员和非静态成员出现同名,处理方式一致</p><p>可以通过对象访问,也可以通过类名访问</p><ul><li>访问子类同名成员(函数) 直接访问即可<ul><li>对象:<code>s.m_A</code></li><li>类名:<code>Son::m_A</code></li></ul></li><li>访问父类同名成员(函数) 需要加作用域<ul><li>对象:<code>s.Base::m_A</code></li><li>类名:<code>Son::Base::m_A</code></li></ul></li></ul><p>如果子类中出现和父类同名的成员函数,子类的同名成员会隐藏掉父类中所有同名成员函数<br>如果想访问到父类中隐藏的同名成员函数,需要加作用域</p><p>多继承语法:<br>C++允许一个类继承多个类</p><p>语法:<code>class 子类 : 继承方式 父类1, 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现,需要加作用域区分</p><p>当父类中出现同名函数,需要加作用域区分</p><p><em>C++实际开发中不建议用多继承</em></p><p>菱形继承:<br>概念:</p><ul><li>俩个派生类B、C继承同一个基类A</li><li>又有某个类D同时继承俩个派生类</li><li>这种继承方式被称为菱形继承,或者钻石继承<br>问题:<br>1.某个类D使用数据时,会产生二义性<br>2.D继承了A的俩份数据,我们其实只需要一份就行</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菱形继承:虚继承（继承之前加上virtual）Animal叫做虚基类 可以解决菱形继承问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//羊类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//驼类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//羊驼类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span> :<span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SheepTuo st;</span><br><span class="line">  st.Sheep::m_Age = <span class="number">18</span>;</span><br><span class="line">  st.Tuo::m_Age = <span class="number">28</span>;</span><br><span class="line">  <span class="comment">//菱形继承，俩个父类拥有相同数据，需加作用域区分</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Sheep::m_Age=&quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Tuo::m_Age=&quot;</span> &lt;&lt; st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//只需一份数据</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;st.m_Age=&quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Sheep::m_Age=28</span></span><br><span class="line"><span class="comment">//Tuo::m_Age=28</span></span><br><span class="line"><span class="comment">//st.m_Age=28</span></span><br></pre></td></tr></table></figure><h4 id="2-4-7-多态"><a href="#2-4-7-多态" class="headerlink" title="2.4.7 多态"></a>2.4.7 多态</h4><p>多态是C++面向对象三大特性之一</p><p>多态分为俩类:</p><ul><li>静态多态:函数重载和运算符重载属于静态重载,复用函数名</li><li>动态多态:派生类和虚函数实现运行时多态<br>条件:<ul><li>1.有继承关系</li><li>2.子类重写父类的虚函数  重写  函数返回值类型  函数名  参数列表  完全相同<br>使用:</li><li>父类的指针或者引用执行子类对象</li></ul></li></ul><p>静态多态和动态多态区别:</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><h5 id="案例-计算器类"><a href="#案例-计算器类" class="headerlink" title="案例: 计算器类"></a>案例: 计算器类</h5><p>案例描述:<br>分别利用普通写法和多态技术,设计实现俩个操作数进行运算的计算机类</p><p>多态的优点:</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//重写父类虚函数 virtual+函数名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calulator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">(string oper)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oper==<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oper==<span class="string">&quot;*&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果想扩展新的功能,需要修改源码</span></span><br><span class="line">    <span class="comment">//在真正开发中 提倡 开闭原则</span></span><br><span class="line">    <span class="comment">//开闭原则:对扩展进行开发,对修改进行关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> m_Num1;</span><br><span class="line">  <span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Calulator c;</span><br><span class="line">  c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">  c.m_Num2 = <span class="number">10</span>;</span><br><span class="line">  cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;+&quot;</span>) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;-&quot;</span>) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;*&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> m_Num1;</span><br><span class="line">  <span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Num1+m_Num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  AbstractCalculator* abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">  abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">  abc-&gt;m_Num2 = <span class="number">12</span>;</span><br><span class="line">  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//用完后销毁</span></span><br><span class="line">  <span class="keyword">delete</span> abc;</span><br><span class="line">  abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">  abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">  abc-&gt;m_Num2 = <span class="number">12</span>;</span><br><span class="line">  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">delete</span> abc;</span><br><span class="line">  abc = <span class="keyword">new</span> MulCalculator;</span><br><span class="line">  abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">  abc-&gt;m_Num2 = <span class="number">12</span>;</span><br><span class="line">  cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10+10=20</span></span><br><span class="line"><span class="comment">//10-10=0</span></span><br><span class="line"><span class="comment">//10*10=100</span></span><br><span class="line"><span class="comment">//10+12=22</span></span><br><span class="line"><span class="comment">//10-12=-2</span></span><br><span class="line"><span class="comment">//10*12=120</span></span><br></pre></td></tr></table></figure><p>纯虚函数和抽象类:</p><p>在多态中,通常父类中虚函数的实现是毫无意义的,主要都是调用子类重写的内容,因此可以将虚函数改为<code>纯虚函数</code></p><p>纯虚函数语法: <code>virtual 返回值类型 函数名 (参数列表) = 0;</code></p><p>当类中有了纯虚函数,这个类就称为<code>抽象类</code></p><p>抽象类特点:</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数,否则也属于抽象类</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span><span class="comment">//抽象类：无法实例化对象,子类必须重写父类的纯虚函数，否则子类也属于抽象类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Base* base = <span class="keyword">new</span> Son;</span><br><span class="line">  base-&gt;<span class="built_in">func</span>();</span><br><span class="line">  <span class="keyword">delete</span> base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚析构和纯虚析构:</p><p>多态使用时,如果子类中有属性开辟到堆区,那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式:将父类中的析构函数改为<code>虚析构</code>或者<code>纯虚析构</code></p><p>虚析构和纯虚析构共性:</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构共性:</p><ul><li>如果有纯虚析构,该类属于抽象类,无法实例化对象</li></ul><p>虚析构语法: <code>virtual ~类名()&#123;&#125;</code><br>纯虚析构语法:<br><code>virtual ~类名() = 0;</code><br><code>类名::~类名()&#123;&#125;</code></p><p>如果子类中没有堆区数据,可以不写为虚析构或纯虚析构</p><h5 id="案例-电路组装"><a href="#案例-电路组装" class="headerlink" title="案例: 电路组装"></a>案例: 电路组装</h5><p>案例描述:<br>电脑主要组成部件为CPU(用于计算),显卡(用于显示),内存条(用于存储)<br>将每个零件封装出抽象基类,并且提供不同厂商生产不同的零件,例如Intel厂商和Lenovo厂商<br>创建电脑类提供让电脑工作的函数,并且调用每个零件工作的接口<br>测试时组装三台不同的电脑进行工作</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculator</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoCard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Computer</span>(CPU* cpu, VideoCard* vc, Memory* mem)</span><br><span class="line">  &#123;</span><br><span class="line">    m_cpu = cpu;</span><br><span class="line">    m_vc = vc;</span><br><span class="line">    m_mem = mem;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    m_cpu-&gt;<span class="built_in">calculator</span>();</span><br><span class="line">    m_vc-&gt;<span class="built_in">display</span>();</span><br><span class="line">    m_mem-&gt;<span class="built_in">storage</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">Computer</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_cpu;</span><br><span class="line">      m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_vc;</span><br><span class="line">      m_vc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> m_mem;</span><br><span class="line">      m_mem = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  CPU* m_cpu;</span><br><span class="line">  VideoCard* m_vc;</span><br><span class="line">  Memory* m_mem;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Intel Cpu开始计算&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Intel 显卡开始显示&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Intel 内存条开始存储&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Lenovo CPU开始计算&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Lenovo 显卡开始显示&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Lenovo 内存条开始存储&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CPU* intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">  VideoCard* intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">  Memory* intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line">  Computer* computer1 = <span class="keyword">new</span> <span class="built_in">Computer</span>(intelCpu, intelCard, intelMem);</span><br><span class="line">  computer1-&gt;<span class="built_in">work</span>();</span><br><span class="line">  <span class="keyword">delete</span> computer1;</span><br><span class="line">  Computer* computer2 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">  computer2-&gt;<span class="built_in">work</span>();</span><br><span class="line">  <span class="keyword">delete</span> computer2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-文件操作"><a href="#2-5-文件操作" class="headerlink" title="2.5 文件操作"></a>2.5 文件操作</h3><p>程序运行时产生的数据都属于临时数据,程序一旦运行结束都会被释放<br>通过<code>文件可以将数据持久化</code><br>C++中对文件操作需要包含头文件<code>&lt;fstream&gt;</code></p><p>文件类型分为俩种:<br>1.<code>文本文件</code>  - 文件以文本<code>ASCII码</code>形式存储在计算机中<br>2.<code>二进制文件</code>- 文件以文本的<code>二级制</code>形式存储在计算机中,用户一般不能直接读懂他们</p><p>操作文件的三大类:<br>1.ofstream: 写操作<br>2.ifstream: 读操作<br>3.fstream : 读写操作</p><h4 id="2-5-1-文本文件"><a href="#2-5-1-文本文件" class="headerlink" title="2.5.1 文本文件"></a>2.5.1 文本文件</h4><p>一.写文件<br>步骤:<br>1.包含头文件<br>  <code>#include&lt;fstream&gt;</code><br>2.创建流对象<br>  <code>ofstream ofs;</code><br>3.打开文件<br>  <code>ofs.open(&quot;文件路径&quot;,打开方式);</code><br>4.写数据<br>  <code>ofs&lt;&lt;&quot;写入的数据&quot;</code><br>5.关闭文件<br>  <code>ofs.close();</code></p><p>文件打开方式:<br>|打开方式|解释|<br>|—-|—-|<br>|ios::in|为读文件而打开文件|<br>|ios::out|为写文件而打开文件|<br>|ios::ate|初始位置:文件尾|<br>|ios::app|追加方式写文件|<br>|ios::trunc|如果文件存在先删除,再创建|<br>|ios::binary|二进制方式|</p><p>注意:文件打开方式可以配合使用,利用<code>|</code>操作符<br>例如:用二进制方式写文件 <code>ios::binary | ios::out</code></p><p>二.读文件</p><p>步骤:</p><p>1.包含头文件 <code>#include&lt;fstream&gt;</code><br>2.创建流对象 <code>ifstream ifs;</code><br>3.打开文件并判断文件是否打开成功 <code>ifs.open(&quot;文件路径&quot;,打开方式);&quot;</code><br>4.读数据 <code>四种方式读取</code><br>5.关闭文件 <code>ifs.close();</code></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ofstream ofs;<span class="comment">//创建文件流</span></span><br><span class="line">  ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,ios::out);<span class="comment">//指定打开方式 写文件</span></span><br><span class="line">  ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class="line">  ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">  ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line">  ofs.<span class="built_in">close</span>();<span class="comment">//关闭文件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ifstream ifs;</span><br><span class="line">  ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line">  <span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//读文件</span></span><br><span class="line">  <span class="comment">/*1.</span></span><br><span class="line"><span class="comment">  char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">  while (ifs&gt;&gt;buf)</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">/*2.</span></span><br><span class="line"><span class="comment">  char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">  while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">/*3.</span></span><br><span class="line"><span class="comment">  string buf;</span></span><br><span class="line"><span class="comment">  while (getline(ifs,buf))</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">//4.不推荐</span></span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  <span class="keyword">while</span> ((c=ifs.<span class="built_in">get</span>())!=EOF) <span class="comment">//EOF 文件尾</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//关闭文件</span></span><br><span class="line">  ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-二进制文件"><a href="#2-5-2-二进制文件" class="headerlink" title="2.5.2 二进制文件"></a>2.5.2 二进制文件</h4><p>打开方式:<code>ios::binary</code></p><p>1.写文件主要利用流对象调用成员函数write<br>函数原型: <code>ostream&amp; write(const char * buffer,int len);</code><br>参数:字符指针buffer指向内存中一段空间,len是读写的字节数</p><p>2.读文件主要利用流对象调用成员函数read<br>函数原型: <code>istream&amp; read(char * buffer,int len);</code><br>参数:字符指针buffer指向内存中一段空间,len是读写的字节数</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//二进制写文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ofstream ofs;</span><br><span class="line">  ofs.<span class="built_in">open</span>(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary);</span><br><span class="line">  Person p = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span> &#125;;</span><br><span class="line">  ofs.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span>*)&amp;p, <span class="built_in">sizeof</span>(Person));</span><br><span class="line">  ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ifstream ifs;</span><br><span class="line">  ifs.<span class="built_in">open</span>(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line">  <span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Person p;</span><br><span class="line">  ifs.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;p, <span class="built_in">sizeof</span>(Person));</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;  年龄:&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">  ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test04</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-职工管理系统"><a href="#案例-职工管理系统" class="headerlink" title="案例: 职工管理系统"></a>案例: 职工管理系统</h5><p>案例描述:利用C++来实现一个基于多态的职工管理系统</p><p>公司中职工分为三种:普通职工、经理、老板,显示信息时,需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通职工职责:完成经理交给的任务<br>经理职责:完成老板交给的任务,并下发任务给员工<br>老板职责:管理公司所有事物</p><p>管理系统需要实现的功能如下:</p><ul><li>退出管理系统:退出当前管理系统 <code>void ExitSystem();</code></li><li>增加职工信息:实现批量添加职工功能,将信息录入到文件中,职工信息为:职工编号、姓名、部门编号</li><li>显示职工信息:显示公司内部所有职工信息</li><li>删除离职职工:按照编号删除指定的职工</li><li>修改职工信息:按照编号修改职工个人信息</li><li>查找职工信息:按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序:按照职工编号进行排序,排序规则由用户指定</li><li>清空所有文档:清空文件中记录的所有职工信息(清空前需要再次确定,防止误删)</li></ul><p>代码:</p><p>创建管理类workerManager:</p><ul><li>与用户沟通的菜单界面 <code>void Show_Menu();</code></li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><p>workerManager.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME <span class="string">&quot;empFile.txt&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">WorkerManager</span>();</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Show_Menu</span><span class="params">()</span></span>;<span class="comment">//展示菜单</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">ExitSystem</span><span class="params">()</span></span>;<span class="comment">//退出系统</span></span><br><span class="line">  <span class="type">int</span> m_EmpNum;<span class="comment">//职工人数</span></span><br><span class="line">  Worker** m_EmpArray;<span class="comment">//职工数组指针</span></span><br><span class="line">  <span class="comment">//添加职工</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Add_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//保存文件</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> m_FileIsEmpty;</span><br><span class="line">  <span class="comment">//统计文件人数</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">get_EmpNum</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">init_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//显示职工</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Show_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//删除职工</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Del_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//判断职工是否存在</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">IsExist</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line">  <span class="comment">//修改职工</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Mod_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//查找职工</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Find_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//排序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Sort_Emp</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//清空文件</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Clean_File</span><span class="params">()</span></span>;</span><br><span class="line">  ~<span class="built_in">WorkerManager</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>workerManager.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;workerManager.h&quot;</span></span></span><br><span class="line">WorkerManager::<span class="built_in">WorkerManager</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.文件不存在</span></span><br><span class="line">  ifstream ifs;</span><br><span class="line">  ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">  <span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//初始化属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;<span class="comment">//文件存在但为空</span></span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  ifs &gt;&gt; ch;</span><br><span class="line">  <span class="keyword">if</span> (ifs.<span class="built_in">eof</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//文件为空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//初始化属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.文件存在并不为空</span></span><br><span class="line">  <span class="type">int</span> num = <span class="keyword">this</span>-&gt;<span class="built_in">get_EmpNum</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;职工人数为:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_EmpNum = num;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>-&gt;m_EmpArray = <span class="keyword">new</span> Worker * [<span class="keyword">this</span>-&gt;m_EmpNum];<span class="comment">//开辟空间</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;<span class="built_in">init_Emp</span>();<span class="comment">//将文件中的数据存储到数组中</span></span><br><span class="line">  <span class="comment">//测试代码</span></span><br><span class="line">  <span class="comment">/*for (int i = 0; i &lt; this-&gt;m_EmpNum; i++)</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;职工编号:&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Id</span></span><br><span class="line"><span class="comment">      &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_Name</span></span><br><span class="line"><span class="comment">      &lt;&lt; &quot;部门编号:&quot; &lt;&lt; this-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;**** 欢迎使用职工管理系统 ****&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 0.退出管理系统 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 1.添加职工信息 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 2.显示职工信息 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 3.删除离职职工 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 4.修改职工信息 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 5.查找职工信息 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 6.按照编号排序 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******* 7.清空所用文档 *******&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;******************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::ExitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Add_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入添加职工数量:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span> addNum = <span class="number">0</span>;</span><br><span class="line">  cin &gt;&gt; addNum;</span><br><span class="line">  <span class="keyword">if</span> (addNum&gt;<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="comment">//计算添加空间大小</span></span><br><span class="line">    <span class="type">int</span> newSize = <span class="keyword">this</span>-&gt;m_EmpNum + addNum;</span><br><span class="line">    <span class="comment">//开辟新空间</span></span><br><span class="line">    Worker** newSpace = <span class="keyword">new</span> Worker * [newSize];</span><br><span class="line">    <span class="comment">//将原来空间数据拷贝到新空间</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        newSpace[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加新数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; addNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> id;</span><br><span class="line">      string name;</span><br><span class="line">      <span class="type">int</span> dSelect;<span class="comment">//部门选择</span></span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个新职工编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; id;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个新职工姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请选择该职工岗位:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;1.普通员工&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; dSelect;</span><br><span class="line">      Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">switch</span> (dSelect)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Employee</span>(id, name, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将创建的职工指针保存到数组中</span></span><br><span class="line">      newSpace[<span class="keyword">this</span>-&gt;m_EmpNum + i] = worker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放原有空间</span></span><br><span class="line">    <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line">    <span class="comment">//更改新空间指向</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray = newSpace;</span><br><span class="line">    <span class="comment">//更新新的职工人数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpNum = newSize;</span><br><span class="line">    <span class="comment">//更新职工不为空</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//成功添加后保存到文件中</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;成功添加&quot;</span> &lt;&lt; addNum &lt;&lt; <span class="string">&quot;名新职工&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计文件人数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WorkerManager::get_EmpNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ifstream ifs;</span><br><span class="line">  ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> dId;</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ifs&gt;&gt;id&amp;&amp;ifs&gt;&gt;name&amp;&amp;ifs&gt;&gt;dId)</span><br><span class="line">  &#123;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ofstream ofs;</span><br><span class="line">  ofs.<span class="built_in">open</span>(FILENAME, ios::out);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    ofs &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">      &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">      &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::init_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ifstream ifs;</span><br><span class="line">  ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> dId;</span><br><span class="line">  <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; dId)</span><br><span class="line">  &#123;</span><br><span class="line">    Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (dId==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      worker = <span class="keyword">new</span> <span class="built_in">Employee</span>(id, name, dId);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dId == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      worker = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, dId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      worker = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, dId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray[index] = worker;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line">  ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Show_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断文件是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//利用多态调用程序接口</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Del_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入想要删除职工的编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    <span class="type">int</span> index = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (index!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//数据前移</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum<span class="number">-1</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i + <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_EmpNum--;<span class="comment">//更新人数</span></span><br><span class="line">      <span class="comment">//更新到文件中</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;未找到职工，删除失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断职工是否存在</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WorkerManager::IsExist</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id == id)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//找到职工</span></span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Mod_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入要修改职工的编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    <span class="type">int</span> ret = <span class="keyword">this</span>-&gt;<span class="built_in">IsExist</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (ret!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[ret];</span><br><span class="line">      <span class="type">int</span> newId = <span class="number">0</span>;</span><br><span class="line">      string newName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="type">int</span> dSelect = <span class="number">0</span>;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;查找到&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;号职工，请输入新的职工号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; newId;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入新的姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; newName;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入新的岗位:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;1.普通员工&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; dSelect;</span><br><span class="line">      Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">switch</span> (dSelect)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Employee</span>(newId, newName, dSelect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Manager</span>(newId, newName, dSelect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        worker = <span class="keyword">new</span> <span class="built_in">Boss</span>(newId, newName, dSelect);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_EmpArray[ret] = worker;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;查无此人，修改失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Find_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入查找的方式:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1.按职工编号查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2.按职工姓名查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; select;</span><br><span class="line">    <span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> id;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入查找的职工编号:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; id;</span><br><span class="line">      <span class="type">int</span> ret = <span class="built_in">IsExist</span>(id);</span><br><span class="line">      <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;查找成功!该职工信息如下:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray[ret]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      string name;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;请输入查找的职工姓名:&quot;</span> &lt;&lt; endl;</span><br><span class="line">      cin &gt;&gt; name;</span><br><span class="line">      <span class="type">bool</span> flag = <span class="literal">false</span>;<span class="comment">//添加是否查到的标志</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name==name)</span><br><span class="line">        &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;查找成功!职工编号为:&quot;</span> </span><br><span class="line">            &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id </span><br><span class="line">            &lt;&lt; <span class="string">&quot;号职工信息如下&quot;</span> &lt;&lt; endl;</span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; endl;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Sort_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择排序方式&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1.按照职工号升序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2.按照职工号降序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; select;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> minOrMax = i;<span class="comment">//声明最小或最大值下标</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span>  j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;m_EmpNum; j++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[minOrMax]-&gt;m_Id &gt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">          &#123;</span><br><span class="line">            minOrMax = j;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[minOrMax]-&gt;m_Id &lt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">          &#123;</span><br><span class="line">            minOrMax = j;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i!=minOrMax)</span><br><span class="line">      &#123;</span><br><span class="line">        Worker* temp = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[minOrMax];</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_EmpArray[minOrMax] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序成功,排序后的结果为:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">save</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">Show_Emp</span>();<span class="comment">//展示职工</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WorkerManager::Clean_File</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;1.确定&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;2.返回&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line">  cin &gt;&gt; select;</span><br><span class="line">  <span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME,ios::trunc)</span></span>;<span class="comment">//删除文件后重新创建</span></span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//删除堆区每个对象</span></span><br><span class="line">          <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">          <span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="literal">NULL</span>;       </span><br><span class="line">      &#125;<span class="comment">//删除堆区数组指针</span></span><br><span class="line">      <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;        </span><br><span class="line">      <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">WorkerManager::~<span class="built_in">WorkerManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建抽象职工类:</p><p>职工的分类:普通职工、经理、老板<br>将三种职工抽象到一个类(worker)中,利用多态管理不同职工种类<br>职工的属性:职工编号、职工姓名、职工所在部门编号<br>职工的行为:岗位职责描述,获取岗位名称</p><p>worker.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span><span class="comment">//职工抽象类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//显示个人信息</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取岗位名称</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> string <span class="title">getDeptName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> m_Id;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_DeptId;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>老板类:</p><p>boss.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="comment">//老板类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> :<span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="built_in">Boss</span>(<span class="type">int</span> id, string name, <span class="type">int</span> dId);</span><br><span class="line">  <span class="comment">//显示个人信息</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取岗位名称</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> string <span class="title">getDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>boss.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss::<span class="built_in">Boss</span>(<span class="type">int</span> id, string name, <span class="type">int</span> dId)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_DeptId = dId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Boss::showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位职责: 管理公司所有事务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function">string <span class="title">Boss::getDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;老板&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>普通员工类:</p><p>employee.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通员工</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> :<span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="built_in">Employee</span>(<span class="type">int</span> id,string name,<span class="type">int</span> dId);</span><br><span class="line">  <span class="comment">//显示个人信息</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取岗位名称</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> string <span class="title">getDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>employee.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Employee::<span class="built_in">Employee</span>(<span class="type">int</span> id, string name, <span class="type">int</span> dId)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_DeptId = dId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employee::showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位职责: 完成经理交给的任务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function">string <span class="title">Employee::getDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;员工&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经理类:</p><p>manager.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="comment">//经理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>:<span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="built_in">Manager</span>(<span class="type">int</span> id, string name, <span class="type">int</span> dId);</span><br><span class="line">  <span class="comment">//显示个人信息</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取岗位名称</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> string <span class="title">getDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>manager.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(<span class="type">int</span> id, string name, <span class="type">int</span> dId)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_DeptId = dId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\t\t岗位职责: 完成老板交给的任务，并下发任务给员工&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function">string <span class="title">Manager::getDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>main.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;workerManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;worker.h&quot;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//多态测试代码</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  Worker* worker = NULL;</span></span><br><span class="line"><span class="comment">  worker = new Employee(1, &quot;张三&quot;, 1);</span></span><br><span class="line"><span class="comment">  worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">  worker = new Manager(2, &quot;李四&quot;, 2);</span></span><br><span class="line"><span class="comment">  worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">  worker = new Boss(3, &quot;王五&quot;, 3);</span></span><br><span class="line"><span class="comment">  worker-&gt;showInfo();</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//实例化对象</span></span><br><span class="line">  WorkerManager wm;</span><br><span class="line">  <span class="type">int</span> choice = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    wm.<span class="built_in">Show_Menu</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你的选择:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; choice;</span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">      wm.<span class="built_in">ExitSystem</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//添加职工信息</span></span><br><span class="line">      wm.<span class="built_in">Add_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//显示职工信息</span></span><br><span class="line">      wm.<span class="built_in">Show_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//删除离职职工</span></span><br><span class="line">      wm.<span class="built_in">Del_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//修改职工信息</span></span><br><span class="line">      wm.<span class="built_in">Mod_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//查找职工信息</span></span><br><span class="line">      wm.<span class="built_in">Find_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//按照编号排序</span></span><br><span class="line">      wm.<span class="built_in">Sort_Emp</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//清空所用文档</span></span><br><span class="line">      wm.<span class="built_in">Clean_File</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-C-提高编程"><a href="#3-C-提高编程" class="headerlink" title="3 C++提高编程"></a>3 C++提高编程</h2><p><code>泛型编程</code>和<code>STL</code></p><h3 id="3-1-模板"><a href="#3-1-模板" class="headerlink" title="3.1 模板"></a>3.1 模板</h3><p>模板就是建立通用的模具,大大提高复用性</p><p>特点:</p><ul><li>模板不可以直接使用,它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h4 id="3-1-1-函数模板"><a href="#3-1-1-函数模板" class="headerlink" title="3.1.1 函数模板"></a>3.1.1 函数模板</h4><ul><li>C++另一种编程思想称为<code>泛型编程</code>,主要利用的技术就是模板</li><li>C++提供俩种模板机制:<code>函数模板</code>和<code>类模板</code></li></ul><p>函数模板作用:<br>建立一个通用函数,其函数返回值类型和形参类型可以不具体制定,用一个<code>虚拟的类型</code>来代表</p><p>语法:<br><code>template&lt;typename T&gt; 函数声明或定义</code></p><p>解释:<br>template —声明创建模板<br>typename —表面其后面的符号是一种数据类型,可以用class代替<br>T —通用的数据类型,名称可以替换,通常为大写字母</p><p>注意事项:</p><ul><li>自动类型推导,必须推导出一致的数据类型T才可以使用</li><li>模板必须要确定出T的数据类型才可以使用</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="comment">//1.如果函数模板和普通函数都可以调用，优先调用普通函数</span></span><br><span class="line"><span class="comment">//2.可以通过空模板参数列表（mySwap&lt;&gt;(a,b)）强制调用函数模板</span></span><br><span class="line"><span class="comment">//3.函数模板可以发生函数重载</span></span><br><span class="line"><span class="comment">//4.如果函数模板可以发生更好的匹配，优先调用函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//声明一个模板，T为通用数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  T temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapInt</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapDouble</span><span class="params">(<span class="type">double</span>&amp; a, <span class="type">double</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">double</span> temp = a;</span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//swapInt(a, b);</span></span><br><span class="line">  <span class="comment">//使用</span></span><br><span class="line">  <span class="comment">//1.自动类型推导 必须推导出一致的数据类型T才能使用   不可以发生隐式类型转换</span></span><br><span class="line">  <span class="comment">//mySwap(a, b);</span></span><br><span class="line">  <span class="comment">//2.显示指定类型 可以发生隐式类型转换</span></span><br><span class="line">  <span class="built_in">mySwap</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">  <span class="type">double</span> c = <span class="number">1.1</span>;</span><br><span class="line">  <span class="type">double</span> d = <span class="number">2.2</span>;</span><br><span class="line">  <span class="built_in">swapDouble</span>(c, d);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;d=&quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">func</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通函数与函数模板的区别:</p><ul><li>普通函数调用时可以发生自动类型转换(隐式类型转换)</li><li>函数模板调用时,如果利用自动类型推导,不会发生隐式类型转换</li><li>如果利用显式指定类型的方式,可以发生隐式类型转换</li></ul><p>建议使用显式指定类型</p><p>普通函数与函数模板调用规则:<br>1.如果函数模板和普通函数都可以实现,优先调用普通函数<br>2.可以通过空模板参数列表来强制调用函数模板 <code>func&lt;&gt;();</code><br>3.函数模板也可以发生重载<br>4.如果函数模板可以产生更好的匹配,优先调用函数模板</p><p>模板局限性:<br>传入参数为数组或者自定义数据类型,就无法正常使用<br>解决方法:用特定数据类型提供具体化操作 重载 <code>template&lt;&gt; bool myCompare(Person &amp;p1,Person &amp;p2)&#123;函数实现&#125;</code></p><h4 id="3-1-2-类模板"><a href="#3-1-2-类模板" class="headerlink" title="3.1.2 类模板"></a>3.1.2 类模板</h4><p>作用:建立一个通用类,类中的成员数据类型可以不具体制定,用一个<code>虚拟的类型</code>来表示。</p><p>语法:<br><code>template&lt;typename T&gt; 类</code></p><p>解释:<br>template —声明创建模板<br>typename —表面其后面的符号是一种数据类型,可以用class代替<br>T —通用的数据类型,名称可以替换,通常为大写字母</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="comment">//1.没用自动类型推导使用方式</span></span><br><span class="line"><span class="comment">//2.类模板在模板参数列表中可以有默认参数</span></span><br><span class="line"><span class="comment">//类模板成员函数在调用时创建</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>,<span class="keyword">class</span> <span class="title class_">AgeType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(NameType name,AgeType age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  NameType m_Name;</span><br><span class="line">  AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">78</span>);</span><br><span class="line">  p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板和函数模板区别:<br>1.类模板没有自动类型推导的使用方式,只能用显式指定类型<br>2.类模板在模板参数列表中可以有默认参数</p><p>类模板中成员函数创建时机:</p><ul><li>普通类中成员函数一开始就创建</li><li>类模板中成员函数在调用时才创建</li></ul><p>类模板对象做函数参数<br>三种传入方式:<br>1.指定传入的类型    —直接显示对象的数据类型<br>2.参数模板化        —将对象中的参数变为模板进行传递<br>3.整个类模板化      —将这个对象类型模板化进行传递</p><p>代码:</p><p>分文件编写:<br>问题:<br>类模板中成员函数创建时期是在调用阶段,导致文件编写时调用不到<br>解决方法:<br>1.直接包含.cpp源文件</p><p>person.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;person.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>()</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>person.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">  T1 m_Name;</span><br><span class="line">  T2 m_Age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2.将声明和实现写在同一个文件中,并更改后缀名为.hpp,hpp是约定的名称,并不是强制</p><p>person.hpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//类模板对象做函数参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">  <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    this-&gt;m_Name = name;</span></span><br><span class="line"><span class="comment">    this-&gt;m_Age = age;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  T1 m_Name;</span><br><span class="line">  T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">  <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>()</span><br><span class="line">&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="comment">//#include&quot;person.cpp&quot;</span></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;person.hpp&quot;</span></span></span><br><span class="line"><span class="comment">//#include&lt;string&gt;</span></span><br><span class="line"><span class="comment">////类模板对象做函数参数</span></span><br><span class="line"><span class="comment">//template&lt;class T1,class T2&gt;</span></span><br><span class="line"><span class="comment">//class Person</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public:</span></span><br><span class="line"><span class="comment">//  Person(T1 name, T2 age);</span></span><br><span class="line"><span class="comment">//  /*&#123;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Name = name;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Age = age;</span></span><br><span class="line"><span class="comment">//  &#125;*/</span></span><br><span class="line"><span class="comment">//  void showPerson();</span></span><br><span class="line"><span class="comment">//  /*&#123;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//  &#125;*/</span></span><br><span class="line"><span class="comment">//  T1 m_Name;</span></span><br><span class="line"><span class="comment">//  T2 m_Age;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//构造函数类外实现</span></span><br><span class="line"><span class="comment">//template&lt;class T1, class T2&gt;</span></span><br><span class="line"><span class="comment">//Person&lt;T1, T2&gt;::Person(T1 name, T2 age)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  this-&gt;m_Name = name;</span></span><br><span class="line"><span class="comment">//  this-&gt;m_Age = age;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">////成员函数类外实现</span></span><br><span class="line"><span class="comment">//template&lt;class T1, class T2&gt;</span></span><br><span class="line"><span class="comment">//void Person&lt;T1,T2&gt;::showPerson()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; this-&gt;m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//1.指定传入类型  &lt;最常用&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson1</span><span class="params">(Person&lt;string ,<span class="type">int</span>&gt;&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">78</span>);</span><br><span class="line">  <span class="built_in">printPerson1</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数模板化</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1,<span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt;&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p.<span class="built_in">showPerson</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;T1的类型为:&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;T2的类型为:&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">98</span>);</span><br><span class="line">  <span class="built_in">printPerson2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.整个类模板化</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson3</span><span class="params">(T&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p.<span class="built_in">showPerson</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;T的类型为:&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="built_in">printPerson3</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test03</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看数据类型:<code>typeid(T).name()</code></p><p>类模板与继承:</p><ul><li>当子类继承的父类是一个类模板时,子类在声明的时候要指定出父类中T的类型</li><li>如果不指定,编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型,子类也需变为类模板</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//类模板与继承</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">  T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>:<span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Son s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想灵活指定父类中T类型，子类也需要变类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> :<span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Son2</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T1的类型为&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T2的类型为&quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Son2&lt;<span class="type">int</span>, <span class="type">char</span>&gt;s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板成员函数类外实现</p><ul><li>加模板参数列表和作用域</li></ul><p>类模板和友元:</p><ul><li>全局函数类内实现 —直接在类内声明友元就行了</li><li>全局函数类外实现 —需要提前让编译器知道全局函数的存在</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//类模板与友元</span></span><br><span class="line"><span class="comment">//提前让编译器知道Person类存在</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>;</span><br><span class="line"><span class="comment">//通过全局函数 打印Person信息</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print2</span><span class="params">(Person&lt;T1, T2&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//全局函数 类内实现</span></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">print1</span><span class="params">(Person&lt;T1,T2&gt; p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//全局函数 类外实现</span></span><br><span class="line">  <span class="comment">//空模板参数列表</span></span><br><span class="line">  <span class="comment">//如果全局函数是类外实现，需要让编译器提前知道这个函数的存在</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="type">void</span> print2&lt;&gt;(Person&lt;T1, T2&gt; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T1 m_Name;</span><br><span class="line">  T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="built_in">print2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-类模板案例"><a href="#案例-类模板案例" class="headerlink" title="案例: 类模板案例"></a>案例: 类模板案例</h5><p>案例描述:</p><ul><li>可以对内置函数类型以及自定义数据类型进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己的通用的数组类</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//有参构造 参数 容量</span></span><br><span class="line">  <span class="built_in">MyArray</span>(<span class="type">int</span> capacity)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;MyArray的有参构造&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  <span class="built_in">MyArray</span>(<span class="type">const</span> MyArray&amp; arr)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;MyArray的拷贝构造&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">    <span class="comment">//this-&gt;pAddress = arr.pAddress;浅拷贝问题:重复释放内存</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];<span class="comment">//深拷贝</span></span><br><span class="line">    <span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//operator=防止浅拷贝问题 a=b=c</span></span><br><span class="line">  MyArray&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyArray&amp; arr)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;MyArray的operator=&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//先判断原来堆区是否有数据,如果有先释放</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">      <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//尾插法</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Push_Back</span><span class="params">(<span class="type">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//判断容量是否等于大小</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Capacity==<span class="keyword">this</span>-&gt;m_Size)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = val;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//尾删法</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Pop_Back</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过下标访问</span></span><br><span class="line">  </span><br><span class="line">  T&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回数组容量</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回数组大小</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//析构函数</span></span><br><span class="line">  ~<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//cout &lt;&lt; &quot;MyArray的析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line">      <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">      <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T* pAddress;<span class="comment">//指针指向堆区开辟的真实数组</span></span><br><span class="line">  <span class="type">int</span> m_Capacity;<span class="comment">//容量</span></span><br><span class="line">  <span class="type">int</span> m_Size;<span class="comment">//数组大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(MyArray &lt;<span class="type">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; arr.<span class="built_in">getSize</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MyArray &lt;<span class="type">int</span>&gt;<span class="built_in">arr1</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr1.<span class="built_in">Push_Back</span>(i);<span class="comment">//尾插法</span></span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr1:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printArray</span>(arr1);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr1容量:&quot;</span> &lt;&lt; arr1.<span class="built_in">getCapacity</span>() &lt;&lt; <span class="string">&quot; 大小:&quot;</span> &lt;&lt; arr1.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">  MyArray &lt;<span class="type">int</span>&gt;<span class="built_in">arr2</span>(arr1);</span><br><span class="line">  arr2.<span class="built_in">Pop_Back</span>();</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr2:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printArray</span>(arr2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr2容量:&quot;</span> &lt;&lt; arr2.<span class="built_in">getCapacity</span>() &lt;&lt; <span class="string">&quot; 大小:&quot;</span> &lt;&lt; arr2.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//MyArray&lt;int&gt;arr3(100);</span></span><br><span class="line">  <span class="comment">//arr3 = arr1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line">  <span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPersonArray</span><span class="params">(MyArray&lt;Person&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; arr.<span class="built_in">getSize</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">MyArray&lt;Person&gt; <span class="title">arr</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">999</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;韩信&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;李白&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;安其拉&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;蔡文姬&quot;</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line">  arr.<span class="built_in">Push_Back</span>(p1);</span><br><span class="line">  arr.<span class="built_in">Push_Back</span>(p2);</span><br><span class="line">  arr.<span class="built_in">Push_Back</span>(p3);</span><br><span class="line">  arr.<span class="built_in">Push_Back</span>(p4);</span><br><span class="line">  arr.<span class="built_in">Push_Back</span>(p5);</span><br><span class="line">  <span class="built_in">printPersonArray</span>(arr);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr容量:&quot;</span> &lt;&lt; arr.<span class="built_in">getCapacity</span>() &lt;&lt; <span class="string">&quot; 大小:&quot;</span> &lt;&lt; arr.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-2-STL"><a href="#3-2-STL" class="headerlink" title="3.2 STL"></a>3.2 STL</h3><p>STL(标准模块库)<br>从广义上分为:<code>容器</code>、<code>算法</code>、<code>迭代器</code><br>容器和算法间通过迭代器进行无缝连接</p><p>STL六大组件:容器、算法、迭代器、仿函数、适配器(配接器)、空间配置器<br>1.容器:各种数据结构,如vector、list、deque、set、map等,用来存放数据。<br>2.算法:各种常用的算法,如sort、find、copy、for_each等。<br>3.迭代器:扮演了容器与算法之间的胶合剂。<br>4.仿函数:行为类似函数,可作为算法的某种策略。<br>5.适配器(配接器):一种用来修饰容器或者仿函数或迭代器接口的东西。<br>6.空间配置器:负责空间的配置与管理。</p><h4 id="3-2-1-容器算法迭代器"><a href="#3-2-1-容器算法迭代器" class="headerlink" title="3.2.1 容器算法迭代器"></a>3.2.1 容器算法迭代器</h4><p>容器:置物之所也<br>STL容器就是运用最广泛的一些数据结构实现出来<br>常见的数据结构:数组、链表、树、栈、队列、集合、映射表 等<br>分类:</p><ul><li>序列式容器:强调值的排序,序列式容器中的每个元素有固定的位置。</li><li>关联式容器:二叉树结构,各元素之间没有严格的物理上的顺序关系。</li></ul><p>算法:问题之解法也<br>有限的步骤,解决逻辑或数学上的问题,这一门学科我们叫做算法<br>分类:</p><ul><li>质变算法:是指运算过程中会更改区间内的元素的内容。例如拷贝,替换,删除等等</li><li>非质变算法:是指运算过程中不会更改区间内的元素的内容。例如查找,计数,遍历,寻求极值等等</li></ul><p>迭代器:容器和算法之间粘合剂<br>提供一种方法,使之能够依序寻访某个容器所含的各个元素,而又无需暴露该容器的内部表示方式。<br>每个容器都有自己专属的迭代器<br>迭代器使用非常类似于指针,初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类:</p><div class="table-container"><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读,支持<code>++、==、!=</code></td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写,支持<code>++</code></td></tr><tr><td>前向迭代器</td><td>读写操作,并能向前推进迭代器</td><td>读写,支持<code>++、==、!=</code></td></tr><tr><td>双向迭代器</td><td>读写操作,并能向前和向后操作</td><td>读写,支持<code>++、--</code></td></tr><tr><td>随机访问迭代器</td><td>读写操作,可以以跳跃的方式访问任意数据,功能最强的迭代器</td><td>读写,支持<code>++、--、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</code></td></tr></tbody></table></div><p>常用的容器中迭代器种类为双向迭代器和随机访问迭代器</p><h5 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h5><p>容器: <code>vector</code><br>算法: <code>for_each</code><br>迭代器: <code>vector&lt;int&gt;::iterator</code></p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//STL六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配装器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器存放内置数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">  <span class="comment">//向容器中插入数据</span></span><br><span class="line">  v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="comment">//通过迭代器访问数据</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();<span class="comment">//起始迭代器，指向容器中第一个元素</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();<span class="comment">//结束迭代器，指向容器最后一个元素的下一个位置</span></span><br><span class="line">  <span class="comment">//第一种遍历方式</span></span><br><span class="line">  <span class="keyword">while</span> (itBegin!=itEnd)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">    itBegin++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//第二种</span></span><br><span class="line">  <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>();it != v.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//第三种 STL(for_each)包含头文件#include&lt;algorithm&gt;</span></span><br><span class="line">  for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), MyPrint);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;v;</span><br><span class="line">  <span class="comment">//创建小容器</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向小容器中添加数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">    v3.<span class="built_in">push_back</span>(i + <span class="number">3</span>);</span><br><span class="line">    v4.<span class="built_in">push_back</span>(i + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">  v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">  v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">  v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">  v.<span class="built_in">push_back</span>(v4);</span><br><span class="line">  <span class="comment">//通过大容器将所有数据遍历一遍</span></span><br><span class="line">  <span class="keyword">for</span> (vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator it= v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); it++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//(*it)---容器vector&lt;int&gt;</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator vit = (*it).<span class="built_in">begin</span>();vit != (*it).<span class="built_in">end</span>(); vit++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout &lt;&lt; *vit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test02</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vector也可以存放自定义数据类型</p><h4 id="3-2-2-string容器"><a href="#3-2-2-string容器" class="headerlink" title="3.2.2 string容器"></a>3.2.2 string容器</h4><p>本质: string 是C++风格的字符串,而string本质上是一个类</p><p>string 和 char* 区别:</p><ul><li>char* 是一个指针</li><li>string 是一个类,类内部封装了char<em> ,管理这个字符串,是一个 char</em> 型的容器。</li></ul><p>特点:<br>string类内部封装了很多成员方法<br>例如:查找find,拷贝copy,删除delete,替换replace,插入insert<br>string 管理char* 所分配的内存,不用担心复制越界和取值越界等,由类内部进行负责</p><h5 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h5><p>构造函数原型:</p><ul><li><code>string();</code> //创建一个空的字符串 例如:string str;<br><code>string(const char* s);</code> //使用字符串s初始化</li><li><code>string(const string&amp; str);</code> //使用一个string对象初始化另一个string对象</li><li><code>string(int n,char c);</code> //使用n个字符c初始化</li></ul><h5 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h5><p>功能:给string字符串进行赋值</p><p>赋值的函数原型:</p><ul><li><code>string&amp; operator=(const char* s);</code> //给char* 类型字符串 赋值给当前字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code> //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s,int n);</code> //把字符串s的前n个字符赋值给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n,char c);</code> //把n个字符c赋给当前字符串</li></ul><p>operator=方式比较实用</p><h5 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h5><p>功能:实现在字符串末尾拼接字符串</p><p>函数原型:</p><ul><li><code>string&amp; operator+=(const char* str);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code> //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code> //重载+=操作符</li><li><code>string&amp; append(const char *s);</code> //把字符串s拼接到当前字符串结尾</li><li><code>string&amp; append(const char *s,int n);</code> //把字符串s的前n个字符连接到当前的字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s,int pos,int n);</code> //字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><h5 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h5><p>功能:</p><ul><li>查找:查找指定字符串是否存在</li><li>替换:在指定的位置替换字符串</li></ul><p>函数原型:</p><ul><li><code>int find(const string&amp; str,int pos = 0) const;</code> //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s,int pos = 0) const;</code> //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s,int pos,int n) const;</code> //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c,int pos = 0) const;</code> //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str,int pos = npos) const;</code> //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s,int pos = npos) const;</code> //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s,int pos,int n) const;</code> //从pos位置查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c,int pos = 0) const;</code> //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos,int n,const string&amp; str);</code> //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos,int n,const char* s);</code> //替换从pos开始的n个字符为字符串s</li></ul><h5 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h5><p>功能:字符串之间的比较</p><p>比较方式:<br>字符串比较是按字符的ASCII码进行对比</p><ul><li>= 返回 0</li><li><blockquote><p>返回 1</p></blockquote></li><li>&lt; 返回 -1</li></ul><p>函数原型:</p><ul><li><code>int compare(const string &amp;s) const;</code> //与字符串s比较</li><li><code>int compare(const char *s) const;</code> //与字符串s比较 </li></ul><p>主要用于比较俩个字符串是否相等</p><h5 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h5><p>存取方式:</p><ul><li><code>char&amp; operator[](int n);</code> //通过<code>[]</code>方式取字符</li><li><code>char&amp; at(int n);</code> //通过at方法获取字符</li></ul><h5 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h5><p>功能:对string字符串进行插入和删除字符操作</p><p>函数原型:</p><ul><li><code>string&amp; insert(int pos,const char* s);</code> //插入字符串</li><li><code>string&amp; insert(int pos,const string&amp; str);</code> //插入字符串</li><li><code>string&amp; insert(int pos,int n,char c);</code> //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos,int n = npos);</code> //删除从pos开始的n个字符</li></ul><p>插入和删除下标从0开始</p><h5 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h5><p>功能:从字符串中获取想要的子串</p><p>函数原型:</p><ul><li><code>string substr(int pos = 0,int n = npos) const;</code> //返回由pos开始的n个字符组成的字符串</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//string 构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s1;<span class="comment">//默认构造</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;s2=&quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">  <span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">  <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;s4=&quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string 赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1;</span><br><span class="line">  str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str2;</span><br><span class="line">  str2 = str1;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str3;</span><br><span class="line">  str3 = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str4;</span><br><span class="line">  str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str4=&quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str5;</span><br><span class="line">  str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>,<span class="number">5</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str5=&quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str6;</span><br><span class="line">  str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str6=&quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  string str7;</span><br><span class="line">  str7.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str7=&quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string字符串拼接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">  str1 += <span class="string">&quot;爱学习&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  str1 += <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  string str2=<span class="string">&quot; java,python&quot;</span>;</span><br><span class="line">  str1 += str2;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  string str3 = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">  str3.<span class="built_in">append</span>(<span class="string">&quot; Love&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">  str3.<span class="built_in">append</span>(<span class="string">&quot; You,&quot;</span>,<span class="number">4</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//str3.append(str2);</span></span><br><span class="line">  str3.<span class="built_in">append</span>(str2, <span class="number">0</span>, <span class="number">5</span>);<span class="comment">//第二个为开始位置（从0开始）第三个参数为截取长度</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string字符串查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;abcdefgde&quot;</span>;</span><br><span class="line">  <span class="type">int</span> pos=str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;find:pos=&quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//rfind和find区别</span></span><br><span class="line">  <span class="comment">//rfind从右往左查找，find从左往右查找</span></span><br><span class="line">  pos = str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;rfind:pos=&quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">  <span class="comment">//从1号位置(从0开始)起，3个字符替换为“1111”</span></span><br><span class="line">  str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//a1111efg</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;xbcd&quot;</span>;</span><br><span class="line">  string str2 = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">  <span class="comment">//主要用于比较是否相等</span></span><br><span class="line">  <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1=str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1&gt;str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1&lt;str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  str1[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  str1.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="comment">//1.通过[]访问单个字符</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; str1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; str1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//2.通过at方式访问单个字符</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; str1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; str1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test08</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="comment">//插入</span></span><br><span class="line">  str1.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  str1.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//第一个参数：从当前位置起,第二个参数：删除多少个</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string 子串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test09</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">  string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//第一个参数：从当前位置起,第二个参数：截取多少个</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;subStr=&quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  string email = &quot;xxx@qq.com&quot;;</span></span><br><span class="line"><span class="comment">  int pos = email.find(&quot;@&quot;);</span></span><br><span class="line"><span class="comment">  string username = email.substr(0,pos);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test09</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-vector容器"><a href="#3-2-3-vector容器" class="headerlink" title="3.2.3 vector容器"></a>3.2.3 vector容器</h4><p>功能: vector数据结构与数组非常相似,也称为单端数组</p><p>vector与普通数组区别: 不同之处在于数组是静态空间,而vector可以<code>动态扩展</code></p><p>动态扩展:</p><ul><li>并不是在原空间之后续接新空间,而是找更大的内存空间,然后将原数据拷贝新空间,释放原空间</li><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h5 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h5><p>功能:创建vector容器</p><p>函数原型:</p><ul><li><code>vector&lt;T&gt; v;</code> //采用模板实现类实现,默认构造函数</li><li><code>vector(v.begin(),v.end());</code> //将v[begin(),end())区间中的元素拷贝给本身。</li><li><code>vector(n,elem);</code> //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code> //拷贝构造函数</li></ul><h5 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h5><p>功能:给vector容器进行赋值</p><p>函数原型:</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code> //重载等号操作符</li><li><code>assign(begin,end);</code> //将[begin,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li></ul><h5 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h5><p>功能:对vector容器的容量和大小操作</p><p>函数原型:</p><ul><li><code>empty();</code> //判断容器是否为空</li><li><code>capacity();</code> //容器的容量</li><li><code>size();</code> //返回容器中元素的个数</li><li><code>resize(int num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>resize(int num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h5><p>功能:对vector容器进行插入、删除操作</p><p>函数原型:</p><ul><li><code>push_back(ele);</code> //尾部插入元素ele</li><li><code>pop_back();</code> //删除最后一个元素</li><li><code>insert(const_iterator pos,ele);</code> //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos,int count,ele);</code> //迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> //删除迭代器指定的元素</li><li><code>erase(const_iterator start,const_iterator end);</code> //删除迭代器从start到end之间的元素</li><li><code>clear();</code> //删除容器中所有元素</li></ul><h5 id="vector数据读取"><a href="#vector数据读取" class="headerlink" title="vector数据读取"></a>vector数据读取</h5><p>功能:对vector中的数据的存取操作</p><p>函数原型:</p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个元素</li><li><code>back();</code> //返回容器中最后一个元素</li></ul><h5 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h5><p>功能:实现俩个容器中元素进行互换</p><p>函数原型:</p><ul><li><code>swap(vec);</code> //将vec与本身元素互换</li></ul><h5 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h5><p>功能:减少vector在动态扩展容量时的扩展次数</p><p>函数原型:</p><ul><li><code>reserve(int len);</code> //容器预留len个元素长度,预留位置不初始化,元素不可访问</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>();it != v.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector容器构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;<span class="comment">//默认构造 无参构造</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printVector</span>(v2);</span><br><span class="line">  <span class="comment">//n个elem方式构造</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;<span class="built_in">v3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">printVector</span>(v3);</span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line">  <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="comment">//赋值 operator=</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">  v2 = v1;</span><br><span class="line">  <span class="built_in">printVector</span>(v2);</span><br><span class="line">  <span class="comment">//assign</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">  v3.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printVector</span>(v3);</span><br><span class="line">  <span class="comment">//n个elem</span></span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line">  v4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector容量和大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (v1.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1不为空&quot;</span> &lt;&lt; <span class="string">&quot; 容量为 &quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot; 大小 &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重新指定大小</span></span><br><span class="line">  v1.<span class="built_in">resize</span>(<span class="number">15</span>,<span class="number">100</span>);<span class="comment">//默认以0填充 这里指定为100</span></span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">printVector</span>(v1);<span class="comment">//超出容器长度的元素被删除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  v1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  v1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  v1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  v1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  v1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="comment">//遍历</span></span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="comment">//尾删</span></span><br><span class="line">  v1.<span class="built_in">pop_back</span>();</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="comment">//插入</span></span><br><span class="line">  v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line">  v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除 参数也是迭代器</span></span><br><span class="line">  v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>());</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="comment">//清空</span></span><br><span class="line">  <span class="comment">//v1.erase(v1.begin(), v1.end());</span></span><br><span class="line">  <span class="comment">//printVector(v1);</span></span><br><span class="line">  v1.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector数据读取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//利用[]访问元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; v1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//利用at访问元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; v1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; v1.<span class="built_in">at</span>(i)&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//获取第一个元素</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;第一个元素:&quot;</span> &lt;&lt; v1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//获取最后一个元素</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;最后一个元素:&quot;</span> &lt;&lt; v1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector互换容器</span></span><br><span class="line"><span class="comment">//1.基本使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt;<span class="number">0</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printVector</span>(v2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  v1.<span class="built_in">swap</span>(v2);</span><br><span class="line">  <span class="built_in">printVector</span>(v1);</span><br><span class="line">  <span class="built_in">printVector</span>(v2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实际用途</span></span><br><span class="line"><span class="comment">//巧用swap可以收缩内存空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的容量:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的大小:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  v.<span class="built_in">resize</span>(<span class="number">3</span>);<span class="comment">//重新指定大小</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的容量:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的大小:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//巧用swap可以收缩内存空间</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的容量:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;v 的大小:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector预留空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test08</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">  <span class="comment">//利用reserve预留空间</span></span><br><span class="line">  v.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (p != &amp;v[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">      p = &amp;v[<span class="number">0</span>];</span><br><span class="line">      num++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test08</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-deque容器"><a href="#3-2-4-deque容器" class="headerlink" title="3.2.4 deque容器"></a>3.2.4 deque容器</h4><p>功能:双端数组,可以对头端进行插入和删除操作</p><p>deque与vector区别:</p><ul><li>vector对于头部的插入删除效率低,数据量越大,效率越低</li><li>deque相对而言,对头部的插入删除速度比vector快</li><li>vector访问元素时的速度比deque快,这和俩者内部实现有关</li></ul><p>deque内部工作原理:<br>deque内部有个<code>中控器</code>,维护每段缓冲区中的内容,缓冲区中存放真实数据<br>中控器维护的是每个缓冲区的地址,使得使用deque时像一片连续的内存空间</p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h5 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h5><p>功能:deque容器构造</p><p>函数原型:</p><ul><li><code>deque&lt;T&gt;deqT;</code> //默认构造形式</li><li><code>deque(beg,end);</code> //构造函数将[beg,end)区间中的元素拷贝给本身</li><li><code>deque(n,elem);</code> //构造函数将n个elem拷贝给本身</li><li><code>deque(const deque &amp;deq);</code> //拷贝构造函数</li></ul><h5 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h5><p>功能:给deque容器赋值</p><p>函数原型:</p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code> //重载等号操作符</li><li><code>assign(beg,end);</code> //将[beg,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li></ul><h5 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h5><p>功能:对deque容器的大小进行操作</p><p>函数原型:</p><ul><li><code>deque.empty();</code> //判断容器是否为空</li><li><code>deque.size();</code> //返回容器中元素的个数</li><li><code>deque.resize(num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>deque.resize(num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="deque插入和删除"><a href="#deque插入和删除" class="headerlink" title="deque插入和删除"></a>deque插入和删除</h5><p>功能:向deque容器中插入和删除数据</p><p>函数原型:</p><p>俩端插入操作:</p><ul><li><code>push_back(elem);</code> //在容器尾部插入一个数据</li><li><code>push_front(elem);</code> //在容器头部插入一个数据</li><li><code>pop_back();</code> //删除容器最后一个数据</li><li><code>pop_front();</code> //删除容器第一个数据</li></ul><p>指定位置操作:</p><ul><li><code>insert(pos,elem);</code> //在pos位置插入一个elem元素的拷贝,返回新数据的位置</li><li><code>insert(pos,n,elem);</code> //在pos位置插入n个elem数据,无返回值</li><li><code>insert(pos,beg,end);</code> //在pos位置插入[beg,end)区间的数据,无返回值</li><li><code>clear();</code> //删除容器中所有数据</li><li><code>erase(beg,end);</code> //删除[beg,end)区间的数据,返回下一个数据的位置</li><li><code>erase(pos);</code> //删除pos位置的数据,返回下一个数据的位置</li></ul><h5 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h5><p>功能:对deque中的数据的存取操作</p><p>函数原型:</p><ul><li><code>at(int idx);</code> //返回索引idx所指的数据</li><li><code>operator[];</code> //返回索引idx所指的数据</li><li><code>front();</code> //返回容器中第一个数据元素</li><li><code>back();</code> //返回容器中最后一个数据元素</li></ul><h5 id="deque排序"><a href="#deque排序" class="headerlink" title="deque排序"></a>deque排序</h5><p>功能:利用算法实现对deque容器进行排序</p><p>算法:</p><ul><li><code>sort(iterator beg,iterator end)</code> //对beg和end区间内元素进行排序</li></ul><p>对于支持随机访问的迭代器的容器,都可以利用sort算法直接对其进行排序</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>();it != d.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//容器里的数据不可以修改</span></span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d2</span>(d1.<span class="built_in">begin</span>(),d1.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printDeque</span>(d2);</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d3</span>(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d3);</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d4</span>(d3);</span><br><span class="line">  <span class="built_in">printDeque</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">  <span class="comment">//operator=赋值</span></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">  d2 = d1;</span><br><span class="line">  <span class="built_in">printDeque</span>(d2);</span><br><span class="line">  <span class="comment">//assign 赋值</span></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">  d3.<span class="built_in">assign</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d4;</span><br><span class="line">  d4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">  <span class="keyword">if</span> (d1.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1大小为:&quot;</span> &lt;&lt; d1.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">//没有容量概念</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重新指定大小</span></span><br><span class="line">  d1.<span class="built_in">resize</span>(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);<span class="comment">//默认以0填充</span></span><br><span class="line"></span><br><span class="line">  d1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">//头插</span></span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);<span class="comment">//200 100 10 20</span></span><br><span class="line">  <span class="comment">//尾删</span></span><br><span class="line">  d1.<span class="built_in">pop_back</span>();</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">  <span class="comment">//头删</span></span><br><span class="line">  d1.<span class="built_in">pop_front</span>();</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定位置插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="comment">//头插</span></span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">  <span class="comment">//insert 插入</span></span><br><span class="line">  d1.<span class="built_in">insert</span>(d1.<span class="built_in">begin</span>(), <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">  d1.<span class="built_in">insert</span>(d1.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">10000</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//按照区间插入</span></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">  d2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">  d2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">  d2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  d1.<span class="built_in">insert</span>(d1.<span class="built_in">begin</span>(), d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;::iterator it = d1.<span class="built_in">begin</span>();</span><br><span class="line">  it++;<span class="comment">//第二个元素</span></span><br><span class="line">  d1.<span class="built_in">erase</span>(it);</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空</span></span><br><span class="line">  <span class="comment">//d1.erase(d1.begin(), d1.end());</span></span><br><span class="line">  d1.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="built_in">printDeque</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  d1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="comment">//头插</span></span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">  d1.<span class="built_in">push_front</span>(<span class="number">300</span>);</span><br><span class="line">  <span class="comment">//通过[]方式访问元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; d1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; d1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//通过at方式访问元素</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; d1.<span class="built_in">size</span>();i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; d1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;第一个元素:&quot;</span> &lt;&lt; d1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;最后一个元素:&quot;</span> &lt;&lt; d1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  d.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  d.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  d.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="comment">//头插</span></span><br><span class="line">  d.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">  d.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">  d.<span class="built_in">push_front</span>(<span class="number">300</span>);</span><br><span class="line">  <span class="built_in">printDeque</span>(d);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//排序  #include&lt;algorithm&gt;//标准算法头文件</span></span><br><span class="line">  <span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printDeque</span>(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test07</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-评委打分"><a href="#案例-评委打分" class="headerlink" title="案例: 评委打分"></a>案例: 评委打分</h5><p>案例描述:<br>有5名选手:选手ABCDE,10个评委分别对每一个选手打分,去除最高分,去除评委最低分,求平均分</p><p>实现步骤:<br>1.创建五名选手,放到vector中<br>2.遍历vector容器,取出每一位选手,执行for循环,可以把10个评分分存到deque容器中<br>3.sort算法对deque容器中的分数进行排序,取出最高和最低分<br>4.deque容器遍历一遍,累加总分<br>5.获取平均分</p><p><a href="https://github.com/liaojie1314/JudgesScore">代码</a></p><h4 id="3-2-5-stack容器"><a href="#3-2-5-stack容器" class="headerlink" title="3.2.5 stack容器"></a>3.2.5 stack容器</h4><p>stack是一种先进后出的数据结构,它只有一个出口</p><p>栈中只有顶端元素才可以被访问,因此不允许有遍历的行为</p><ul><li>入栈:  <code>push</code></li><li>出栈:  <code>pop</code></li></ul><h5 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h5><p>构造函数:</p><ul><li><code>stack&lt;T&gt; stk;</code> //stack采用模板类实现,stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code> //拷贝构造函数</li></ul><p>赋值操作:</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code> //重载等号操作符</li></ul><p>数据存取:</p><ul><li><code>push(elem);</code> //向栈顶添加元素</li><li><code>pop();</code> //从栈顶移除第一个元素</li><li><code>top();</code> //返回栈顶元素</li></ul><p>大小操作:</p><ul><li><code>empty();</code> //判断栈是否为空</li><li><code>size();</code> //返回栈的大小</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">  <span class="comment">//入栈</span></span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈顶元素: &quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">    s.<span class="built_in">pop</span>();<span class="comment">//出栈</span></span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;栈的大小: &quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-6-queue容器"><a href="#3-2-6-queue容器" class="headerlink" title="3.2.6 queue容器"></a>3.2.6 queue容器</h4><p>queue是一种先进先出的数据结构,他有2个出口</p><p>队列容器只允许从一端新增数据,从另一端移除数据</p><p>队列中只有队头元素和队尾元才可以被访问,因此不允许有遍历的行为</p><ul><li>入队:  <code>push</code></li><li>出队:  <code>pop</code></li></ul><h5 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口"></a>常用接口</h5><p>构造函数:</p><ul><li><code>queue&lt;T&gt; que;</code> //queue采用模板类实现,queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> //拷贝构造函数</li></ul><p>赋值操作:</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code> //重载等号操作符</li></ul><p>数据存取:</p><ul><li><code>push(elem);</code> //向队尾添加元素</li><li><code>pop();</code> //从队头移除第一个元素</li><li><code>back();</code> //返回最后一个元素</li><li><code>front();</code> //返回第一个元素</li></ul><p>大小操作:</p><ul><li><code>empty();</code> //判断队列是否为空</li><li><code>size();</code> //返回队列的大小</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">  <span class="comment">//入队</span></span><br><span class="line">  q.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">  q.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">  q.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">  q.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一个元素: &quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最后一个元素: &quot;</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">    q.<span class="built_in">pop</span>();<span class="comment">//出队</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一个元素: &quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最后一个元素: &quot;</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;队列的大小: &quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-7-list容器"><a href="#3-2-7-list容器" class="headerlink" title="3.2.7 list容器"></a>3.2.7 list容器</h4><p>功能:将数据进行链式存储</p><p><code>链表</code>是一种物理存储单元上非连续的存储结构,数据结构的逻辑顺序是通过链表中的指针链接实现的</p><ul><li>优点:可以对任意位置快速插入和删除</li><li>缺点:遍历速度没有数组快,占用空间比数组大</li></ul><p>链表组成:链表由一系列结点组成</p><p>结点的组成:一个是存储数据元素的数据域,另一个是存储下一个结点地址的指针域</p><p>STL中的链表是一个双向循环链表</p><p>list中的迭代器只支持前移和后移,属于<code>双向迭代器</code></p><p>list优点:</p><ul><li>采用动态存储分配,不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便,修改指针即可,不需要移动大量元素</li></ul><p>list缺点:</p><ul><li>空间(指针域)和时间(遍历)耗费较大</li></ul><p>插入和删除操作都不会造成原有list迭代器的失效,这在vector中是不成立的</p><blockquote><p>STL中List和vector是最常使用的容器</p></blockquote><h5 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h5><p>功能:创建list容器</p><p>函数原型:</p><ul><li><code>list&lt;T&gt; lst;</code> //list采用模板类实现,对象的默认构造形式</li><li><code>list(beg,end);</code> //构造函数将[beg,end)区间的元素拷贝给本身</li><li><code>list(n,elem);</code> ////构造函数将n个elem拷贝给本身</li><li><code>list(const list &amp;lst);</code> //拷贝构造函数</li></ul><h5 id="list赋值和交换"><a href="#list赋值和交换" class="headerlink" title="list赋值和交换"></a>list赋值和交换</h5><p>功能:给list容器进行赋值,以及交换list容器</p><p>函数原型:</p><ul><li><code>assign(beg,end);</code> //将[beg,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> //将n个elem拷贝赋值给本身</li><li><code>list&amp; operator=(const list &amp;lst);</code> //重载等号操作符</li><li><code>swap(lst);</code> //将lst与本身元素互换</li></ul><h5 id="list大小操作"><a href="#list大小操作" class="headerlink" title="list大小操作"></a>list大小操作</h5><p>功能:对list容器的大小进行操作</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的个数</li><li><code>empty();</code> //判断容器是否为空</li><li><code>resize(num);</code> //重新指定容器的长度为num。若容器变长,则以默认值填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li><li><code>resize(num,elem);</code> //重新指定容器的长度为num。若容器变长,则以elem填充新位置;如果容器变短,则末尾超出容器长度的元素被删除</li></ul><h5 id="list插入和删除"><a href="#list插入和删除" class="headerlink" title="list插入和删除"></a>list插入和删除</h5><p>功能:对list容器数据进行插入、删除操作</p><p>函数原型:</p><ul><li><code>push_back(elem);</code> //在容器尾部加入一个元素</li><li><code>pop_back();</code> //删除容器中最后一个元素</li><li><code>push_front(elem);</code> //在容器开头插入一个元素</li><li><code>pop_front();</code> //从容器开头移除第一个元素</li><li><code>insert(pos,elem);</code> //在pos位置插入elem元素的拷贝,返回新数据的位置</li><li><code>insert(pos,n,ele);</code> //在pos位置插入n个elem数据,无返回值</li><li><code>clear();</code> //删除容器中所有数据</li><li><code>erase(beg,end);</code> //删除[beg,end)区间的数据,返回下一个数据的位置</li><li><code>erase(pos);</code> //删除pos位置的数据,返回下一个数据的位置</li><li><code>remove(elem);</code> //删除容器中所有与elem值匹配的元素</li></ul><h5 id="list数据存取"><a href="#list数据存取" class="headerlink" title="list数据存取"></a>list数据存取</h5><p>功能:对list中的数据进行存取</p><p>函数原型:</p><ul><li><code>front();</code> //返回第一个元素</li><li><code>back();</code> //返回最后一个元素</li></ul><h5 id="list反转和排序"><a href="#list反转和排序" class="headerlink" title="list反转和排序"></a>list反转和排序</h5><p>功能:将容器中的元素反转,以及将容器中的数据进行排序</p><p>函数原型:</p><ul><li><code>reverse();</code> //反转链表</li><li><code>sort();</code> //链表排序</li></ul><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(<span class="type">const</span> list&lt;<span class="type">int</span>&gt;&amp; l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::const_iterator it = l.<span class="built_in">begin</span>();it != l.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//添加数据</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="comment">//遍历容器</span></span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="comment">//区间方式构造</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;<span class="built_in">l2</span> (l1.<span class="built_in">begin</span>(), l1.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printList</span>(l2);</span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;<span class="built_in">l3</span>(l2);</span><br><span class="line">  <span class="built_in">printList</span>(l3);</span><br><span class="line">  <span class="comment">//n个elem</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;<span class="built_in">l4</span>(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list赋值和交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//添加数据</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="comment">//遍历容器</span></span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l2;</span><br><span class="line">  l2 = l1;</span><br><span class="line">  <span class="built_in">printList</span>(l2);</span><br><span class="line"></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l3;</span><br><span class="line">  l3.<span class="built_in">assign</span>(l2.<span class="built_in">begin</span>(), l2.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">printList</span>(l3);</span><br><span class="line"></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l4;</span><br><span class="line">  l4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//添加数据</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l2;</span><br><span class="line">  l2.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="built_in">printList</span>(l2);</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  l1.<span class="built_in">swap</span>(l2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="built_in">printList</span>(l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//添加数据</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> (l1.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;l1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;l1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;l1的大小为:&quot;</span> &lt;&lt; l1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重新指定大小</span></span><br><span class="line">  l1.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  l1.<span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="comment">//头插</span></span><br><span class="line">  l1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">  l1.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">  l1.<span class="built_in">push_front</span>(<span class="number">300</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//尾删</span></span><br><span class="line">  l1.<span class="built_in">pop_back</span>();</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="comment">//头删</span></span><br><span class="line">  l1.<span class="built_in">pop_front</span>();</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//插入</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;::iterator it = l1.<span class="built_in">begin</span>();</span><br><span class="line">  l1.<span class="built_in">insert</span>(++it, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  it = l1.<span class="built_in">begin</span>();</span><br><span class="line">  l1.<span class="built_in">erase</span>(++it);<span class="comment">//删除第二个元素</span></span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//移除</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  l1.<span class="built_in">remove</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空</span></span><br><span class="line">  l1.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="comment">//cout&lt;&lt;l1.at(0)&lt;&lt;endl;//错误 不支持at访问数据</span></span><br><span class="line">  <span class="comment">//cout&lt;&lt;l1[0]&lt;&lt;endl;//错误 不支持[]访问数据</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;第一个元素:&quot;</span> &lt;&lt; l1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;最后一个元素:&quot;</span> &lt;&lt; l1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//list容器的迭代器是双向迭代器,不支持随机访问</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;::iterator it = l1.<span class="built_in">begin</span>();</span><br><span class="line">  <span class="comment">//it = it + 1;//错误 不可以跳跃访问 即使是+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list反转和排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(<span class="type">int</span> val1, <span class="type">int</span> val2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建list容器</span></span><br><span class="line">  list&lt;<span class="type">int</span>&gt;l1;</span><br><span class="line">  <span class="comment">//尾插</span></span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">90</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  l1.<span class="built_in">push_back</span>(<span class="number">70</span>);</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="comment">//反转</span></span><br><span class="line">  l1.<span class="built_in">reverse</span>();</span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line">  <span class="comment">//排序</span></span><br><span class="line">  l1.<span class="built_in">sort</span>();<span class="comment">//默认排序规则 从小到大</span></span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">  l1.<span class="built_in">sort</span>(myCompare);<span class="comment">//指定规则 从大到小</span></span><br><span class="line">  <span class="built_in">printList</span>(l1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test07</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-list容器排序"><a href="#案例-list容器排序" class="headerlink" title="案例: list容器排序"></a>案例: list容器排序</h5><p>案例描述:<br>将Person自定义数据类型进行排序,Person中属性有姓名、年龄、身高<br>排序规则: 按照年龄进行升序,如果年龄相同按照身高进行降序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(string name, <span class="type">int</span> age, <span class="type">int</span> height)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line">  &#125;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">  <span class="type">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//指定排序规则</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">comparePerson</span><span class="params">(Person &amp;p1,Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p1.m_Age == p2.m_Age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//年龄相同 身高降序</span></span><br><span class="line">    <span class="keyword">return</span> p1.m_Height &gt; p2.m_Height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//按照年龄升序</span></span><br><span class="line">    <span class="keyword">return</span> p1.m_Age &lt; p2.m_Age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  list&lt;Person&gt;L;</span><br><span class="line">  <span class="comment">//准备数据</span></span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">35</span>, <span class="number">175</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">45</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;孙权&quot;</span>, <span class="number">40</span>, <span class="number">170</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">25</span>, <span class="number">190</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">35</span>, <span class="number">160</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p6</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">35</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">  <span class="comment">//插入数据</span></span><br><span class="line">  L.<span class="built_in">push_back</span>(p1);</span><br><span class="line">  L.<span class="built_in">push_back</span>(p2);</span><br><span class="line">  L.<span class="built_in">push_back</span>(p3);</span><br><span class="line">  L.<span class="built_in">push_back</span>(p4);</span><br><span class="line">  L.<span class="built_in">push_back</span>(p5);</span><br><span class="line">  L.<span class="built_in">push_back</span>(p6);</span><br><span class="line">  <span class="keyword">for</span> (list&lt;Person&gt;::iterator it = L.<span class="built_in">begin</span>();it != L.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; (*it).m_Name &lt;&lt; </span><br><span class="line">      <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; </span><br><span class="line">      <span class="string">&quot; 身高: &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//排序</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;排序后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  L.<span class="built_in">sort</span>(comparePerson);</span><br><span class="line">  <span class="keyword">for</span> (list&lt;Person&gt;::iterator it = L.<span class="built_in">begin</span>();it != L.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; (*it).m_Name &lt;&lt;</span><br><span class="line">      <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt;</span><br><span class="line">      <span class="string">&quot; 身高: &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-8-set-multiset容器"><a href="#3-2-8-set-multiset容器" class="headerlink" title="3.2.8 set/multiset容器"></a>3.2.8 set/multiset容器</h4><p>set:<br>所有元素都会在插入时被排序</p><p>本质:set/multiset属于<code>关联式容器</code>,底层结构是用<code>二叉树</code>实现的</p><p>set与multiset区别:</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h5 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h5><p>功能:创建set容器以及赋值</p><p>构造:</p><ul><li><code>set&lt;T&gt; st;</code> //默认构造函数</li><li><code>set(const set &amp;st);</code> //拷贝构造函数</li></ul><p>赋值:</p><ul><li><code>set&amp; operator=(const set &amp;st);</code> //重载等号操作符</li></ul><h5 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h5><p>功能:统计set容器大小以及交换set容器</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换俩个集合容器</li></ul><h5 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h5><p>功能:set容器进行插入和删除数据</p><p>函数原型:</p><ul><li><code>insert(elem);</code> //在容器中插入元素</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素,返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> //删除区间[beg,end)的所有元素,返回下一个元素的迭代器</li><li><code>erase(elem);</code> //删除容器中值为elem的元素</li></ul><h5 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h5><p>功能:对set容器进行查找数据以及统计数据</p><p>函数原型:</p><ul><li><code>find(key);</code> //查找key是否存在,若存在返回该键的元素的迭代器;若不存在返回set.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><h5 id="set与multiset区别"><a href="#set与multiset区别" class="headerlink" title="set与multiset区别"></a>set与multiset区别</h5><p>区别:</p><ul><li>set不允许插入重复元素,而multiset可以</li><li>set插入数据的同时会返回插入结果,表示插入是否成功</li><li>multiset不会检测数据,因此可以插入重复数据</li></ul><h5 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h5><p>功能:成对出现的数据,利用对组可以返回俩个数据</p><p>创建方式:</p><ul><li><code>pair&lt;type,type&gt; p (value1,value2);</code></li><li><code>pair&lt;type,type&gt; p = make_pair(value1,value2);</code></li></ul><h5 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h5><p>1.内置数据类型</p><p>2.自定义数据类型</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printSet</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>();it != s.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set构造和赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  <span class="comment">//插入数据只有insert方法</span></span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="comment">//遍历容器</span></span><br><span class="line">  <span class="comment">//set容器特点:所有元素插入时候自动排序</span></span><br><span class="line">  <span class="comment">//不允许插入重复值</span></span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  set&lt;<span class="type">int</span>&gt;<span class="built_in">s2</span>(s1);</span><br><span class="line">  <span class="built_in">printSet</span>(s2);</span><br><span class="line">  <span class="comment">//赋值</span></span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s3;</span><br><span class="line">  s3 = s2;</span><br><span class="line">  <span class="built_in">printSet</span>(s3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set大小和交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  <span class="comment">//插入数据只有insert方法</span></span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (s1.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1大小为:&quot;</span> &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s2;</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  <span class="built_in">printSet</span>(s2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  s1.<span class="built_in">swap</span>(s2);</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  <span class="built_in">printSet</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  <span class="comment">//插入数据只有insert方法</span></span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除 排序后的</span></span><br><span class="line">  s1.<span class="built_in">erase</span>(s1.<span class="built_in">begin</span>());</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line"></span><br><span class="line">  s1.<span class="built_in">erase</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  <span class="comment">//清空</span></span><br><span class="line">  <span class="comment">//s1.erase(s1.begin(), s1.end());</span></span><br><span class="line">  s1.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  <span class="comment">//插入数据只有insert方法</span></span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;::iterator pos = s1.<span class="built_in">find</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (pos != s1.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;找到元素:&quot;</span> &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//统计30 的个数 对于set而言结果只能为0或者1</span></span><br><span class="line">  <span class="type">int</span> num = s1.<span class="built_in">count</span>(<span class="number">30</span>);</span><br><span class="line">  cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set与multiset区别</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  <span class="comment">//插入数据只有insert方法</span></span><br><span class="line">  pair&lt;set&lt;<span class="type">int</span>&gt;::iterator,<span class="type">bool</span>&gt; ret =  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (ret.second)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一次插入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一次插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  ret = s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (ret.second)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第二次插入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第二次插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  multiset&lt;<span class="type">int</span>&gt;ms;</span><br><span class="line">  ms.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  ms.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">for</span> (multiset&lt;<span class="type">int</span>&gt;::iterator it = ms.<span class="built_in">begin</span>();it != ms.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pair对组创建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1</span></span><br><span class="line">  pair&lt;string, <span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p1.first &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p1.second &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//2</span></span><br><span class="line">  pair&lt;string, <span class="type">int</span>&gt;p2 = <span class="built_in">make_pair</span>(<span class="string">&quot;Jory&quot;</span>, <span class="number">18</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p2.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set排序</span></span><br><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">  s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="built_in">printSet</span>(s1);</span><br><span class="line">  <span class="comment">//指定排序规则为从大到小 在插数据之前</span></span><br><span class="line">  set&lt;<span class="type">int</span>,MyCompare&gt;s2;</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">  s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">for</span> (set&lt;<span class="type">int</span>, MyCompare&gt;::iterator it = s2.<span class="built_in">begin</span>();it != s2.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comparePerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person&amp; p2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//按照年龄降序</span></span><br><span class="line">    <span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test08</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//自定义数据类型都会指定排序规则</span></span><br><span class="line">  set&lt;Person,comparePerson&gt;s;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">24</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">28</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line">  <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line">  s.<span class="built_in">insert</span>(p1);</span><br><span class="line">  s.<span class="built_in">insert</span>(p2);</span><br><span class="line">  s.<span class="built_in">insert</span>(p3);</span><br><span class="line">  s.<span class="built_in">insert</span>(p4);</span><br><span class="line">  <span class="keyword">for</span> (set&lt;Person,comparePerson&gt;::iterator it = s.<span class="built_in">begin</span>();it != s.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test08</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-9-map-multimap容器"><a href="#3-2-9-map-multimap容器" class="headerlink" title="3.2.9 map/multimap容器"></a>3.2.9 map/multimap容器</h4><ul><li>map中所有元素都是pair</li><li>pair中第一个元素位key(键值),起索引作用,第二个元素为value(实值)</li><li>所有元素都会根据元素的键值自动排序</li></ul><p>本质: map/multimap属于<code>关联式容器</code>,底层结构是用二叉树实现</p><p>优点:</p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap区别:</p><ul><li>map不允许容器中有重复的key值元素</li><li>multimap允许容器中有重复的key值元素</li></ul><h5 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h5><p>功能:对map容器进行构造和赋值操作</p><p>构造:</p><ul><li><code>map&lt;T1,T2&gt; mp;</code> //默认构造函数</li><li><code>map(const map &amp;mp);</code> //拷贝构造函数</li></ul><p>赋值:</p><ul><li><code>map&amp; operator=(const map &amp;map);</code> //重载等号操作符</li></ul><h5 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h5><p>功能:统计map容器大小以及交换map容器</p><p>函数原型:</p><ul><li><code>size();</code> //返回容器中元素的数目</li><li><code>empty();</code> //判断容器是否为空</li><li><code>swap(st);</code> //交换俩个集合容器</li></ul><h5 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h5><p>功能:map容器进行插入和删除数据</p><p>函数原型:</p><ul><li><code>insert(elem);</code> //在容器中插入元素</li><li><code>clear();</code> //清除所有元素</li><li><code>erase(pos);</code> //删除pos迭代器所指的元素,返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> //删除区间[beg,end)的所有元素,返回下一个元素的迭代器</li><li><code>erase(key);</code> //删除容器中值为key的元素</li></ul><h5 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h5><p>功能:对map容器进行查找数据以及统计数据</p><p>函数原型:</p><ul><li><code>find(key);</code> //查找key是否存在,若存在返回该键的元素的迭代器;若不存在返回map.end();</li><li><code>count(key);</code> //统计key的元素个数</li></ul><h5 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h5><p>默认按照key值进行从小到大排序</p><p>利用仿函数</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>();it != m.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map构造和赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建map容器</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  <span class="comment">//拷贝构造</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;<span class="built_in">m2</span>(m);</span><br><span class="line">  <span class="built_in">printMap</span>(m2);</span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m3;</span><br><span class="line">  m3 = m2;</span><br><span class="line">  <span class="built_in">printMap</span>(m3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map大小和交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建map容器</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">  <span class="keyword">if</span> (m.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m的大小为:&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m2;</span><br><span class="line">  m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">230</span>));</span><br><span class="line">  m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">130</span>));</span><br><span class="line">  m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">340</span>));</span><br><span class="line">  m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">240</span>));</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  <span class="built_in">printMap</span>(m2);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;交换后:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  m.<span class="built_in">swap</span>(m2);</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  <span class="built_in">printMap</span>(m2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建map容器</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">  <span class="comment">//插入4种方式</span></span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">  <span class="comment">//[]不建议去插入 可以使用[]通过key访问value</span></span><br><span class="line">  m[<span class="number">4</span>] = <span class="number">40</span>;</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>());</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  m.<span class="built_in">erase</span>(<span class="number">3</span>);<span class="comment">//按照key删除</span></span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">  <span class="comment">//清空</span></span><br><span class="line">  <span class="comment">//m.erase(m.begin(), m.end());</span></span><br><span class="line">  m.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="built_in">printMap</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator pos = m.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> (pos != m.<span class="built_in">end</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;找到元素: key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; pos-&gt;second &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;未找到元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//统计 结果只能为0或1 因为map不允许插入重复key</span></span><br><span class="line">  <span class="comment">//multimap的统计结果可能大于1</span></span><br><span class="line">  <span class="type">int</span> num = m.<span class="built_in">count</span>(<span class="number">3</span>);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map容器排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//降序</span></span><br><span class="line">    <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//在插入数据前修改排序规则</span></span><br><span class="line">  map&lt;<span class="type">int</span>, <span class="type">int</span>,MyCompare&gt;m;</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));  </span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));  </span><br><span class="line">  m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));  </span><br><span class="line">  <span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt;::iterator it = m.<span class="built_in">begin</span>();it != m.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test05</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-员工分组"><a href="#案例-员工分组" class="headerlink" title="案例: 员工分组"></a>案例: 员工分组</h5><p>案例描述:</p><ul><li>公司今天招聘了10个员工(ABCDEFGHIJ),10名员工进入公司之后,需要指派员工去哪个部门工作</li><li>员工信息有:姓名、工资组成;部门分为:策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入 key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><p>步骤:<br>1.创建10名员工,放到vector中<br>2.遍历vector容器,取出每个员工,进行随机分组<br>3.分组后将员工部门编号作为key,具体员工为value,放入到multimap容器中<br>4.分部门显示员工信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CEHUA 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEISHU 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YANFA 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  string m_Name;</span><br><span class="line">  <span class="type">int</span> m_Salary;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createWorker</span><span class="params">(vector&lt;Worker&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string nameSeed = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    Worker worker;</span><br><span class="line">    worker.m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">    worker.m_Name += nameSeed[i];</span><br><span class="line">    worker.m_Salary = <span class="built_in">rand</span>() % <span class="number">10000</span> + <span class="number">10000</span>;<span class="comment">//10000~19999</span></span><br><span class="line">    <span class="comment">//将员工放入容器中</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(worker);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setGroup</span><span class="params">(vector&lt;Worker&gt;&amp; v, multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (vector&lt;Worker&gt;::iterator it = v.<span class="built_in">begin</span>();it != v.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//产生随机编号</span></span><br><span class="line">    <span class="type">int</span> deptId = <span class="built_in">rand</span>() % <span class="number">3</span>;</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(deptId, *it));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showWorkerByGroup</span><span class="params">(multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;策划部门:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  multimap&lt;<span class="type">int</span>, Worker&gt;::iterator pos = m.<span class="built_in">find</span>(CEHUA);</span><br><span class="line">  <span class="type">int</span> count = m.<span class="built_in">count</span>(CEHUA);<span class="comment">//统计具体人数</span></span><br><span class="line">  <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (;pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count;pos++, index++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot; 工资: &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;美术部门:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  pos = m.<span class="built_in">find</span>(MEISHU);</span><br><span class="line">  count = m.<span class="built_in">count</span>(MEISHU);<span class="comment">//统计具体人数</span></span><br><span class="line">  index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (;pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count;pos++, index++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot; 工资: &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;研发部门:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  pos = m.<span class="built_in">find</span>(YANFA);</span><br><span class="line">  count = m.<span class="built_in">count</span>(YANFA);<span class="comment">//统计具体人数</span></span><br><span class="line">  index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (;pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count;pos++, index++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot; 工资: &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">  <span class="comment">//1.创建员工</span></span><br><span class="line">  vector&lt;Worker&gt;vWorker;</span><br><span class="line">  <span class="built_in">createWorker</span>(vWorker);</span><br><span class="line">  <span class="comment">//2.员工分组</span></span><br><span class="line">  multimap&lt;<span class="type">int</span>, Worker&gt;mWorker;</span><br><span class="line">  <span class="built_in">setGroup</span>(vWorker,mWorker);</span><br><span class="line">  <span class="comment">//3.分组显示员工</span></span><br><span class="line">  <span class="built_in">showWorkerByGroup</span>(mWorker);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-STL函数对象"><a href="#3-3-STL函数对象" class="headerlink" title="3.3 STL函数对象"></a>3.3 STL函数对象</h3><p>概念:</p><ul><li>重载函数调用操作符的类,其对象常称为函数对象</li><li>函数对象使用<code>重载的()</code>时,行为类似函数调用,也叫仿函数</li></ul><p>本质:函数对象是一个类,不是一个函数</p><p>使用特点:</p><ul><li>函数对象在使用时,可以像普通函数那样调用,可以有参数和返回值</li><li>函数对象超出普通函数概念,函数对象可以有自己的状态<ul><li>可以使用成员属性记录状态</li></ul></li><li>函数对象可以作为参数传递</li></ul><h4 id="3-3-1-谓词"><a href="#3-3-1-谓词" class="headerlink" title="3.3.1 谓词"></a>3.3.1 谓词</h4><p>概念:</p><ul><li>返回<code>bool类型</code>的仿函数称为谓词</li><li>如果operator()接收一个参数,那么就叫一元谓词</li><li>如果operator()接收二个参数,那么就叫二元谓词</li></ul><h4 id="3-3-2-内建函数对象"><a href="#3-3-2-内建函数对象" class="headerlink" title="3.3.2 内建函数对象"></a>3.3.2 内建函数对象</h4><p>概念:STL内建了一些函数对象</p><p>分类:</p><ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p>用法:</p><ul><li>这些仿函数所产生的对象用法和一般函数完全相同</li><li>使用内建函数对象,需要引入头文件<code>#include&lt;functional&gt;</code></li></ul><h5 id="算术仿函数"><a href="#算术仿函数" class="headerlink" title="算术仿函数"></a>算术仿函数</h5><p>功能描述:</p><ul><li>实现四则运算</li><li>其中negate是一元运算,其他都是二元运算</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code> //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code> //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code> //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code> //取反仿函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一元运算 negate</span></span><br><span class="line">negate&lt;<span class="type">int</span>&gt;n;</span><br><span class="line">cout &lt;&lt; <span class="built_in">n</span>(<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//二元运算 plus</span></span><br><span class="line">plus&lt;<span class="type">int</span>&gt;p;</span><br><span class="line">cout &lt;&lt; <span class="built_in">p</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h5 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h5><p>功能描述:</p><ul><li>实现关系比较</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> //小于等于</li></ul><h5 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h5><p>功能描述:</p><ul><li>实现逻辑运算</li></ul><p>仿函数原型:</p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> //逻辑非</li></ul><h3 id="3-4-STL常用算法"><a href="#3-4-STL常用算法" class="headerlink" title="3.4 STL常用算法"></a>3.4 STL常用算法</h3><p>概述:</p><ul><li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code> 组成</li><li><code>&lt;algorithm&gt;</code> 是所有STL头文件中最大的一个,范围涉及到比较、交换、查找、遍历操作、复制、修改等等</li><li><code>&lt;functional&gt;</code> 体积很小,只包括几个在序列上面进行的简单数学运算的模板函数</li><li><code>&lt;numeric&gt;</code> 定义了一些模板类,用以声明函数对象</li></ul><h4 id="3-4-1-常用遍历算法"><a href="#3-4-1-常用遍历算法" class="headerlink" title="3.4.1 常用遍历算法"></a>3.4.1 常用遍历算法</h4><ul><li><code>for_each</code> //遍历容器</li></ul><p>函数原型:</p><ul><li><code>for_each(iterator beg,iterator end,_func);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_func</code>函数或者函数对象</li></ul><ul><li><p><code>transform</code> //搬运容器到另一个容器</p><p>函数原型:</p><ul><li><code>transform(iterator beg1,iterator end1,iterator beg2,_func);</code><br>//<code>beg1</code>源容器开始迭代器<br>//<code>end1</code>源容器结束迭代器<br>//<code>beg2</code>目标容器开始迭代器<br>//<code>_func</code>函数或者函数对象</li></ul></li></ul><p>目标容器需要提前开辟空间</p><h4 id="3-4-2-常用查找算法"><a href="#3-4-2-常用查找算法" class="headerlink" title="3.4.2 常用查找算法"></a>3.4.2 常用查找算法</h4><ul><li><p><code>find</code> //查找元素</p><p>函数原型:</p><ul><li><code>find(iterator beg,iterator end,value);</code><br>//按值查找元素,找到返回指定位置迭代器,找不到返回结束迭代器位置<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>查找的元素</li></ul></li><li><p><code>find_if</code> //按条件查找元素</p><p>函数原型:</p><ul><li><code>find_if(iterator beg,iterator end,_Pred);</code><br>//按值查找元素,找到返回指定位置迭代器,找不到返回结束迭代器位置<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>函数或者谓词(返回bool类型的仿函数)</li></ul></li><li><p><code>adjacent_find</code> //查找相邻重复元素</p><p>函数原型:</p><ul><li><code>adjacent_find(iterator beg,iterator end);</code><br>//查找相邻重复元素,返回相邻元素的第一个位置的迭代器<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul></li><li><p><code>binary_search</code> //二分查找法</p><p>函数原型:</p><ul><li><code>bool binary_search(iterator beg,iterator end,value);</code><br>//查找指定的元素 找到返回true 否则返回false<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>查找的元素</li></ul></li><li><p><code>count</code> //统计元素个数</p><p>函数原型:</p><ul><li><code>count(iterator beg,iterator end,value);</code><br>//统计元素出现次数<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>统计的元素</li></ul></li><li><p><code>count_if</code> //按条件统计元素个数</p><p>函数原型:</p><ul><li><code>count_if(iterator beg,iterator end,_Pred);</code><br>//按条件统计元素出现次数<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>谓词</li></ul></li></ul><h4 id="3-4-3-常用排序算法"><a href="#3-4-3-常用排序算法" class="headerlink" title="3.4.3 常用排序算法"></a>3.4.3 常用排序算法</h4><ul><li><p><code>sort</code> //对容器内元素进行排序</p><p>函数原型:</p><ul><li><code>sort(iterator beg,iterator end,_Pred);</code><br>//对容器内元素进行排序<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_Pred</code>谓词</li></ul></li><li><p><code>random_shuffle</code> //洗牌 指定范围内的元素随机调整次序</p><p>函数原型:</p><ul><li><code>random_shuffle(iterator beg,iterator end);</code><br>//指定范围内的元素随机调整次序<br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul><p>可以添加随机数种子: <code>srand((unsigned int)time(NULL))</code></p></li><li><p><code>merge</code> //容器元素合并,并存储到另一个容器中</p><p>函数原型:</p><ul><li><code>merge(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间<br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>reverse</code> //反转指定范围的元素</p><p>函数原型:</p><ul><li><code>reverse(iterator beg,iterator end);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器</li></ul></li></ul><h4 id="3-4-4-常用拷贝和构造算法"><a href="#3-4-4-常用拷贝和构造算法" class="headerlink" title="3.4.4 常用拷贝和构造算法"></a>3.4.4 常用拷贝和构造算法</h4><ul><li><p><code>copy</code> //容器内指定范围的元素拷贝到另一个容器中</p><p>函数原型:</p><ul><li><code>copy(iterator beg,iterator end,iterator dest);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//目标容器需要提前分配空间<br>//<code>dest</code>目标容器起始迭代器</li></ul></li><li><p><code>replace</code> //将容器内指定范围的旧元素修改为新元素</p><p>函数原型:</p><ul><li><code>replace(iterator beg,iterator end,oldvalue,newvalue);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>oldvalue</code>旧元素<br>//<code>newvalue</code>新元素</li></ul></li><li><p><code>replace_if</code> //容器内指定范围满足条件的元素替换为新元素</p><p>函数原型:</p><ul><li><code>replace_if(iterator beg,iterator end,_pred,newvalue);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>_pred</code>谓词<br>//<code>newvalue</code>新元素</li></ul></li><li><p><code>swap</code> //互换俩个容器的元素</p><p>函数原型:</p><ul><li><code>swap(container c1,container c2);</code><br>//注意c1、c2必须为同一种容器<br>//<code>c1</code>容器1<br>//<code>c2</code>容器2</li></ul></li></ul><h4 id="3-4-5-常用算术生成算法"><a href="#3-4-5-常用算术生成算法" class="headerlink" title="3.4.5 常用算术生成算法"></a>3.4.5 常用算术生成算法</h4><p>包含头文件<code>#include&lt;numeric&gt;</code></p><ul><li><p><code>accumulate</code> //计算容器元素累计总和</p><p>函数原型:</p><ul><li><code>accumulate(iterator beg,iterator end,value);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>起始值</li></ul></li><li><p><code>fill</code> //向容器中添加元素</p><p>函数原型:</p><ul><li><code>fill(iterator beg,iterator end,value);</code><br>//<code>beg</code>开始迭代器<br>//<code>end</code>结束迭代器<br>//<code>value</code>填充的值</li></ul></li></ul><h4 id="3-4-6-常用集合算法"><a href="#3-4-6-常用集合算法" class="headerlink" title="3.4.6 常用集合算法"></a>3.4.6 常用集合算法</h4><ul><li><p><code>set_intersection</code> //求俩个容器的交集</p><p>函数原型:</p><ul><li><code>set_intersection(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  大容器包含小容器 开辟空间 取小容器size即可: <code>resize(min(v1.size(),v2.size()));</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>set_union</code> //求俩个容器的并集</p><p>函数原型:</p><ul><li><code>set_union(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  俩容器没有交集 开辟空间 取俩容器size之和即可: <code>resize(v1.size()+v2.size());</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li><li><p><code>set_difference</code> //求俩个容器的差集</p><p>函数原型:</p><ul><li><code>set_union(iterator beg1,iterator end1,iterator beg2,iterator end2,iterator dest);</code><br>//注意:俩个容器必须是有序序列且一致(同升同降)的<br>//<code>beg1</code>容器1开始迭代器<br>//<code>end1</code>容器1结束迭代器<br>//<code>beg2</code>容器2开始迭代器<br>//<code>end2</code>容器2结束迭代器<br>//目标容器需要提前分配空间 resize<br>//最特殊情况  俩容器没有交集 开辟空间 取大容器size即可: <code>resize(max(v1.size(),v2.size());</code><br>//遍历时结束迭代器使用返回回来的迭代器<code>dest</code><br>//<code>dest</code>目标容器开始迭代器</li></ul></li></ul><h5 id="案例-演讲比赛流程管理系统"><a href="#案例-演讲比赛流程管理系统" class="headerlink" title="案例: 演讲比赛流程管理系统"></a>案例: 演讲比赛流程管理系统</h5><p>比赛规则:</p><ul><li>学校举行一场演讲比赛,共有<code>12人</code>参加。<code>比赛共俩轮</code>,第一轮为淘汰赛,第二轮为决赛</li><li>每名选手都有对应的<code>编号</code>:如10001 ~ 10012</li><li>比赛方式:<code>分组比赛每组6人</code></li><li>每一轮分为俩个小组,整体按照选手编号进行<code>抽签</code>后顺序演讲</li><li>十个评委分别给每个选手打分,去除最高分和最低分,求的平均分为本轮选手的成绩</li><li>当小组演讲完后,淘汰组内排名最后的三个选手,<code>前三名晋级</code>,进入下一轮比赛</li><li>第二轮为决赛,<code>前三名胜出</code></li><li>每轮比赛过后需要<code>显示晋级选手的信息</code></li></ul><p>程序功能:</p><ul><li>开始演讲比赛:完成整届比赛的流程,每个比赛阶段需要给用户一个提示,用户按任意键后继续下一个阶段</li><li>查看往届记录:查看之前比赛前三名结果,每次比赛都会记录到文件中,文件用.csv后缀名保存</li><li>清空比赛记录:将文件中数据清空</li><li>退出比赛程序:可以退出当前程序</li></ul><p><a href="https://github.com/liaojie1314/SpeechSystem">代码</a></p><h5 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h5><p>身份简介</p><ul><li>学生代表:申请使用机房</li><li>教师:审核学生的预约申请</li><li>管理员:给学生老师创建账号</li></ul><p>机房简介</p><ul><li>1号机房:最大容量20人</li><li>2号机房:最大容量50人</li><li>3号机房:最大容量100人</li></ul><p>申请简介</p><ul><li>申请的订单每周由管理员清空</li><li>学生可以预约未来一周内的机房使用,预约的日期为周一至周五,预约时需要选择时间段(上午、下午)</li><li>教师来审核预约,依据实际情况审核预约通过或者不通过</li></ul><p>系统具体要求</p><ul><li>首先进入登录界面,可选身份有:<ul><li>学生代表</li><li>老师</li><li>管理员</li><li>退出</li></ul></li><li>每个身份都需要进型验证后,进入子菜单<ul><li>学生需要输入:学号、姓名、登录密码</li><li>老师需要输入:职工号、姓名、登录密码</li><li>学生需要输入:管理员姓名、登录密码</li></ul></li><li>学生具体功能<ul><li>申请预约 —- 预约机房</li><li>查看自身的预约 —- 查看自身的预约状态</li><li>查看所有预约 —- 查看全部预约信息以及预约状态</li><li>取消预约 —- 取消自身的预约,预约成功或审核中的预约都可以取消</li><li>注销登录 —- 退出登录</li></ul></li><li>教师具体功能<ul><li>查看所有预约 —- 查看全部预约信息以及预约状态</li><li>审核预约 —- 对学生的预约进行审核</li><li>注销登录 —- 退出登录</li></ul></li><li>管理员具体功能<ul><li>添加账号 —- 添加学生或教师账号,需要检测学生编号和教师职工编号是否重复</li><li>查看账号 —- 可以选择查看学生或老师的全部信息</li><li>查看机房 —- 查看所有机房的消息</li><li>清空预约 —- 清空所有预约记录</li><li>注销登录 —- 退出登录</li></ul></li></ul><p><a href="https://github.com/liaojie1314/ComputerRoomReservationSystem/tree/master">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook安装</title>
      <link href="/posts/3cbc0b96.html"/>
      <url>/posts/3cbc0b96.html</url>
      
        <content type="html"><![CDATA[<p>首先找到python-&gt;Scripts目录下,在该目录下执行<code>cmd</code>命令</p><p>安装:</p><blockquote><p>pip install jupyter notebook</p></blockquote><p>初始化jupyter notebook</p><blockquote><p>jupyter notebook —generate-config</p></blockquote><p>找到Default config位置,修改jupyter_notebook_config.py文件,使用记事本打开,找到<code># c.NotebookApp.notebook_dir = &#39;&#39;</code>,去掉注释<code>#</code>,将你的工作目录放在<code>&#39;&#39;</code>中保存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter-notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scikit-Learn</title>
      <link href="/posts/99e936c.html"/>
      <url>/posts/99e936c.html</url>
      
        <content type="html"><![CDATA[<h2 id="多种多样的机器学习"><a href="#多种多样的机器学习" class="headerlink" title="多种多样的机器学习"></a>多种多样的机器学习</h2><p>通常来说, 机器学习的方法包括:</p><ul><li>监督学习 supervised learning;</li><li>非监督学习 unsupervised learning;</li><li>半监督学习 semi-supervised learning;</li><li>强化学习 reinforcement learning;</li><li>遗传算法 genetic algorithm.</li></ul><p><a href="https://scikit-learn.org/stable/">sklearn 官网</a></p><p>pip 安装</p><p>安装 Scikit-learn (sklearn) 最简单的方法就是使用 pip 安装它.</p><p>首先确认自己电脑中有安装</p><blockquote><p>Python (&gt;=2.6 或 &gt;=3.3 版本)  Numpy (&gt;=1.6.1)  Scipy (&gt;=0.9)</p></blockquote><p>然后找到你的 Terminal (MacOS or Linux), 或者 CMD (Windows). 输入以下语句:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># python 2+ 版本复制:</span><br><span class="line">pip install -U scikit-learn</span><br><span class="line"></span><br><span class="line"># python 3+ 版本复制:</span><br><span class="line">pip3 install -U scikit-learn</span><br></pre></td></tr></table></figure></p><h2 id="看图选方法"><a href="#看图选方法" class="headerlink" title="看图选方法"></a>看图选方法</h2><p>安装完 Sklearn 后，不要直接去用，先了解一下都有什么模型方法，然后选择适当的方法，来达到你的目标。</p><p>Sklearn 官网提供了一个流程图， 蓝色圆圈内是判断条件，绿色方框内是可以选择的算法：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/scikit_learn.png" alt=""></p><p>从 START 开始，首先看数据的样本是否 <code>&gt;50</code>，小于则需要收集更多的数据。</p><p>由图中，可以看到算法有四类，<code>分类，回归，聚类，降维</code>。</p><p>其中 分类和回归是监督式学习，即每个数据对应一个 label。 聚类 是非监督式学习，即没有 label。 另外一类是 降维，当数据集有很多很多属性的时候，可以通过 降维 算法把属性归纳起来。例如 20 个属性只变成 2 个，注意，这不是挑出 2 个，而是压缩成为 2 个，它们集合了 20 个属性的所有特征，相当于把重要的信息提取的更好，不重要的信息就不要了。</p><p>然后看问题属于哪一类问题，是分类还是回归，还是聚类，就选择相应的算法。 当然还要考虑数据的大小，例如 <code>100K</code> 是一个阈值。</p><p>可以发现有些方法是既可以作为分类，也可以作为回归，例如 <code>SGD</code>。</p><h2 id="通用学习模式"><a href="#通用学习模式" class="headerlink" title="通用学习模式"></a>通用学习模式</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>Sklearn 把所有机器学习的模式整合统一起来了，学会了一个模式就可以通吃其他不同类型的学习模式。</p><p>例如，分类器，</p><p>Sklearn 本身就有很多数据库，可以用来练习。 以 Iris 的数据为例，这种花有四个属性，花瓣的长宽，茎的长宽，根据这些属性把花分为三类。</p><p>我们要用 分类器 去把四种类型的花分开。</p><p>今天用 <code>KNN classifier</code>，就是选择几个临近点，综合它们做个平均来作为预测值。</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure><p>创建数据</p><p>加载 <code>iris</code> 的数据，把属性存在 <code>X</code>，类别标签存在 <code>y</code>： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iris = datasets.load_iris()</span><br><span class="line">iris_X = iris.data</span><br><span class="line">iris_y = iris.target</span><br></pre></td></tr></table></figure><p>观察一下数据集，<code>X</code> 有四个属性，<code>y</code> 有 0，1，2 三类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(iris_X[:<span class="number">2</span>, :])</span><br><span class="line"><span class="built_in">print</span>(iris_y)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[ 5.1  3.5  1.4  0.2]</span></span><br><span class="line"><span class="string"> [ 4.9  3.   1.4  0.2]]</span></span><br><span class="line"><span class="string">[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="string"> 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</span></span><br><span class="line"><span class="string"> 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2</span></span><br><span class="line"><span class="string"> 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2</span></span><br><span class="line"><span class="string"> 2 2]</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>把数据集分为训练集和测试集，其中 <code>test_size=0.3</code>，即测试集占总数据的 30%：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(</span><br><span class="line">    iris_X, iris_y, test_size=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>可以看到分开后的数据集，顺序也被打乱，这样更有利于学习模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(y_train)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2 1 0 1 0 0 1 1 1 1 0 0 1 2 1 1 1 0 2 2 1 1 1 1 0 2 2 0 2 2 2 2 2 0 1 2 2</span></span><br><span class="line"><span class="string"> 2 2 2 2 0 1 2 2 1 1 1 0 0 1 2 0 1 0 1 0 1 2 2 0 1 2 2 2 1 1 1 1 2 2 2 1 0</span></span><br><span class="line"><span class="string"> 1 1 0 0 0 2 0 1 0 0 1 2 0 2 2 0 0 2 2 2 1 2 0 0 2 1 2 0 0 1 2]</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="建立模型－训练－预测"><a href="#建立模型－训练－预测" class="headerlink" title="建立模型－训练－预测"></a>建立模型－训练－预测</h3><p>定义模块方式 <code>KNeighborsClassifier()</code>， 用 <code>fit</code> 来训练 <code>training data</code>，这一步就完成了训练的所有步骤， 后面的 knn 就已经是训练好的模型，可以直接用来 <code>predict</code> 测试集的数据， 对比用模型预测的值与真实的值，可以看到大概模拟出了数据，但是有误差，是不会完完全全预测正确的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(knn.predict(X_test))</span><br><span class="line"><span class="built_in">print</span>(y_test)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2 0 0 1 2 2 0 0 0 1 2 2 1 1 2 1 2 1 0 0 0 2 1 2 0 0 0 0 1 0 2 0 0 2 1 0 1</span></span><br><span class="line"><span class="string"> 0 0 1 0 1 2 0 1]</span></span><br><span class="line"><span class="string">[2 0 0 1 2 1 0 0 0 1 2 2 1 1 2 1 2 1 0 0 0 2 1 2 0 0 0 0 1 0 2 0 0 2 1 0 1</span></span><br><span class="line"><span class="string"> 0 0 1 0 1 2 0 1]</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 处理数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets  <span class="comment"># 使用数据库</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier  <span class="comment"># 选择附近几个点作为邻居,用邻居来得到数据的预测值</span></span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">iris_X = iris.data</span><br><span class="line">iris_Y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(iris_X[:2, :])</span></span><br><span class="line"><span class="comment"># print(iris_Y)</span></span><br><span class="line"></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(</span><br><span class="line">    iris_X, iris_Y, test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(Y_train)  # 打乱数据,减少连续的影响,乱的数据在机器学习中是一种很好的形式</span></span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">knn.fit(X_train, Y_train)</span><br><span class="line"><span class="built_in">print</span>(knn.predict(X_test))  <span class="comment"># 用属性预测值</span></span><br><span class="line"><span class="built_in">print</span>(Y_test)  <span class="comment"># 真实值</span></span><br></pre></td></tr></table></figure><h2 id="sklearn-强大数据库"><a href="#sklearn-强大数据库" class="headerlink" title="sklearn 强大数据库"></a>sklearn 强大数据库</h2><h3 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h3><p>eg: boston 房价, 糖尿病, 数字, Iris 花。</p><p>也可以生成虚拟的数据，例如用来训练线性回归模型的数据，可以用函数来生成。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset1.png" alt=""></p><p>例如，点击进入 boston 房价的数据，可以看到 <code>sample</code> 的总数，属性，以及 <code>label</code> 等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset2.png" alt=""></p><p>如果是自己生成数据，按照函数的形式，输入 <code>sample，feature，target</code> 的个数等等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">100</span>, n_informative=<span class="number">10</span>, n_targets=<span class="number">1</span>, bias=<span class="number">0.0</span>, effective_rank=<span class="literal">None</span>, tail_strength=<span class="number">0.5</span>, noise=<span class="number">0.0</span>, shuffle=<span class="literal">True</span>, coef=<span class="literal">False</span>, random_state=<span class="literal">None</span>)[source]</span><br></pre></td></tr></table></figure></p><h3 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h3><p>导入 <code>datasets</code> 包，本文以 <code>Linear Regression</code> 为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="导入数据－训练模型"><a href="#导入数据－训练模型" class="headerlink" title="导入数据－训练模型"></a>导入数据－训练模型</h3><p>用 <code>datasets.load_boston()</code> 的形式加载数据，并给 <code>X</code> 和 <code>y</code> 赋值，这种形式在 <code>Sklearn</code> 中都是高度统一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line">data_X = loaded_data.data</span><br><span class="line">data_y = loaded_data.target</span><br></pre></td></tr></table></figure><p>定义模型。</p><p>可以直接用默认值去建立 <code>model</code>，默认值也不错，也可以自己改变参数使模型更好。 然后用 <code>training data</code> 去训练模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br></pre></td></tr></table></figure><p>再打印出预测值，这里用 <code>X</code> 的前 4 个来预测，同时打印真实值，作为对比，可以看到是有些误差的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.predict(data_X[:<span class="number">4</span>, :]))</span><br><span class="line"><span class="built_in">print</span>(data_y[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[ 30.00821269  25.0298606   30.5702317   28.60814055]</span></span><br><span class="line"><span class="string">[ 24.   21.6  34.7  33.4]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>为了提高准确度，可以通过尝试不同的 <code>model</code>，不同的参数，不同的预处理等方法，入门的话可以直接用默认值。</p><p>创建虚拟数据－可视化</p><p>下面是创造数据的例子。</p><p>用函数来建立 100 个 <code>sample</code>，有一个 <code>feature</code>，和一个 <code>target</code>，这样比较方便可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y = datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">1</span>, n_targets=<span class="number">1</span>, noise=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>用 <code>scatter</code> 的形式来输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset3.png" alt=""></p><p>可以看到用函数生成的 <code>Linear Regression</code> 用的数据。</p><p><code>noise</code> 越大的话，点就会越来越离散，例如 <code>noise</code> 由 10 变为 50.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X, y = datasets.make_regression(n_samples=<span class="number">100</span>, n_features=<span class="number">1</span>, n_targets=<span class="number">1</span>, noise=<span class="number">50</span>)</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/dataset4.png" alt=""></p><h2 id="sklearn-常用属性与功能"><a href="#sklearn-常用属性与功能" class="headerlink" title="sklearn 常用属性与功能"></a>sklearn 常用属性与功能</h2><p>上次学了 <code>Sklearn</code> 中的 <code>data sets</code>，今天来看 Model 的属性和功能。</p><p>这里以 <code>LinearRegressor</code> 为例，所以先导入包，数据，还有模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line">data_X = loaded_data.data</span><br><span class="line">data_y = loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br></pre></td></tr></table></figure><h3 id="训练和预测"><a href="#训练和预测" class="headerlink" title="训练和预测"></a>训练和预测</h3><p>接下来 <code>model.fit</code> 和 <code>model.predict</code> 就属于 Model 的功能，用来训练模型，用训练好的模型预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.predict(data_X[:<span class="number">4</span>, :]))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[ 30.00821269  25.0298606   30.5702317   28.60814055]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="参数和分数"><a href="#参数和分数" class="headerlink" title="参数和分数"></a>参数和分数</h3><p>然后，<code>model.coef_</code> 和 <code>model.intercept_</code> 属于 Model 的属性， 例如对于 <code>LinearRegressor</code> 这个模型，这两个属性分别输出模型的斜率和截距（与y轴的交点）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.coef_)</span><br><span class="line"><span class="built_in">print</span>(model.intercept_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[ -1.07170557e-01   4.63952195e-02   2.08602395e-02   2.68856140e+00</span></span><br><span class="line"><span class="string">  -1.77957587e+01   3.80475246e+00   7.51061703e-04  -1.47575880e+00</span></span><br><span class="line"><span class="string">   3.05655038e-01  -1.23293463e-02  -9.53463555e-01   9.39251272e-03</span></span><br><span class="line"><span class="string">  -5.25466633e-01]</span></span><br><span class="line"><span class="string">36.4911032804</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>model.get_params()</code> 也是功能，它可以取出之前定义的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.get_params())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;copy_X&#x27;: True, &#x27;normalize&#x27;: False, &#x27;n_jobs&#x27;: 1, &#x27;fit_intercept&#x27;: True&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>model.score(data_X, data_y)</code> 它可以对 Model 用 <code>R^2</code> 的方式进行打分，输出精确度。关于 <code>R^2 coefficient of determination</code> 可以查看 <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination">wiki</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.score(data_X, data_y)) <span class="comment"># R^2 coefficient of determination</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0.740607742865</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line">data_X = loaded_data.data</span><br><span class="line">data_y = loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(model.coef_)  # y=0.1x+0.3 输出:0.1</span></span><br><span class="line"><span class="comment"># print(model.intercept_)  # 输出:0.3</span></span><br><span class="line"><span class="comment"># print(model.get_params())</span></span><br><span class="line"><span class="built_in">print</span>(model.score(data_X, data_y))  <span class="comment"># R^2 coefficient of determination</span></span><br><span class="line"><span class="comment"># print(model.predict(data_X[:4, :]))</span></span><br><span class="line"><span class="comment"># print(data_y[:4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># X, y = datasets.make_regression(n_samples=100, n_features=1, n_targets=1, noise=10)</span></span><br><span class="line"><span class="comment"># plt.scatter(X, y)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure></p><h2 id="正规化-Normalization"><a href="#正规化-Normalization" class="headerlink" title="正规化 Normalization"></a>正规化 Normalization</h2><p>由于资料的<code>偏差</code>与<code>跨度</code>会影响机器学习的成效，因此正规化(标准化)数据可以提升机器学习的成效。首先由例子来讲解:</p><h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="comment">#标准化数据模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立Array</span></span><br><span class="line">a = np.array([[<span class="number">10</span>, <span class="number">2.7</span>, <span class="number">3.6</span>],</span><br><span class="line">              [-<span class="number">100</span>, <span class="number">5</span>, -<span class="number">2</span>],</span><br><span class="line">              [<span class="number">120</span>, <span class="number">20</span>, <span class="number">40</span>]], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将normalized后的a打印出</span></span><br><span class="line"><span class="built_in">print</span>(preprocessing.scale(a))</span><br><span class="line"><span class="comment"># [[ 0.         -0.85170713 -0.55138018]</span></span><br><span class="line"><span class="comment">#  [-1.22474487 -0.55187146 -0.852133  ]</span></span><br><span class="line"><span class="comment">#  [ 1.22474487  1.40357859  1.40351318]]</span></span><br></pre></td></tr></table></figure><h3 id="数据标准化对机器学习成效的影响"><a href="#数据标准化对机器学习成效的影响" class="headerlink" title="数据标准化对机器学习成效的影响"></a>数据标准化对机器学习成效的影响</h3><p>加载模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准化数据模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将资料分割成train与test的模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成适合做classification资料的模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification </span><br><span class="line"></span><br><span class="line"><span class="comment"># Support Vector Machine中的Support Vector Classifier</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化数据的模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>生成适合做Classification数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成具有2种属性的300笔数据</span></span><br><span class="line">X, y = make_classification(</span><br><span class="line">    n_samples=<span class="number">300</span>, n_features=<span class="number">2</span>,</span><br><span class="line">    n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>, </span><br><span class="line">    random_state=<span class="number">22</span>, n_clusters_per_class=<span class="number">1</span>, </span><br><span class="line">    scale=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化数据</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/normalization.png" alt=""></p><p>数据标准化前</p><p>标准化前的预测准确率只有<code>0.477777777778</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(clf.score(X_test, y_test))</span><br><span class="line"><span class="comment"># 0.477777777778</span></span><br></pre></td></tr></table></figure><p>数据标准化后</p><p>数据的单位发生了变化, <code>X</code> 数据也被压缩到差不多大小范围.</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/normalization1.png" alt=""></p><p>标准化后的预测准确率提升至<code>0.9</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = preprocessing.scale(X)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(clf.score(X_test, y_test))</span><br><span class="line"><span class="comment"># 0.9</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Scikit-Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/posts/a4d4b8b8.html"/>
      <url>/posts/a4d4b8b8.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/python1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/python2.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android网络编程</title>
      <link href="/posts/91c40536.html"/>
      <url>/posts/91c40536.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是网络编程"><a href="#什么是网络编程" class="headerlink" title="什么是网络编程?"></a>什么是网络编程?</h2><p>网络编程从大的方面就是说对信息的发送接收。</p><p>通过操作相应API调度计算机资源硬件，并且利用管道(网线)进行数据交互的过程。</p><p>更为具体的涉及：网络模型、套接字、数据包</p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>接口:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/downloadfile.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downFile</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(BASE_URL + <span class="string">&quot;/download/11&quot;</span>);</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">                httpURLConnection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">                httpURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept-Language&quot;</span>,<span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">                httpURLConnection.connect();</span><br><span class="line">                <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;responseCode == &gt; &quot;</span> + responseCode);</span><br><span class="line">                <span class="keyword">if</span>(responseCode == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">headerField</span> <span class="operator">=</span> httpURLConnection.getHeaderField(<span class="string">&quot;Content-disposition&quot;</span>);</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;headerField == &gt; &quot;</span> + headerField);</span><br><span class="line">                    <span class="comment">//                        int index = headerField.indexOf(&quot;filename=&quot;);</span></span><br><span class="line">                    <span class="comment">//                        String fileName = headerField.substring(index + &quot;filename=&quot;.length());</span></span><br><span class="line">                    <span class="comment">//                        Log.d(TAG,&quot;fileName -- &gt; &quot; + fileName);</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> headerField.replace(<span class="string">&quot;attachment; filename=&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;fileName -- &gt; &quot;</span> + fileName);</span><br><span class="line">                    <span class="type">File</span> <span class="variable">picFile</span> <span class="operator">=</span> RequestTestActivity.<span class="built_in">this</span>.getExternalFilesDir(Environment.DIRECTORY_PICTURES);</span><br><span class="line">                    <span class="keyword">if</span>(!picFile.exists()) &#123;</span><br><span class="line">                        picFile.mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(picFile + File.separator + fileName);</span><br><span class="line">                    <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">                        file.createNewFile();</span><br><span class="line">                    &#125;</span><br><span class="line">                    fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">                    inputStream = httpURLConnection.getInputStream();</span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span>((len = inputStream.read(buffer,<span class="number">0</span>,buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        fileOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fileOutputStream.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IOUtils.ioClose(inputStream);</span><br><span class="line">                IOUtils.ioClose(fileOutputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Url携带参数"><a href="#Url携带参数" class="headerlink" title="Url携带参数"></a>Url携带参数</h2><p>接口<br>get方法</p><blockquote><p>/get/param<br>参数：</p><ul><li>keyword 关键字</li><li>page 页码</li><li>order 0 顺序 1 逆序</li></ul></blockquote><p>eg:</p><blockquote><p>/get/param?keyword=你好&amp;page=1&amp;order=0</p></blockquote><p>参数在Url上,我们可以直接对其进行拼接即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startRequest</span><span class="params">(<span class="keyword">final</span> Map&lt;String,String&gt; params,<span class="keyword">final</span> String method,<span class="keyword">final</span> String api)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//组装参数</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">if</span>(params != <span class="literal">null</span> &amp;&amp; params.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">                    Iterator&lt;Map.Entry&lt;String,String&gt;&gt; iterator = params.entrySet().iterator();</span><br><span class="line">                    <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                        Map.Entry&lt;String,String&gt; next = iterator.next();</span><br><span class="line">                        sb.append(next.getKey());</span><br><span class="line">                        sb.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                        sb.append(next.getValue());</span><br><span class="line">                        <span class="keyword">if</span>(iterator.hasNext()) &#123;</span><br><span class="line">                            sb.append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;sb result -- &gt; &quot;</span> + sb.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">                URL url;</span><br><span class="line">                <span class="keyword">if</span>(params != <span class="literal">null</span> &amp;&amp; params.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    url = <span class="keyword">new</span> <span class="title class_">URL</span>(BASE_URL + api + params);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    url = <span class="keyword">new</span> <span class="title class_">URL</span>(BASE_URL + api);</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;url -=-- &gt; &quot;</span> + url.toString());</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">                httpURLConnection.setRequestMethod(method);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept-Language&quot;</span>,<span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">                httpURLConnection.connect();</span><br><span class="line">                <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">                <span class="keyword">if</span>(responseCode == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">                    bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;result -=-=- &gt; &quot;</span> + json);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferedReader.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试代码</p><p>post/get<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getWithParams</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;keyword&quot;</span>,<span class="string">&quot;这是我的关键字Keyword&quot;</span>);</span><br><span class="line">    params.put(<span class="string">&quot;page&quot;</span>,<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    params.put(<span class="string">&quot;order&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    startRequest(params,<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/get/param&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postWithParams</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;string&quot;</span>,<span class="string">&quot;这是我提交的字符串&quot;</span>);</span><br><span class="line">    startRequest(params,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/post/string&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="请求图片"><a href="#请求图片" class="headerlink" title="请求图片"></a>请求图片</h2><p>网络权限和配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br>新建xml文件夹,在其中新建network_security_config.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>www.example.net<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>imgs.example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/security_config.png" alt=""></p><p>请求图片内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestImage</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            loadImage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadImage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://imgs.example.com/group1/M00/00/05/rBsADV2rEz-AIzSoAABi-6nfiqs456.png&quot;</span>);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        httpURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        httpURLConnection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">        httpURLConnection.connect();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeStream(is);</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">ImageView</span> <span class="variable">resultView</span> <span class="operator">=</span> findViewById(R.id.image_result);</span><br><span class="line">                resultView.setImageBitmap(bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>添加布局UI:一个Button和一个ImageView<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;https://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;requestImage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;请求图片&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_result&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里面其实就是把图片流通过一个BitmapFactory来对流进行编码转成图片内容显示到控件上</p><h2 id="post提交文本内容"><a href="#post提交文本内容" class="headerlink" title="post提交文本内容"></a>post提交文本内容</h2><p>接口地址</p><blockquote><p>/post/comment</p></blockquote><p>提交内容：</p><p>{<br>    “articleId”:”234123”,<br>    “commentContent”:”这是评论内容”<br>}</p><p>请求代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postRequest</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(BASE_URL + <span class="string">&quot;/post/comment&quot;</span>);</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">                httpURLConnection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">                httpURLConnection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept-Language&quot;</span>,<span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;application/json, text/plain, */*&quot;</span>);</span><br><span class="line">                <span class="type">CommentItem</span> <span class="variable">commentItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommentItem</span>(<span class="string">&quot;234134123&quot;</span>,<span class="string">&quot;你的文章写得也太好了！&quot;</span>);</span><br><span class="line">                <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> gson.toJson(commentItem);</span><br><span class="line">                <span class="type">byte</span>[] bytes = jsonStr.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;jsonStr length -- &gt; &quot;</span> + bytes.length);</span><br><span class="line">                httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Length&quot;</span>,String.valueOf(bytes.length));</span><br><span class="line">                <span class="comment">//连接</span></span><br><span class="line">                httpURLConnection.connect();</span><br><span class="line">                <span class="comment">//把数据给到服务</span></span><br><span class="line">                outputStream = httpURLConnection.getOutputStream();</span><br><span class="line">                outputStream.write(bytes);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">                <span class="comment">//拿结果</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">                <span class="keyword">if</span>(responseCode == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">                    inputStream = httpURLConnection.getInputStream();</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                    Log.d(TAG,<span class="string">&quot;result -- &gt; &quot;</span> + bufferedReader.readLine());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IOUtils.ioClose(inputStream);</span><br><span class="line">                IOUtils.ioClose(outputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用GsonFormat生成以下类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentItem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommentItem</span><span class="params">(String articleId,String commentContent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">        <span class="built_in">this</span>.commentContent = commentContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String articleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String commentContent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getArticleId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArticleId</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCommentContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> commentContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommentContent</span><span class="params">(String commentContent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.commentContent = commentContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果</p><blockquote><p>result — &gt; {“success”:true,”code”:10000,”message”:”评论成功:你的文章写得也太好了！”,”data”:null}</p></blockquote><h2 id="单-多-文件上传"><a href="#单-多-文件上传" class="headerlink" title="单(多)文件上传"></a>单(多)文件上传</h2><h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><p>方法：post</p><blockquote><p>/file/upload</p></blockquote><p>参数file</p><p>多文件上传</p><blockquote><p>/files/upload</p></blockquote><p>方法post 参数 files</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>用postMan上传一个文件进行抓包去拼接内容</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(File file,String fileKey,String fileName,String fileType,String BOUNDARY,</span></span><br><span class="line"><span class="params">                                OutputStream outputStream,<span class="type">boolean</span> isLast)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//准备数据</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">headerSbInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">    headerSbInfo.append(BOUNDARY);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&quot;</span> + fileKey + <span class="string">&quot;\&quot;; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;Content-Type: &quot;</span> + fileType);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    headerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] headerInfoBytes = headerSbInfo.toString().getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    outputStream.write(headerInfoBytes);</span><br><span class="line">    <span class="comment">//文件内容</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bfi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fos);</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bfi.read(buffer,<span class="number">0</span>,buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写尾部信息</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">footerSbInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    footerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    footerSbInfo.append(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">    footerSbInfo.append(BOUNDARY);</span><br><span class="line">    <span class="keyword">if</span>(isLast) &#123;</span><br><span class="line">        footerSbInfo.append(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        footerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    footerSbInfo.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    outputStream.write(footerSbInfo.toString().getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是多文件,我们只需要向body里多添加几个文件而已,格式一样的。</p><p>多文件上传调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/storage/emulated/0/Download/1.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileTwo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/storage/emulated/0/Download/rBsADV2rEz-AIzSoAABi-6nfiqs456.png&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileThree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/storage/emulated/0/Download/2.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileFour</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/storage/emulated/0/Download/rBPLFV2A8POASi1aAAE-PgvGzOo723.jpg&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileKey</span> <span class="operator">=</span> <span class="string">&quot;files&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> <span class="string">&quot;image/jpeg&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">BOUNDARY</span> <span class="operator">=</span> <span class="string">&quot;--------------------------954555323792164398227139&quot;</span>;</span><br><span class="line">    <span class="comment">//String BOUNDARY = &quot;----------------------------954555323792164398227139--&quot;;</span></span><br><span class="line">    <span class="comment">//String BOUNDARY = &quot;----------------------------954555323792164398227139&quot;;</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(BASE_URL + <span class="string">&quot;/files/upload&quot;</span>);</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">    httpURLConnection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    httpURLConnection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">    httpURLConnection.setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Android/&quot;</span> + Build.VERSION.SDK_INT);</span><br><span class="line">    httpURLConnection.setRequestProperty(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">    httpURLConnection.setRequestProperty(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;multipart/form-data; boundary=&quot;</span> + BOUNDARY);</span><br><span class="line">    httpURLConnection.setRequestProperty(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>);</span><br><span class="line">    httpURLConnection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">    httpURLConnection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//连接</span></span><br><span class="line">    httpURLConnection.connect();</span><br><span class="line">    outputStream = httpURLConnection.getOutputStream();</span><br><span class="line">    uploadFile(fileOne, fileKey, fileOne.getName(), fileType, BOUNDARY, outputStream, <span class="literal">false</span>);</span><br><span class="line">    uploadFile(fileTwo, fileKey, fileTwo.getName(), fileType, BOUNDARY, outputStream, <span class="literal">false</span>);</span><br><span class="line">    uploadFile(fileFour, fileKey, fileFour.getName(), fileType, BOUNDARY, outputStream, <span class="literal">false</span>);</span><br><span class="line">    uploadFile(fileThree, fileKey, fileThree.getName(), fileType, BOUNDARY, outputStream, <span class="literal">true</span>);</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    <span class="comment">//获取返回的结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;responseCode -- &gt; &quot;</span> + responseCode);</span><br><span class="line">    <span class="keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> bf.readLine();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;result -- &gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>关于java的网络编程,其实也没什么的,先说一下网络模型：OSI参考模型&amp;TCP/IP参考模型</p><p>通常来讲,这个做开发的在这个传输层和网际层混,而应用层则是FTP/HTTP协议等,传输层就是这个TCP或者这个UDP,这个经常问到,面试的时候,说什么TCP和UDP的区别？</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/网络模型.png" alt=""></p><p>用户在这个应用层,我们在这个传输层和网际层。那么用户在操作数据时,是怎么样的过程呢？其实呀,数据先是从用户的应用层向下封装打包,再经过网络传输到接收端,接收端自下而上拆包,最后得到用户发送的数据。</p><p>大概是这样一个模式：A——-&gt;B——-&gt;B——–&gt;A</p><h3 id="网络通信的三要素"><a href="#网络通信的三要素" class="headerlink" title="网络通信的三要素"></a>网络通信的三要素</h3><p>IP地址、端口、传输协议</p><p>首先是IP地址,其实它是一个网络设备标识,就像你家的地址一样,只是它用数字表示,或者说像门号一样。假如把酒店看成网络，那么每间房门号就是一个IP地址啦。看看它的英文:Internet Protocol,也就是网络协议的意思</p><p>说到IP,还要说到域名。因为IP纯数字,不好记忆,那么就用域名与之对应,这个呢DNS服务器来解决,域名与IP地址是映射关系。比如说,我们可以通过百度的IP地址来找到百度的网页：202.108.22.5 ,也可以通过www.baidu.com 来找到同样的页面,这里百度公司就是通过DNS服务器把域名www.baidu.com 解析到202.108.22.5,所以他们存在映射关系,这样的话,是不是网民记www.baidu.com 比记202.108.22.5这个好多啦！</p><p>还有就是特殊的IP地址：本地的IP地址,或者说是本地的回环地址：127.0.0.1，主机名是：localHost</p><p>你也可以打开这个DOC命令行,输入ipconfig查看网络配置。</p><p>知道了IP地址,那在JAVA中如何获取IP地址呢？其实很简单,在JAVA中IP地址对应的是：InetAddress类,在java.net包中放着,需要用的话,就不用客气地把它导入。</p><p>InetAddress这个类没有构造方法,所以不能实例化,但可以通过它本身的方法获取到对象,还记得单例设计模式也是这样吗？</p><p>其主要的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/InetAddress.png" alt=""></p><p>由上面的表子可以看出,要获取到IP地址:首先要得到这个InetAddress,然后通过这个InetAddress对象的getHostAddress方法就可以获取到这个IP地址。</p><blockquote><p>get：获得, Host：主机,Address：地址,也就是获取主机地址的意思</p></blockquote><p>那么,如何获取这个InetAddress对象呢？从上面的表子也可以看出有好几个静态的方法呢！这里的前提是我们不知道这个IP地址要获取的是IP地址,所以我们用这个方法来获取InetAddress对象,然后通过getHostAddress()方法来获取IP地址！</p><p>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取InetAddress对象</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">ia</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.example.net&quot;</span>);</span><br><span class="line"><span class="comment">//然后调用InetAddress对象中的getHostAddress()方法获得IP</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> ia.getHostAddress();</span><br><span class="line"><span class="comment">//输出到控制台上看看结果吧：</span></span><br><span class="line">System.out.println(<span class="string">&quot;www.example.net的IP地址是：&quot;</span>+ip);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>获取本地的IP地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取InetAddress对象</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">ia</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> ia.getHostAddress();</span><br><span class="line"><span class="comment">//在实际开发中，一般简写为：</span></span><br><span class="line">                <span class="comment">//InetAddress ia = InetAddress.getLocalHost().getHostAddress();</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;本机IP地址为：&quot;</span>+ip);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>OK,搞定完IP之后就到这个端口</p><p>我们通过IP找到了主机对吧！但是这个主机上有很多的软件吧,他们都在运行,当我们发送一个数据到主机上,那这个数据到底是给哪个软件的呢,这样就出现问题了！解决这个问题当然是用端口啦,这个端口并不是物理端口,所谓的物理端口就是计算机硬件上的插口,这里的端口是逻辑端口,关于端口的几点说明如下：</p><p>1.端口的范围从0~65535（2的16次方减1）<br>2.系统保留端口为：0~1024<br>3.一些常用的端口,FTP：21,SMTP：25,HTTP：80</p><p>最后一个是:协议</p><p>顾名思义,协议就是一起商量好共同来往的相关规定,或者说是传输规则。传输协议、UDP和TCP协议。</p><p>重点:UDP和TCP传输协议的区别</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/UDP.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/TCP.png" alt=""></p><p>解释一下上面的三次握手:</p><p>Client说：服务端哥，我想联你，在吗？—————&gt;请求链接</p><p>Server说：客户端弟，我在的，你联过来吧！———-&gt;服务端确认链接</p><p>Client说：那好，我真的联上来啦！——————–&gt;客户端确认链接</p><p>计算机与计算机之间的通信步骤:</p><p>1、通过IP地址找到主机;2、通过端口找到接收的程序;3、通过协议发送数据。</p><h3 id="传输协议-UDP"><a href="#传输协议-UDP" class="headerlink" title="传输协议:UDP"></a>传输协议:UDP</h3><p>UDP:不面向链接、不可靠、速度快,一般用于聊天、视频、通话之类的一次性数据传输,不需要精确数据或者永久数据的情况下使用。</p><p>在说这两个传输协议之前,要提到的是Socket,Socket大概是插座的意思,那么这里呢可以理解为网线插口,也就是一个端点。</p><p>现在有两台主机之间要传输数据,所以呢,首先要有码头,那我们看看如何创建码头。</p><p>UDP的码头是DatagramSocket,它可以接受和发送数据”包”。一般发送的话要指定IP地址,还有端口,而接受端可以不指定IP,但要监视端口。下面是DatagramSocket的常用构造方法：</p><blockquote><p>DatagramSocket() 构造数据报套接字并将其绑定到本地主机上任何可用的端口。 DatagramSocket(int port) 创建数据报套接字并将其绑定到本地主机上的指定端口。 DatagramSocket(int port, InetAddress laddr) 创建数据报套接字，将其绑定到指定的本地地址。</p></blockquote><p>第一个一般用于接收端,第二个用于发送端。</p><p>常用方法：<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/functions.png" alt=""></p><p>主要用到的还是接收和发送,另外就是获取IP地址,我们还需要一个类DatagramPacket.这个类是用于把数据打包的。常用的构造方法列一下：<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/DatagramPacket.png" alt=""></p><p>有了码头,有了数据包,接下来就是形象生动地说说步骤：</p><p>发送端的操作：</p><p>1.建立Socket服务,随便你指不指定端口,不指定系统分配。另外就是端口顺延,如果这次端口是1555,下次就是1556,因为当你运行完程序后,不能保证端口也释放了,为了防止出错,所以就这样顺延下去咯！</p><p>2.将要发送的数据封装到包中,准备发送.</p><p>3.发送数据,通过send方法发送出去.</p><p>4.最后,不要忘记关闭资源！</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/发送端.png" alt=""></p><p>发送端代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Socket服务</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">                <span class="comment">//不指定端口也行，稍后在数据里指定。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把数据打包</span></span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;example：example.com&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] buf = data.getBytes();</span><br><span class="line">                <span class="comment">//把数据转换成字节数组</span></span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,</span><br><span class="line">                                  buf.length,</span><br><span class="line">                                  InetAddress.getByName(<span class="string">&quot;PresidentsPC&quot;</span>),</span><br><span class="line">                                  <span class="number">10000</span>);<span class="comment">//通过名字获取IP，并指定端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">ds.send(dp);</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接受端的步骤</p><p>1.建立服务</p><p>2.定义一个缓冲区来接受数据</p><p>3.调用DatagramPacket中的各种方法来达到我们的需求</p><p>4.关闭资源</p><p>接收端的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立服务监视这个端口</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个缓冲区用于接收数据</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//可以乘以64，因为一个包在64K以内。</span></span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length);</span><br><span class="line">ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取IP，这是一个习惯，因为要知道这数据是从那里来的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">System.out.println(<span class="string">&quot;来自&quot;</span>+ip+<span class="string">&quot;的数据是&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数据弄出来吧</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,dp.getLength()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>eg:先是发送键盘录入的程序,下面分析一下：</p><p>1.首先,要建立服务</p><p>2.获取资源,从控制台中获取,这个可以用高效的方法BufferedReader,读一行。</p><p>3.把资源打成包发送出去</p><p>4.关闭资源。</p><p>PS:这次我们进行异常处理</p><p>第一个是发送端(客户端)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端，用来发送从键盘录入的资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立服务</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输入字符</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ds==<span class="literal">null</span>)</span><br><span class="line">ds =  <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"><span class="keyword">if</span>(br==<span class="literal">null</span>)</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));<span class="comment">//获取键盘录入信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把读取的资源打包</span></span><br><span class="line"><span class="type">byte</span>[] buf = br.readLine().getBytes();<span class="comment">//合在一起写啦。</span></span><br><span class="line"></span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length,</span><br><span class="line">                        InetAddress.getByName(<span class="string">&quot;PresidentsPC&quot;</span>),</span><br><span class="line">                        <span class="number">10004</span>);<span class="comment">// 打包数据并指定IP和端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送出去</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数据发送失败&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"></span><br><span class="line">ds.close();</span><br><span class="line"><span class="keyword">if</span>(br!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">br.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;流关不了，坏了！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来是接收端(服务端):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ds==<span class="literal">null</span>)</span><br><span class="line">ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10004</span>);</span><br><span class="line"><span class="comment">//创建缓冲区</span></span><br><span class="line"><span class="type">byte</span>[] buf  = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">if</span>(dp==<span class="literal">null</span>)</span><br><span class="line">dp = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length);</span><br><span class="line">ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span>  <span class="operator">=</span> dp.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出数据到控制台上</span></span><br><span class="line">System.out.println(ip+<span class="string">&quot; :&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buf,</span><br><span class="line">                                     <span class="number">0</span>,</span><br><span class="line">                                     dp.getLength()));</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;哎呀，妈呀，出问题了！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来,我们要写一个多线程的,不断地接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建读取线程</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ChatThread</span>()).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ds == <span class="literal">null</span>)</span><br><span class="line">ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"><span class="comment">// 读取键盘录入</span></span><br><span class="line"><span class="keyword">if</span> (br == <span class="literal">null</span>)</span><br><span class="line">br = </span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="type">byte</span>[] buf = line.getBytes();</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length, InetAddress.getByName(<span class="string">&quot;PresidentsPC&quot;</span>), <span class="number">10000</span>);</span><br><span class="line">ds.send(dp);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">ds.close();</span><br><span class="line"><span class="keyword">if</span> (br != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搞一个线程来接受数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                      ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);<span class="comment">//监视10000端口</span></span><br><span class="line">                        <span class="comment">//获取数据</span></span><br><span class="line">                        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,buf.length);</span><br><span class="line">                        ds.receive(dp);                       </span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//获取IP</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//输出数据</span></span><br><span class="line">                        System.out.println(ip+<span class="string">&quot; :&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,dp.getLength()));</span><br><span class="line">                   </span><br><span class="line">                        </span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.toString());</span><br><span class="line">                        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                        ds.close();</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="传输协议：TCP"><a href="#传输协议：TCP" class="headerlink" title="传输协议：TCP"></a>传输协议：TCP</h3><p>TCP第一步也是创建服务,但是这服务稍微有点不同:客户端的服务是Sokcet,服务端的服务是ServerSocket。无论是UDP,还是TCP,只要多写几次就熟悉了。</p><p>先看看Socket的常用的构造方法和普通方法</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/Socket.png" alt=""></p><p>客户端的步骤:</p><p>1.建立服务Socket</p><p>2.获取输出流,把数据变成字节数组,通过输出流发送给服务端。</p><p>3.关闭输出流,获取输入流,获取反馈信息</p><p>4.关闭资源</p><p>代码体现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line">s = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;PresidentsPC&quot;</span>, <span class="number">13000</span>);</span><br><span class="line"><span class="comment">//把数据转换成字节数组</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="string">&quot;example&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">out.write(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭发送流</span></span><br><span class="line">s.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输入流，获取反馈信息</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] buffer  = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印反馈信息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer,<span class="number">0</span>,len));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">s.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.toString());&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>服务端又如何呢,其实还是大同小异的,要是IO知识掌握了,一点问题都没有.</p><p>步骤如下:</p><p>1.建立服务ServerSocket服务,然后用ServerSocket的accept()方法得到Socket服务</p><p>2.获取输入流,然后可以得到数据</p><p>3.对读到的数据进行处理,该干嘛干嘛去</p><p>4.反馈信息给客户端</p><p>5.各种关闭资源</p><p>代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">13000</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"><span class="comment">//先搞到IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> s.getInetAddress().getHostAddress();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出链接上来的机器</span></span><br><span class="line">System.out.println(ip+<span class="string">&quot;-----connected&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span>  <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = in.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//打印到控制台上吧</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line">s.shutdownInput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送反馈信息</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;服务端收到啦&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">s.close();</span><br><span class="line">ss.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个例子也搞定了,接下来就可以更深入发学习TCP其他场景的应用了。比如说,上传图片并发上传图片,还要追求高效,这可以采用缓冲技术。</p><h3 id="网络传输应用"><a href="#网络传输应用" class="headerlink" title="网络传输应用"></a>网络传输应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerForAll</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">19000</span>);</span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ServerThread</span>(s)).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="comment">// 持有s的引用</span></span><br><span class="line"><span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">(Socket s)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.s = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 把上传的文件直接入到目录下</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outPutFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> s.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(ip+<span class="string">&quot;---connected&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = s.getInputStream();</span><br><span class="line">out = s.getOutputStream();</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Data.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (file.exists())</span><br><span class="line">file = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Data&quot;</span> + <span class="string">&quot;(&quot;</span> + (count++) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">outPutFile = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 写数据</span></span><br><span class="line">outPutFile.write(buf, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反馈信息</span></span><br><span class="line">out.write(<span class="string">&quot;上传成功！&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line">outPutFile.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 把路径直接用参数传入</span></span><br><span class="line"><span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请传入jpg图片的路径参数&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!args[<span class="number">0</span>].endsWith(<span class="string">&quot;.jpg&quot;</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;图片格式不正确&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(args[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;PresidentsPC&quot;</span>, <span class="number">19000</span>);</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭发送流</span></span><br><span class="line">s.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取输入流，获取反馈信息</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> input.read(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印反馈信息</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, length));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (in != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><h3 id="什么是http协议？"><a href="#什么是http协议？" class="headerlink" title="什么是http协议？"></a>什么是http协议？</h3><p>http是什么意思？HyperText Transfer Protocol 翻译过来就是超文本传输协议<br>协议就是约定的意思,内容是Http相关的格式</p><p>http协议是基于TCP/IP协议之上的应用层协议<br>http工作流程</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/response.png" alt=""></p><p>客户端发起一个请求,然后服务器处理请求,做出响应。</p><p>这个流程是一定的,换句话说,请求一定是客户端请求,响应一定是服务端响应。不可以是服务端向客户端发起请求,也不可以是客户端做出响应。</p><p>这种情况是有的,但是当发起请求那一刻,你就要把它看成客户端了。</p><p>这是充要条件</p><p>客户端=&gt;发起请求，发起请求=&gt;客户端</p><p>响应结果=&gt;服务端。服务端=&gt;响应结果</p><h3 id="http不保存状态"><a href="#http不保存状态" class="headerlink" title="http不保存状态"></a>http不保存状态</h3><p>当一个请求,一个响应完成时,那么一个http的请求就完成了。当然也有特殊情况,就是无网了,你发不起请求。然后服务器处理超时了,你也得不到结果。</p><p>http是无状态协议,什么意思呢？也就是不保存状态。一次请求完成后,下一次再发起请求,又是新的。该设置什么内容设置什么内容,要给什么参数给什么参数。</p><p>http无状态,那怎么知道这个请求用户已经登录了呢？登录状态保存在哪里呢？所以就引入了cookies这个东西了。在cookies里可以保存一个令牌,每次请求的时候,把这个令牌作为参数给服务器校验,这样子就可以知道这个用户的登录状态啦。<br>http的8种请求方式</p><ul><li>get</li><li>post</li><li>put</li><li>delete</li><li>head</li><li>trace</li><li>options</li><li>connect</li></ul><p>作为Android开发人员知道前面四个就够了。</p><p>通常情况下：</p><blockquote><p>get：用于请求数据 post：用于提交数据 put：用于更新数据 delete：用于删除数据</p></blockquote><p>同一个接口,不同的请求方式作用就不一样了</p><p>请求文章的CRUD接口</p><ul><li>请求：/article/{articleId} 请求方式：get请求</li><li>删除：/article/{articleId} 请求方式：deleted请求</li><li>更新：/article/{articleId} 请求方式：put请求</li><li>提交(发表文章)：/article/ 请求方式：post请求</li></ul><h3 id="http响应码"><a href="#http响应码" class="headerlink" title="http响应码"></a>http响应码</h3><p>响应码:说明是服务器给客户端结果码</p><p>相信大家在浏览某些网站时应该见过404吧,那么404是什么意思呢？<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/响应码.png" alt=""></p><p>404也就是4xx,4开头的表示服务器无法请求<br>而5开头的,比如说500,服务器崩溃了指的是服务器的问题</p><h3 id="http请求格式"><a href="#http请求格式" class="headerlink" title="http请求格式"></a>http请求格式</h3><p>当我们使用http向服务器发起一个请求时,它的格式是怎么样子的呢？</p><p>首先这个请求是包含了：</p><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/请求格式.png" alt=""></li></ul><p>比如说我们用fiddler抓个get请求看看</p><p>get请求:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/get.png" alt=""></p><p>post或者put请求:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/post.png" alt=""></p><p>请求行</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/请求行.png" alt=""><br>请求头</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/请求头.png" alt=""></p><ul><li>Host 要访问的主机</li><li>Connection 连接保持，http1.1有，1.0没有这个。keep-alive可以提高效率，在一定时间里不断开tcp连接，进行下一个请求</li><li>Content-Length 内容长度，指的是后面请求正文的数据长度</li><li>Accept 响应内容格式，也就是返回内容格式</li><li>Origin 这个是源（不是标准http里的内容，因为我访问用的是chrome，是chrome加的）</li><li>User-Agent 用户客户端相关的信息，比如说浏览器呀，操作系统信息之类的</li><li>Content-Type 提交的内容类型，我提及的是json,编码是utf-8</li><li>Referer 来源，访问入口，比如说你在搜索引擎百度里搜索，进入到网站，那么这个来源就是百度了</li><li>Accept-Encoding 响应内容的编码格式</li><li>Accept-Language 响应内容的语言</li><li>Cookie cookies</li></ul><p>请求体</p><blockquote><p>{“state”:”0”,”msg”:”审核通过.”}</p></blockquote><p>请求正文内容</p><h3 id="http响应格式"><a href="#http响应格式" class="headerlink" title="http响应格式"></a>http响应格式</h3><ul><li>响应行</li><li>响应头</li><li>空行</li><li>响应体</li></ul><hr><h2 id="使用Java的API发起网络请求"><a href="#使用Java的API发起网络请求" class="headerlink" title="使用Java的API发起网络请求"></a>使用Java的API发起网络请求</h2><p>前面我们了解了Http协议,Android应用是用java编写的,到framework层还是用java编写的,而Android的网络请求,其实是对java的网络请求进行了封装。</p><p>在android6.0以前,有apache的HttpClient,使用简单</p><p>但是<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/HTTP.png" alt=""></p><p>所以,如果同学们以后打开别人的项目时报错,就是没有httpclient的时候就需要加上这个了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    useLibrary &#x27;org.apache.http.legacy&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>推荐使用HttpURLConnection<br><a href="https://developer.android.google.cn/reference/java/net/HttpURLConnection?hl=en">官方文档</a></p><p>我们先看看java是如何进行网络请求的</p><p>代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">(String baseUrl, Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//拼接URL</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(baseUrl);</span><br><span class="line">        <span class="keyword">if</span> (params.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = params.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">                sb.append(entry.getKey());</span><br><span class="line">                sb.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                sb.append(entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resultUrl</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(resultUrl);</span><br><span class="line">        <span class="comment">//打开连接</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        urlConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        <span class="comment">//设置请求超时时间</span></span><br><span class="line">        urlConnection.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">        urlConnection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">        urlConnection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>);</span><br><span class="line">        urlConnection.setRequestProperty(<span class="string">&quot;Accept-Language&quot;</span>, <span class="string">&quot;zh-CN,zh&quot;</span>);</span><br><span class="line">        <span class="comment">//开始连接</span></span><br><span class="line">        urlConnection.connect();</span><br><span class="line">        <span class="comment">//获取返回内容</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; headerFields = urlConnection.getHeaderFields();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, List&lt;String&gt;&gt;&gt; entries = headerFields.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : entries) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot; === &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    loadData(<span class="string">&quot;https://www.example.net&quot;</span>, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样我们就把网页的内容获取到了<br>获取一个json数据:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//loadData(&quot;https://www.example.net&quot;, params);</span></span><br><span class="line">    <span class="comment">//获取动态列表</span></span><br><span class="line">    <span class="comment">// https://www.example.net/content/content/moment/list/1153952789488054272/1</span></span><br><span class="line">    loadData(<span class="string">&quot;https://www.example.net/content/content/moment/list/1153952789488054272/1&quot;</span>, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>将获取到的结果复制出来格式化一下,这样数据就回来了</p><p>我们先搞定请求先,然后转到Android上,把数据请求回来,显示在UI上。</p><h3 id="Android上使用java的API请求数据"><a href="#Android上使用java的API请求数据" class="headerlink" title="Android上使用java的API请求数据"></a>Android上使用java的API请求数据</h3><p>网络配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br>请求的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startRequest</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                loadData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.example.net/content/content/moment/list/1153952789488054272/1&quot;</span>);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">            <span class="keyword">if</span>(responseCode == <span class="number">200</span>) &#123;</span><br><span class="line">                httpURLConnection.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Log.d(TAG,line);</span><br><span class="line">                &#125;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>将请求回来的数据用Gson将结果格式化,用列表显示不在UI上。</p><p>MainActivity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WHAT_LOADER_RESULT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mResultList;</span><br><span class="line">    <span class="keyword">private</span> ResultAdapter mResultAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span>(msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> WHAT_LOADER_RESULT:</span><br><span class="line">                        <span class="type">MomentItem</span> <span class="variable">result</span> <span class="operator">=</span> (MomentItem) msg.obj;</span><br><span class="line">                        refreshResultList(result);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        mResultList = findViewById(R.id.result_list);</span><br><span class="line">        mResultList.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        mResultAdapter = <span class="keyword">new</span> <span class="title class_">ResultAdapter</span>();</span><br><span class="line">        mResultList.setAdapter(mResultAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshResultList</span><span class="params">(MomentItem result)</span> &#123;</span><br><span class="line">        Log.d(TAG,<span class="string">&quot;refreshResultList -- &quot;</span>);</span><br><span class="line">        mResultAdapter.setData(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startRequest</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                loadData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://网站&quot;</span>);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            httpURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">            httpURLConnection.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> httpURLConnection.getResponseCode();</span><br><span class="line">            <span class="keyword">if</span>(responseCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">                Log.d(TAG,<span class="string">&quot;line -- &gt; &quot;</span> + line);</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> mHandler.obtainMessage();</span><br><span class="line">                message.what = WHAT_LOADER_RESULT;</span><br><span class="line">                <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">                message.obj = gson.fromJson(line,MomentItem.class);</span><br><span class="line">                mHandler.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>bean类:通过GsonFormat自动生成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MomentItem</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> DataBean data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuccess</span><span class="params">(<span class="type">boolean</span> success)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataBean <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(DataBean data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DataBean</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PageableBean pageable;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> totalPages;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> totalElements;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> last;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> first;</span><br><span class="line">        <span class="keyword">private</span> SortBeanX sort;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">private</span> List&lt;ContentBean&gt; content;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PageableBean <span class="title function_">getPageable</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pageable;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageable</span><span class="params">(PageableBean pageable)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.pageable = pageable;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> totalPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalPages</span><span class="params">(<span class="type">int</span> totalPages)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.totalPages = totalPages;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> totalElements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">int</span> totalElements)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLast</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLast</span><span class="params">(<span class="type">boolean</span> last)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.last = last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFirst</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(<span class="type">boolean</span> first)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.first = first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> SortBeanX <span class="title function_">getSort</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sort;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSort</span><span class="params">(SortBeanX sort)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.sort = sort;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> numberOfElements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;ContentBean&gt; <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(List&lt;ContentBean&gt; content)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PageableBean</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * sort : &#123;&quot;unsorted&quot;:false,&quot;sorted&quot;:true&#125;</span></span><br><span class="line"><span class="comment">             * pageSize : 15</span></span><br><span class="line"><span class="comment">             * pageNumber : 0</span></span><br><span class="line"><span class="comment">             * offset : 0</span></span><br><span class="line"><span class="comment">             * unpaged : false</span></span><br><span class="line"><span class="comment">             * paged : true</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> SortBean sort;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> pageNumber;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> offset;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> unpaged;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> paged;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> SortBean <span class="title function_">getSort</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> sort;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSort</span><span class="params">(SortBean sort)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.sort = sort;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> pageSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageNumber</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> pageNumber;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNumber</span><span class="params">(<span class="type">int</span> pageNumber)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.pageNumber = pageNumber;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOffset</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> offset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOffset</span><span class="params">(<span class="type">int</span> offset)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.offset = offset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnpaged</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> unpaged;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUnpaged</span><span class="params">(<span class="type">boolean</span> unpaged)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unpaged = unpaged;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPaged</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> paged;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaged</span><span class="params">(<span class="type">boolean</span> paged)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.paged = paged;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SortBean</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * unsorted : false</span></span><br><span class="line"><span class="comment">                 * sorted : true</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">private</span> <span class="type">boolean</span> unsorted;</span><br><span class="line">                <span class="keyword">private</span> <span class="type">boolean</span> sorted;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnsorted</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> unsorted;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUnsorted</span><span class="params">(<span class="type">boolean</span> unsorted)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.unsorted = unsorted;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSorted</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> sorted;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSorted</span><span class="params">(<span class="type">boolean</span> sorted)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.sorted = sorted;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SortBeanX</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * unsorted : false</span></span><br><span class="line"><span class="comment">             * sorted : true</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> unsorted;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> sorted;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnsorted</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> unsorted;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUnsorted</span><span class="params">(<span class="type">boolean</span> unsorted)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unsorted = unsorted;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSorted</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> sorted;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSorted</span><span class="params">(<span class="type">boolean</span> sorted)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.sorted = sorted;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContentBean</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * _id : 1200696538762956800</span></span><br><span class="line"><span class="comment">             * content : content</span></span><br><span class="line"><span class="comment">             * type : 1</span></span><br><span class="line"><span class="comment">             * thumbUpCount : 0</span></span><br><span class="line"><span class="comment">             * commentCount : 0</span></span><br><span class="line"><span class="comment">             * url : /a/1200681268338085888</span></span><br><span class="line"><span class="comment">             * covers : https://imgs.example.com/group1/M00/00/0B/rBsADV3iHb2AR2ktAABV8LFIYGU029.png|https://imgs.example.com/group1/M00/00/0B/rBsADV3iKCqAYWxCAAEp3Frp3bI477.png|https://imgs.example.com/group1/M00/00/0B/rBsADV3iAymAO-J8AABCRyG8suI326.png</span></span><br><span class="line"><span class="comment">             * subContent : null</span></span><br><span class="line"><span class="comment">             * subUserName : null</span></span><br><span class="line"><span class="comment">             * subUserAvatar : null</span></span><br><span class="line"><span class="comment">             * subUserId : null</span></span><br><span class="line"><span class="comment">             * userName : </span></span><br><span class="line"><span class="comment">             * userId : 1153952789488054272</span></span><br><span class="line"><span class="comment">             * userAvatar : https://imgs.example.com/group1/M00/00/07/rBsADV22ZymAV8BwAABVL9XtNSU926.png</span></span><br><span class="line"><span class="comment">             * publishTime : 2019-11-30T08:42:17.361+0000</span></span><br><span class="line"><span class="comment">             * thumbList : []</span></span><br><span class="line"><span class="comment">             * subTitle : Android网络访问不同版本的差异，看完这篇文章你就茅厕顿开了。</span></span><br><span class="line"><span class="comment">             * position : 第一个用户</span></span><br><span class="line"><span class="comment">             * company : example</span></span><br><span class="line"><span class="comment">             * hasThumbUp : false</span></span><br><span class="line"><span class="comment">             * images : [&quot;https://imgs.example.com/group1/M00/00/0B/rBsADV3iHb2AR2ktAABV8LFIYGU029.png&quot;,&quot;https://imgs.example.com/group1/M00/00/0B/rBsADV3iKCqAYWxCAAEp3Frp3bI477.png&quot;,&quot;https://imgs.example.com/group1/M00/00/0B/rBsADV3iAymAO-J8AABCRyG8suI326.png&quot;]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> String _id;</span><br><span class="line">            <span class="keyword">private</span> String content;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> thumbUpCount;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> commentCount;</span><br><span class="line">            <span class="keyword">private</span> String url;</span><br><span class="line">            <span class="keyword">private</span> String covers;</span><br><span class="line">            <span class="keyword">private</span> Object subContent;</span><br><span class="line">            <span class="keyword">private</span> Object subUserName;</span><br><span class="line">            <span class="keyword">private</span> Object subUserAvatar;</span><br><span class="line">            <span class="keyword">private</span> Object subUserId;</span><br><span class="line">            <span class="keyword">private</span> String userName;</span><br><span class="line">            <span class="keyword">private</span> String userId;</span><br><span class="line">            <span class="keyword">private</span> String userAvatar;</span><br><span class="line">            <span class="keyword">private</span> String publishTime;</span><br><span class="line">            <span class="keyword">private</span> String subTitle;</span><br><span class="line">            <span class="keyword">private</span> String position;</span><br><span class="line">            <span class="keyword">private</span> String company;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> hasThumbUp;</span><br><span class="line">            <span class="keyword">private</span> List&lt;?&gt; thumbList;</span><br><span class="line">            <span class="keyword">private</span> List&lt;String&gt; images;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">get_id</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> _id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_id</span><span class="params">(String _id)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>._id = _id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> content;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.content = content;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.type = type;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getThumbUpCount</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> thumbUpCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThumbUpCount</span><span class="params">(<span class="type">int</span> thumbUpCount)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.thumbUpCount = thumbUpCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCommentCount</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> commentCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommentCount</span><span class="params">(<span class="type">int</span> commentCount)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.commentCount = commentCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> url;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.url = url;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getCovers</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> covers;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCovers</span><span class="params">(String covers)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.covers = covers;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getSubContent</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> subContent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubContent</span><span class="params">(Object subContent)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subContent = subContent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getSubUserName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> subUserName;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubUserName</span><span class="params">(Object subUserName)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subUserName = subUserName;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getSubUserAvatar</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> subUserAvatar;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubUserAvatar</span><span class="params">(Object subUserAvatar)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subUserAvatar = subUserAvatar;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getSubUserId</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> subUserId;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubUserId</span><span class="params">(Object subUserId)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subUserId = subUserId;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> userName;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.userName = userName;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> userId;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.userId = userId;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getUserAvatar</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> userAvatar;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAvatar</span><span class="params">(String userAvatar)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.userAvatar = userAvatar;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getPublishTime</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> publishTime;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublishTime</span><span class="params">(String publishTime)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.publishTime = publishTime;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getSubTitle</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> subTitle;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubTitle</span><span class="params">(String subTitle)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.subTitle = subTitle;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getPosition</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> position;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(String position)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.position = position;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getCompany</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> company;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.company = company;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasThumbUp</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> hasThumbUp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasThumbUp</span><span class="params">(<span class="type">boolean</span> hasThumbUp)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.hasThumbUp = hasThumbUp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> List&lt;?&gt; getThumbList() &#123;</span><br><span class="line">                <span class="keyword">return</span> thumbList;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThumbList</span><span class="params">(List&lt;?&gt; thumbList)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.thumbList = thumbList;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getImages</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> images;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImages</span><span class="params">(List&lt;String&gt; images)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.images = images;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>适配器的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;ResultAdapter.InnerAdapter&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;MomentItem.DataBean.ContentBean&gt; mData = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InnerAdapter <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent,<span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">itemView</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.item_moment,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerAdapter</span>(itemView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> InnerAdapter holder,<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">itemView</span> <span class="operator">=</span> holder.itemView;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">momentTitle</span> <span class="operator">=</span> itemView.findViewById(R.id.moment_title);</span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">avatar</span> <span class="operator">=</span> itemView.findViewById(R.id.user_avatar);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">userInfo</span> <span class="operator">=</span> itemView.findViewById(R.id.user_info);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">userName</span> <span class="operator">=</span> itemView.findViewById(R.id.user_name);</span><br><span class="line">        MomentItem.DataBean.<span class="type">ContentBean</span> <span class="variable">contentBean</span> <span class="operator">=</span> mData.get(position);</span><br><span class="line">        <span class="type">String</span> <span class="variable">subTitle</span> <span class="operator">=</span> contentBean.getSubTitle();</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(subTitle)) &#123;</span><br><span class="line">            momentTitle.setText(subTitle);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            momentTitle.setText(contentBean.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">        userName.setText(contentBean.getUserName());</span><br><span class="line">        userInfo.setText(contentBean.getPosition() + <span class="string">&quot;@&quot;</span> + contentBean.getCompany());</span><br><span class="line">   <span class="comment">//图片我们借助于Glide</span></span><br><span class="line">        Glide.with(itemView.getContext()).load(contentBean.getUserAvatar()).into(avatar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mData.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(MomentItem result)</span> &#123;</span><br><span class="line">        mData.clear();</span><br><span class="line">        mData.addAll(result.getData().getContent());</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InnerAdapter</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>item的布局:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;https://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_avatar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;2dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;用户名称&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;#0086FF&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_info&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;2dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;用户信息&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://docs.oracle.com/javase/8/docs/api/">Java8api文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quartus</title>
      <link href="/posts/eef9fa5c.html"/>
      <url>/posts/eef9fa5c.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>一、官网下载(可下载Windows,linux版本. 需注册):<br><a href="http://fpgasoftware.intel.com/?edition=lite">点击</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/FPGAs下载中心.png" alt=""></p><p>二、网盘下载<br>9.1版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1CE_TPvpIwLXiwXtNMdSJ-A">https://pan.baidu.com/s/1CE_TPvpIwLXiwXtNMdSJ-A</a><br>提取码：cpj9</p><p>13.0版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1f-0-3VclXivQFzFX83BeCg">https://pan.baidu.com/s/1f-0-3VclXivQFzFX83BeCg</a><br>提取码：d1yd</p><p>13.1版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1V4hcfuNhY0EQ7oGmnjlpVQ">https://pan.baidu.com/s/1V4hcfuNhY0EQ7oGmnjlpVQ</a><br>提取码：k39z </p><p>18.1lite版本下载地址：<br>链接：<a href="https://pan.baidu.com/s/1JMH75Y7l1cW8x_uveJ1pVg">https://pan.baidu.com/s/1JMH75Y7l1cW8x_uveJ1pVg</a><br>提取码：i83y</p><p>版本推荐:</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/版本.jpg" alt=""></p><p>注意安装路径仅限字母数字下划线,不能出现中文等特殊字符,连空格都不行</p><h2 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h2><p>什么是EDA？</p><blockquote><p>EDA(Electronic Design Automation)技术作为现代电子设计技术的核心,依赖功能强大的计算机软件。它是一门综合性学科。利用EDA技术进行电子系统设计的最后目标,是完成专用集成电路ASIC或者印刷电路板PCB的设计和实现。</p></blockquote><p>硬件描述语言Verilog:</p><ul><li><p>硬件描述语言HDL是EDA技术的重要组成部分,目前常用的主要有<code>VHDL</code>、<code>HDL</code>等。</p></li><li><p>2001年,Verilog成为基层电路建模与设计中最流行的硬件描述语言。</p></li><li>Verilog部分语法参照C语言语法设立(但与C有本质区别)。在语言易读性、层次化和结构化设计方面表现了强大的生命力和应用潜力,大大简化硬件设计任务，且具有良好的适应性。</li></ul><p>常见HDL:</p><ul><li>另一重要的硬件描述语言是VHDL(超高速集成电路硬件描述语言)。</li><li>VHDL具有与具体硬件电路无关和设计平台无关的特性,并且具有良好的电路行为能力和系统描述能力。</li><li>Verilog与VHDL各有优缺点。</li><li>综合(Synthesis):把抽象的实体结合成单个统一的实体。将用行为和功能层次表达的电子系统转换为低层次的便于具体实现的模块组合装配的过程。【类比编写大型程序】</li><li>综合器:能自动将一种设计表述形式向另一种转换的软件,或者协助进行手工转换的软件。</li></ul><p>自顶向下设计技术<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/自顶向下.jpg" alt=""></p><p>EDA优点<br>1.保证设计过程的正确性，大大降低设计成本，缩短设计周期。<br>2.有各类库的支持。<br>3.极大地简化设计文档的管理。<br>4.日益强大的逻辑设计仿真测试技术。<br>5.设计者拥有完全的自主权，再无受制于人之虞。<br>6.良好的可移植与可测试性，为系统开发提供了可靠的保证。<br>7.能将所有设计环节纳入统一的自顶向下的设计方案中。<br>8.EDA不但在整个设计流程上充分利用计算机的自动设计能力，而且在各个设计层次上利用计算机完成不同内容的仿真模拟，在系统板设计结束后仍可利用计算机对硬件系统进行完整的测试。</p><ul><li>手工设计有缺陷，EDA技术则不同。</li><li>设计输入、综合、适配、仿真、编程下载、硬件测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/EDA开发流程.jpg" alt=""></p><p>ASIC及其设计流程:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/ASIC.jpg" alt=""></p><p>常见EDA工具:</p><ul><li>设计输入编辑器</li><li>HDL综合器:Quartus2</li><li>仿真器:modelsim</li><li>适配器(布局布线器):Altium Designer</li><li>下载器:Quartus2</li><li>其他<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/Quartus2设计流程.jpg" alt="Quartus2设计流程"></li></ul><p>1.新建:<br>点击:File-&gt;New,选择Block Diagram/Schematic File,点击OK<br>2.点击连接库()或者左键空白处:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/连接库.png" alt=""></p><p>找到libraries-&gt;primitives-&gt;logic,选择需要的芯片;libraries-&gt;primitives-&gt;pin,输入输出端.(megafunctions:包括一些参数可设置的功能模块.others:maxplus2(Quartus软件前身:74系列芯片).primitives:logic:xnor:同或门;xor:异或门;pin:引脚(bibdr:双向引脚);storage:触发器:dff:D触发器)<br>如果发现有虚的芯片在动,说明点击了重复模式,点击Esc取消即可<br>3.连线:鼠标左键点住拖动就行<br>4.双击输入/输出端口，可重新命名端口名，将输入端口命名为 clk，输出端口命名为 q[3..0]。此时<br>输出端口为总线模式，可同时观察 4 个输出。特别注意：QA、QB、QC、QD 4 个输出端需要命名为<br>q[0]、q[1]、 q[2]、 q[3]，与总线输出 q[3..0]对应。<br>5.点击左上角保存:出现:Do you want to create a new project with this file?点击Yes,点击Next,<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/devicesettings.png" alt=""></p><p>根据要求设置就行,然后点击Next,最后Finish。<br>6.然后点击紫色三角进行编译(默认编译顶层设计实体,如果要编译其他设计文件需要将其置顶:点击Files下的文件,右键选择Set as Top_Level Entity)<br>7.点击File-&gt;New-&gt;University Program VWF,然后点击Edt-&gt;Insert-&gt;Insert Node or Bus(或者将鼠标放到左边Name下面的空白处,双击左键),点击Node Finder,点击List,全部移入(&gt;&gt;),点击OK<br>8.设置:选中,然后点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clock.png" alt=""><br>设置相关属性:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clocksetting.png" alt=""><br>点击功能仿真(只仿真功能)(它的右边为时序仿真:会考虑芯片的时延):<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/仿真.png" alt=""><br>建议:采用时序仿真<br>点击Yes,最后保存,等待仿真结束.</p><p>放大:Ctrl+鼠标滚轮<br>移位:选中+拖拽</p><h2 id="Verilog语言编程基础"><a href="#Verilog语言编程基础" class="headerlink" title="Verilog语言编程基础"></a>Verilog语言编程基础</h2><p>1.模块语句及其表达式<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> 模块名 (模块端口名表);</span><br><span class="line">模块端口和模块功能描述.</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><br>2.端口语句、端口信号名和端口模式<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">input</span> 端口名<span class="number">1</span>,端口名<span class="number">2</span>,...;</span><br><span class="line"><span class="keyword">output</span> 端口名<span class="number">1</span>,端口名<span class="number">2</span>,...;</span><br><span class="line"><span class="keyword">inout</span> 端口名<span class="number">1</span>,端口名<span class="number">2</span>,...;</span><br><span class="line"><span class="keyword">input</span>[msb:lsb] 端口名<span class="number">1</span>,端口名<span class="number">2</span>,...;</span><br></pre></td></tr></table></figure></p><p>3.逻辑操作符<br>4.连续赋值语句<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> 目标变量名 = 驱动表达式;</span><br><span class="line"><span class="keyword">assign</span> [延时] 目标变量名 = 驱动表达式;</span><br><span class="line">eg:<span class="keyword">assign</span> #<span class="number">6</span> R1 = A&amp;B;<span class="comment">//延时6个时间单元</span></span><br></pre></td></tr></table></figure></p><p>5.关键字<br>6.标识符<br>7.注释符号<br>8.规范的程序书写格式<br>9.文件取名和存盘</p><p>eg:半加器电路的Verilog描述<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> h_adder (A,B,SO,CO);</span><br><span class="line"><span class="keyword">input</span> A,B;</span><br><span class="line"><span class="keyword">output</span> SO,CO;</span><br><span class="line"><span class="keyword">assign</span> SO = A^B;<span class="comment">//^异或</span></span><br><span class="line"><span class="keyword">assign</span> CO = A&amp;B;<span class="comment">//与</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></p><p>多路选择器:<br>1.reg型变量定义<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> 变量名<span class="number">1</span>,变量名<span class="number">2</span>,...;</span><br><span class="line"><span class="keyword">reg</span> [msb:lsb] 变量名<span class="number">1</span>,变量名<span class="number">2</span>,...;</span><br></pre></td></tr></table></figure><br>2.过程语句<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@ (敏感信号及敏感信号列表或表达式)</span><br><span class="line">包括块语句的各类顺序语句</span><br></pre></td></tr></table></figure><br>3.块语句begin_end<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> [:块名]</span><br><span class="line">语句<span class="number">1</span>;语句<span class="number">2</span>;...;语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>4.case条件语句<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> (表达式)</span><br><span class="line">取值<span class="number">1</span> : <span class="keyword">begin</span> 语句<span class="number">1</span>;语句<span class="number">2</span>;...;语句n;  <span class="keyword">end</span></span><br><span class="line">取值<span class="number">2</span> : <span class="keyword">begin</span> 语句n+<span class="number">1</span>;语句n+<span class="number">2</span>;...;语句n+m;  <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span> : <span class="keyword">begin</span> 语句n+m+<span class="number">1</span>;...;  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endcase</span></span><br></pre></td></tr></table></figure></p><p>5.Verilog的四种逻辑状态:0,1,z,x<br>6.并位操作运算符</p><blockquote><p>{a1,b1,4{a2,b2}}={a1,b1,{a2,b2},{a2,b2},{a2,b2},{a2,b2}}={a1,b1,a2,b2,a2,b2,a2,b2,a2,b2}<br>7.Verilog的数字表达式<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;位宽&gt;&#x27;&lt;进制&gt;&lt;数字&gt;</span><br></pre></td></tr></table></figure><br>eg:4选1多路选择器<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//case:</span></span><br><span class="line"><span class="keyword">module</span> MUX41a(a,b,c,d,s1,s0,y);</span><br><span class="line"><span class="keyword">input</span> a,b,c,d;</span><br><span class="line"><span class="keyword">input</span> s1,s0;</span><br><span class="line"><span class="keyword">output</span> y;</span><br><span class="line"><span class="keyword">reg</span> y;</span><br><span class="line"><span class="keyword">always</span> @ (a <span class="keyword">or</span> b <span class="keyword">or</span> c <span class="keyword">or</span> d <span class="keyword">or</span> s1 <span class="keyword">or</span> s0)</span><br><span class="line"><span class="keyword">begin</span> : MUX41<span class="comment">//块语句开始</span></span><br><span class="line"><span class="keyword">case</span>(&#123;s1,s0&#125;)</span><br><span class="line"><span class="number">2&#x27;b00</span> : y&lt;=a;</span><br><span class="line"><span class="number">2&#x27;b01</span> : y&lt;=b;</span><br><span class="line"><span class="number">2&#x27;b10</span> : y&lt;=c;</span><br><span class="line"><span class="number">2&#x27;b11</span> : y&lt;=d;</span><br><span class="line"><span class="keyword">default</span> : y&lt;=a;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="comment">//assign</span></span><br><span class="line"><span class="keyword">module</span> MUX41a(a,b,c,d,s1,s0,y);</span><br><span class="line"><span class="keyword">input</span> a,b,c,d,s1,s0;</span><br><span class="line"><span class="keyword">output</span> y;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] SEL;<span class="comment">//定义2元素位矢量SEL为网线型变量wire</span></span><br><span class="line"><span class="keyword">wire</span> AT,BT,CT,DT;<span class="comment">//定义中间变量,以作连线或信号节点</span></span><br><span class="line"><span class="keyword">assign</span> SEL = &#123;s1,s0&#125;;<span class="comment">//对s1,s0进行并位操作,即SEL[1]=s1;SEL[0]=s0;</span></span><br><span class="line"><span class="keyword">assign</span> AT = (SEL==<span class="number">2&#x27;D0</span>);</span><br><span class="line"><span class="keyword">assign</span> BT = (SEL==<span class="number">2&#x27;D1</span>);</span><br><span class="line"><span class="keyword">assign</span> CT = (SEL==<span class="number">2&#x27;D2</span>);</span><br><span class="line"><span class="keyword">assign</span> DT = (SEL==<span class="number">2&#x27;D3</span>);</span><br><span class="line"><span class="keyword">assign</span> y = (a &amp; AT)|(b &amp; BT)|(c &amp; CT)|(d &amp; DT);<span class="comment">//4个逻辑信号相或</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="comment">//条件语句</span></span><br><span class="line"><span class="keyword">module</span> MUX41a(A,B,C,D,S1,S0,Y);</span><br><span class="line"><span class="keyword">input</span> A,B,C,D,S1,S0;</span><br><span class="line"><span class="keyword">output</span> Y;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] SEL;</span><br><span class="line"><span class="keyword">reg</span> Y;</span><br><span class="line"><span class="keyword">always</span> @ (A,B,C,D,SEL)</span><br><span class="line"><span class="keyword">begin</span> : MUX41<span class="comment">//块语句开始</span></span><br><span class="line">SEL = &#123;S1,S0&#125;;</span><br><span class="line"><span class="keyword">if</span>(SEL==<span class="number">0</span>) Y=A;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SEL==<span class="number">1</span>) Y=B;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SEL==<span class="number">2</span>) Y=C;</span><br><span class="line"><span class="keyword">else</span>            Y=D;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><br>1.新建:File-&gt;New-&gt;Verilog HDL File-&gt;OK<br>2.保存:File-&gt;Save,文件名需与模块名一致,其他按之前保存步骤<br>设置要更改为:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/EP3C40Q240C8.png" alt=""><br>选择Cyclone 3 -&gt; EP3C40Q240C8,最后点击紫色三角进行编译</p></blockquote><p>3.点击File-&gt;New-&gt;University Program VWF,然后点击Edt-&gt;Insert-&gt;Insert Node or Bus,点击Node Finder,点击3个点(…),选中MUX41a,按下OK,然后点击List,然后点击 &gt;&gt; ,点击OK就行了</p><p>4.然后设置终止时间:Edt-&gt;Set End Time (10us)<br>5.点击:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/clock.png" alt=""><br>设置相关属性:<br>a: period:90ns;Duty Cycle:50%(b:200ns,70%;c:400ns,20%;d:780ns,85%;s0:4us,50%;s1:2us,50%),,点击OK;<br>6.然后点击仿真,出现叫你保存的页面:点击Yes保存即可</p><p>1.按位逻辑操作符<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/逻辑运算符.jpg" alt=""><br>2.等式操作符<br>等于(==)不等于(!=)全等(===)不全等(!==)<br>3.wire定义网线型变量<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> 变量名<span class="number">1</span>,变量名<span class="number">2</span>,...;</span><br><span class="line"><span class="keyword">wire</span> [msb:lsb] 变量名<span class="number">1</span>,变量名<span class="number">2</span>,...;</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">wire</span> a1,a2;</span><br><span class="line"><span class="keyword">assign</span> Y = a1^a2;</span><br><span class="line">上面俩个式子等价于</span><br><span class="line"><span class="keyword">wire</span> Y = a1^a2;</span><br></pre></td></tr></table></figure></p><p>条件语句<br>1.if条件语句<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s) Y=A; <span class="keyword">else</span> Y=B;</span><br><span class="line"><span class="keyword">if</span>(s) Y=A; <span class="keyword">else</span> <span class="keyword">begin</span> Y=B; Z=C; Q=<span class="number">1&#x27;b0</span>; <span class="keyword">end</span></span><br></pre></td></tr></table></figure><br>2.过程赋值语句<br>(1)阻塞式赋值(=)用于assign语句<br>(2)非阻塞式赋值(&lt;=)块语句 </p><p>3.数据类型表示方式</p><h2 id="时序电路的Verilog表达"><a href="#时序电路的Verilog表达" class="headerlink" title="时序电路的Verilog表达"></a>时序电路的Verilog表达</h2><p>eg:D触发器<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF1(CLK,D,Q);</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">input</span> CLK,D;</span><br><span class="line"><span class="keyword">reg</span> Q;</span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> CLK)<span class="comment">//posedge检测上升沿;negedge检测下降沿</span></span><br><span class="line">Q &lt;= D;<span class="comment">//将Q更新为D的状态</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><br>用UDP表述D触发器<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">primitive</span> EDGE_UDP(Q,D, CLK,RST) ;</span><br><span class="line"><span class="keyword">input</span> D,CLK, RST; </span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line"><span class="keyword">reg</span> Q; </span><br><span class="line"><span class="keyword">table</span> <span class="comment">// D CLK RST:9 : Q+</span></span><br><span class="line"> <span class="number">0</span> (<span class="number">01</span>) <span class="number">0</span> :? : <span class="number">0</span>;</span><br><span class="line"> <span class="number">1</span> (<span class="number">01</span>) <span class="number">0</span> :? : <span class="number">1</span>;</span><br><span class="line">      ? (<span class="number">1</span>?) <span class="number">0</span> :? : -;</span><br><span class="line">  ? (?<span class="number">0</span>) <span class="number">0</span> :? : -;</span><br><span class="line"> <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span> :? : <span class="number">0</span>;</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">11</span>:? : <span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>  <span class="number">0</span>   <span class="number">1</span> :? : <span class="number">0</span>;</span><br><span class="line"> <span class="number">0</span>  <span class="number">1</span>   <span class="number">1</span> :? : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">endtable</span></span><br><span class="line"><span class="keyword">endprimitive</span></span><br></pre></td></tr></table></figure><br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> DFF_UDP (Q,D,CLK, RST) ;</span><br><span class="line"><span class="keyword">input</span> D,CLK, RST;</span><br><span class="line"><span class="keyword">output</span> Q;</span><br><span class="line">EDGE_UDP U1(Q,D, CLK,RST); </span><br><span class="line">Endmodule</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/含异步复位D触发器.jpg" alt=""></p><h3 id="含异步复位和时钟使能的D触发器及其Verilog表述"><a href="#含异步复位和时钟使能的D触发器及其Verilog表述" class="headerlink" title="含异步复位和时钟使能的D触发器及其Verilog表述"></a>含异步复位和时钟使能的D触发器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/异步复位时钟使能D触发器.jpg" alt=""><br>RST:异步复位端;EN:时钟使能端</p><h3 id="含同步复位-同步清零-控制的D触发器及其Verilog表述"><a href="#含同步复位-同步清零-控制的D触发器及其Verilog表述" class="headerlink" title="含同步复位(同步清零)控制的D触发器及其Verilog表述"></a>含同步复位(同步清零)控制的D触发器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/同步复位D触发器.jpg" alt=""></p><h3 id="基本锁存器及其Verilog描述"><a href="#基本锁存器及其Verilog描述" class="headerlink" title="基本锁存器及其Verilog描述"></a>基本锁存器及其Verilog描述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/基本锁存器.jpg" alt=""></p><h3 id="含清0控制的锁存器及其Verilog表述"><a href="#含清0控制的锁存器及其Verilog表述" class="headerlink" title="含清0控制的锁存器及其Verilog表述"></a>含清0控制的锁存器及其Verilog表述</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/清0控制锁存器.jpg" alt=""></p><h3 id="异步时序电路的Verilog表述特点"><a href="#异步时序电路的Verilog表述特点" class="headerlink" title="异步时序电路的Verilog表述特点"></a>异步时序电路的Verilog表述特点</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/异步时序电路.jpg" alt=""></p><h3 id="时钟过程表述的特点和规律"><a href="#时钟过程表述的特点和规律" class="headerlink" title="时钟过程表述的特点和规律"></a>时钟过程表述的特点和规律</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/时钟过程.jpg" alt=""><br>always @ (posedge CLK or DIN):不允许在敏感信号表中定义除了异步时序控制信号以外的信号</p><h3 id="电路原理图设计流程"><a href="#电路原理图设计流程" class="headerlink" title="电路原理图设计流程"></a>电路原理图设计流程</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/电路原理1.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/电路原理2.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/电路原理3.jpg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/电路原理4.jpg" alt=""></p><h3 id="封装设计"><a href="#封装设计" class="headerlink" title="封装设计"></a>封装设计</h3><p>在已经设计好锁存器的基础上:<br>File-&gt;Create/Update-&gt;Create Symbol Files for Current File<br>这时新建一个工程:File-&gt;New-&gt;Block Diagram/Schematic File;然后保存;保存过后点击File-&gt;New Project Wizard;<br>选择新建的项目:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCK02.png" alt=""><br>添加文件进去:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCK02file.png" alt=""><br>还要将之前的文件添加进去:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/LOCKfile.png" alt=""></p><p>然后选择芯片:Cyclone 3-&gt;EP3C40Q240C8(实验室使用:EP3C16Q240C8);点击Next,一直到Finish.<br>右键:选择Insert-&gt;Symbol<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/InsertSymbol.png" alt=""></p><p>然后点击左下角3个点(…);选择LOCK.bsf文件(原理图设计文件);即可以插入了,添加输入输出端,编译,然后进行仿真即可.</p><h2 id="Verilog加法器设计"><a href="#Verilog加法器设计" class="headerlink" title="Verilog加法器设计"></a>Verilog加法器设计</h2><h3 id="全加器设计"><a href="#全加器设计" class="headerlink" title="全加器设计"></a>全加器设计</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/全加器.jpg" alt=""></p><p>3.Verilog例化语句及其用法<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;模块元件名&gt; &lt;例化元件名&gt; (.例化元件端口 (例化元件外接端口名),...);</span><br><span class="line">h_adder U2(<span class="variable">.A</span>(net1),<span class="variable">.SO</span>(sum),<span class="variable">.B</span>(cin),<span class="variable">.CO</span>(net3));<span class="comment">//端口名关联法</span></span><br><span class="line">h_adder U2(<span class="variable">.B</span>(cin),<span class="variable">.CO</span>(net3),<span class="variable">.A</span>(net1),<span class="variable">.S0</span>(sum));<span class="comment">//端口名关联法</span></span><br><span class="line">h_adder U1(ain,bin,net1,net2);</span><br></pre></td></tr></table></figure></p><h3 id="半加器的UDP结构建模描述方法"><a href="#半加器的UDP结构建模描述方法" class="headerlink" title="半加器的UDP结构建模描述方法"></a>半加器的UDP结构建模描述方法</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/半加器.jpg" alt=""></p><h3 id="利用UDP元件设计多路选择器"><a href="#利用UDP元件设计多路选择器" class="headerlink" title="利用UDP元件设计多路选择器"></a>利用UDP元件设计多路选择器</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">primitive</span> MUX41_UDP(Y,D3,D2,D1,D0,S1,S0) ;</span><br><span class="line"><span class="keyword">input</span> D3,D2,D1,D0,S1,S0; </span><br><span class="line"><span class="keyword">output</span> Y;</span><br><span class="line"><span class="keyword">table</span> <span class="comment">// D3 D2 D1 D0 S1 S0 : Y</span></span><br><span class="line"> ?  ?  ?  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  : <span class="number">1</span>;</span><br><span class="line"> ?  ?  ?  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  : <span class="number">0</span>;</span><br><span class="line">      ?  ?  <span class="number">1</span>  ?  <span class="number">0</span>  <span class="number">1</span>  : <span class="number">1</span>;</span><br><span class="line">  ?  ?  <span class="number">0</span>  ?  <span class="number">0</span>  <span class="number">1</span>  : <span class="number">0</span>;</span><br><span class="line"> ?  <span class="number">1</span>  ?  ?  <span class="number">1</span>  <span class="number">0</span>  : <span class="number">1</span>;</span><br><span class="line"> ?  <span class="number">0</span>  ?  ?  <span class="number">1</span>  <span class="number">0</span>  : <span class="number">0</span>;</span><br><span class="line"> <span class="number">1</span>  ?  ?  ?  <span class="number">1</span>  <span class="number">1</span>  : <span class="number">1</span>;</span><br><span class="line"> <span class="number">0</span>  ?  ?  ?  <span class="number">1</span>  <span class="number">1</span>  : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">endtable</span></span><br><span class="line"><span class="keyword">endprimitive</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> MUX41UDP (D,S,DOUT);</span><br><span class="line"><span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] D;</span><br><span class="line"><span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] S;</span><br><span class="line"><span class="keyword">output</span> DOUT;</span><br><span class="line">MUX41_UDP (DOUT,D[<span class="number">3</span>],D[<span class="number">2</span>],D[<span class="number">1</span>],D[<span class="number">0</span>],S[<span class="number">1</span>],S[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="8位加法器设计及其算术操作符应用"><a href="#8位加法器设计及其算术操作符应用" class="headerlink" title="8位加法器设计及其算术操作符应用"></a>8位加法器设计及其算术操作符应用</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/8位加法器.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Quartus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android启动页</title>
      <link href="/posts/548ca625.html"/>
      <url>/posts/548ca625.html</url>
      
        <content type="html"><![CDATA[<p>Android中几乎所有app都有启动页这一基本功能,但是用途都不相同。<br>有的app的启动页用于加载广告,有的启动页用于加载后台,一旦后台数据加载好了才把启动页去了,不过想来很多app是两者兼顾的。<br>需求:</p><ul><li>展示 logo 页面3秒</li><li>服务端可以控制是否播放广告</li><li>服务端可以控制播放广告的秒数</li><li>服务端可以控制广告的内容（图片）和广告详情页面的链接</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/splash.png" alt=""></p><p>注意:从服务端请求数据是在展示 3 秒启动页的时候获取的</p><h3 id="启动页"><a href="#启动页" class="headerlink" title="启动页"></a>启动页</h3><p>启动包括冷启动和热启动:</p><ul><li>冷启动：是指进程从无到有的过程。因为要进行页面初始化,所以相对其他两个启动方式,消耗的时间是相对比较多的。</li><li>热启动：是指之前的进程还在,在之前进程的基础上创建 Activity 的过程,耗时相对少一点。<br>　　我们可以通过 Activity 的 theme 来修改这个白屏所显示的界面。根据上面的需求,我们需要显示3秒 logo 的页面。那么我们干脆将我们的logo设置为背景图就行了。</li></ul><p>新建一个activity为SplashActivity,其对应布局文件为activity_splash.xml<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/newEmptyActivity.png" alt=""><br>并在AndroidManifest.xml中将SplashActivity设置为主入口:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.SplashActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar.NoActionBarWithBackGround&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在values中的themes.xml中添加:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/themes.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.AppCompat.NoActionBar.NoActionBarWithBackGround&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowActionBar&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>//取消Actionbar</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>//设置全屏</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@drawable/splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span>//设置背景图片</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在AndroidManifest.xml中需要主题的Activity添加:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.splashactivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.SplashActivity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.SplashActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar.NoActionBarWithBackGround&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>SplashActivity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplashActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);<span class="comment">//隐藏状态栏</span></span><br><span class="line">        <span class="comment">//getSupportActionBar().hide();//隐藏标题栏</span></span><br><span class="line">        setContentView(R.layout.activity_splash);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;<span class="comment">//创建子线程</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">5000</span>);<span class="comment">//使程序休眠五秒</span></span><br><span class="line">                    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getApplicationContext(), MainActivity.class);<span class="comment">//启动MainActivity</span></span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                    finish();<span class="comment">//关闭当前活动</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myThread.start();<span class="comment">//启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="广告页"><a href="#广告页" class="headerlink" title="广告页"></a>广告页</h3><p>广告页我尝试过两种方式：<br>1.glide 加载<br>2.通过下载文件，然后再加载<br>如果使用glide加载广告图片,如果网络比较差,会存在广告页面空白的情况,因为使用 glide 无法判断在 3 秒展示 logo 的页面是否加载好了广告图片。这给用户的体验是比较差的,也是不太友好的,因为用户在空白界面拜拜等待了 3 秒。所以后面使用了将广告图片下载到本地的方法。</p><h3 id="动画开屏"><a href="#动画开屏" class="headerlink" title="动画开屏"></a>动画开屏</h3><p>新建EmptyActivity—AnimatedActivity<br>在build.gradle(:app)的dependencies中添加glide依赖:</p><blockquote><p>implementation ‘com.github.bumptech.glide:glide:4.12.0’<br>然后点击sync now</p></blockquote><p>新建动画所需的VectorAsset:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/VectorAsset.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/assetSet.png" alt=""></p><p>然后点击next,最后点击finish<br><a href="https://www.online-convert.com/">转换svg的网站</a></p><p>或者去<a href="https://www.iconfont.cn/">iconfont</a>查找</p><h4 id="activity-animated"><a href="#activity-animated" class="headerlink" title="activity_animated"></a>activity_animated</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.AnimatedActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:adjustViewBounds</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_top_vector&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;16dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;180dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_heart&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:adjustViewBounds</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_heart&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;48sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#D75A4A&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;8dp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_beat&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:adjustViewBounds</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:adjustViewBounds</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_bottom_vector&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建ResourceFile<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/resourceFile.png" alt=""></p><p>设置:<br><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/resourceFileSet.png" alt=""></p><h4 id="top-wave-xml"><a href="#top-wave-xml" class="headerlink" title="top_wave.xml"></a>top_wave.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">&quot;-50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;2500&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;2500&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bottom-wave-xml"><a href="#bottom-wave-xml" class="headerlink" title="bottom_wave.xml"></a>bottom_wave.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;2500&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;2500&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="AnimatedActivity"><a href="#AnimatedActivity" class="headerlink" title="AnimatedActivity"></a>AnimatedActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</span><br><span class="line"><span class="keyword">import</span> android.animation.PropertyValuesHolder;</span><br><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AnimationUtils;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.load.engine.DiskCacheStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimatedActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">//Initialize variable</span></span><br><span class="line">    ImageView ivTop, ivHeart, ivBeat, ivBottom;</span><br><span class="line">    TextView textView;</span><br><span class="line">    CharSequence charSequence;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_animated);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Assign variable</span></span><br><span class="line">        ivTop = findViewById(R.id.iv_top);</span><br><span class="line">        ivHeart = findViewById(R.id.iv_heart);</span><br><span class="line">        ivBottom = findViewById(R.id.iv_bottom);</span><br><span class="line">        textView = findViewById(R.id.text_view);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set full screen</span></span><br><span class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">                , WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Initialize top animation</span></span><br><span class="line">        <span class="type">Animation</span> <span class="variable">animation1</span> <span class="operator">=</span> AnimationUtils.loadAnimation(<span class="built_in">this</span></span><br><span class="line">                , R.anim.top_wave);</span><br><span class="line">        <span class="comment">//start top animation</span></span><br><span class="line">        ivTop.setAnimation(animation1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Initialize object animation</span></span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">objectAnimator</span> <span class="operator">=</span> ObjectAnimator.ofPropertyValuesHolder(</span><br><span class="line">                ivHeart,</span><br><span class="line">                PropertyValuesHolder.ofFloat(<span class="string">&quot;scaleX&quot;</span>, <span class="number">1.2f</span>),</span><br><span class="line">                PropertyValuesHolder.ofFloat(<span class="string">&quot;scaleY&quot;</span>, <span class="number">1.2f</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//Set duration</span></span><br><span class="line">        objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//Set repeat count</span></span><br><span class="line">        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class="line">        <span class="comment">//Set repeat mode</span></span><br><span class="line">        objectAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class="line">        <span class="comment">//Start animator</span></span><br><span class="line">        objectAnimator.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set animate text</span></span><br><span class="line">        animateText(<span class="string">&quot;Heart Beat&quot;</span>);</span><br><span class="line">        <span class="comment">//Load GIF</span></span><br><span class="line">        Glide.with(<span class="built_in">this</span>).load(<span class="string">&quot;https://firebasestorage.googleapis.com/v0/b/demoapp-ae96a.appspot.com/o/heart_beat.gif?alt=media&amp;token=b21dddd8-782c-457c-babd-f2e922ba172b&quot;</span>)</span><br><span class="line">                .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">                .into(ivBottom);</span><br><span class="line">        <span class="comment">//Initialize bottom animation</span></span><br><span class="line">        <span class="type">Animation</span> <span class="variable">animation2</span> <span class="operator">=</span> AnimationUtils.loadAnimation(<span class="built_in">this</span></span><br><span class="line">                , R.anim.bottom_wave);</span><br><span class="line">        <span class="comment">//start bottom animation</span></span><br><span class="line">        ivBottom.setAnimation(animation2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Initialize handler</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Handler</span>().postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//Redirect to main activity</span></span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(AnimatedActivity.<span class="built_in">this</span></span><br><span class="line">                        , MainActivity.class)</span><br><span class="line">                        .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));</span><br><span class="line">                <span class="comment">//Finish activity</span></span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">mRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//When runnable is run</span></span><br><span class="line">            <span class="comment">//Set text</span></span><br><span class="line">            textView.setText(charSequence.subSequence(<span class="number">0</span>, index++));</span><br><span class="line">            <span class="comment">//Check condition</span></span><br><span class="line">            <span class="keyword">if</span> (index &lt;= charSequence.length()) &#123;</span><br><span class="line">                <span class="comment">//When index is equal to text length</span></span><br><span class="line">                <span class="comment">//Run handler</span></span><br><span class="line">                mHandler.postDelayed(mRunnable, delay);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Create animated text method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animateText</span><span class="params">(CharSequence cs)</span> &#123;</span><br><span class="line">        <span class="comment">//Set text</span></span><br><span class="line">        charSequence = cs;</span><br><span class="line">        <span class="comment">//Clear index</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//Clear text</span></span><br><span class="line">        textView.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//Remove call back</span></span><br><span class="line">        mHandler.removeCallbacks(mRunnable);</span><br><span class="line">        <span class="comment">//Run handler</span></span><br><span class="line">        mHandler.postDelayed(mRunnable, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AndroidManifest.xml中添加权限:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>不要忘记将AnimatedActivity设置为主入口.</p><p><a href="https://github.com/liaojie1314/SplashActivity.git">完整项目</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C language</title>
      <link href="/posts/a50ff8aa.html"/>
      <url>/posts/a50ff8aa.html</url>
      
        <content type="html"><![CDATA[<p>C语言是一种计算机程序设计语言.它既具有高级语言的特点.又具有汇编语言的特点,它由美国贝尔研究所的D.M.Ritchie于1972年推出.1978后,C语言已先后被移植到大、中、小及微型机上.它可以作为工作系统设计语言,编写系统应用程序,也可以作为应用程序设计语言,编写不依赖计算机硬件的应用程序.它的应用范围广泛,具备很强的数据处理能力,不仅仅是在软件开发上,而且各类科研都需要用到C语言,适于编写系统软件、三维、二维图形和动画.具体应用比如单片机以及嵌入式系统开发.C语言是一门通用计算机编程语言,应用广泛.C语言的设计目标是提供一种能以简易的方式编译、处理低级存储器、产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言.</p><p>尽管C语言提供了许多低级处理的功能,但仍然保持着良好跨平台的特性,以一个标准规格写出的C语言程序可在许多电脑平台上进行编译,甚至包含一些嵌入式处理器(单片机或称MCU)级电脑等作业平台.</p><p>二十世纪八十年代,为了避免各开发厂商用的C语言语法产生差异,由美国国家标准局为C语言订定了一套完整的国际标准语法,称为ANSI C,作为C语言最初的标准.</p><h5 id="C都能干啥呢？"><a href="#C都能干啥呢？" class="headerlink" title="C都能干啥呢？"></a>C都能干啥呢？</h5><p>1、C语言可以做嵌入式开发.51单片机、ARM等….</p><p>2、C语言可以写漂亮的界面,以windows开发为例,你可以学习《windows程序设计（第五版）》,学完就可以写出界面来.还有一些开源库界面库,例如soui也是用C写出来的.</p><p>3、C语言可以做服务器开发,现在的游戏服务器端大多都是C/C++开发的.《windows核心编程》里面的例子就是用C写的.</p><p>4、C语言可以写游戏.cocos2d-x就是C/C++写的.DirectX也是.</p><p>5、C语言可以写驱动程序.windows下各种硬件驱动都是C/C++写的.腾讯游戏保护软件(TP)也是驱动程序.</p><p>6、C语言可以写外挂.</p><p>7、C语言可以做视频图片流媒体处理.ffmpeg、live555、sdl等开源库.</p><p>8、C语言可以做网页和爬虫相关的编程.gsoap、libcur等相关开源库.</p><p>9、C语言可以进行黑客编程.配合汇编获取随机地址、调shellcode等.</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"liaojie1314`Blog","short_name":"liaojie1314","theme_color":"#425aef","background_color":"#425aef","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>便携小空调 - 为你的夏日带去清凉!</title>
      <link href="/air-conditioner/index.html"/>
      <url>/air-conditioner/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于为博客安装上了便携小空调</p></blockquote><style>.copyright-box a {  border-bottom: none !important;  padding: 0 !important;}</style><p><div id="air-conditioner-vue"></div></p><script defer data-pjax src='https://alist.anzhiy.cn/d/anzhiyu/air-conditioner-dev/index.2d8c3a3f.js'></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}  div#menus {  font-family: 'ZhuZiAYuanJWD';}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: 'iconfont' !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */.bangumi-active {  background: #dbecfe !important;  border-radius: 10px !important;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: #dbecfe !important;  border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts > .recent-post-item {  background: #121212;}[data-theme='dark'] .card-widget {  background: #121212 !important;}[data-theme='dark'] div#post {  background: #121212 !important;}[data-theme='dark'] div#tag {  background: #121212 !important;}[data-theme='dark'] div#archive {  background: #121212 !important;}[data-theme='dark'] div#page {  background: #121212 !important;}[data-theme='dark'] div#category {  background: #121212 !important;}[data-theme='dark'] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #425aef;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #425aef;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url('/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {  cursor: url('/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #425aef;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--heo-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}  /* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -38px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {  content: '输入QQ号会自动获取昵称和头像🐧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {  content: '收到回复将会发送到您的邮箱📧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {  content: '可以通过昵称访问您的网站🔗';}/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {  display: block;}/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {  /* 先隐藏起来 */  display: none;  /* 绝对定位 */  position: absolute;  /* 向上移动60像素 */  top: -60px;  /* 文字强制不换行，防止left:50%导致的文字换行 */  white-space: nowrap;  /* 圆角 */  border-radius: 10px;  /* 距离左边50% */  left: 50%;  /* 然后再向左边挪动自身的一半，即可实现居中 */  transform: translate(-50%);  /* 填充 */  padding: 14px 18px;  background: #444;  color: #fff;}/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {  display: none;  content: '';  position: absolute;  /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。  我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */  border: 12px solid transparent;  border-top-color: #444;  left: 50%;  transform: translate(-50%, -48px);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）        /*        $("#myscoll").nekoScroll({            nekoname:'neko1', //nekoname，相当于id            nekoImg:'img/猫咪.png', //neko的背景图片            scImg:"img/绳1.png", //绳子的背景图片            bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效            zoom:0.9, //绳子长度的缩放值            hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息            right:'100px', //距离页面右边的距离            fontFamily:'楷体', //对话框字体            fontSize:'14px', //对话框字体的大小            color:'#1e90ff', //对话框字体颜色            scroWidth:'8px', //绳子的宽度            z_index:100, //不用解释了吧            during:1200, //从顶部到底部滑动的时长        });        */    })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: $button-hover-color;}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(      circle at 45% 92%,      rgba(3, 16, 50, 0.4) 0.04rem,      transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle        at 65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: '';  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: 'ヾ(≧O≦)〃嗷~'; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(            --coin-rotation-multiplier          ) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(      to bottom,      #fcfaf9 44%,      transparent 44%,      transparent 65%,      #fcfaf9 65%,      #fcfaf9 71%,      #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9        47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent        72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(      var(--middle-scale-multiplier)    );}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9        35%, transparent 35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: '';  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent        calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(              --shine-bg-multiplier            ) + 50%));  content: '';  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(      var(--middle-scale-multiplier)    )    rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: '';  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/loading/loading.css"/>
      <url>/css/loading/loading.css</url>
      
        <content type="html"><![CDATA[.loading-img {    background: url(https://npm.elemecdn.com/anzhiyu-blog@2.1.1/img/avatar.webp) no-repeat center center;    background-size: cover;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll('.tip-button');function coinAudio() {  var coinAudio = document.getElementById('coinAudio');  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector('.coin');  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener('click', () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add('clicked');    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty('--coin-x-multiplier', 0);    coin.style.setProperty('--coin-scale-multiplier', 0);    coin.style.setProperty('--coin-rotation-multiplier', 0);    coin.style.setProperty('--shine-opacity-multiplier', 0.4);    coin.style.setProperty('--shine-bg-multiplier', '50%');    coin.style.setProperty('opacity', 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty('--coin-y-multiplier', -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty('--coin-x-multiplier', percentageCompleted);    coin.style.setProperty('--coin-scale-multiplier', percentageCompleted * 0.6);    coin.style.setProperty('--coin-rotation-multiplier', percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty('--front-scale-multiplier', Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty('--front-y-multiplier', Math.sin(coin.angle));    coin.style.setProperty('--middle-scale-multiplier', Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty('--middle-y-multiplier', Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty('--back-scale-multiplier', Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty('--back-y-multiplier', Math.sin(coin.angle - Math.PI));    coin.style.setProperty('--shine-opacity-multiplier', 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty(      '--shine-bg-multiplier',      -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + '%'    );    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add('shrink-landing');      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add('coin-landed');      coin.style.setProperty('opacity', 0);      setTimeout(() => {        button.classList.remove('clicked', 'shrink-landing', 'coin-landed');        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() {     var t = new Date("9/01/2022 00:00:00");     now.setTime(now.getTime() + 250);     var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n);     1 == String(r).length && (r = "0" + r);     var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s);     1 == String(i).length && (i = "0" + i);     var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o);     1 == String(l).length && (l = "0" + l);     let g = "";     g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("9/01/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title/title.js"/>
      <url>/js/title/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "w(ﾟДﾟ)w 不要走！再看看嘛！";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "♪(^∇^*)欢迎肥来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!function(c){var l,h,a,t,i,v='<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',o=(o=document.getElementsByTagName("script"))[o.length-1].getAttribute("data-injectcss"),p=function(c,l){l.parentNode.insertBefore(c,l)};if(o&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(c){console&&console.log(c)}}function d(){i||(i=!0,a())}function m(){try{t.documentElement.doScroll("left")}catch(c){return void setTimeout(m,50)}d()}l=function(){var c,l=document.createElement("div");l.innerHTML=v,v=null,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(c=document.body).firstChild?p(l,c.firstChild):c.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(l,0):(h=function(){document.removeEventListener("DOMContentLoaded",h,!1),l()},document.addEventListener("DOMContentLoaded",h,!1)):document.attachEvent&&(a=l,t=c.document,i=!1,m(),t.onreadystatechange=function(){"complete"==t.readyState&&(t.onreadystatechange=null,d())})}(window);]]></content>
      
    </entry>
    
    
  
</search>
